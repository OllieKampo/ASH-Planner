[15-11-2021_15-11-12] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[15-11-2021_15-11-12] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[15-11-2021_15-11-12] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[15-11-2021_15-11-12] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_3.lp'
'-conc'
'True'
'-ao'
'verbose'
'-strat'
'basic'
'-bound'
'2'
'-op'
'standard'
'-ir'
'0'
'-er'
'10'
'-ll'
'3=50'
'2=100'
'1=150'
'-save'
'True'
'-rblend'
'0.2'

[15-11-2021_15-11-12] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-15_15-11-12.txt')
('log_file', './logs/ASH_Log_2021-11-15_15-11-12.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-15_15-11-12.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 10)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0.2)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[15-11-2021_15-11-31] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[15-11-2021_15-11-31] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'goal_state': True, 'initial_state': True, 'entities': True, 'static_state': True}.

[15-11-2021_15-11-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 349 rules

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.002947500000001213s

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.010769s.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001182s with result Satisfiable.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.010769s, Solving = 0.001182s, Total = 0.011951s, Memory = (RSS = 103.089844Mb, VMS = 90.199219Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-11-31] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[15-11-2021_15-11-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-31] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[15-11-2021_15-11-31] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[15-11-2021_15-11-31] INFO :: ASH Planner Main #1 >> Generating initial states...

[15-11-2021_15-11-31] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[15-11-2021_15-11-31] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 349 rules

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.002925999999998652s

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[15-11-2021_15-11-31] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[15-11-2021_15-11-31] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.115792s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.020380s with result Satisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.115792s, Solving = 0.020380s, Total = 0.136171s, Memory = (RSS = 112.644531Mb, VMS = 99.859375Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.115792s, Solving = 0.020380s, Total = 0.136171s, Memory = (RSS = 112.644531Mb, VMS = 99.859375Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Generating final-goals...

[15-11-2021_15-11-32] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[15-11-2021_15-11-32] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 349 rules

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.0033401000000026215s

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[15-11-2021_15-11-32] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.064843s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.013224s with result Satisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.064843s, Solving = 0.013224s, Total = 0.078068s, Memory = (RSS = 111.542969Mb, VMS = 98.671875Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.064843s, Solving = 0.013224s, Total = 0.078068s, Memory = (RSS = 111.542969Mb, VMS = 98.671875Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency enabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_15-11-32] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_15-11-32] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-32] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000190B6F6B3A0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 563 rules

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003993900000001105s

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.022106s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004536s with result Satisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190B6F71AE0>

[15-11-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190B6F71AE0>)

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101312s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008099s with result Unsatisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10941010000000162, Incremental time limit = None
Running cumulative time = 0.10941010000000162, Cumulative time limit = 3600
Used memory = (RSS = 113.257812Mb, VMS = 100.121094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102760s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004456s with result Unsatisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10721639999999866, Incremental time limit = None
Running cumulative time = 0.21662650000000028, Cumulative time limit = 3600
Used memory = (RSS = 114.113281Mb, VMS = 101.242188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111588s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003877s with result Unsatisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11546529999999677, Incremental time limit = None
Running cumulative time = 0.33209179999999705, Cumulative time limit = 3600
Used memory = (RSS = 116.207031Mb, VMS = 103.390625Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087481s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005300s with result Unsatisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09278069999999872, Incremental time limit = None
Running cumulative time = 0.42487249999999577, Cumulative time limit = 3600
Used memory = (RSS = 117.605469Mb, VMS = 104.808594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097954s.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005562s with result Unsatisfiable.

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10351570000000265, Incremental time limit = None
Running cumulative time = 0.5283881999999984, Cumulative time limit = 3600
Used memory = (RSS = 120.296875Mb, VMS = 107.539062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095737s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007461s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1031981999999978, Incremental time limit = None
Running cumulative time = 0.6315863999999962, Cumulative time limit = 3600
Used memory = (RSS = 122.257812Mb, VMS = 109.386719Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092895s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007476s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10037139999999667, Incremental time limit = None
Running cumulative time = 0.7319577999999929, Cumulative time limit = 3600
Used memory = (RSS = 125.574219Mb, VMS = 112.863281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102145s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010796s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11294080000000051, Incremental time limit = None
Running cumulative time = 0.8448985999999934, Cumulative time limit = 3600
Used memory = (RSS = 127.269531Mb, VMS = 114.472656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126315s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011875s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13818960000000402, Incremental time limit = None
Running cumulative time = 0.9830881999999974, Cumulative time limit = 3600
Used memory = (RSS = 130.554688Mb, VMS = 118.257812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098855s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012233s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11108790000000113, Incremental time limit = None
Running cumulative time = 1.0941760999999985, Cumulative time limit = 3600
Used memory = (RSS = 132.730469Mb, VMS = 120.093750Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099454s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021114s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12056730000000115, Incremental time limit = None
Running cumulative time = 1.2147433999999997, Cumulative time limit = 3600
Used memory = (RSS = 135.214844Mb, VMS = 122.371094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170088s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029511s with result Unsatisfiable.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19959949999999793, Incremental time limit = None
Running cumulative time = 1.4143428999999976, Cumulative time limit = 3600
Used memory = (RSS = 139.730469Mb, VMS = 127.730469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116292s.

[15-11-2021_15-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049100s with result Unsatisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16539200000000065, Incremental time limit = None
Running cumulative time = 1.5797348999999983, Cumulative time limit = 3600
Used memory = (RSS = 141.234375Mb, VMS = 129.226562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117577s.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067972s with result Satisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18554980000000043, Incremental time limit = None
Running cumulative time = 1.7652846999999987, Cumulative time limit = 3600
Used memory = (RSS = 146.046875Mb, VMS = 133.726562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.520453s, Solving = 0.244832s, Total = 1.765285s, Memory = (RSS = 146.046875Mb, VMS = 133.726562Mb)), Calls = 14
Final Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.101312s, Solving = 0.008099s, Total = 0.109410s, Memory = (RSS = 113.257812Mb, VMS = 100.121094Mb)
2 : Statistics :: Grounding = 0.102760s, Solving = 0.004456s, Total = 0.107216s, Memory = (RSS = 114.113281Mb, VMS = 101.242188Mb)
3 : Statistics :: Grounding = 0.111588s, Solving = 0.003877s, Total = 0.115465s, Memory = (RSS = 116.207031Mb, VMS = 103.390625Mb)
4 : Statistics :: Grounding = 0.087481s, Solving = 0.005300s, Total = 0.092781s, Memory = (RSS = 117.605469Mb, VMS = 104.808594Mb)
5 : Statistics :: Grounding = 0.097954s, Solving = 0.005562s, Total = 0.103516s, Memory = (RSS = 120.296875Mb, VMS = 107.539062Mb)
6 : Statistics :: Grounding = 0.095737s, Solving = 0.007461s, Total = 0.103198s, Memory = (RSS = 122.257812Mb, VMS = 109.386719Mb)
7 : Statistics :: Grounding = 0.092895s, Solving = 0.007476s, Total = 0.100371s, Memory = (RSS = 125.574219Mb, VMS = 112.863281Mb)
8 : Statistics :: Grounding = 0.102145s, Solving = 0.010796s, Total = 0.112941s, Memory = (RSS = 127.269531Mb, VMS = 114.472656Mb)
9 : Statistics :: Grounding = 0.126315s, Solving = 0.011875s, Total = 0.138190s, Memory = (RSS = 130.554688Mb, VMS = 118.257812Mb)
10 : Statistics :: Grounding = 0.098855s, Solving = 0.012233s, Total = 0.111088s, Memory = (RSS = 132.730469Mb, VMS = 120.093750Mb)
11 : Statistics :: Grounding = 0.099454s, Solving = 0.021114s, Total = 0.120567s, Memory = (RSS = 135.214844Mb, VMS = 122.371094Mb)
12 : Statistics :: Grounding = 0.170088s, Solving = 0.029511s, Total = 0.199599s, Memory = (RSS = 139.730469Mb, VMS = 127.730469Mb)
13 : Statistics :: Grounding = 0.116292s, Solving = 0.049100s, Total = 0.165392s, Memory = (RSS = 141.234375Mb, VMS = 129.226562Mb)
14 : Statistics :: Grounding = 0.117577s, Solving = 0.067972s, Total = 0.185550s, Memory = (RSS = 146.046875Mb, VMS = 133.726562Mb)

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.765285s due to: Stop condition reached.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.520453s, Solving = 0.244832s, Total = 1.765285s, Memory = (RSS = 146.046875Mb, VMS = 133.726562Mb)), Calls = 14
Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 14 :: Actions = 21                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 6:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 7:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 9:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 10:
    Planned actions:
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 11:
    Planned actions:
        talos : move(store_room)
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Planned actions:
        talos : move(puzzle_room)
Step 14:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.792s (Gro =   1.543s, Sea =   0.249s), Expan (L=1.00, A=1.00) (Dev = (L=0.00, A=0.00), Bal = (L=0.00, A=0.00))

[15-11-2021_15-11-34] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=0, blend=Blend(left=0, right=0.2)

[15-11-2021_15-11-34] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[15-11-2021_15-11-34] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=7, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.792s (Gro =   1.543s, Sea =   0.249s), Expan (L=1.00, A=1.00) (Dev = (L=0.00, A=0.00), Bal = (L=0.00, A=0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.792s (Gro =   1.543s, Sea =   0.249s), Expan (L=1.00, A=1.00) (Dev = (L=0.00, A=0.00), Bal = (L=0.00, A=0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-8], problem number = 1, increment number = 1

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_15-11-34] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_15-11-34] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8).

[15-11-2021_15-11-34] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000190B6F94AF0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 792 rules

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005801800000000412s

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027787s.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004531s with result Satisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190B807C180>

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190B807C180>)

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163097s.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008979s with result Unsatisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17207670000000164, Incremental time limit = None
Running cumulative time = 0.17207670000000164, Cumulative time limit = 3600
Used memory = (RSS = 127.675781Mb, VMS = 115.781250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.1630974000000016, solving_time=0.008979300000000023, total_time=0.17207670000000164, memory=Memory(rss=127.67578125, vms=115.78125), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1630974000000016, solving_time=0.008979300000000023, total_time=0.17207670000000164, memory=Memory(rss=127.67578125, vms=115.78125), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8549.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10282.0, 'bodies_tr': 10282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 18251.0, 'rules_normal': 17906.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18249.0, 'rules_tr_normal': 17906.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 15357.0, 'eqs_atom': 3454.0, 'eqs_body': 1143.0, 'eqs_other': 10760.0}, 'lpStep': {'atoms': 4054.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9106.0, 'bodies_tr': 9106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 13397.0, 'rules_normal': 13052.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13395.0, 'rules_tr_normal': 13052.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9219.0, 'eqs_atom': 1171.0, 'eqs_body': 378.0, 'eqs_other': 7670.0}, 'generator': {'vars': 1841.0, 'vars_eliminated': 0.0, 'vars_frozen': 1255.0, 'constraints': 27.0, 'constraints_binary': 779.0, 'constraints_ternary': 121.0, 'acyc_edges': 0.0, 'complexity': 939.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 9.0, 'lits_learnt': 10.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 63.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 6.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 0.0, 'levels': 6.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.17291831970214844, 'cpu': 0.15625, 'solve': 0.0019855499267578125, 'unsat': 0.0019855499267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21181488037109375, 'cpu': 0.1875, 'solve': 0.004978179931640625, 'unsat': 0.0019855499267578125, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 9.0, 'lits_learnt': 10.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 71.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 6.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 0.0, 'levels': 6.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110412s.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004943s with result Unsatisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11535560000000089, Incremental time limit = None
Running cumulative time = 0.2874323000000025, Cumulative time limit = 3600
Used memory = (RSS = 130.652344Mb, VMS = 119.578125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.27350970000000174, solving_time=0.013922600000000784, total_time=0.2874323000000025, memory=Memory(rss=130.65234375, vms=119.578125), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11041230000000013, solving_time=0.004943300000000761, total_time=0.11535560000000089, memory=Memory(rss=130.65234375, vms=119.578125), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10233.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16865.0, 'bodies_tr': 16865.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 406.0, 'count_bodies_tr': 406.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 26946.0, 'rules_normal': 26435.0, 'rules_choice': 483.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 26932.0, 'rules_tr_normal': 26435.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 18434.0, 'eqs_atom': 4170.0, 'eqs_body': 1590.0, 'eqs_other': 12674.0}, 'lpStep': {'atoms': 1684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6583.0, 'bodies_tr': 6583.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 8695.0, 'rules_normal': 8529.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 8683.0, 'rules_tr_normal': 8529.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3077.0, 'eqs_atom': 716.0, 'eqs_body': 447.0, 'eqs_other': 1914.0}, 'generator': {'vars': 1964.0, 'vars_eliminated': 0.0, 'vars_frozen': 1374.0, 'constraints': 65.0, 'constraints_binary': 1134.0, 'constraints_ternary': 185.0, 'acyc_edges': 0.0, 'complexity': 1412.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 124.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.11572647094726562, 'cpu': 0.109375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3275413513183594, 'cpu': 0.296875, 'solve': 0.006946563720703125, 'unsat': 0.0039539337158203125, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 9.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 9.0, 'lits_learnt': 10.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 195.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 6.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 0.0, 'levels': 6.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121909s.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005971s with result Unsatisfiable.

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12788030000000106, Incremental time limit = None
Running cumulative time = 0.4153126000000036, Cumulative time limit = 3600
Used memory = (RSS = 131.554688Mb, VMS = 120.207031Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.39541900000000396, solving_time=0.019893599999999623, total_time=0.4153126000000036, memory=Memory(rss=131.5546875, vms=120.20703125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12190930000000222, solving_time=0.005970999999998838, total_time=0.12788030000000106, memory=Memory(rss=131.5546875, vms=120.20703125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 12252.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23740.0, 'bodies_tr': 23740.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 586.0, 'count_bodies_tr': 586.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 36123.0, 'rules_normal': 35446.0, 'rules_choice': 635.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 36097.0, 'rules_tr_normal': 35446.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 22941.0, 'eqs_atom': 5077.0, 'eqs_body': 2048.0, 'eqs_other': 15816.0}, 'lpStep': {'atoms': 2019.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6875.0, 'bodies_tr': 6875.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 9177.0, 'rules_normal': 9011.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9165.0, 'rules_tr_normal': 9011.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4507.0, 'eqs_atom': 907.0, 'eqs_body': 458.0, 'eqs_other': 3142.0}, 'generator': {'vars': 2337.0, 'vars_eliminated': 0.0, 'vars_frozen': 1651.0, 'constraints': 143.0, 'constraints_binary': 2515.0, 'constraints_ternary': 602.0, 'acyc_edges': 0.0, 'complexity': 3320.0}}, 'solving': {'solvers': {'choices': 80.0, 'conflicts': 19.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 16.0, 'integrated': 53.0, 'lemmas': 63.0, 'lits_learnt': 118.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 34.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 287.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 7.0, 'lemmas_other': 46.0, 'lits_conflict': 15.0, 'lits_loop': 33.0, 'lits_other': 70.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 8.0, 'levels': 397.0, 'levels_bounded': 331.0, 'max': 53.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.12966156005859375, 'cpu': 0.125, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4572029113769531, 'cpu': 0.421875, 'solve': 0.008943557739257812, 'unsat': 0.005950927734375, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 80.0, 'conflicts': 28.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 24.0, 'integrated': 53.0, 'lemmas': 72.0, 'lits_learnt': 128.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 34.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 482.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 10.0, 'lemmas_other': 46.0, 'lits_conflict': 21.0, 'lits_loop': 37.0, 'lits_other': 70.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 8.0, 'levels': 403.0, 'levels_bounded': 331.0, 'max': 53.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128057s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005935s with result Unsatisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1339921000000004, Incremental time limit = None
Running cumulative time = 0.549304700000004, Cumulative time limit = 3600
Used memory = (RSS = 132.503906Mb, VMS = 121.164062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5234760000000058, solving_time=0.02582869999999815, total_time=0.549304700000004, memory=Memory(rss=132.50390625, vms=121.1640625), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12805700000000186, solving_time=0.005935099999998528, total_time=0.1339921000000004, memory=Memory(rss=132.50390625, vms=121.1640625), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 14430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30690.0, 'bodies_tr': 30690.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 766.0, 'count_bodies_tr': 766.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 562.0, 'rules': 45405.0, 'rules_normal': 44562.0, 'rules_choice': 787.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 45367.0, 'rules_tr_normal': 44562.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 27850.0, 'eqs_atom': 5993.0, 'eqs_body': 2515.0, 'eqs_other': 19342.0}, 'lpStep': {'atoms': 2178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6950.0, 'bodies_tr': 6950.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 9282.0, 'rules_normal': 9116.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9270.0, 'rules_tr_normal': 9116.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4909.0, 'eqs_atom': 916.0, 'eqs_body': 467.0, 'eqs_other': 3526.0}, 'generator': {'vars': 2710.0, 'vars_eliminated': 0.0, 'vars_frozen': 1928.0, 'constraints': 180.0, 'constraints_binary': 3094.0, 'constraints_ternary': 673.0, 'acyc_edges': 0.0, 'complexity': 4023.0}}, 'solving': {'solvers': {'choices': 65.0, 'conflicts': 20.0, 'conflicts_analyzed': 12.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 16.0, 'integrated': 44.0, 'lemmas': 68.0, 'lits_learnt': 176.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 357.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 13.0, 'lemmas_other': 44.0, 'lits_conflict': 20.0, 'lits_loop': 62.0, 'lits_other': 94.0, 'jumps': {'jumps': 12.0, 'jumps_bounded': 8.0, 'levels': 459.0, 'levels_bounded': 413.0, 'max': 60.0, 'max_executed': 60.0, 'max_bounded': 52.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.13420486450195312, 'cpu': 0.140625, 'solve': 0.0019626617431640625, 'unsat': 0.0019626617431640625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5914077758789062, 'cpu': 0.5625, 'solve': 0.010906219482421875, 'unsat': 0.007913589477539062, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 145.0, 'conflicts': 48.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 31.0, 'distributed_sum_lbd': 40.0, 'integrated': 97.0, 'lemmas': 140.0, 'lits_learnt': 304.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 61.0, 'integrated_jumps': 31.0, 'guiding_paths_lits': 839.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 23.0, 'lemmas_other': 90.0, 'lits_conflict': 41.0, 'lits_loop': 99.0, 'lits_other': 164.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 16.0, 'levels': 862.0, 'levels_bounded': 744.0, 'max': 60.0, 'max_executed': 60.0, 'max_bounded': 52.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139395s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006110s with result Unsatisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1455050999999976, Incremental time limit = None
Running cumulative time = 0.6948098000000016, Cumulative time limit = 3600
Used memory = (RSS = 136.074219Mb, VMS = 124.289062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6628707000000063, solving_time=0.031939099999995335, total_time=0.6948098000000016, memory=Memory(rss=136.07421875, vms=124.2890625), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13939470000000043, solving_time=0.006110399999997185, total_time=0.1455050999999976, memory=Memory(rss=136.07421875, vms=124.2890625), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16608.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 37835.0, 'bodies_tr': 37835.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 946.0, 'count_bodies_tr': 946.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 648.0, 'rules': 54910.0, 'rules_normal': 53901.0, 'rules_choice': 939.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 54864.0, 'rules_tr_normal': 53901.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 32324.0, 'eqs_atom': 6887.0, 'eqs_body': 2908.0, 'eqs_other': 22529.0}, 'lpStep': {'atoms': 2178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7145.0, 'bodies_tr': 7145.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9505.0, 'rules_normal': 9339.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9497.0, 'rules_tr_normal': 9339.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4474.0, 'eqs_atom': 894.0, 'eqs_body': 393.0, 'eqs_other': 3187.0}, 'generator': {'vars': 3322.0, 'vars_eliminated': 0.0, 'vars_frozen': 2374.0, 'constraints': 252.0, 'constraints_binary': 5018.0, 'constraints_ternary': 1166.0, 'acyc_edges': 0.0, 'complexity': 6548.0}}, 'solving': {'solvers': {'choices': 223.0, 'conflicts': 50.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 40.0, 'integrated': 148.0, 'lemmas': 185.0, 'lits_learnt': 425.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.0, 'integrated_imps': 116.0, 'integrated_jumps': 147.0, 'guiding_paths_lits': 366.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 26.0, 'lemmas_other': 129.0, 'lits_conflict': 97.0, 'lits_loop': 139.0, 'lits_other': 189.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 17.0, 'levels': 956.0, 'levels_bounded': 875.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.14614486694335938, 'cpu': 0.15625, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7375526428222656, 'cpu': 0.71875, 'solve': 0.012899398803710938, 'unsat': 0.009906768798828125, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 368.0, 'conflicts': 98.0, 'conflicts_analyzed': 67.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 60.0, 'distributed_sum_lbd': 80.0, 'integrated': 245.0, 'lemmas': 325.0, 'lits_learnt': 729.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.0, 'integrated_imps': 177.0, 'integrated_jumps': 178.0, 'guiding_paths_lits': 1205.0, 'guiding_paths': 40.0, 'splits': 0.0, 'lemmas_conflict': 57.0, 'lemmas_loop': 49.0, 'lemmas_other': 219.0, 'lits_conflict': 138.0, 'lits_loop': 238.0, 'lits_other': 353.0, 'jumps': {'jumps': 67.0, 'jumps_bounded': 33.0, 'levels': 1818.0, 'levels_bounded': 1619.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140057s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007828s with result Unsatisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14788549999999745, Incremental time limit = None
Running cumulative time = 0.842695299999999, Cumulative time limit = 3600
Used memory = (RSS = 136.910156Mb, VMS = 125.242188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8029282000000038, solving_time=0.03976709999999528, total_time=0.842695299999999, memory=Memory(rss=136.91015625, vms=125.2421875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1400574999999975, solving_time=0.007827999999999946, total_time=0.14788549999999745, memory=Memory(rss=136.91015625, vms=125.2421875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 18878.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45033.0, 'bodies_tr': 45033.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1126.0, 'count_bodies_tr': 1126.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 734.0, 'rules': 64496.0, 'rules_normal': 63321.0, 'rules_choice': 1091.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 64442.0, 'rules_tr_normal': 63321.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 36929.0, 'eqs_atom': 7787.0, 'eqs_body': 3307.0, 'eqs_other': 25835.0}, 'lpStep': {'atoms': 2270.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7198.0, 'bodies_tr': 7198.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9586.0, 'rules_normal': 9420.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9578.0, 'rules_tr_normal': 9420.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4605.0, 'eqs_atom': 900.0, 'eqs_body': 399.0, 'eqs_other': 3306.0}, 'generator': {'vars': 3933.0, 'vars_eliminated': 0.0, 'vars_frozen': 2819.0, 'constraints': 285.0, 'constraints_binary': 5826.0, 'constraints_ternary': 1265.0, 'acyc_edges': 0.0, 'complexity': 7504.0}}, 'solving': {'solvers': {'choices': 277.0, 'conflicts': 74.0, 'conflicts_analyzed': 61.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 23.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 88.0, 'integrated': 272.0, 'lemmas': 299.0, 'lits_learnt': 1073.0, 'lemmas_binary': 73.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.0, 'integrated_imps': 164.0, 'integrated_jumps': 169.0, 'guiding_paths_lits': 497.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 50.0, 'lemmas_loop': 27.0, 'lemmas_other': 222.0, 'lits_conflict': 186.0, 'lits_loop': 132.0, 'lits_other': 755.0, 'jumps': {'jumps': 61.0, 'jumps_bounded': 22.0, 'levels': 1062.0, 'levels_bounded': 951.0, 'max': 81.0, 'max_executed': 81.0, 'max_bounded': 80.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14960098266601562, 'cpu': 0.15625, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8871536254882812, 'cpu': 0.875, 'solve': 0.01589202880859375, 'unsat': 0.012899398803710938, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 645.0, 'conflicts': 172.0, 'conflicts_analyzed': 128.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 37.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 110.0, 'distributed_sum_lbd': 168.0, 'integrated': 517.0, 'lemmas': 624.0, 'lits_learnt': 1802.0, 'lemmas_binary': 128.0, 'lemmas_ternary': 38.0, 'cpu_time': 0.0, 'integrated_imps': 341.0, 'integrated_jumps': 347.0, 'guiding_paths_lits': 1702.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 107.0, 'lemmas_loop': 76.0, 'lemmas_other': 441.0, 'lits_conflict': 324.0, 'lits_loop': 370.0, 'lits_other': 1108.0, 'jumps': {'jumps': 128.0, 'jumps_bounded': 55.0, 'levels': 2880.0, 'levels_bounded': 2570.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134728s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016104s with result Satisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15083160000000007, Incremental time limit = None
Running cumulative time = 0.9935268999999991, Cumulative time limit = 3600
Used memory = (RSS = 139.500000Mb, VMS = 127.933594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.937656s, Solving = 0.055871s, Total = 0.993527s, Memory = (RSS = 139.500000Mb, VMS = 127.933594Mb)), Calls = 7
Final Model :: Total atoms = 5611, Cost = (6, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.937656000000004, solving_time=0.05587089999999506, total_time=0.9935268999999991, memory=Memory(rss=139.5, vms=127.93359375), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1347278000000003, solving_time=0.01610379999999978, total_time=0.15083160000000007, memory=Memory(rss=139.5, vms=127.93359375), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 21150.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 52316.0, 'bodies_tr': 52316.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1306.0, 'count_bodies_tr': 1306.0, 'sccs': 72.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 821.0, 'rules': 74227.0, 'rules_normal': 72886.0, 'rules_choice': 1243.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 74165.0, 'rules_tr_normal': 72886.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 22.0, 'eqs': 41733.0, 'eqs_atom': 8731.0, 'eqs_body': 3710.0, 'eqs_other': 29292.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7283.0, 'bodies_tr': 7283.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 9731.0, 'rules_normal': 9565.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9723.0, 'rules_tr_normal': 9565.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4804.0, 'eqs_atom': 944.0, 'eqs_body': 403.0, 'eqs_other': 3457.0}, 'generator': {'vars': 4605.0, 'vars_eliminated': 0.0, 'vars_frozen': 3290.0, 'constraints': 350.0, 'constraints_binary': 7337.0, 'constraints_ternary': 1682.0, 'acyc_edges': 0.0, 'complexity': 9523.0}}, 'solving': {'solvers': {'choices': 1361.0, 'conflicts': 110.0, 'conflicts_analyzed': 103.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 32.0, 'models': 1.0, 'models_level': 158.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 81.0, 'distributed_sum_lbd': 169.0, 'integrated': 409.0, 'lemmas': 460.0, 'lits_learnt': 1417.0, 'lemmas_binary': 149.0, 'lemmas_ternary': 54.0, 'cpu_time': 0.03125, 'integrated_imps': 205.0, 'integrated_jumps': 626.0, 'guiding_paths_lits': 567.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 87.0, 'lemmas_loop': 28.0, 'lemmas_other': 345.0, 'lits_conflict': 323.0, 'lits_loop': 150.0, 'lits_other': 944.0, 'jumps': {'jumps': 103.0, 'jumps_bounded': 19.0, 'levels': 846.0, 'levels_bounded': 510.0, 'max': 83.0, 'max_executed': 83.0, 'max_bounded': 82.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [6.0, 0.0], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.15159225463867188, 'cpu': 0.15625, 'solve': 0.00994110107421875, 'unsat': 0.00698089599609375, 'sat': 0.002960205078125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.0387458801269531, 'cpu': 1.03125, 'solve': 0.0258331298828125, 'unsat': 0.019880294799804688, 'sat': 0.0039577484130859375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2006.0, 'conflicts': 282.0, 'conflicts_analyzed': 231.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 69.0, 'models': 2.0, 'models_level': 159.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 191.0, 'distributed_sum_lbd': 337.0, 'integrated': 926.0, 'lemmas': 1084.0, 'lits_learnt': 3219.0, 'lemmas_binary': 277.0, 'lemmas_ternary': 92.0, 'cpu_time': 0.03125, 'integrated_imps': 546.0, 'integrated_jumps': 973.0, 'guiding_paths_lits': 2269.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 194.0, 'lemmas_loop': 104.0, 'lemmas_other': 786.0, 'lits_conflict': 647.0, 'lits_loop': 520.0, 'lits_other': 2052.0, 'jumps': {'jumps': 231.0, 'jumps_bounded': 74.0, 'levels': 3726.0, 'levels_bounded': 3080.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2)

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137365s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009241s with result Unsatisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1466054000000021, Incremental time limit = None
Running cumulative time = 1.1401323000000012, Cumulative time limit = 3600
Used memory = (RSS = 141.234375Mb, VMS = 128.714844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.0750207000000067, solving_time=0.0651115999999945, total_time=1.1401323000000012, memory=Memory(rss=141.234375, vms=128.71484375), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13736470000000267, solving_time=0.009240699999999435, total_time=0.1466054000000021, memory=Memory(rss=141.234375, vms=128.71484375), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 23428.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 59885.0, 'bodies_tr': 59885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1486.0, 'count_bodies_tr': 1486.0, 'sccs': 92.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1133.0, 'rules': 84336.0, 'rules_normal': 82829.0, 'rules_choice': 1395.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 84272.0, 'rules_tr_normal': 82829.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 47176.0, 'eqs_atom': 9662.0, 'eqs_body': 3932.0, 'eqs_other': 33582.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7569.0, 'bodies_tr': 7569.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 10109.0, 'rules_normal': 9943.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10107.0, 'rules_tr_normal': 9943.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5443.0, 'eqs_atom': 931.0, 'eqs_body': 222.0, 'eqs_other': 4290.0}, 'generator': {'vars': 5983.0, 'vars_eliminated': 0.0, 'vars_frozen': 4238.0, 'constraints': 620.0, 'constraints_binary': 12054.0, 'constraints_ternary': 2717.0, 'acyc_edges': 0.0, 'complexity': 15575.0}}, 'solving': {'solvers': {'choices': 21.0, 'conflicts': 32.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 21.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 18.0, 'integrated': 28.0, 'lemmas': 50.0, 'lits_learnt': 76.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 28.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 8.0, 'lemmas_other': 28.0, 'lits_conflict': 18.0, 'lits_loop': 14.0, 'lits_other': 44.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 21.0, 'levels': 951.0, 'levels_bounded': 930.0, 'max': 93.0, 'max_executed': 1.0, 'max_bounded': 92.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14860153198242188, 'cpu': 0.140625, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.187347412109375, 'cpu': 1.171875, 'solve': 0.028825759887695312, 'unsat': 0.0228729248046875, 'sat': 0.0039577484130859375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2027.0, 'conflicts': 314.0, 'conflicts_analyzed': 252.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 90.0, 'models': 2.0, 'models_level': 159.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 205.0, 'distributed_sum_lbd': 355.0, 'integrated': 954.0, 'lemmas': 1134.0, 'lits_learnt': 3295.0, 'lemmas_binary': 297.0, 'lemmas_ternary': 92.0, 'cpu_time': 0.03125, 'integrated_imps': 574.0, 'integrated_jumps': 973.0, 'guiding_paths_lits': 2906.0, 'guiding_paths': 71.0, 'splits': 0.0, 'lemmas_conflict': 208.0, 'lemmas_loop': 112.0, 'lemmas_other': 814.0, 'lits_conflict': 665.0, 'lits_loop': 534.0, 'lits_other': 2096.0, 'jumps': {'jumps': 252.0, 'jumps_bounded': 95.0, 'levels': 4677.0, 'levels_bounded': 4010.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139831s.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064954s with result Satisfiable.

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20478509999999872, Incremental time limit = None
Running cumulative time = 1.3449174, Cumulative time limit = 3600
Used memory = (RSS = 148.953125Mb, VMS = 136.765625Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.214852s, Solving = 0.130066s, Total = 1.344917s, Memory = (RSS = 148.953125Mb, VMS = 136.765625Mb)), Calls = 9
Final Model :: Total atoms = 6285, Cost = (10, 0), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2148515000000053, solving_time=0.13006589999999463, total_time=1.3449174, memory=Memory(rss=148.953125, vms=136.765625), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1398307999999986, solving_time=0.06495430000000013, total_time=0.20478509999999872, memory=Memory(rss=148.953125, vms=136.765625), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 25752.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67652.0, 'bodies_tr': 67652.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1666.0, 'count_bodies_tr': 1666.0, 'sccs': 112.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1453.0, 'rules': 94736.0, 'rules_normal': 93063.0, 'rules_choice': 1547.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 94670.0, 'rules_tr_normal': 93063.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 42.0, 'eqs': 53125.0, 'eqs_atom': 10713.0, 'eqs_body': 4183.0, 'eqs_other': 38229.0}, 'lpStep': {'atoms': 2324.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7767.0, 'bodies_tr': 7767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 10400.0, 'rules_normal': 10234.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10398.0, 'rules_tr_normal': 10234.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5949.0, 'eqs_atom': 1051.0, 'eqs_body': 251.0, 'eqs_other': 4647.0}, 'generator': {'vars': 7458.0, 'vars_eliminated': 0.0, 'vars_frozen': 5227.0, 'constraints': 723.0, 'constraints_binary': 15282.0, 'constraints_ternary': 3559.0, 'acyc_edges': 0.0, 'complexity': 19784.0}}, 'solving': {'solvers': {'choices': 1038.0, 'conflicts': 90.0, 'conflicts_analyzed': 80.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 44.0, 'models': 3.0, 'models_level': 591.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 78.0, 'distributed_sum_lbd': 120.0, 'integrated': 367.0, 'lemmas': 536.0, 'lits_learnt': 1922.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.09375, 'integrated_imps': 249.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 808.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 140.0, 'lemmas_other': 318.0, 'lits_conflict': 246.0, 'lits_loop': 847.0, 'lits_other': 829.0, 'jumps': {'jumps': 80.0, 'jumps_bounded': 33.0, 'levels': 2347.0, 'levels_bounded': 2250.0, 'max': 103.0, 'max_executed': 103.0, 'max_bounded': 102.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.20644760131835938, 'cpu': 0.25, 'solve': 0.05584907531738281, 'unsat': 0.03590202331542969, 'sat': 0.00299072265625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.3937950134277344, 'cpu': 1.421875, 'solve': 0.08467483520507812, 'unsat': 0.05877494812011719, 'sat': 0.0069484710693359375}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 3065.0, 'conflicts': 404.0, 'conflicts_analyzed': 332.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 134.0, 'models': 5.0, 'models_level': 750.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 283.0, 'distributed_sum_lbd': 475.0, 'integrated': 1321.0, 'lemmas': 1670.0, 'lits_learnt': 5217.0, 'lemmas_binary': 336.0, 'lemmas_ternary': 110.0, 'cpu_time': 0.125, 'integrated_imps': 823.0, 'integrated_jumps': 1018.0, 'guiding_paths_lits': 3714.0, 'guiding_paths': 88.0, 'splits': 0.0, 'lemmas_conflict': 286.0, 'lemmas_loop': 252.0, 'lemmas_other': 1132.0, 'lits_conflict': 911.0, 'lits_loop': 1381.0, 'lits_other': 2925.0, 'jumps': {'jumps': 332.0, 'jumps_bounded': 128.0, 'levels': 7024.0, 'levels_bounded': 6260.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3)

[15-11-2021_15-11-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135686s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010673s with result Unsatisfiable.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14635880000000157, Incremental time limit = None
Running cumulative time = 1.4912762000000015, Cumulative time limit = 3600
Used memory = (RSS = 150.859375Mb, VMS = 138.332031Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.350537500000005, solving_time=0.14073869999999644, total_time=1.4912762000000015, memory=Memory(rss=150.859375, vms=138.33203125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13568599999999975, solving_time=0.010672800000001814, total_time=0.14635880000000157, memory=Memory(rss=150.859375, vms=138.33203125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 28088.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75575.0, 'bodies_tr': 75575.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1846.0, 'count_bodies_tr': 1846.0, 'sccs': 132.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1874.0, 'rules': 105319.0, 'rules_normal': 103480.0, 'rules_choice': 1699.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 105253.0, 'rules_tr_normal': 103480.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 54.0, 'eqs': 58118.0, 'eqs_atom': 11756.0, 'eqs_body': 4388.0, 'eqs_other': 41974.0}, 'lpStep': {'atoms': 2336.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7923.0, 'bodies_tr': 7923.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 421.0, 'rules': 10583.0, 'rules_normal': 10417.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10583.0, 'rules_tr_normal': 10417.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4993.0, 'eqs_atom': 1043.0, 'eqs_body': 205.0, 'eqs_other': 3745.0}, 'generator': {'vars': 9209.0, 'vars_eliminated': 0.0, 'vars_frozen': 6405.0, 'constraints': 921.0, 'constraints_binary': 19247.0, 'constraints_ternary': 4542.0, 'acyc_edges': 0.0, 'complexity': 24974.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 78.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 78.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1486034393310547, 'cpu': 0.140625, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.542398452758789, 'cpu': 1.5625, 'solve': 0.08763694763183594, 'unsat': 0.061737060546875, 'sat': 0.0069484710693359375}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 3065.0, 'conflicts': 407.0, 'conflicts_analyzed': 332.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 134.0, 'models': 5.0, 'models_level': 750.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 283.0, 'distributed_sum_lbd': 475.0, 'integrated': 1321.0, 'lemmas': 1678.0, 'lits_learnt': 5295.0, 'lemmas_binary': 336.0, 'lemmas_ternary': 110.0, 'cpu_time': 0.140625, 'integrated_imps': 823.0, 'integrated_jumps': 1018.0, 'guiding_paths_lits': 4491.0, 'guiding_paths': 95.0, 'splits': 0.0, 'lemmas_conflict': 286.0, 'lemmas_loop': 260.0, 'lemmas_other': 1132.0, 'lits_conflict': 911.0, 'lits_loop': 1459.0, 'lits_other': 2925.0, 'jumps': {'jumps': 332.0, 'jumps_bounded': 128.0, 'levels': 7024.0, 'levels_bounded': 6260.0, 'max': 131.0, 'max_executed': 131.0, 'max_bounded': 127.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141538s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018323s with result Unsatisfiable.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1598606000000018, Incremental time limit = None
Running cumulative time = 1.6511368000000033, Cumulative time limit = 3600
Used memory = (RSS = 156.046875Mb, VMS = 144.289062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.492075000000007, solving_time=0.15906179999999637, total_time=1.6511368000000033, memory=Memory(rss=156.046875, vms=144.2890625), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14153750000000187, solving_time=0.018323099999999926, total_time=0.1598606000000018, memory=Memory(rss=156.046875, vms=144.2890625), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 30481.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 83961.0, 'bodies_tr': 83961.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2026.0, 'count_bodies_tr': 2026.0, 'sccs': 152.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2310.0, 'rules': 116425.0, 'rules_normal': 114420.0, 'rules_choice': 1851.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 116359.0, 'rules_tr_normal': 114420.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 66.0, 'eqs': 63234.0, 'eqs_atom': 12796.0, 'eqs_body': 4499.0, 'eqs_other': 45939.0}, 'lpStep': {'atoms': 2393.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8386.0, 'bodies_tr': 8386.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11106.0, 'rules_normal': 10940.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11106.0, 'rules_tr_normal': 10940.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5116.0, 'eqs_atom': 1040.0, 'eqs_body': 111.0, 'eqs_other': 3965.0}, 'generator': {'vars': 11091.0, 'vars_eliminated': 0.0, 'vars_frozen': 7635.0, 'constraints': 1401.0, 'constraints_binary': 28771.0, 'constraints_ternary': 6979.0, 'acyc_edges': 0.0, 'complexity': 37483.0}}, 'solving': {'solvers': {'choices': 216.0, 'conflicts': 141.0, 'conflicts_analyzed': 123.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 174.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 114.0, 'distributed_sum_lbd': 242.0, 'integrated': 680.0, 'lemmas': 1278.0, 'lits_learnt': 9739.0, 'lemmas_binary': 81.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.0, 'integrated_imps': 419.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 114.0, 'lemmas_loop': 574.0, 'lemmas_other': 590.0, 'lits_conflict': 896.0, 'lits_loop': 4421.0, 'lits_other': 4422.0, 'jumps': {'jumps': 123.0, 'jumps_bounded': 70.0, 'levels': 2819.0, 'levels_bounded': 2687.0, 'max': 391.0, 'max_executed': 391.0, 'max_bounded': 390.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1615753173828125, 'cpu': 0.15625, 'solve': 0.008977890014648438, 'unsat': 0.008977890014648438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.7039737701416016, 'cpu': 1.71875, 'solve': 0.09661483764648438, 'unsat': 0.07071495056152344, 'sat': 0.0069484710693359375}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 3281.0, 'conflicts': 548.0, 'conflicts_analyzed': 455.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 308.0, 'models': 5.0, 'models_level': 750.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 397.0, 'distributed_sum_lbd': 717.0, 'integrated': 2001.0, 'lemmas': 2956.0, 'lits_learnt': 15034.0, 'lemmas_binary': 417.0, 'lemmas_ternary': 145.0, 'cpu_time': 0.140625, 'integrated_imps': 1242.0, 'integrated_jumps': 1102.0, 'guiding_paths_lits': 5338.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 400.0, 'lemmas_loop': 834.0, 'lemmas_other': 1722.0, 'lits_conflict': 1807.0, 'lits_loop': 5880.0, 'lits_other': 7347.0, 'jumps': {'jumps': 455.0, 'jumps_bounded': 198.0, 'levels': 9843.0, 'levels_bounded': 8947.0, 'max': 391.0, 'max_executed': 391.0, 'max_bounded': 390.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145891s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041861s with result Satisfiable.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18775150000000096, Incremental time limit = None
Running cumulative time = 1.8388883000000043, Cumulative time limit = 3600
Used memory = (RSS = 160.832031Mb, VMS = 148.726562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.637966s, Solving = 0.200923s, Total = 1.838888s, Memory = (RSS = 160.832031Mb, VMS = 148.726562Mb)), Calls = 12
Final Model :: Total atoms = 7300, Cost = (19, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6379656000000082, solving_time=0.200922699999996, total_time=1.8388883000000043, memory=Memory(rss=160.83203125, vms=148.7265625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1458906000000013, solving_time=0.041860899999999646, total_time=0.18775150000000096, memory=Memory(rss=160.83203125, vms=148.7265625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 32885.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 92369.0, 'bodies_tr': 92369.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2206.0, 'count_bodies_tr': 2206.0, 'sccs': 172.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2746.0, 'rules': 127582.0, 'rules_normal': 125411.0, 'rules_choice': 2003.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 127516.0, 'rules_tr_normal': 125411.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 78.0, 'eqs': 68394.0, 'eqs_atom': 13843.0, 'eqs_body': 4610.0, 'eqs_other': 49941.0}, 'lpStep': {'atoms': 2404.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8408.0, 'bodies_tr': 8408.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11157.0, 'rules_normal': 10991.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11157.0, 'rules_tr_normal': 10991.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5160.0, 'eqs_atom': 1047.0, 'eqs_body': 111.0, 'eqs_other': 4002.0}, 'generator': {'vars': 12980.0, 'vars_eliminated': 0.0, 'vars_frozen': 8869.0, 'constraints': 1833.0, 'constraints_binary': 37885.0, 'constraints_ternary': 9297.0, 'acyc_edges': 0.0, 'complexity': 49415.0}}, 'solving': {'solvers': {'choices': 1851.0, 'conflicts': 232.0, 'conflicts_analyzed': 219.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 168.0, 'models': 2.0, 'models_level': 468.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 201.0, 'distributed_sum_lbd': 464.0, 'integrated': 1154.0, 'lemmas': 1725.0, 'lits_learnt': 29729.0, 'lemmas_binary': 160.0, 'lemmas_ternary': 77.0, 'cpu_time': 0.09375, 'integrated_imps': 540.0, 'integrated_jumps': 431.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 212.0, 'lemmas_loop': 497.0, 'lemmas_other': 1016.0, 'lits_conflict': 5036.0, 'lits_loop': 4143.0, 'lits_other': 20550.0, 'jumps': {'jumps': 219.0, 'jumps_bounded': 80.0, 'levels': 5169.0, 'levels_bounded': 4504.0, 'max': 304.0, 'max_executed': 304.0, 'max_bounded': 303.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1894817352294922, 'cpu': 0.25, 'solve': 0.03191375732421875, 'unsat': 0.00997161865234375, 'sat': 0.0109710693359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.8934555053710938, 'cpu': 1.96875, 'solve': 0.12852859497070312, 'unsat': 0.08068656921386719, 'sat': 0.017919540405273438}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 5132.0, 'conflicts': 780.0, 'conflicts_analyzed': 674.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 476.0, 'models': 7.0, 'models_level': 1218.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 598.0, 'distributed_sum_lbd': 1181.0, 'integrated': 3155.0, 'lemmas': 4681.0, 'lits_learnt': 44763.0, 'lemmas_binary': 577.0, 'lemmas_ternary': 222.0, 'cpu_time': 0.234375, 'integrated_imps': 1782.0, 'integrated_jumps': 1533.0, 'guiding_paths_lits': 6255.0, 'guiding_paths': 130.0, 'splits': 0.0, 'lemmas_conflict': 612.0, 'lemmas_loop': 1331.0, 'lemmas_other': 2738.0, 'lits_conflict': 6843.0, 'lits_loop': 10023.0, 'lits_other': 27897.0, 'jumps': {'jumps': 674.0, 'jumps_bounded': 278.0, 'levels': 15012.0, 'levels_bounded': 13451.0, 'max': 391.0, 'max_executed': 391.0, 'max_bounded': 390.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12}

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None)

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 12]:
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4)

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153626s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(4,12).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014048s with result Unsatisfiable.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1676739000000005, Incremental time limit = None
Running cumulative time = 2.0065622000000047, Cumulative time limit = 3600
Used memory = (RSS = 167.960938Mb, VMS = 158.093750Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.7915917000000086, solving_time=0.21497049999999618, total_time=2.0065622000000047, memory=Memory(rss=167.9609375, vms=158.09375), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15362610000000032, solving_time=0.014047800000000166, total_time=0.1676739000000005, memory=Memory(rss=167.9609375, vms=158.09375), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 35304.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100805.0, 'bodies_tr': 100805.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2386.0, 'count_bodies_tr': 2386.0, 'sccs': 192.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3182.0, 'rules': 138798.0, 'rules_normal': 136461.0, 'rules_choice': 2155.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 138732.0, 'rules_tr_normal': 136461.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 90.0, 'eqs': 73611.0, 'eqs_atom': 14900.0, 'eqs_body': 4726.0, 'eqs_other': 53985.0}, 'lpStep': {'atoms': 2419.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8436.0, 'bodies_tr': 8436.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11216.0, 'rules_normal': 11050.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11216.0, 'rules_tr_normal': 11050.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5217.0, 'eqs_atom': 1057.0, 'eqs_body': 116.0, 'eqs_other': 4044.0}, 'generator': {'vars': 14879.0, 'vars_eliminated': 0.0, 'vars_frozen': 10108.0, 'constraints': 2313.0, 'constraints_binary': 47251.0, 'constraints_ternary': 11632.0, 'acyc_edges': 0.0, 'complexity': 61664.0}}, 'solving': {'solvers': {'choices': 4.0, 'conflicts': 16.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 4.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 1.0, 'lemmas': 2.0, 'lits_learnt': 4.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 987.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 1.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 2.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 11.0, 'levels_bounded': 7.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1702728271484375, 'cpu': 0.171875, 'solve': 0.0039691925048828125, 'unsat': 0.0039691925048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0637283325195312, 'cpu': 2.140625, 'solve': 0.13249778747558594, 'unsat': 0.08465576171875, 'sat': 0.017919540405273438}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 5136.0, 'conflicts': 796.0, 'conflicts_analyzed': 678.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 480.0, 'models': 7.0, 'models_level': 1218.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 599.0, 'distributed_sum_lbd': 1183.0, 'integrated': 3156.0, 'lemmas': 4683.0, 'lits_learnt': 44767.0, 'lemmas_binary': 579.0, 'lemmas_ternary': 222.0, 'cpu_time': 0.234375, 'integrated_imps': 1783.0, 'integrated_jumps': 1533.0, 'guiding_paths_lits': 7242.0, 'guiding_paths': 141.0, 'splits': 0.0, 'lemmas_conflict': 613.0, 'lemmas_loop': 1331.0, 'lemmas_other': 2739.0, 'lits_conflict': 6845.0, 'lits_loop': 10023.0, 'lits_other': 27899.0, 'jumps': {'jumps': 678.0, 'jumps_bounded': 282.0, 'levels': 15023.0, 'levels_bounded': 13458.0, 'max': 391.0, 'max_executed': 391.0, 'max_bounded': 390.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151854s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036046s with result Satisfiable.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18790029999999902, Incremental time limit = None
Running cumulative time = 2.1944625000000038, Cumulative time limit = 3600
Used memory = (RSS = 171.757812Mb, VMS = 161.222656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.943446s, Solving = 0.251017s, Total = 2.194463s, Memory = (RSS = 171.757812Mb, VMS = 161.222656Mb)), Calls = 14
Final Model :: Total atoms = 7971, Cost = (21, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.94344550000001, solving_time=0.25101699999999383, total_time=2.1944625000000038, memory=Memory(rss=171.7578125, vms=161.22265625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15185380000000137, solving_time=0.03604649999999765, total_time=0.18790029999999902, memory=Memory(rss=171.7578125, vms=161.22265625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 37740.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 109271.0, 'bodies_tr': 109271.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2566.0, 'count_bodies_tr': 2566.0, 'sccs': 212.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3618.0, 'rules': 150076.0, 'rules_normal': 147573.0, 'rules_choice': 2307.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 150010.0, 'rules_tr_normal': 147573.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 102.0, 'eqs': 78882.0, 'eqs_atom': 15967.0, 'eqs_body': 4841.0, 'eqs_other': 58074.0}, 'lpStep': {'atoms': 2436.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8466.0, 'bodies_tr': 8466.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11278.0, 'rules_normal': 11112.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11278.0, 'rules_tr_normal': 11112.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5271.0, 'eqs_atom': 1067.0, 'eqs_body': 115.0, 'eqs_other': 4089.0}, 'generator': {'vars': 16794.0, 'vars_eliminated': 0.0, 'vars_frozen': 11354.0, 'constraints': 2798.0, 'constraints_binary': 56936.0, 'constraints_ternary': 14034.0, 'acyc_edges': 0.0, 'complexity': 74304.0}}, 'solving': {'solvers': {'choices': 1738.0, 'conflicts': 290.0, 'conflicts_analyzed': 275.0, 'restarts': 0.0, 'restarts_last': 36.0, 'extra': {'domain_choices': 415.0, 'models': 1.0, 'models_level': 283.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 245.0, 'distributed_sum_lbd': 624.0, 'integrated': 1410.0, 'lemmas': 2322.0, 'lits_learnt': 101689.0, 'lemmas_binary': 197.0, 'lemmas_ternary': 156.0, 'cpu_time': 0.140625, 'integrated_imps': 512.0, 'integrated_jumps': 488.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 249.0, 'lemmas_loop': 690.0, 'lemmas_other': 1383.0, 'lits_conflict': 14831.0, 'lits_loop': 5748.0, 'lits_other': 81110.0, 'jumps': {'jumps': 275.0, 'jumps_bounded': 51.0, 'levels': 5342.0, 'levels_bounded': 4873.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.18999862670898438, 'cpu': 0.296875, 'solve': 0.025903701782226562, 'unsat': 0.00997161865234375, 'sat': 0.015932083129882812}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.2537269592285156, 'cpu': 2.4375, 'solve': 0.1584014892578125, 'unsat': 0.09462738037109375, 'sat': 0.03385162353515625}, 'models': {'enumerated': 8.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 6874.0, 'conflicts': 1086.0, 'conflicts_analyzed': 953.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 895.0, 'models': 8.0, 'models_level': 1501.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 844.0, 'distributed_sum_lbd': 1807.0, 'integrated': 4566.0, 'lemmas': 7005.0, 'lits_learnt': 146456.0, 'lemmas_binary': 776.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.375, 'integrated_imps': 2295.0, 'integrated_jumps': 2021.0, 'guiding_paths_lits': 8299.0, 'guiding_paths': 161.0, 'splits': 0.0, 'lemmas_conflict': 862.0, 'lemmas_loop': 2021.0, 'lemmas_other': 4122.0, 'lits_conflict': 21676.0, 'lits_loop': 15771.0, 'lits_other': 109009.0, 'jumps': {'jumps': 953.0, 'jumps_bounded': 333.0, 'levels': 20365.0, 'levels_bounded': 18331.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14}

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None)

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 14]:
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5)

[15-11-2021_15-11-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148286s.

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(5,14).

[15-11-2021_15-11-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026280s with result Satisfiable.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17456630000000217, Incremental time limit = None
Running cumulative time = 2.369028800000006, Cumulative time limit = 3600
Used memory = (RSS = 176.664062Mb, VMS = 165.613281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.091732s, Solving = 0.277297s, Total = 2.369029s, Memory = (RSS = 176.664062Mb, VMS = 165.613281Mb)), Calls = 15
Final Model :: Total atoms = 8309, Cost = (22, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0917318000000122, solving_time=0.2772969999999937, total_time=2.369028800000006, memory=Memory(rss=176.6640625, vms=165.61328125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1482863000000023, solving_time=0.02627999999999986, total_time=0.17456630000000217, memory=Memory(rss=176.6640625, vms=165.61328125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 40195.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 117767.0, 'bodies_tr': 117767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2746.0, 'count_bodies_tr': 2746.0, 'sccs': 232.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4054.0, 'rules': 161416.0, 'rules_normal': 158747.0, 'rules_choice': 2459.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 161350.0, 'rules_tr_normal': 158747.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 114.0, 'eqs': 84214.0, 'eqs_atom': 17046.0, 'eqs_body': 4956.0, 'eqs_other': 62212.0}, 'lpStep': {'atoms': 2455.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8496.0, 'bodies_tr': 8496.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11340.0, 'rules_normal': 11174.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11340.0, 'rules_tr_normal': 11174.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5332.0, 'eqs_atom': 1079.0, 'eqs_body': 115.0, 'eqs_other': 4138.0}, 'generator': {'vars': 18724.0, 'vars_eliminated': 0.0, 'vars_frozen': 12607.0, 'constraints': 3286.0, 'constraints_binary': 66694.0, 'constraints_ternary': 16446.0, 'acyc_edges': 0.0, 'complexity': 87030.0}}, 'solving': {'solvers': {'choices': 791.0, 'conflicts': 30.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 32.0, 'models': 1.0, 'models_level': 301.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 44.0, 'integrated': 75.0, 'lemmas': 186.0, 'lits_learnt': 9109.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 32.0, 'integrated_jumps': 15.0, 'guiding_paths_lits': 1127.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 111.0, 'lemmas_other': 59.0, 'lits_conflict': 1566.0, 'lits_loop': 889.0, 'lits_other': 6654.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 4.0, 'levels': 29.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [22.0, 0.0], 'lower': [22.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.176513671875, 'cpu': 0.15625, 'solve': 0.01592254638671875, 'unsat': 0.00897216796875, 'sat': 0.00695037841796875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.4302406311035156, 'cpu': 2.59375, 'solve': 0.17432403564453125, 'unsat': 0.10359954833984375, 'sat': 0.040802001953125}, 'models': {'enumerated': 9.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 7665.0, 'conflicts': 1116.0, 'conflicts_analyzed': 970.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 927.0, 'models': 9.0, 'models_level': 1802.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 860.0, 'distributed_sum_lbd': 1851.0, 'integrated': 4641.0, 'lemmas': 7191.0, 'lits_learnt': 155565.0, 'lemmas_binary': 782.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.390625, 'integrated_imps': 2327.0, 'integrated_jumps': 2036.0, 'guiding_paths_lits': 9426.0, 'guiding_paths': 180.0, 'splits': 0.0, 'lemmas_conflict': 878.0, 'lemmas_loop': 2132.0, 'lemmas_other': 4181.0, 'lits_conflict': 23242.0, 'lits_loop': 16660.0, 'lits_other': 115663.0, 'jumps': {'jumps': 970.0, 'jumps_bounded': 337.0, 'levels': 20394.0, 'levels_bounded': 18337.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15}

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6)
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158482s.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025439s with result Satisfiable.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18392120000000034, Incremental time limit = None
Running cumulative time = 2.5529500000000063, Cumulative time limit = 3600
Used memory = (RSS = 181.492188Mb, VMS = 169.910156Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.250214s, Solving = 0.302736s, Total = 2.552950s, Memory = (RSS = 181.492188Mb, VMS = 169.910156Mb)), Calls = 16
Final Model :: Total atoms = 8654, Cost = (25, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.2502141000000115, solving_time=0.30273589999999473, total_time=2.5529500000000063, memory=Memory(rss=181.4921875, vms=169.91015625), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1584822999999993, solving_time=0.02543890000000104, total_time=0.18392120000000034, memory=Memory(rss=181.4921875, vms=169.91015625), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 42662.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 126285.0, 'bodies_tr': 126285.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2926.0, 'count_bodies_tr': 2926.0, 'sccs': 252.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4490.0, 'rules': 172807.0, 'rules_normal': 169972.0, 'rules_choice': 2611.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 172741.0, 'rules_tr_normal': 169972.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 126.0, 'eqs': 89591.0, 'eqs_atom': 18135.0, 'eqs_body': 5067.0, 'eqs_other': 66389.0}, 'lpStep': {'atoms': 2467.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8518.0, 'bodies_tr': 8518.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11391.0, 'rules_normal': 11225.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11391.0, 'rules_tr_normal': 11225.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5377.0, 'eqs_atom': 1089.0, 'eqs_body': 111.0, 'eqs_other': 4177.0}, 'generator': {'vars': 20661.0, 'vars_eliminated': 0.0, 'vars_frozen': 13862.0, 'constraints': 3776.0, 'constraints_binary': 76505.0, 'constraints_ternary': 18863.0, 'acyc_edges': 0.0, 'complexity': 99816.0}}, 'solving': {'solvers': {'choices': 388.0, 'conflicts': 24.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 321.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 18.0, 'integrated': 11.0, 'lemmas': 33.0, 'lits_learnt': 571.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 1.0, 'integrated_jumps': 51.0, 'guiding_paths_lits': 1197.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 15.0, 'lemmas_other': 9.0, 'lits_conflict': 251.0, 'lits_loop': 107.0, 'lits_other': 213.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 1.0, 'levels': 11.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [25.0, 0.0], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.18650245666503906, 'cpu': 0.296875, 'solve': 0.014959335327148438, 'unsat': 0.009969711303710938, 'sat': 0.0049896240234375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.6167430877685547, 'cpu': 2.890625, 'solve': 0.1892833709716797, 'unsat': 0.11356925964355469, 'sat': 0.0457916259765625}, 'models': {'enumerated': 10.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 8053.0, 'conflicts': 1140.0, 'conflicts_analyzed': 979.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 927.0, 'models': 10.0, 'models_level': 2123.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 868.0, 'distributed_sum_lbd': 1869.0, 'integrated': 4652.0, 'lemmas': 7224.0, 'lits_learnt': 156136.0, 'lemmas_binary': 782.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.515625, 'integrated_imps': 2328.0, 'integrated_jumps': 2087.0, 'guiding_paths_lits': 10623.0, 'guiding_paths': 198.0, 'splits': 0.0, 'lemmas_conflict': 887.0, 'lemmas_loop': 2147.0, 'lemmas_other': 4190.0, 'lits_conflict': 23493.0, 'lits_loop': 16767.0, 'lits_other': 115876.0, 'jumps': {'jumps': 979.0, 'jumps_bounded': 338.0, 'levels': 20405.0, 'levels_bounded': 18338.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 16]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7)
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164061s.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(7,16).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028835s with result Satisfiable.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19289570000000467, Incremental time limit = None
Running cumulative time = 2.745845700000011, Cumulative time limit = 3600
Used memory = (RSS = 190.503906Mb, VMS = 181.628906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.414275s, Solving = 0.331570s, Total = 2.745846s, Memory = (RSS = 190.503906Mb, VMS = 181.628906Mb)), Calls = 17
Final Model :: Total atoms = 8998, Cost = (27, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.414275300000014, solving_time=0.3315703999999968, total_time=2.745845700000011, memory=Memory(rss=190.50390625, vms=181.62890625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16406120000000257, solving_time=0.028834500000002095, total_time=0.19289570000000467, memory=Memory(rss=190.50390625, vms=181.62890625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 45141.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 134824.0, 'bodies_tr': 134824.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3106.0, 'count_bodies_tr': 3106.0, 'sccs': 272.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4926.0, 'rules': 184247.0, 'rules_normal': 181246.0, 'rules_choice': 2763.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 184181.0, 'rules_tr_normal': 181246.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 138.0, 'eqs': 95023.0, 'eqs_atom': 19236.0, 'eqs_body': 5179.0, 'eqs_other': 70608.0}, 'lpStep': {'atoms': 2479.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8539.0, 'bodies_tr': 8539.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11440.0, 'rules_normal': 11274.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11440.0, 'rules_tr_normal': 11274.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5432.0, 'eqs_atom': 1101.0, 'eqs_body': 112.0, 'eqs_other': 4219.0}, 'generator': {'vars': 22598.0, 'vars_eliminated': 0.0, 'vars_frozen': 15117.0, 'constraints': 4266.0, 'constraints_binary': 86353.0, 'constraints_ternary': 21280.0, 'acyc_edges': 0.0, 'complexity': 112639.0}}, 'solving': {'solvers': {'choices': 749.0, 'conflicts': 23.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 345.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 9.0, 'integrated': 1.0, 'lemmas': 15.0, 'lits_learnt': 312.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 7.0, 'lemmas_other': 1.0, 'lits_conflict': 236.0, 'lits_loop': 42.0, 'lits_other': 34.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [27.0, 0.0], 'lower': [27.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.19647598266601562, 'cpu': 0.1875, 'solve': 0.017927169799804688, 'unsat': 0.008975982666015625, 'sat': 0.008951187133789062}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.8132190704345703, 'cpu': 3.078125, 'solve': 0.20721054077148438, 'unsat': 0.12254524230957031, 'sat': 0.05474281311035156}, 'models': {'enumerated': 11.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 8802.0, 'conflicts': 1163.0, 'conflicts_analyzed': 986.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 927.0, 'models': 11.0, 'models_level': 2468.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 872.0, 'distributed_sum_lbd': 1878.0, 'integrated': 4653.0, 'lemmas': 7239.0, 'lits_learnt': 156448.0, 'lemmas_binary': 782.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.53125, 'integrated_imps': 2328.0, 'integrated_jumps': 2087.0, 'guiding_paths_lits': 11890.0, 'guiding_paths': 217.0, 'splits': 0.0, 'lemmas_conflict': 894.0, 'lemmas_loop': 2154.0, 'lemmas_other': 4191.0, 'lits_conflict': 23729.0, 'lits_loop': 16809.0, 'lits_other': 115910.0, 'jumps': {'jumps': 986.0, 'jumps_bounded': 338.0, 'levels': 20413.0, 'levels_bounded': 18338.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8)
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157017s.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050404s with result Satisfiable.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20742090000000246, Incremental time limit = None
Running cumulative time = 2.9532666000000134, Cumulative time limit = 3600
Used memory = (RSS = 196.621094Mb, VMS = 187.550781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.571292s, Solving = 0.381974s, Total = 2.953267s, Memory = (RSS = 196.621094Mb, VMS = 187.550781Mb)), Calls = 18
Final Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.5712922000000162, solving_time=0.38197439999999716, total_time=2.9532666000000134, memory=Memory(rss=196.62109375, vms=187.55078125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15701690000000212, solving_time=0.05040400000000034, total_time=0.20742090000000246, memory=Memory(rss=196.62109375, vms=187.55078125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 47632.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143384.0, 'bodies_tr': 143384.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3286.0, 'count_bodies_tr': 3286.0, 'sccs': 292.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5362.0, 'rules': 195736.0, 'rules_normal': 192569.0, 'rules_choice': 2915.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 195670.0, 'rules_tr_normal': 192569.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 150.0, 'eqs': 100508.0, 'eqs_atom': 20349.0, 'eqs_body': 5290.0, 'eqs_other': 74869.0}, 'lpStep': {'atoms': 2491.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8560.0, 'bodies_tr': 8560.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11489.0, 'rules_normal': 11323.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11489.0, 'rules_tr_normal': 11323.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5485.0, 'eqs_atom': 1113.0, 'eqs_body': 111.0, 'eqs_other': 4261.0}, 'generator': {'vars': 24535.0, 'vars_eliminated': 0.0, 'vars_frozen': 16372.0, 'constraints': 4756.0, 'constraints_binary': 96238.0, 'constraints_ternary': 23697.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 1064.0, 'conflicts': 14.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 739.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 50.0, 'lits_learnt': 562.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 43.0, 'lemmas_other': 0.0, 'lits_conflict': 218.0, 'lits_loop': 344.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 1.0, 'levels': 9.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2104778289794922, 'cpu': 0.25, 'solve': 0.03690338134765625, 'unsat': 0.01496124267578125, 'sat': 0.007978439331054688}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.0236968994140625, 'cpu': 3.328125, 'solve': 0.24411392211914062, 'unsat': 0.13750648498535156, 'sat': 0.06272125244140625}, 'models': {'enumerated': 13.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 9866.0, 'conflicts': 1177.0, 'conflicts_analyzed': 993.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 927.0, 'models': 13.0, 'models_level': 3207.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 876.0, 'distributed_sum_lbd': 1886.0, 'integrated': 4653.0, 'lemmas': 7289.0, 'lits_learnt': 157010.0, 'lemmas_binary': 782.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.609375, 'integrated_imps': 2328.0, 'integrated_jumps': 2087.0, 'guiding_paths_lits': 13227.0, 'guiding_paths': 224.0, 'splits': 0.0, 'lemmas_conflict': 901.0, 'lemmas_loop': 2197.0, 'lemmas_other': 4191.0, 'lits_conflict': 23947.0, 'lits_loop': 17153.0, 'lits_other': 115910.0, 'jumps': {'jumps': 993.0, 'jumps_bounded': 339.0, 'levels': 20422.0, 'levels_bounded': 18340.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.163097s, Solving = 0.008979s, Total = 0.172077s, Memory = (RSS = 127.675781Mb, VMS = 115.781250Mb)
2 : Statistics :: Grounding = 0.110412s, Solving = 0.004943s, Total = 0.115356s, Memory = (RSS = 130.652344Mb, VMS = 119.578125Mb)
3 : Statistics :: Grounding = 0.121909s, Solving = 0.005971s, Total = 0.127880s, Memory = (RSS = 131.554688Mb, VMS = 120.207031Mb)
4 : Statistics :: Grounding = 0.128057s, Solving = 0.005935s, Total = 0.133992s, Memory = (RSS = 132.503906Mb, VMS = 121.164062Mb)
5 : Statistics :: Grounding = 0.139395s, Solving = 0.006110s, Total = 0.145505s, Memory = (RSS = 136.074219Mb, VMS = 124.289062Mb)
6 : Statistics :: Grounding = 0.140057s, Solving = 0.007828s, Total = 0.147885s, Memory = (RSS = 136.910156Mb, VMS = 125.242188Mb)
7 : Statistics :: Grounding = 0.134728s, Solving = 0.016104s, Total = 0.150832s, Memory = (RSS = 139.500000Mb, VMS = 127.933594Mb)
8 : Statistics :: Grounding = 0.137365s, Solving = 0.009241s, Total = 0.146605s, Memory = (RSS = 141.234375Mb, VMS = 128.714844Mb)
9 : Statistics :: Grounding = 0.139831s, Solving = 0.064954s, Total = 0.204785s, Memory = (RSS = 148.953125Mb, VMS = 136.765625Mb)
10 : Statistics :: Grounding = 0.135686s, Solving = 0.010673s, Total = 0.146359s, Memory = (RSS = 150.859375Mb, VMS = 138.332031Mb)
11 : Statistics :: Grounding = 0.141538s, Solving = 0.018323s, Total = 0.159861s, Memory = (RSS = 156.046875Mb, VMS = 144.289062Mb)
12 : Statistics :: Grounding = 0.145891s, Solving = 0.041861s, Total = 0.187752s, Memory = (RSS = 160.832031Mb, VMS = 148.726562Mb)
13 : Statistics :: Grounding = 0.153626s, Solving = 0.014048s, Total = 0.167674s, Memory = (RSS = 167.960938Mb, VMS = 158.093750Mb)
14 : Statistics :: Grounding = 0.151854s, Solving = 0.036046s, Total = 0.187900s, Memory = (RSS = 171.757812Mb, VMS = 161.222656Mb)
15 : Statistics :: Grounding = 0.148286s, Solving = 0.026280s, Total = 0.174566s, Memory = (RSS = 176.664062Mb, VMS = 165.613281Mb)
16 : Statistics :: Grounding = 0.158482s, Solving = 0.025439s, Total = 0.183921s, Memory = (RSS = 181.492188Mb, VMS = 169.910156Mb)
17 : Statistics :: Grounding = 0.164061s, Solving = 0.028835s, Total = 0.192896s, Memory = (RSS = 190.503906Mb, VMS = 181.628906Mb)
18 : Statistics :: Grounding = 0.157017s, Solving = 0.050404s, Total = 0.207421s, Memory = (RSS = 196.621094Mb, VMS = 187.550781Mb)

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.953267s due to: External generator exit.

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[15-11-2021_15-11-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_15-11-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.571292s, Solving = 0.381974s, Total = 2.953267s, Memory = (RSS = 196.621094Mb, VMS = 187.550781Mb)), Calls = 18
Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 18 :: Actions = 30                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=18, step_range=range(0, 18)

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 18, Actions = 30
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   2.986s (Gro =   2.599s, Sea =   0.387s), Expan (L=2.43, A=2.80) (Dev = (L=2.15, A=3.91), Bal = (L=0.88, A=1.40))

[15-11-2021_15-11-38] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0.2)

[15-11-2021_15-11-38] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[15-11-2021_15-11-38] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   2.986s (Gro =   2.599s, Sea =   0.387s), Expan (L=2.43, A=2.80) (Dev = (L=2.15, A=3.91), Bal = (L=0.88, A=1.40))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   2.986s (Gro =   2.599s, Sea =   0.387s), Expan (L=2.43, A=2.80) (Dev = (L=2.15, A=3.91), Bal = (L=0.88, A=1.40))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-9], problem number = 1, increment number = 1

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_15-11-38] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_15-11-38] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), false, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 9})

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9).

[15-11-2021_15-11-38] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000190B6F6B1F0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004800599999999378s

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032931s.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007385s with result Satisfiable.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190BBCE2950>

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190BBCE2950>)

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.284128s.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012072s with result Unsatisfiable.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2961997000000025, Incremental time limit = None
Running cumulative time = 0.2961997000000025, Cumulative time limit = 3600
Used memory = (RSS = 206.820312Mb, VMS = 198.023438Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.28412790000000143, solving_time=0.012071800000001076, total_time=0.2961997000000025, memory=Memory(rss=206.8203125, vms=198.0234375), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28412790000000143, solving_time=0.012071800000001076, total_time=0.2961997000000025, memory=Memory(rss=206.8203125, vms=198.0234375), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12427.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16672.0, 'bodies_tr': 16672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 28740.0, 'rules_normal': 28183.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28728.0, 'rules_tr_normal': 28183.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27428.0, 'eqs_atom': 7036.0, 'eqs_body': 1888.0, 'eqs_other': 18504.0}, 'lpStep': {'atoms': 5900.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14069.0, 'bodies_tr': 14069.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 21303.0, 'rules_normal': 20746.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21291.0, 'rules_tr_normal': 20746.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14420.0, 'eqs_atom': 2126.0, 'eqs_body': 379.0, 'eqs_other': 11915.0}, 'generator': {'vars': 2759.0, 'vars_eliminated': 0.0, 'vars_frozen': 1725.0, 'constraints': 29.0, 'constraints_binary': 936.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 1122.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 46.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2962055206298828, 'cpu': 0.296875, 'solve': 0.00199127197265625, 'unsat': 0.00199127197265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3410758972167969, 'cpu': 0.34375, 'solve': 0.0059986114501953125, 'unsat': 0.00199127197265625, 'sat': 0.0020122528076171875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 54.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177001s.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009038s with result Satisfiable.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18603909999999857, Incremental time limit = None
Running cumulative time = 0.4822388000000011, Cumulative time limit = 3600
Used memory = (RSS = 210.468750Mb, VMS = 201.750000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.461129s, Solving = 0.021110s, Total = 0.482239s, Memory = (RSS = 210.468750Mb, VMS = 201.750000Mb)), Calls = 2
Final Model :: Total atoms = 4541, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4611288000000009, solving_time=0.021110000000000184, total_time=0.4822388000000011, memory=Memory(rss=210.46875, vms=201.75), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17700089999999946, solving_time=0.009038199999999108, total_time=0.18603909999999857, memory=Memory(rss=210.46875, vms=201.75), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14269.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26073.0, 'bodies_tr': 26073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 768.0, 'rules': 41252.0, 'rules_normal': 40486.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 41228.0, 'rules_tr_normal': 40486.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31159.0, 'eqs_atom': 7801.0, 'eqs_body': 2322.0, 'eqs_other': 21036.0}, 'lpStep': {'atoms': 1842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9401.0, 'bodies_tr': 9401.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 12512.0, 'rules_normal': 12303.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12500.0, 'rules_tr_normal': 12303.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3731.0, 'eqs_atom': 765.0, 'eqs_body': 434.0, 'eqs_other': 2532.0}, 'generator': {'vars': 3013.0, 'vars_eliminated': 0.0, 'vars_frozen': 1947.0, 'constraints': 116.0, 'constraints_binary': 2190.0, 'constraints_ternary': 233.0, 'acyc_edges': 0.0, 'complexity': 2577.0}}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 9.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 24.0, 'integrated': 94.0, 'lemmas': 89.0, 'lits_learnt': 149.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 46.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 238.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 12.0, 'lemmas_other': 69.0, 'lits_conflict': 8.0, 'lits_loop': 49.0, 'lits_other': 92.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 2.0, 'levels': 78.0, 'levels_bounded': 69.0, 'max': 36.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.18749618530273438, 'cpu': 0.1875, 'solve': 0.0059833526611328125, 'unsat': 0.0039882659912109375, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5285720825195312, 'cpu': 0.53125, 'solve': 0.011981964111328125, 'unsat': 0.0059795379638671875, 'sat': 0.0040073394775390625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 9.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 24.0, 'integrated': 94.0, 'lemmas': 92.0, 'lits_learnt': 152.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 46.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 292.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 15.0, 'lemmas_other': 69.0, 'lits_conflict': 8.0, 'lits_loop': 52.0, 'lits_other': 92.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 2.0, 'levels': 78.0, 'levels_bounded': 69.0, 'max': 36.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2)

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214026s.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056852s with result Satisfiable.

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2708784000000044, Incremental time limit = None
Running cumulative time = 0.7531172000000055, Cumulative time limit = 3600
Used memory = (RSS = 212.648438Mb, VMS = 204.187500Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675155s, Solving = 0.077962s, Total = 0.753117s, Memory = (RSS = 212.648438Mb, VMS = 204.187500Mb)), Calls = 3
Final Model :: Total atoms = 4918, Cost = (3, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6751552000000025, solving_time=0.07796200000000297, total_time=0.7531172000000055, memory=Memory(rss=212.6484375, vms=204.1875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21402640000000162, solving_time=0.05685200000000279, total_time=0.2708784000000044, memory=Memory(rss=212.6484375, vms=204.1875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 17057.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 35775.0, 'bodies_tr': 35775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 954.0, 'rules': 54196.0, 'rules_normal': 53221.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 54160.0, 'rules_tr_normal': 53221.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35955.0, 'eqs_atom': 8661.0, 'eqs_body': 2756.0, 'eqs_other': 24538.0}, 'lpStep': {'atoms': 2788.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9702.0, 'bodies_tr': 9702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12944.0, 'rules_normal': 12735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12932.0, 'rules_tr_normal': 12735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4796.0, 'eqs_atom': 860.0, 'eqs_body': 434.0, 'eqs_other': 3502.0}, 'generator': {'vars': 3337.0, 'vars_eliminated': 0.0, 'vars_frozen': 2235.0, 'constraints': 165.0, 'constraints_binary': 2807.0, 'constraints_ternary': 376.0, 'acyc_edges': 0.0, 'complexity': 3406.0}}, 'solving': {'solvers': {'choices': 204.0, 'conflicts': 39.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 76.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 51.0, 'integrated': 42.0, 'lemmas': 65.0, 'lits_learnt': 231.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 360.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 39.0, 'lemmas_loop': 26.0, 'lemmas_other': 0.0, 'lits_conflict': 39.0, 'lits_loop': 192.0, 'lits_other': 0.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 0.0, 'levels': 39.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.27227210998535156, 'cpu': 0.265625, 'solve': 0.05282783508300781, 'unsat': 0.050861358642578125, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8008441925048828, 'cpu': 0.796875, 'solve': 0.06480979919433594, 'unsat': 0.05684089660644531, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 314.0, 'conflicts': 48.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 61.0, 'distributed_sum_lbd': 75.0, 'integrated': 136.0, 'lemmas': 157.0, 'lits_learnt': 383.0, 'lemmas_binary': 37.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 46.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 652.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 41.0, 'lemmas_other': 69.0, 'lits_conflict': 47.0, 'lits_loop': 244.0, 'lits_other': 92.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 2.0, 'levels': 117.0, 'levels_bounded': 69.0, 'max': 36.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3)

[15-11-2021_15-11-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217635s.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007007s with result Unsatisfiable.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2246426000000028, Incremental time limit = None
Running cumulative time = 0.9777598000000083, Cumulative time limit = 3600
Used memory = (RSS = 214.257812Mb, VMS = 205.769531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.892790600000005, solving_time=0.0849692000000033, total_time=0.9777598000000083, memory=Memory(rss=214.2578125, vms=205.76953125), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21763540000000248, solving_time=0.007007200000000324, total_time=0.2246426000000028, memory=Memory(rss=214.2578125, vms=205.76953125), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19857.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45529.0, 'bodies_tr': 45529.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1154.0, 'rules': 67430.0, 'rules_normal': 66246.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 67382.0, 'rules_tr_normal': 66246.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41258.0, 'eqs_atom': 9710.0, 'eqs_body': 3193.0, 'eqs_other': 28355.0}, 'lpStep': {'atoms': 2800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9754.0, 'bodies_tr': 9754.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 200.0, 'rules': 13234.0, 'rules_normal': 13025.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13222.0, 'rules_tr_normal': 13025.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5303.0, 'eqs_atom': 1049.0, 'eqs_body': 437.0, 'eqs_other': 3817.0}, 'generator': {'vars': 3693.0, 'vars_eliminated': 0.0, 'vars_frozen': 2566.0, 'constraints': 247.0, 'constraints_binary': 3436.0, 'constraints_ternary': 385.0, 'acyc_edges': 0.0, 'complexity': 4162.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 224.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22690391540527344, 'cpu': 0.21875, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0277481079101562, 'cpu': 1.015625, 'solve': 0.06680679321289062, 'unsat': 0.058837890625, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 314.0, 'conflicts': 50.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 61.0, 'distributed_sum_lbd': 75.0, 'integrated': 136.0, 'lemmas': 157.0, 'lits_learnt': 383.0, 'lemmas_binary': 37.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 46.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 876.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 41.0, 'lemmas_other': 69.0, 'lits_conflict': 47.0, 'lits_loop': 244.0, 'lits_other': 92.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 2.0, 'levels': 117.0, 'levels_bounded': 69.0, 'max': 36.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231906s.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009234s with result Unsatisfiable.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2411399000000003, Incremental time limit = None
Running cumulative time = 1.2188997000000086, Cumulative time limit = 3600
Used memory = (RSS = 218.136719Mb, VMS = 210.210938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1246967000000048, solving_time=0.09420300000000381, total_time=1.2188997000000086, memory=Memory(rss=218.13671875, vms=210.2109375), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23190609999999978, solving_time=0.009233800000000514, total_time=0.2411399000000003, memory=Memory(rss=218.13671875, vms=210.2109375), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 22685.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 55649.0, 'bodies_tr': 55649.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1388.0, 'rules': 81418.0, 'rules_normal': 80025.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 81358.0, 'rules_tr_normal': 80025.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 48922.0, 'eqs_atom': 11169.0, 'eqs_body': 3818.0, 'eqs_other': 33935.0}, 'lpStep': {'atoms': 2828.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10120.0, 'bodies_tr': 10120.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13988.0, 'rules_normal': 13779.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13976.0, 'rules_tr_normal': 13779.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7664.0, 'eqs_atom': 1459.0, 'eqs_body': 625.0, 'eqs_other': 5580.0}, 'generator': {'vars': 4431.0, 'vars_eliminated': 0.0, 'vars_frozen': 3084.0, 'constraints': 416.0, 'constraints_binary': 6889.0, 'constraints_ternary': 1113.0, 'acyc_edges': 0.0, 'complexity': 8560.0}}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 12.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 8.0, 'lits_learnt': 46.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 469.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 2.0, 'lemmas_other': 4.0, 'lits_conflict': 10.0, 'lits_loop': 8.0, 'lits_other': 28.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 14.0, 'levels_bounded': 3.0, 'max': 11.0, 'max_executed': 10.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.24195289611816406, 'cpu': 0.234375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2697010040283203, 'cpu': 1.25, 'solve': 0.0688018798828125, 'unsat': 0.060832977294921875, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 338.0, 'conflicts': 62.0, 'conflicts_analyzed': 49.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 63.0, 'distributed_sum_lbd': 79.0, 'integrated': 140.0, 'lemmas': 165.0, 'lits_learnt': 429.0, 'lemmas_binary': 37.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.046875, 'integrated_imps': 50.0, 'integrated_jumps': 46.0, 'guiding_paths_lits': 1345.0, 'guiding_paths': 38.0, 'splits': 0.0, 'lemmas_conflict': 49.0, 'lemmas_loop': 43.0, 'lemmas_other': 73.0, 'lits_conflict': 57.0, 'lits_loop': 252.0, 'lits_other': 120.0, 'jumps': {'jumps': 49.0, 'jumps_bounded': 4.0, 'levels': 131.0, 'levels_bounded': 72.0, 'max': 36.0, 'max_executed': 10.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214007s.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013613s with result Unsatisfiable.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2276202000000005, Incremental time limit = None
Running cumulative time = 1.446519900000009, Cumulative time limit = 3600
Used memory = (RSS = 222.246094Mb, VMS = 214.910156Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.3387035000000047, solving_time=0.10781640000000436, total_time=1.446519900000009, memory=Memory(rss=222.24609375, vms=214.91015625), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21400679999999994, solving_time=0.013613400000000553, total_time=0.2276202000000005, memory=Memory(rss=222.24609375, vms=214.91015625), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 25902.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66968.0, 'bodies_tr': 66968.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 111.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1874.0, 'rules': 96906.0, 'rules_normal': 95304.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 96844.0, 'rules_tr_normal': 95304.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 56993.0, 'eqs_atom': 12687.0, 'eqs_body': 3969.0, 'eqs_other': 40337.0}, 'lpStep': {'atoms': 3217.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11319.0, 'bodies_tr': 11319.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15488.0, 'rules_normal': 15279.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15486.0, 'rules_tr_normal': 15279.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8071.0, 'eqs_atom': 1518.0, 'eqs_body': 151.0, 'eqs_other': 6402.0}, 'generator': {'vars': 6481.0, 'vars_eliminated': 0.0, 'vars_frozen': 4382.0, 'constraints': 882.0, 'constraints_binary': 17115.0, 'constraints_ternary': 3745.0, 'acyc_edges': 0.0, 'complexity': 21960.0}}, 'solving': {'solvers': {'choices': 111.0, 'conflicts': 78.0, 'conflicts_analyzed': 64.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 45.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 63.0, 'distributed_sum_lbd': 109.0, 'integrated': 377.0, 'lemmas': 510.0, 'lits_learnt': 2320.0, 'lemmas_binary': 41.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.0, 'integrated_imps': 293.0, 'integrated_jumps': 22.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 60.0, 'lemmas_loop': 83.0, 'lemmas_other': 367.0, 'lits_conflict': 302.0, 'lits_loop': 542.0, 'lits_other': 1476.0, 'jumps': {'jumps': 64.0, 'jumps_bounded': 49.0, 'levels': 3557.0, 'levels_bounded': 3468.0, 'max': 363.0, 'max_executed': 363.0, 'max_bounded': 362.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.22938919067382812, 'cpu': 0.234375, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4990901947021484, 'cpu': 1.484375, 'solve': 0.07279205322265625, 'unsat': 0.06482315063476562, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 449.0, 'conflicts': 140.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 45.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 126.0, 'distributed_sum_lbd': 188.0, 'integrated': 517.0, 'lemmas': 675.0, 'lits_learnt': 2749.0, 'lemmas_binary': 78.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.046875, 'integrated_imps': 343.0, 'integrated_jumps': 68.0, 'guiding_paths_lits': 1891.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 109.0, 'lemmas_loop': 126.0, 'lemmas_other': 440.0, 'lits_conflict': 359.0, 'lits_loop': 794.0, 'lits_other': 1596.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 53.0, 'levels': 3688.0, 'levels_bounded': 3540.0, 'max': 363.0, 'max_executed': 363.0, 'max_bounded': 362.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232535s.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015558s with result Unsatisfiable.

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24809300000000079, Incremental time limit = None
Running cumulative time = 1.6946129000000099, Cumulative time limit = 3600
Used memory = (RSS = 226.152344Mb, VMS = 218.300781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.5712386000000045, solving_time=0.12337430000000538, total_time=1.6946129000000099, memory=Memory(rss=226.15234375, vms=218.30078125), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23253509999999977, solving_time=0.015557900000001013, total_time=0.24809300000000079, memory=Memory(rss=226.15234375, vms=218.30078125), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 29408.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 78605.0, 'bodies_tr': 78605.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1467.0, 'count_bodies_tr': 1467.0, 'sccs': 136.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2360.0, 'rules': 112839.0, 'rules_normal': 111028.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 112775.0, 'rules_tr_normal': 111028.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 20.0, 'eqs': 65746.0, 'eqs_atom': 14350.0, 'eqs_body': 4144.0, 'eqs_other': 47252.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11637.0, 'bodies_tr': 11637.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15933.0, 'rules_normal': 15724.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15931.0, 'rules_tr_normal': 15724.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8753.0, 'eqs_atom': 1663.0, 'eqs_body': 175.0, 'eqs_other': 6915.0}, 'generator': {'vars': 8565.0, 'vars_eliminated': 0.0, 'vars_frozen': 5685.0, 'constraints': 1092.0, 'constraints_binary': 21803.0, 'constraints_ternary': 4915.0, 'acyc_edges': 0.0, 'complexity': 28072.0}}, 'solving': {'solvers': {'choices': 151.0, 'conflicts': 105.0, 'conflicts_analyzed': 94.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 67.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 89.0, 'distributed_sum_lbd': 173.0, 'integrated': 526.0, 'lemmas': 601.0, 'lits_learnt': 6763.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.109375, 'integrated_imps': 313.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 623.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 70.0, 'lemmas_other': 443.0, 'lits_conflict': 987.0, 'lits_loop': 551.0, 'lits_other': 5225.0, 'jumps': {'jumps': 94.0, 'jumps_bounded': 54.0, 'levels': 3080.0, 'levels_bounded': 2977.0, 'max': 251.0, 'max_executed': 251.0, 'max_bounded': 250.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.25032997131347656, 'cpu': 0.34375, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.749420166015625, 'cpu': 1.828125, 'solve': 0.07777786254882812, 'unsat': 0.0698089599609375, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 600.0, 'conflicts': 245.0, 'conflicts_analyzed': 207.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 112.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 215.0, 'distributed_sum_lbd': 361.0, 'integrated': 1043.0, 'lemmas': 1276.0, 'lits_learnt': 9512.0, 'lemmas_binary': 95.0, 'lemmas_ternary': 57.0, 'cpu_time': 0.15625, 'integrated_imps': 656.0, 'integrated_jumps': 116.0, 'guiding_paths_lits': 2514.0, 'guiding_paths': 61.0, 'splits': 0.0, 'lemmas_conflict': 197.0, 'lemmas_loop': 196.0, 'lemmas_other': 883.0, 'lits_conflict': 1346.0, 'lits_loop': 1345.0, 'lits_other': 6821.0, 'jumps': {'jumps': 207.0, 'jumps_bounded': 107.0, 'levels': 6768.0, 'levels_bounded': 6517.0, 'max': 363.0, 'max_executed': 363.0, 'max_bounded': 362.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243459s.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019678s with result Unsatisfiable.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.26313650000000166, Incremental time limit = None
Running cumulative time = 1.9577494000000115, Cumulative time limit = 3600
Used memory = (RSS = 232.339844Mb, VMS = 225.277344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.814697300000006, solving_time=0.14305210000000557, total_time=1.9577494000000115, memory=Memory(rss=232.33984375, vms=225.27734375), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24345870000000147, solving_time=0.01967780000000019, total_time=0.26313650000000166, memory=Memory(rss=232.33984375, vms=225.27734375), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 32931.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 90705.0, 'bodies_tr': 90705.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1668.0, 'count_bodies_tr': 1668.0, 'sccs': 161.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2850.0, 'rules': 129360.0, 'rules_normal': 127340.0, 'rules_choice': 1908.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 129294.0, 'rules_tr_normal': 127340.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 30.0, 'eqs': 78470.0, 'eqs_atom': 16098.0, 'eqs_body': 4322.0, 'eqs_other': 58050.0}, 'lpStep': {'atoms': 3523.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12100.0, 'bodies_tr': 12100.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 16521.0, 'rules_normal': 16312.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16519.0, 'rules_tr_normal': 16312.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 12724.0, 'eqs_atom': 1748.0, 'eqs_body': 178.0, 'eqs_other': 10798.0}, 'generator': {'vars': 10828.0, 'vars_eliminated': 0.0, 'vars_frozen': 7053.0, 'constraints': 1585.0, 'constraints_binary': 32068.0, 'constraints_ternary': 7602.0, 'acyc_edges': 0.0, 'complexity': 41585.0}}, 'solving': {'solvers': {'choices': 124.0, 'conflicts': 99.0, 'conflicts_analyzed': 85.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 70.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 182.0, 'integrated': 498.0, 'lemmas': 702.0, 'lits_learnt': 7888.0, 'lemmas_binary': 22.0, 'lemmas_ternary': 55.0, 'cpu_time': 0.0, 'integrated_imps': 302.0, 'integrated_jumps': 29.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 85.0, 'lemmas_loop': 180.0, 'lemmas_other': 437.0, 'lits_conflict': 1105.0, 'lits_loop': 1229.0, 'lits_other': 5554.0, 'jumps': {'jumps': 85.0, 'jumps_bounded': 46.0, 'levels': 1060.0, 'levels_bounded': 968.0, 'max': 103.0, 'max_executed': 103.0, 'max_bounded': 102.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.265289306640625, 'cpu': 0.25, 'solve': 0.0069789886474609375, 'unsat': 0.0069789886474609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.01470947265625, 'cpu': 2.078125, 'solve': 0.08475685119628906, 'unsat': 0.07678794860839844, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 724.0, 'conflicts': 344.0, 'conflicts_analyzed': 292.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 182.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 300.0, 'distributed_sum_lbd': 543.0, 'integrated': 1541.0, 'lemmas': 1978.0, 'lits_learnt': 17400.0, 'lemmas_binary': 117.0, 'lemmas_ternary': 112.0, 'cpu_time': 0.15625, 'integrated_imps': 958.0, 'integrated_jumps': 145.0, 'guiding_paths_lits': 3214.0, 'guiding_paths': 74.0, 'splits': 0.0, 'lemmas_conflict': 282.0, 'lemmas_loop': 376.0, 'lemmas_other': 1320.0, 'lits_conflict': 2451.0, 'lits_loop': 2574.0, 'lits_other': 12375.0, 'jumps': {'jumps': 292.0, 'jumps_bounded': 153.0, 'levels': 7828.0, 'levels_bounded': 7485.0, 'max': 363.0, 'max_executed': 363.0, 'max_bounded': 362.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.248449s.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027743s with result Unsatisfiable.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27619220000000055, Incremental time limit = None
Running cumulative time = 2.233941600000012, Cumulative time limit = 3600
Used memory = (RSS = 236.246094Mb, VMS = 228.507812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.063146100000008, solving_time=0.1707955000000041, total_time=2.233941600000012, memory=Memory(rss=236.24609375, vms=228.5078125), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24844880000000202, solving_time=0.02774339999999853, total_time=0.27619220000000055, memory=Memory(rss=236.24609375, vms=228.5078125), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 36487.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 103146.0, 'bodies_tr': 103146.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1869.0, 'count_bodies_tr': 1869.0, 'sccs': 186.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3444.0, 'rules': 146261.0, 'rules_normal': 144032.0, 'rules_choice': 2103.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 146195.0, 'rules_tr_normal': 144032.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 42.0, 'eqs': 86078.0, 'eqs_atom': 17818.0, 'eqs_body': 4395.0, 'eqs_other': 63865.0}, 'lpStep': {'atoms': 3556.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12441.0, 'bodies_tr': 12441.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16901.0, 'rules_normal': 16692.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16901.0, 'rules_tr_normal': 16692.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7608.0, 'eqs_atom': 1720.0, 'eqs_body': 73.0, 'eqs_other': 5815.0}, 'generator': {'vars': 13439.0, 'vars_eliminated': 0.0, 'vars_frozen': 8636.0, 'constraints': 2075.0, 'constraints_binary': 43656.0, 'constraints_ternary': 10767.0, 'acyc_edges': 0.0, 'complexity': 56904.0}}, 'solving': {'solvers': {'choices': 325.0, 'conflicts': 187.0, 'conflicts_analyzed': 176.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 123.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 173.0, 'distributed_sum_lbd': 336.0, 'integrated': 1053.0, 'lemmas': 1401.0, 'lits_learnt': 16314.0, 'lemmas_binary': 140.0, 'lemmas_ternary': 55.0, 'cpu_time': 0.125, 'integrated_imps': 493.0, 'integrated_jumps': 128.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 168.0, 'lemmas_loop': 466.0, 'lemmas_other': 767.0, 'lits_conflict': 2813.0, 'lits_loop': 3778.0, 'lits_other': 9723.0, 'jumps': {'jumps': 176.0, 'jumps_bounded': 42.0, 'levels': 1543.0, 'levels_bounded': 1322.0, 'max': 418.0, 'max_executed': 418.0, 'max_bounded': 417.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2782764434814453, 'cpu': 0.390625, 'solve': 0.013959884643554688, 'unsat': 0.013959884643554688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.2929859161376953, 'cpu': 2.46875, 'solve': 0.09871673583984375, 'unsat': 0.09074783325195312, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1049.0, 'conflicts': 531.0, 'conflicts_analyzed': 468.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 305.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 473.0, 'distributed_sum_lbd': 879.0, 'integrated': 2594.0, 'lemmas': 3379.0, 'lits_learnt': 33714.0, 'lemmas_binary': 257.0, 'lemmas_ternary': 167.0, 'cpu_time': 0.28125, 'integrated_imps': 1451.0, 'integrated_jumps': 273.0, 'guiding_paths_lits': 3991.0, 'guiding_paths': 88.0, 'splits': 0.0, 'lemmas_conflict': 450.0, 'lemmas_loop': 842.0, 'lemmas_other': 2087.0, 'lits_conflict': 5264.0, 'lits_loop': 6352.0, 'lits_other': 22098.0, 'jumps': {'jumps': 468.0, 'jumps_bounded': 195.0, 'levels': 9371.0, 'levels_bounded': 8807.0, 'max': 418.0, 'max_executed': 418.0, 'max_bounded': 417.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266833s.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030000s with result Unsatisfiable.

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2968331000000006, Incremental time limit = None
Running cumulative time = 2.5307747000000127, Cumulative time limit = 3600
Used memory = (RSS = 244.566406Mb, VMS = 238.484375Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.32997940000001, solving_time=0.2007953000000029, total_time=2.5307747000000127, memory=Memory(rss=244.56640625, vms=238.484375), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2668333000000018, solving_time=0.0299997999999988, total_time=0.2968331000000006, memory=Memory(rss=244.56640625, vms=238.484375), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 40184.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115860.0, 'bodies_tr': 115860.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2070.0, 'count_bodies_tr': 2070.0, 'sccs': 211.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4038.0, 'rules': 163561.0, 'rules_normal': 161123.0, 'rules_choice': 2298.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 163495.0, 'rules_tr_normal': 161123.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 54.0, 'eqs': 94061.0, 'eqs_atom': 19652.0, 'eqs_body': 4465.0, 'eqs_other': 69944.0}, 'lpStep': {'atoms': 3697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12714.0, 'bodies_tr': 12714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17300.0, 'rules_normal': 17091.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17300.0, 'rules_tr_normal': 17091.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7983.0, 'eqs_atom': 1834.0, 'eqs_body': 70.0, 'eqs_other': 6079.0}, 'generator': {'vars': 16102.0, 'vars_eliminated': 0.0, 'vars_frozen': 10233.0, 'constraints': 2677.0, 'constraints_binary': 56243.0, 'constraints_ternary': 14677.0, 'acyc_edges': 0.0, 'complexity': 74087.0}}, 'solving': {'solvers': {'choices': 395.0, 'conflicts': 207.0, 'conflicts_analyzed': 194.0, 'restarts': 0.0, 'restarts_last': 42.0, 'extra': {'domain_choices': 134.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 171.0, 'distributed_sum_lbd': 387.0, 'integrated': 994.0, 'lemmas': 1321.0, 'lits_learnt': 63593.0, 'lemmas_binary': 89.0, 'lemmas_ternary': 97.0, 'cpu_time': 0.109375, 'integrated_imps': 384.0, 'integrated_jumps': 128.0, 'guiding_paths_lits': 854.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 179.0, 'lemmas_loop': 306.0, 'lemmas_other': 836.0, 'lits_conflict': 11069.0, 'lits_loop': 2589.0, 'lits_other': 49935.0, 'jumps': {'jumps': 194.0, 'jumps_bounded': 63.0, 'levels': 3768.0, 'levels_bounded': 3501.0, 'max': 806.0, 'max_executed': 806.0, 'max_bounded': 805.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3012523651123047, 'cpu': 0.390625, 'solve': 0.017953872680664062, 'unsat': 0.017953872680664062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.59423828125, 'cpu': 2.859375, 'solve': 0.11667060852050781, 'unsat': 0.10870170593261719, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1444.0, 'conflicts': 738.0, 'conflicts_analyzed': 662.0, 'restarts': 0.0, 'restarts_last': 42.0, 'extra': {'domain_choices': 439.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 644.0, 'distributed_sum_lbd': 1266.0, 'integrated': 3588.0, 'lemmas': 4700.0, 'lits_learnt': 97307.0, 'lemmas_binary': 346.0, 'lemmas_ternary': 264.0, 'cpu_time': 0.390625, 'integrated_imps': 1835.0, 'integrated_jumps': 401.0, 'guiding_paths_lits': 4845.0, 'guiding_paths': 102.0, 'splits': 0.0, 'lemmas_conflict': 629.0, 'lemmas_loop': 1148.0, 'lemmas_other': 2923.0, 'lits_conflict': 16333.0, 'lits_loop': 8941.0, 'lits_other': 72033.0, 'jumps': {'jumps': 662.0, 'jumps_bounded': 258.0, 'levels': 13139.0, 'levels_bounded': 12308.0, 'max': 806.0, 'max_executed': 806.0, 'max_bounded': 805.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.252803s.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042466s with result Unsatisfiable.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.29526930000000107, Incremental time limit = None
Running cumulative time = 2.8260440000000138, Cumulative time limit = 3600
Used memory = (RSS = 248.804688Mb, VMS = 242.238281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.58278240000001, solving_time=0.24326160000000385, total_time=2.8260440000000138, memory=Memory(rss=248.8046875, vms=242.23828125), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2528030000000001, solving_time=0.042466300000000956, total_time=0.29526930000000107, memory=Memory(rss=248.8046875, vms=242.23828125), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 43895.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 128599.0, 'bodies_tr': 128599.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2271.0, 'count_bodies_tr': 2271.0, 'sccs': 236.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4632.0, 'rules': 180923.0, 'rules_normal': 178276.0, 'rules_choice': 2493.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 180857.0, 'rules_tr_normal': 178276.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 66.0, 'eqs': 102098.0, 'eqs_atom': 21498.0, 'eqs_body': 4532.0, 'eqs_other': 76068.0}, 'lpStep': {'atoms': 3711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12739.0, 'bodies_tr': 12739.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17362.0, 'rules_normal': 17153.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17362.0, 'rules_tr_normal': 17153.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8037.0, 'eqs_atom': 1846.0, 'eqs_body': 67.0, 'eqs_other': 6124.0}, 'generator': {'vars': 18772.0, 'vars_eliminated': 0.0, 'vars_frozen': 11832.0, 'constraints': 3060.0, 'constraints_binary': 64988.0, 'constraints_ternary': 16906.0, 'acyc_edges': 0.0, 'complexity': 85504.0}}, 'solving': {'solvers': {'choices': 477.0, 'conflicts': 263.0, 'conflicts_analyzed': 249.0, 'restarts': 0.0, 'restarts_last': 55.0, 'extra': {'domain_choices': 292.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 241.0, 'distributed_sum_lbd': 549.0, 'integrated': 1373.0, 'lemmas': 1985.0, 'lits_learnt': 144115.0, 'lemmas_binary': 169.0, 'lemmas_ternary': 82.0, 'cpu_time': 0.15625, 'integrated_imps': 486.0, 'integrated_jumps': 191.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 247.0, 'lemmas_loop': 467.0, 'lemmas_other': 1271.0, 'lits_conflict': 23904.0, 'lits_loop': 4104.0, 'lits_other': 116107.0, 'jumps': {'jumps': 249.0, 'jumps_bounded': 72.0, 'levels': 7889.0, 'levels_bounded': 7592.0, 'max': 843.0, 'max_executed': 843.0, 'max_bounded': 842.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [9.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.30014991760253906, 'cpu': 0.4375, 'solve': 0.027414321899414062, 'unsat': 0.027414321899414062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.894388198852539, 'cpu': 3.296875, 'solve': 0.14408493041992188, 'unsat': 0.13611602783203125, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1921.0, 'conflicts': 1001.0, 'conflicts_analyzed': 911.0, 'restarts': 0.0, 'restarts_last': 55.0, 'extra': {'domain_choices': 731.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 885.0, 'distributed_sum_lbd': 1815.0, 'integrated': 4961.0, 'lemmas': 6685.0, 'lits_learnt': 241422.0, 'lemmas_binary': 515.0, 'lemmas_ternary': 346.0, 'cpu_time': 0.546875, 'integrated_imps': 2321.0, 'integrated_jumps': 592.0, 'guiding_paths_lits': 5776.0, 'guiding_paths': 118.0, 'splits': 0.0, 'lemmas_conflict': 876.0, 'lemmas_loop': 1615.0, 'lemmas_other': 4194.0, 'lits_conflict': 40237.0, 'lits_loop': 13045.0, 'lits_other': 188140.0, 'jumps': {'jumps': 911.0, 'jumps_bounded': 330.0, 'levels': 21028.0, 'levels_bounded': 19900.0, 'max': 843.0, 'max_executed': 843.0, 'max_bounded': 842.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246769s.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065091s with result Unsatisfiable.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3118602000000017, Incremental time limit = None
Running cumulative time = 3.1379042000000155, Cumulative time limit = 3600
Used memory = (RSS = 258.699219Mb, VMS = 255.296875Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.829551300000009, solving_time=0.30835290000000626, total_time=3.1379042000000155, memory=Memory(rss=258.69921875, vms=255.296875), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2467688999999993, solving_time=0.0650913000000024, total_time=0.3118602000000017, memory=Memory(rss=258.69921875, vms=255.296875), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 47620.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 141362.0, 'bodies_tr': 141362.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2472.0, 'count_bodies_tr': 2472.0, 'sccs': 261.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5226.0, 'rules': 198345.0, 'rules_normal': 195489.0, 'rules_choice': 2688.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 198279.0, 'rules_tr_normal': 195489.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 78.0, 'eqs': 110197.0, 'eqs_atom': 23358.0, 'eqs_body': 4599.0, 'eqs_other': 82240.0}, 'lpStep': {'atoms': 3725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12763.0, 'bodies_tr': 12763.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17422.0, 'rules_normal': 17213.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17422.0, 'rules_tr_normal': 17213.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8099.0, 'eqs_atom': 1860.0, 'eqs_body': 67.0, 'eqs_other': 6172.0}, 'generator': {'vars': 21442.0, 'vars_eliminated': 0.0, 'vars_frozen': 13431.0, 'constraints': 3634.0, 'constraints_binary': 76054.0, 'constraints_ternary': 20234.0, 'acyc_edges': 0.0, 'complexity': 100540.0}}, 'solving': {'solvers': {'choices': 870.0, 'conflicts': 413.0, 'conflicts_analyzed': 399.0, 'restarts': 0.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 478.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 388.0, 'distributed_sum_lbd': 893.0, 'integrated': 2333.0, 'lemmas': 3109.0, 'lits_learnt': 230914.0, 'lemmas_binary': 423.0, 'lemmas_ternary': 288.0, 'cpu_time': 0.3125, 'integrated_imps': 756.0, 'integrated_jumps': 332.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 391.0, 'lemmas_loop': 574.0, 'lemmas_other': 2144.0, 'lits_conflict': 36587.0, 'lits_loop': 4988.0, 'lits_other': 189339.0, 'jumps': {'jumps': 399.0, 'jumps_bounded': 63.0, 'levels': 4713.0, 'levels_bounded': 4169.0, 'max': 483.0, 'max_executed': 483.0, 'max_bounded': 482.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.31615257263183594, 'cpu': 0.578125, 'solve': 0.04984092712402344, 'unsat': 0.04984092712402344, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.210540771484375, 'cpu': 3.875, 'solve': 0.1939258575439453, 'unsat': 0.1859569549560547, 'sat': 0.00597381591796875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2791.0, 'conflicts': 1414.0, 'conflicts_analyzed': 1310.0, 'restarts': 0.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 1209.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1273.0, 'distributed_sum_lbd': 2708.0, 'integrated': 7294.0, 'lemmas': 9794.0, 'lits_learnt': 472336.0, 'lemmas_binary': 938.0, 'lemmas_ternary': 634.0, 'cpu_time': 0.859375, 'integrated_imps': 3077.0, 'integrated_jumps': 924.0, 'guiding_paths_lits': 6784.0, 'guiding_paths': 135.0, 'splits': 0.0, 'lemmas_conflict': 1267.0, 'lemmas_loop': 2189.0, 'lemmas_other': 6338.0, 'lits_conflict': 76824.0, 'lits_loop': 18033.0, 'lits_other': 377479.0, 'jumps': {'jumps': 1310.0, 'jumps_bounded': 393.0, 'levels': 25741.0, 'levels_bounded': 24069.0, 'max': 843.0, 'max_executed': 843.0, 'max_bounded': 842.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.262959s.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103116s with result Satisfiable.

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3660747000000022, Incremental time limit = None
Running cumulative time = 3.5039789000000177, Cumulative time limit = 3600
Used memory = (RSS = 264.894531Mb, VMS = 260.121094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.092510s, Solving = 0.411469s, Total = 3.503979s, Memory = (RSS = 264.894531Mb, VMS = 260.121094Mb)), Calls = 13
Final Model :: Total atoms = 8653, Cost = (14, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.0925099000000102, solving_time=0.4114690000000074, total_time=3.5039789000000177, memory=Memory(rss=264.89453125, vms=260.12109375), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26295860000000104, solving_time=0.10311610000000115, total_time=0.3660747000000022, memory=Memory(rss=264.89453125, vms=260.12109375), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 51359.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 154149.0, 'bodies_tr': 154149.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2673.0, 'count_bodies_tr': 2673.0, 'sccs': 286.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5820.0, 'rules': 215827.0, 'rules_normal': 212762.0, 'rules_choice': 2883.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 215761.0, 'rules_tr_normal': 212762.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 90.0, 'eqs': 118358.0, 'eqs_atom': 25232.0, 'eqs_body': 4666.0, 'eqs_other': 88460.0}, 'lpStep': {'atoms': 3739.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12787.0, 'bodies_tr': 12787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17482.0, 'rules_normal': 17273.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17482.0, 'rules_tr_normal': 17273.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8161.0, 'eqs_atom': 1874.0, 'eqs_body': 67.0, 'eqs_other': 6220.0}, 'generator': {'vars': 24112.0, 'vars_eliminated': 0.0, 'vars_frozen': 15030.0, 'constraints': 3812.0, 'constraints_binary': 79955.0, 'constraints_ternary': 21111.0, 'acyc_edges': 0.0, 'complexity': 105548.0}}, 'solving': {'solvers': {'choices': 3208.0, 'conflicts': 495.0, 'conflicts_analyzed': 481.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 427.0, 'models': 3.0, 'models_level': 813.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 420.0, 'distributed_sum_lbd': 950.0, 'integrated': 2529.0, 'lemmas': 3413.0, 'lits_learnt': 278744.0, 'lemmas_binary': 396.0, 'lemmas_ternary': 266.0, 'cpu_time': 0.484375, 'integrated_imps': 991.0, 'integrated_jumps': 928.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 477.0, 'lemmas_loop': 550.0, 'lemmas_other': 2386.0, 'lits_conflict': 47764.0, 'lits_loop': 4818.0, 'lits_other': 226162.0, 'jumps': {'jumps': 481.0, 'jumps_bounded': 77.0, 'levels': 8757.0, 'levels_bounded': 7843.0, 'max': 581.0, 'max_executed': 581.0, 'max_bounded': 580.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [14.0, 0.0], 'lower': [14.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.37399864196777344, 'cpu': 0.765625, 'solve': 0.08776664733886719, 'unsat': 0.011966705322265625, 'sat': 0.04787445068359375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.5845394134521484, 'cpu': 4.640625, 'solve': 0.2816925048828125, 'unsat': 0.1979236602783203, 'sat': 0.0538482666015625}, 'models': {'enumerated': 6.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 5999.0, 'conflicts': 1909.0, 'conflicts_analyzed': 1791.0, 'restarts': 1.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 1636.0, 'models': 6.0, 'models_level': 942.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1693.0, 'distributed_sum_lbd': 3658.0, 'integrated': 9823.0, 'lemmas': 13207.0, 'lits_learnt': 751080.0, 'lemmas_binary': 1334.0, 'lemmas_ternary': 900.0, 'cpu_time': 1.34375, 'integrated_imps': 4068.0, 'integrated_jumps': 1852.0, 'guiding_paths_lits': 7869.0, 'guiding_paths': 155.0, 'splits': 0.0, 'lemmas_conflict': 1744.0, 'lemmas_loop': 2739.0, 'lemmas_other': 8724.0, 'lits_conflict': 124588.0, 'lits_loop': 22851.0, 'lits_other': 603641.0, 'jumps': {'jumps': 1791.0, 'jumps_bounded': 470.0, 'levels': 34498.0, 'levels_bounded': 31912.0, 'max': 843.0, 'max_executed': 843.0, 'max_bounded': 842.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13}

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None)

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 13]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[15-11-2021_15-11-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267125s.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(4,13).

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039150s with result Unsatisfiable.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30627529999999936, Incremental time limit = None
Running cumulative time = 3.810254200000017, Cumulative time limit = 3600
Used memory = (RSS = 268.644531Mb, VMS = 262.925781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.3596352000000103, solving_time=0.45061900000000676, total_time=3.810254200000017, memory=Memory(rss=268.64453125, vms=262.92578125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2671253, solving_time=0.03914999999999935, total_time=0.30627529999999936, memory=Memory(rss=268.64453125, vms=262.92578125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 55110.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166946.0, 'bodies_tr': 166946.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2874.0, 'count_bodies_tr': 2874.0, 'sccs': 311.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6414.0, 'rules': 233351.0, 'rules_normal': 230077.0, 'rules_choice': 3078.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 233285.0, 'rules_tr_normal': 230077.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 102.0, 'eqs': 126531.0, 'eqs_atom': 27102.0, 'eqs_body': 4733.0, 'eqs_other': 94696.0}, 'lpStep': {'atoms': 3751.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12797.0, 'bodies_tr': 12797.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17524.0, 'rules_normal': 17315.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17524.0, 'rules_tr_normal': 17315.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8173.0, 'eqs_atom': 1870.0, 'eqs_body': 67.0, 'eqs_other': 6236.0}, 'generator': {'vars': 26782.0, 'vars_eliminated': 0.0, 'vars_frozen': 16629.0, 'constraints': 3815.0, 'constraints_binary': 80308.0, 'constraints_ternary': 21167.0, 'acyc_edges': 0.0, 'complexity': 105980.0}}, 'solving': {'solvers': {'choices': 549.0, 'conflicts': 109.0, 'conflicts_analyzed': 90.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 82.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 86.0, 'distributed_sum_lbd': 175.0, 'integrated': 496.0, 'lemmas': 372.0, 'lits_learnt': 44491.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 41.0, 'cpu_time': 0.140625, 'integrated_imps': 125.0, 'integrated_jumps': 181.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 86.0, 'lemmas_loop': 75.0, 'lemmas_other': 211.0, 'lits_conflict': 14261.0, 'lits_loop': 658.0, 'lits_other': 29572.0, 'jumps': {'jumps': 90.0, 'jumps_bounded': 10.0, 'levels': 822.0, 'levels_bounded': 460.0, 'max': 433.0, 'max_executed': 433.0, 'max_bounded': 432.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [13.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.31615447998046875, 'cpu': 0.4375, 'solve': 0.02291107177734375, 'unsat': 0.02291107177734375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.900693893432617, 'cpu': 5.078125, 'solve': 0.30460357666015625, 'unsat': 0.22083473205566406, 'sat': 0.0538482666015625}, 'models': {'enumerated': 6.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6548.0, 'conflicts': 2018.0, 'conflicts_analyzed': 1881.0, 'restarts': 1.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 1718.0, 'models': 6.0, 'models_level': 942.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1779.0, 'distributed_sum_lbd': 3833.0, 'integrated': 10319.0, 'lemmas': 13579.0, 'lits_learnt': 795571.0, 'lemmas_binary': 1396.0, 'lemmas_ternary': 941.0, 'cpu_time': 1.484375, 'integrated_imps': 4193.0, 'integrated_jumps': 2033.0, 'guiding_paths_lits': 9031.0, 'guiding_paths': 174.0, 'splits': 0.0, 'lemmas_conflict': 1830.0, 'lemmas_loop': 2814.0, 'lemmas_other': 8935.0, 'lits_conflict': 138849.0, 'lits_loop': 23509.0, 'lits_other': 633213.0, 'jumps': {'jumps': 1881.0, 'jumps_bounded': 480.0, 'levels': 35320.0, 'levels_bounded': 32372.0, 'max': 843.0, 'max_executed': 843.0, 'max_bounded': 842.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267509s.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.269818s with result Satisfiable.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5373266000000001, Incremental time limit = None
Running cumulative time = 4.347580800000017, Cumulative time limit = 3600
Used memory = (RSS = 283.707031Mb, VMS = 277.468750Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.627144s, Solving = 0.720437s, Total = 4.347581s, Memory = (RSS = 283.707031Mb, VMS = 277.468750Mb)), Calls = 15
Final Model :: Total atoms = 9405, Cost = (16, 0), Optimality proven = False, Number = 8, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.6271443000000083, solving_time=0.7204365000000088, total_time=4.347580800000017, memory=Memory(rss=283.70703125, vms=277.46875), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26750909999999806, solving_time=0.26981750000000204, total_time=0.5373266000000001, memory=Memory(rss=283.70703125, vms=277.46875), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 58859.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 179767.0, 'bodies_tr': 179767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3075.0, 'count_bodies_tr': 3075.0, 'sccs': 336.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7008.0, 'rules': 250935.0, 'rules_normal': 247452.0, 'rules_choice': 3273.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 250869.0, 'rules_tr_normal': 247452.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 114.0, 'eqs': 134766.0, 'eqs_atom': 28986.0, 'eqs_body': 4800.0, 'eqs_other': 100980.0}, 'lpStep': {'atoms': 3749.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12821.0, 'bodies_tr': 12821.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17584.0, 'rules_normal': 17375.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17584.0, 'rules_tr_normal': 17375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8235.0, 'eqs_atom': 1884.0, 'eqs_body': 67.0, 'eqs_other': 6284.0}, 'generator': {'vars': 29452.0, 'vars_eliminated': 0.0, 'vars_frozen': 18228.0, 'constraints': 4458.0, 'constraints_binary': 94289.0, 'constraints_ternary': 25179.0, 'acyc_edges': 0.0, 'complexity': 124700.0}}, 'solving': {'solvers': {'choices': 5670.0, 'conflicts': 722.0, 'conflicts_analyzed': 706.0, 'restarts': 2.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 629.0, 'models': 8.0, 'models_level': 2476.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 578.0, 'distributed_sum_lbd': 1384.0, 'integrated': 3504.0, 'lemmas': 5189.0, 'lits_learnt': 407837.0, 'lemmas_binary': 634.0, 'lemmas_ternary': 371.0, 'cpu_time': 0.90625, 'integrated_imps': 1035.0, 'integrated_jumps': 1080.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 701.0, 'lemmas_loop': 1198.0, 'lemmas_other': 3290.0, 'lits_conflict': 70495.0, 'lits_loop': 10224.0, 'lits_other': 327118.0, 'jumps': {'jumps': 706.0, 'jumps_bounded': 77.0, 'levels': 14206.0, 'levels_bounded': 12221.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [16.0, 0.0], 'lower': [16.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.5411186218261719, 'cpu': 1.203125, 'solve': 0.25332069396972656, 'unsat': 0.009973526000976562, 'sat': 0.0827789306640625}, 'models': {'enumerated': 8.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.441812515258789, 'cpu': 6.28125, 'solve': 0.5579242706298828, 'unsat': 0.23080825805664062, 'sat': 0.136627197265625}, 'models': {'enumerated': 14.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 12218.0, 'conflicts': 2740.0, 'conflicts_analyzed': 2587.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2347.0, 'models': 14.0, 'models_level': 3418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2357.0, 'distributed_sum_lbd': 5217.0, 'integrated': 13823.0, 'lemmas': 18768.0, 'lits_learnt': 1203408.0, 'lemmas_binary': 2030.0, 'lemmas_ternary': 1312.0, 'cpu_time': 2.390625, 'integrated_imps': 5228.0, 'integrated_jumps': 3113.0, 'guiding_paths_lits': 10270.0, 'guiding_paths': 197.0, 'splits': 0.0, 'lemmas_conflict': 2531.0, 'lemmas_loop': 4012.0, 'lemmas_other': 12225.0, 'lits_conflict': 209344.0, 'lits_loop': 33733.0, 'lits_other': 960331.0, 'jumps': {'jumps': 2587.0, 'jumps_bounded': 557.0, 'levels': 49526.0, 'levels_bounded': 44593.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15}

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None)

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 15]:
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5)
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5)

[15-11-2021_15-11-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268780s.

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(5,15).

[15-11-2021_15-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066745s with result Satisfiable.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.335525300000004, Incremental time limit = None
Running cumulative time = 4.683106100000021, Cumulative time limit = 3600
Used memory = (RSS = 295.007812Mb, VMS = 296.117188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.895924s, Solving = 0.787182s, Total = 4.683106s, Memory = (RSS = 295.007812Mb, VMS = 296.117188Mb)), Calls = 16
Final Model :: Total atoms = 9783, Cost = (17, 0), Optimality proven = False, Number = 3, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.8959243000000114, solving_time=0.7871818000000097, total_time=4.683106100000021, memory=Memory(rss=295.0078125, vms=296.1171875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2687800000000031, solving_time=0.0667453000000009, total_time=0.335525300000004, memory=Memory(rss=295.0078125, vms=296.1171875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 62622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 192612.0, 'bodies_tr': 192612.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3276.0, 'count_bodies_tr': 3276.0, 'sccs': 361.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7602.0, 'rules': 268579.0, 'rules_normal': 264887.0, 'rules_choice': 3468.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 268513.0, 'rules_tr_normal': 264887.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 126.0, 'eqs': 143063.0, 'eqs_atom': 30884.0, 'eqs_body': 4867.0, 'eqs_other': 107312.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12845.0, 'bodies_tr': 12845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17644.0, 'rules_normal': 17435.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17644.0, 'rules_tr_normal': 17435.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8297.0, 'eqs_atom': 1898.0, 'eqs_body': 67.0, 'eqs_other': 6332.0}, 'generator': {'vars': 32122.0, 'vars_eliminated': 0.0, 'vars_frozen': 19827.0, 'constraints': 4133.0, 'constraints_binary': 86922.0, 'constraints_ternary': 22317.0, 'acyc_edges': 0.0, 'complexity': 124700.0}}, 'solving': {'solvers': {'choices': 2027.0, 'conflicts': 138.0, 'conflicts_analyzed': 122.0, 'restarts': 0.0, 'restarts_last': 51.0, 'extra': {'domain_choices': 35.0, 'models': 3.0, 'models_level': 968.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 48.0, 'distributed_sum_lbd': 121.0, 'integrated': 237.0, 'lemmas': 403.0, 'lits_learnt': 33135.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.125, 'integrated_imps': 62.0, 'integrated_jumps': 113.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 117.0, 'lemmas_loop': 95.0, 'lemmas_other': 191.0, 'lits_conflict': 13804.0, 'lits_loop': 847.0, 'lits_other': 18484.0, 'jumps': {'jumps': 122.0, 'jumps_bounded': 7.0, 'levels': 448.0, 'levels_bounded': 206.0, 'max': 167.0, 'max_executed': 167.0, 'max_bounded': 154.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [17.0, 0.0], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3500652313232422, 'cpu': 0.421875, 'solve': 0.04983711242675781, 'unsat': 0.013933181762695312, 'sat': 0.013935089111328125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.791877746582031, 'cpu': 6.703125, 'solve': 0.6077613830566406, 'unsat': 0.24474143981933594, 'sat': 0.15056228637695312}, 'models': {'enumerated': 17.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 14245.0, 'conflicts': 2878.0, 'conflicts_analyzed': 2709.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2382.0, 'models': 17.0, 'models_level': 4386.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2405.0, 'distributed_sum_lbd': 5338.0, 'integrated': 14060.0, 'lemmas': 19171.0, 'lits_learnt': 1236543.0, 'lemmas_binary': 2105.0, 'lemmas_ternary': 1328.0, 'cpu_time': 2.515625, 'integrated_imps': 5290.0, 'integrated_jumps': 3226.0, 'guiding_paths_lits': 11586.0, 'guiding_paths': 219.0, 'splits': 0.0, 'lemmas_conflict': 2648.0, 'lemmas_loop': 4107.0, 'lemmas_other': 12416.0, 'lits_conflict': 223148.0, 'lits_loop': 34580.0, 'lits_other': 978815.0, 'jumps': {'jumps': 2709.0, 'jumps_bounded': 564.0, 'levels': 49974.0, 'levels_bounded': 44799.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16}

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270245s.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(6,16).

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.196221s with result Satisfiable.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4664658000000017, Incremental time limit = None
Running cumulative time = 5.149571900000023, Cumulative time limit = 3600
Used memory = (RSS = 307.492188Mb, VMS = 307.335938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 24
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.166169s, Solving = 0.983403s, Total = 5.149572s, Memory = (RSS = 307.492188Mb, VMS = 307.335938Mb)), Calls = 17
Final Model :: Total atoms = 10165, Cost = (18, 0), Optimality proven = False, Number = 7, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.166169100000012, solving_time=0.983402800000011, total_time=5.149571900000023, memory=Memory(rss=307.4921875, vms=307.3359375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2702448000000004, solving_time=0.1962210000000013, total_time=0.4664658000000017, memory=Memory(rss=307.4921875, vms=307.3359375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 66399.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205481.0, 'bodies_tr': 205481.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3477.0, 'count_bodies_tr': 3477.0, 'sccs': 386.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8196.0, 'rules': 286283.0, 'rules_normal': 282382.0, 'rules_choice': 3663.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 286217.0, 'rules_tr_normal': 282382.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 138.0, 'eqs': 151422.0, 'eqs_atom': 32796.0, 'eqs_body': 4934.0, 'eqs_other': 113692.0}, 'lpStep': {'atoms': 3777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12869.0, 'bodies_tr': 12869.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17704.0, 'rules_normal': 17495.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17704.0, 'rules_tr_normal': 17495.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8359.0, 'eqs_atom': 1912.0, 'eqs_body': 67.0, 'eqs_other': 6380.0}, 'generator': {'vars': 34792.0, 'vars_eliminated': 0.0, 'vars_frozen': 21426.0, 'constraints': 4776.0, 'constraints_binary': 100995.0, 'constraints_ternary': 26329.0, 'acyc_edges': 0.0, 'complexity': 132946.0}}, 'solving': {'solvers': {'choices': 3514.0, 'conflicts': 143.0, 'conflicts_analyzed': 127.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 22.0, 'models': 7.0, 'models_level': 2284.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 55.0, 'distributed_sum_lbd': 169.0, 'integrated': 146.0, 'lemmas': 393.0, 'lits_learnt': 37626.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.5, 'integrated_imps': 22.0, 'integrated_jumps': 46.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 127.0, 'lemmas_loop': 127.0, 'lemmas_other': 139.0, 'lits_conflict': 15360.0, 'lits_loop': 1182.0, 'lits_other': 21084.0, 'jumps': {'jumps': 127.0, 'jumps_bounded': 2.0, 'levels': 210.0, 'levels_bounded': 3.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [18.0, 0.0], 'lower': [18.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.47074127197265625, 'cpu': 0.796875, 'solve': 0.1794910430908203, 'unsat': 0.0139617919921875, 'sat': 0.008947372436523438}, 'models': {'enumerated': 7.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.2626190185546875, 'cpu': 7.5, 'solve': 0.7872524261474609, 'unsat': 0.25870323181152344, 'sat': 0.15950965881347656}, 'models': {'enumerated': 24.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 17759.0, 'conflicts': 3021.0, 'conflicts_analyzed': 2836.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2404.0, 'models': 24.0, 'models_level': 6670.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2460.0, 'distributed_sum_lbd': 5507.0, 'integrated': 14206.0, 'lemmas': 19564.0, 'lits_learnt': 1274169.0, 'lemmas_binary': 2129.0, 'lemmas_ternary': 1328.0, 'cpu_time': 3.015625, 'integrated_imps': 5312.0, 'integrated_jumps': 3272.0, 'guiding_paths_lits': 12979.0, 'guiding_paths': 240.0, 'splits': 0.0, 'lemmas_conflict': 2775.0, 'lemmas_loop': 4234.0, 'lemmas_other': 12555.0, 'lits_conflict': 238508.0, 'lits_loop': 35762.0, 'lits_other': 999899.0, 'jumps': {'jumps': 2836.0, 'jumps_bounded': 566.0, 'levels': 50184.0, 'levels_bounded': 44802.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17}

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 7)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268724s.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.082561s with result Satisfiable.

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3512844000000044, Incremental time limit = None
Running cumulative time = 5.500856300000027, Cumulative time limit = 3600
Used memory = (RSS = 316.988281Mb, VMS = 315.171875Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 28
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.434893s, Solving = 1.065963s, Total = 5.500856s, Memory = (RSS = 316.988281Mb, VMS = 315.171875Mb)), Calls = 18
Final Model :: Total atoms = 10544, Cost = (19, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.4348929000000155, solving_time=1.0659634000000118, total_time=5.500856300000027, memory=Memory(rss=316.98828125, vms=315.171875), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2687238000000036, solving_time=0.08256060000000076, total_time=0.3512844000000044, memory=Memory(rss=316.98828125, vms=315.171875), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 70190.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 218374.0, 'bodies_tr': 218374.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3678.0, 'count_bodies_tr': 3678.0, 'sccs': 411.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8790.0, 'rules': 304047.0, 'rules_normal': 299937.0, 'rules_choice': 3858.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 303981.0, 'rules_tr_normal': 299937.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 150.0, 'eqs': 159843.0, 'eqs_atom': 34722.0, 'eqs_body': 5001.0, 'eqs_other': 120120.0}, 'lpStep': {'atoms': 3791.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12893.0, 'bodies_tr': 12893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17764.0, 'rules_normal': 17555.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17764.0, 'rules_tr_normal': 17555.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8421.0, 'eqs_atom': 1926.0, 'eqs_body': 67.0, 'eqs_other': 6428.0}, 'generator': {'vars': 37462.0, 'vars_eliminated': 0.0, 'vars_frozen': 23025.0, 'constraints': 5419.0, 'constraints_binary': 115037.0, 'constraints_ternary': 30341.0, 'acyc_edges': 0.0, 'complexity': 151727.0}}, 'solving': {'solvers': {'choices': 1797.0, 'conflicts': 95.0, 'conflicts_analyzed': 81.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 8.0, 'models': 4.0, 'models_level': 1405.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 42.0, 'distributed_sum_lbd': 130.0, 'integrated': 148.0, 'lemmas': 254.0, 'lits_learnt': 29435.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.171875, 'integrated_imps': 28.0, 'integrated_jumps': 178.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 81.0, 'lemmas_loop': 25.0, 'lemmas_other': 148.0, 'lits_conflict': 10834.0, 'lits_loop': 232.0, 'lits_other': 18369.0, 'jumps': {'jumps': 81.0, 'jumps_bounded': 3.0, 'levels': 157.0, 'levels_bounded': 5.0, 'max': 12.0, 'max_executed': 12.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3555469512939453, 'cpu': 0.46875, 'solve': 0.0648040771484375, 'unsat': 0.012964248657226562, 'sat': 0.009950637817382812}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.618165969848633, 'cpu': 7.96875, 'solve': 0.8520565032958984, 'unsat': 0.27166748046875, 'sat': 0.16946029663085938}, 'models': {'enumerated': 28.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 19556.0, 'conflicts': 3116.0, 'conflicts_analyzed': 2917.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2412.0, 'models': 28.0, 'models_level': 8075.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2502.0, 'distributed_sum_lbd': 5637.0, 'integrated': 14354.0, 'lemmas': 19818.0, 'lits_learnt': 1303604.0, 'lemmas_binary': 2153.0, 'lemmas_ternary': 1346.0, 'cpu_time': 3.1875, 'integrated_imps': 5340.0, 'integrated_jumps': 3450.0, 'guiding_paths_lits': 14449.0, 'guiding_paths': 259.0, 'splits': 0.0, 'lemmas_conflict': 2856.0, 'lemmas_loop': 4259.0, 'lemmas_other': 12703.0, 'lits_conflict': 249342.0, 'lits_loop': 35994.0, 'lits_other': 1018268.0, 'jumps': {'jumps': 2917.0, 'jumps_bounded': 569.0, 'levels': 50341.0, 'levels_bounded': 44807.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18}

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8)

[15-11-2021_15-11-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270026s.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(8,18).

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.166364s with result Satisfiable.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43638969999999944, Incremental time limit = None
Running cumulative time = 5.937246000000027, Cumulative time limit = 3600
Used memory = (RSS = 327.851562Mb, VMS = 324.691406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 32
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.704919s, Solving = 1.232327s, Total = 5.937246s, Memory = (RSS = 327.851562Mb, VMS = 324.691406Mb)), Calls = 19
Final Model :: Total atoms = 10928, Cost = (21, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.704918800000016, solving_time=1.232327200000011, total_time=5.937246000000027, memory=Memory(rss=327.8515625, vms=324.69140625), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27002590000000026, solving_time=0.16636379999999917, total_time=0.43638969999999944, memory=Memory(rss=327.8515625, vms=324.69140625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 73995.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 231291.0, 'bodies_tr': 231291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3879.0, 'count_bodies_tr': 3879.0, 'sccs': 436.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9384.0, 'rules': 321871.0, 'rules_normal': 317552.0, 'rules_choice': 4053.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 321805.0, 'rules_tr_normal': 317552.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 162.0, 'eqs': 168326.0, 'eqs_atom': 36662.0, 'eqs_body': 5068.0, 'eqs_other': 126596.0}, 'lpStep': {'atoms': 3805.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12917.0, 'bodies_tr': 12917.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17824.0, 'rules_normal': 17615.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17824.0, 'rules_tr_normal': 17615.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8483.0, 'eqs_atom': 1940.0, 'eqs_body': 67.0, 'eqs_other': 6476.0}, 'generator': {'vars': 40132.0, 'vars_eliminated': 0.0, 'vars_frozen': 24624.0, 'constraints': 6062.0, 'constraints_binary': 129202.0, 'constraints_ternary': 34353.0, 'acyc_edges': 0.0, 'complexity': 170631.0}}, 'solving': {'solvers': {'choices': 1468.0, 'conflicts': 44.0, 'conflicts_analyzed': 30.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 6.0, 'models': 4.0, 'models_level': 1544.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 49.0, 'integrated': 15.0, 'lemmas': 111.0, 'lits_learnt': 6330.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.3125, 'integrated_imps': 5.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 1547.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 66.0, 'lemmas_other': 15.0, 'lits_conflict': 3251.0, 'lits_loop': 630.0, 'lits_other': 2449.0, 'jumps': {'jumps': 30.0, 'jumps_bounded': 0.0, 'levels': 39.0, 'levels_bounded': 0.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.44082069396972656, 'cpu': 0.59375, 'solve': 0.1466083526611328, 'unsat': 0.10372161865234375, 'sat': 0.009975433349609375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.058986663818359, 'cpu': 8.5625, 'solve': 0.9986648559570312, 'unsat': 0.37538909912109375, 'sat': 0.17943572998046875}, 'models': {'enumerated': 32.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 21024.0, 'conflicts': 3160.0, 'conflicts_analyzed': 2947.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2418.0, 'models': 32.0, 'models_level': 9619.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2519.0, 'distributed_sum_lbd': 5686.0, 'integrated': 14369.0, 'lemmas': 19929.0, 'lits_learnt': 1309934.0, 'lemmas_binary': 2153.0, 'lemmas_ternary': 1346.0, 'cpu_time': 3.5, 'integrated_imps': 5345.0, 'integrated_jumps': 3453.0, 'guiding_paths_lits': 15996.0, 'guiding_paths': 277.0, 'splits': 0.0, 'lemmas_conflict': 2886.0, 'lemmas_loop': 4325.0, 'lemmas_other': 12718.0, 'lits_conflict': 252593.0, 'lits_loop': 36624.0, 'lits_other': 1020717.0, 'jumps': {'jumps': 2947.0, 'jumps_bounded': 569.0, 'levels': 50380.0, 'levels_bounded': 44807.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19}

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9)
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9)

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279604s.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034192s with result Unsatisfiable.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.31379619999999875, Incremental time limit = None
Running cumulative time = 6.251042200000025, Cumulative time limit = 3600
Used memory = (RSS = 332.535156Mb, VMS = 328.101562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.984522900000016, solving_time=1.2665193000000095, total_time=6.251042200000025, memory=Memory(rss=332.53515625, vms=328.1015625), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27960410000000024, solving_time=0.034192099999998504, total_time=0.31379619999999875, memory=Memory(rss=332.53515625, vms=328.1015625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 77814.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 244232.0, 'bodies_tr': 244232.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4080.0, 'count_bodies_tr': 4080.0, 'sccs': 461.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9978.0, 'rules': 339755.0, 'rules_normal': 335227.0, 'rules_choice': 4248.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 339689.0, 'rules_tr_normal': 335227.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 176871.0, 'eqs_atom': 38616.0, 'eqs_body': 5135.0, 'eqs_other': 133120.0}, 'lpStep': {'atoms': 3819.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12941.0, 'bodies_tr': 12941.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17884.0, 'rules_normal': 17675.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17884.0, 'rules_tr_normal': 17675.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8545.0, 'eqs_atom': 1954.0, 'eqs_body': 67.0, 'eqs_other': 6524.0}, 'generator': {'vars': 42802.0, 'vars_eliminated': 0.0, 'vars_frozen': 26223.0, 'constraints': 6705.0, 'constraints_binary': 143413.0, 'constraints_ternary': 38365.0, 'acyc_edges': 0.0, 'complexity': 189581.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 14.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 108.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1624.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 108.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3191490173339844, 'cpu': 0.328125, 'solve': 0.012968063354492188, 'unsat': 0.012968063354492188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.378135681152344, 'cpu': 8.890625, 'solve': 1.0116329193115234, 'unsat': 0.38835716247558594, 'sat': 0.17943572998046875}, 'models': {'enumerated': 32.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 21024.0, 'conflicts': 3174.0, 'conflicts_analyzed': 2947.0, 'restarts': 3.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 2418.0, 'models': 32.0, 'models_level': 9619.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2519.0, 'distributed_sum_lbd': 5686.0, 'integrated': 14369.0, 'lemmas': 19941.0, 'lits_learnt': 1310042.0, 'lemmas_binary': 2153.0, 'lemmas_ternary': 1346.0, 'cpu_time': 3.515625, 'integrated_imps': 5345.0, 'integrated_jumps': 3453.0, 'guiding_paths_lits': 17620.0, 'guiding_paths': 290.0, 'splits': 0.0, 'lemmas_conflict': 2886.0, 'lemmas_loop': 4337.0, 'lemmas_other': 12718.0, 'lits_conflict': 252593.0, 'lits_loop': 36732.0, 'lits_other': 1020717.0, 'jumps': {'jumps': 2947.0, 'jumps_bounded': 569.0, 'levels': 50380.0, 'levels_bounded': 44807.0, 'max': 878.0, 'max_executed': 878.0, 'max_bounded': 877.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273420s.

[15-11-2021_15-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.261086s with result Unsatisfiable.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.5345064999999991, Incremental time limit = None
Running cumulative time = 6.7855487000000245, Cumulative time limit = 3600
Used memory = (RSS = 340.019531Mb, VMS = 334.746094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.257943000000019, solving_time=1.5276057000000058, total_time=6.7855487000000245, memory=Memory(rss=340.01953125, vms=334.74609375), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2734201000000027, solving_time=0.2610863999999964, total_time=0.5345064999999991, memory=Memory(rss=340.01953125, vms=334.74609375), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 81647.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 257197.0, 'bodies_tr': 257197.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4281.0, 'count_bodies_tr': 4281.0, 'sccs': 486.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10572.0, 'rules': 357699.0, 'rules_normal': 352962.0, 'rules_choice': 4443.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 357633.0, 'rules_tr_normal': 352962.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 186.0, 'eqs': 185478.0, 'eqs_atom': 40584.0, 'eqs_body': 5202.0, 'eqs_other': 139692.0}, 'lpStep': {'atoms': 3833.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12965.0, 'bodies_tr': 12965.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17944.0, 'rules_normal': 17735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17944.0, 'rules_tr_normal': 17735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8607.0, 'eqs_atom': 1968.0, 'eqs_body': 67.0, 'eqs_other': 6572.0}, 'generator': {'vars': 45472.0, 'vars_eliminated': 0.0, 'vars_frozen': 27822.0, 'constraints': 7348.0, 'constraints_binary': 157670.0, 'constraints_ternary': 42377.0, 'acyc_edges': 0.0, 'complexity': 208577.0}}, 'solving': {'solvers': {'choices': 1792.0, 'conflicts': 681.0, 'conflicts_analyzed': 656.0, 'restarts': 2.0, 'restarts_last': 115.0, 'extra': {'domain_choices': 673.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 607.0, 'distributed_sum_lbd': 1511.0, 'integrated': 3586.0, 'lemmas': 6002.0, 'lits_learnt': 591996.0, 'lemmas_binary': 470.0, 'lemmas_ternary': 217.0, 'cpu_time': 0.890625, 'integrated_imps': 1088.0, 'integrated_jumps': 685.0, 'guiding_paths_lits': 1701.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 655.0, 'lemmas_loop': 1916.0, 'lemmas_other': 3431.0, 'lits_conflict': 95001.0, 'lits_loop': 16827.0, 'lits_other': 480168.0, 'jumps': {'jumps': 656.0, 'jumps_bounded': 135.0, 'levels': 37925.0, 'levels_bounded': 36819.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [18.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.5381622314453125, 'cpu': 1.1875, 'solve': 0.23936080932617188, 'unsat': 0.23936080932617188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.916297912597656, 'cpu': 10.078125, 'solve': 1.2509937286376953, 'unsat': 0.6277179718017578, 'sat': 0.17943572998046875}, 'models': {'enumerated': 32.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 22816.0, 'conflicts': 3855.0, 'conflicts_analyzed': 3603.0, 'restarts': 5.0, 'restarts_last': 115.0, 'extra': {'domain_choices': 3091.0, 'models': 32.0, 'models_level': 9619.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3126.0, 'distributed_sum_lbd': 7197.0, 'integrated': 17955.0, 'lemmas': 25943.0, 'lits_learnt': 1902038.0, 'lemmas_binary': 2623.0, 'lemmas_ternary': 1563.0, 'cpu_time': 4.40625, 'integrated_imps': 6433.0, 'integrated_jumps': 4138.0, 'guiding_paths_lits': 19321.0, 'guiding_paths': 314.0, 'splits': 0.0, 'lemmas_conflict': 3541.0, 'lemmas_loop': 6253.0, 'lemmas_other': 16149.0, 'lits_conflict': 347594.0, 'lits_loop': 53559.0, 'lits_other': 1500885.0, 'jumps': {'jumps': 3603.0, 'jumps_bounded': 704.0, 'levels': 88305.0, 'levels_bounded': 81626.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.283492s.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.401929s with result Satisfiable.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6854209999999981, Incremental time limit = None
Running cumulative time = 7.470969700000023, Cumulative time limit = 3600
Used memory = (RSS = 356.628906Mb, VMS = 362.121094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 36
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.541435s, Solving = 1.929535s, Total = 7.470970s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)), Calls = 22
Final Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.541435200000016, solving_time=1.9295345000000061, total_time=7.470969700000023, memory=Memory(rss=356.62890625, vms=362.12109375), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28349219999999775, solving_time=0.4019288000000003, total_time=0.6854209999999981, memory=Memory(rss=356.62890625, vms=362.12109375), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 85494.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 270186.0, 'bodies_tr': 270186.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4482.0, 'count_bodies_tr': 4482.0, 'sccs': 511.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11166.0, 'rules': 375703.0, 'rules_normal': 370757.0, 'rules_choice': 4638.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 375637.0, 'rules_tr_normal': 370757.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 198.0, 'eqs': 194147.0, 'eqs_atom': 42566.0, 'eqs_body': 5269.0, 'eqs_other': 146312.0}, 'lpStep': {'atoms': 3847.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12989.0, 'bodies_tr': 12989.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 18004.0, 'rules_normal': 17795.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18004.0, 'rules_tr_normal': 17795.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8669.0, 'eqs_atom': 1982.0, 'eqs_body': 67.0, 'eqs_other': 6620.0}, 'generator': {'vars': 48142.0, 'vars_eliminated': 0.0, 'vars_frozen': 29421.0, 'constraints': 7988.0, 'constraints_binary': 171572.0, 'constraints_ternary': 46240.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 5444.0, 'conflicts': 1767.0, 'conflicts_analyzed': 1742.0, 'restarts': 8.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 1584.0, 'models': 4.0, 'models_level': 1856.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1446.0, 'distributed_sum_lbd': 4063.0, 'integrated': 8609.0, 'lemmas': 11751.0, 'lits_learnt': 1746032.0, 'lemmas_binary': 1119.0, 'lemmas_ternary': 458.0, 'cpu_time': 2.546875, 'integrated_imps': 1346.0, 'integrated_jumps': 1508.0, 'guiding_paths_lits': 1778.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 1740.0, 'lemmas_loop': 1824.0, 'lemmas_other': 8187.0, 'lits_conflict': 324356.0, 'lits_loop': 15262.0, 'lits_other': 1406414.0, 'jumps': {'jumps': 1742.0, 'jumps_bounded': 118.0, 'levels': 36422.0, 'levels_bounded': 33874.0, 'max': 1394.0, 'max_executed': 1394.0, 'max_bounded': 1392.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.6921501159667969, 'cpu': 2.84375, 'solve': 0.3779640197753906, 'unsat': 0.04388427734375, 'sat': 0.2702522277832031}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 7.608448028564453, 'cpu': 12.921875, 'solve': 1.628957748413086, 'unsat': 0.6716022491455078, 'sat': 0.4496879577636719}, 'models': {'enumerated': 36.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 28260.0, 'conflicts': 5622.0, 'conflicts_analyzed': 5345.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4675.0, 'models': 36.0, 'models_level': 11475.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4572.0, 'distributed_sum_lbd': 11260.0, 'integrated': 26564.0, 'lemmas': 37694.0, 'lits_learnt': 3648070.0, 'lemmas_binary': 3742.0, 'lemmas_ternary': 2021.0, 'cpu_time': 6.953125, 'integrated_imps': 7779.0, 'integrated_jumps': 5646.0, 'guiding_paths_lits': 21099.0, 'guiding_paths': 341.0, 'splits': 0.0, 'lemmas_conflict': 5281.0, 'lemmas_loop': 8077.0, 'lemmas_other': 24336.0, 'lits_conflict': 671950.0, 'lits_loop': 68821.0, 'lits_other': 2907299.0, 'jumps': {'jumps': 5345.0, 'jumps_bounded': 822.0, 'levels': 124727.0, 'levels_bounded': 115500.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19, 9: 22}

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.284128s, Solving = 0.012072s, Total = 0.296200s, Memory = (RSS = 206.820312Mb, VMS = 198.023438Mb)
2 : Statistics :: Grounding = 0.177001s, Solving = 0.009038s, Total = 0.186039s, Memory = (RSS = 210.468750Mb, VMS = 201.750000Mb)
3 : Statistics :: Grounding = 0.214026s, Solving = 0.056852s, Total = 0.270878s, Memory = (RSS = 212.648438Mb, VMS = 204.187500Mb)
4 : Statistics :: Grounding = 0.217635s, Solving = 0.007007s, Total = 0.224643s, Memory = (RSS = 214.257812Mb, VMS = 205.769531Mb)
5 : Statistics :: Grounding = 0.231906s, Solving = 0.009234s, Total = 0.241140s, Memory = (RSS = 218.136719Mb, VMS = 210.210938Mb)
6 : Statistics :: Grounding = 0.214007s, Solving = 0.013613s, Total = 0.227620s, Memory = (RSS = 222.246094Mb, VMS = 214.910156Mb)
7 : Statistics :: Grounding = 0.232535s, Solving = 0.015558s, Total = 0.248093s, Memory = (RSS = 226.152344Mb, VMS = 218.300781Mb)
8 : Statistics :: Grounding = 0.243459s, Solving = 0.019678s, Total = 0.263137s, Memory = (RSS = 232.339844Mb, VMS = 225.277344Mb)
9 : Statistics :: Grounding = 0.248449s, Solving = 0.027743s, Total = 0.276192s, Memory = (RSS = 236.246094Mb, VMS = 228.507812Mb)
10 : Statistics :: Grounding = 0.266833s, Solving = 0.030000s, Total = 0.296833s, Memory = (RSS = 244.566406Mb, VMS = 238.484375Mb)
11 : Statistics :: Grounding = 0.252803s, Solving = 0.042466s, Total = 0.295269s, Memory = (RSS = 248.804688Mb, VMS = 242.238281Mb)
12 : Statistics :: Grounding = 0.246769s, Solving = 0.065091s, Total = 0.311860s, Memory = (RSS = 258.699219Mb, VMS = 255.296875Mb)
13 : Statistics :: Grounding = 0.262959s, Solving = 0.103116s, Total = 0.366075s, Memory = (RSS = 264.894531Mb, VMS = 260.121094Mb)
14 : Statistics :: Grounding = 0.267125s, Solving = 0.039150s, Total = 0.306275s, Memory = (RSS = 268.644531Mb, VMS = 262.925781Mb)
15 : Statistics :: Grounding = 0.267509s, Solving = 0.269818s, Total = 0.537327s, Memory = (RSS = 283.707031Mb, VMS = 277.468750Mb)
16 : Statistics :: Grounding = 0.268780s, Solving = 0.066745s, Total = 0.335525s, Memory = (RSS = 295.007812Mb, VMS = 296.117188Mb)
17 : Statistics :: Grounding = 0.270245s, Solving = 0.196221s, Total = 0.466466s, Memory = (RSS = 307.492188Mb, VMS = 307.335938Mb)
18 : Statistics :: Grounding = 0.268724s, Solving = 0.082561s, Total = 0.351284s, Memory = (RSS = 316.988281Mb, VMS = 315.171875Mb)
19 : Statistics :: Grounding = 0.270026s, Solving = 0.166364s, Total = 0.436390s, Memory = (RSS = 327.851562Mb, VMS = 324.691406Mb)
20 : Statistics :: Grounding = 0.279604s, Solving = 0.034192s, Total = 0.313796s, Memory = (RSS = 332.535156Mb, VMS = 328.101562Mb)
21 : Statistics :: Grounding = 0.273420s, Solving = 0.261086s, Total = 0.534506s, Memory = (RSS = 340.019531Mb, VMS = 334.746094Mb)
22 : Statistics :: Grounding = 0.283492s, Solving = 0.401929s, Total = 0.685421s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.470970s due to: External generator exit.

[15-11-2021_15-11-45] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_15-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.541435s, Solving = 1.929535s, Total = 7.470970s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)), Calls = 22
Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 22 :: Actions = 27                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 9 : Unachieved sgoals = 8

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   2.986s (Gro =   2.599s, Sea =   0.387s), Expan (L=2.43, A=2.80) (Dev = (L=2.15, A=3.91), Bal = (L=0.88, A=1.40))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 28

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 28

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10).
sub_goal(2, talos, move(hallway), in(talos), hallway, 11).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 15).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190BBCE2950>

[15-11-2021_15-11-46] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_15-11-46] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190BBCE2950> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_15-11-46] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190BBCE2950> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 20)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190BBCE2950>)

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None)

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280093s.

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(10,21).

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.121760s with result Satisfiable.

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.40185309999999674, Incremental time limit = None
Running cumulative time = 7.872822800000019, Cumulative time limit = 3600
Used memory = (RSS = 372.664062Mb, VMS = 377.468750Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 40
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.821528s, Solving = 2.051295s, Total = 7.872823s, Memory = (RSS = 372.664062Mb, VMS = 377.468750Mb)), Calls = 23
Final Model :: Total atoms = 15768, Cost = (26, 0), Optimality proven = False, Number = 4, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.821528200000017, solving_time=2.051294600000002, total_time=7.872822800000019, memory=Memory(rss=372.6640625, vms=377.46875), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2800930000000008, solving_time=0.12176009999999593, total_time=0.40185309999999674, memory=Memory(rss=372.6640625, vms=377.46875), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 93366.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 283890.0, 'bodies_tr': 283890.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4683.0, 'count_bodies_tr': 4683.0, 'sccs': 536.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11760.0, 'rules': 398722.0, 'rules_normal': 393567.0, 'rules_choice': 4833.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 398656.0, 'rules_tr_normal': 393567.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 210.0, 'eqs': 204917.0, 'eqs_atom': 45232.0, 'eqs_body': 6009.0, 'eqs_other': 153676.0}, 'lpStep': {'atoms': 7872.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13704.0, 'bodies_tr': 13704.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 23019.0, 'rules_normal': 22810.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23019.0, 'rules_tr_normal': 22810.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10770.0, 'eqs_atom': 2666.0, 'eqs_body': 740.0, 'eqs_other': 7364.0}, 'generator': {'vars': 50839.0, 'vars_eliminated': 0.0, 'vars_frozen': 31042.0, 'constraints': 733.0, 'constraints_binary': 33516.0, 'constraints_ternary': 3971.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 2905.0, 'conflicts': 112.0, 'conflicts_analyzed': 104.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 17.0, 'models': 4.0, 'models_level': 1799.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 98.0, 'distributed_sum_lbd': 128.0, 'integrated': 615.0, 'lemmas': 747.0, 'lits_learnt': 3490.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.21875, 'integrated_imps': 534.0, 'integrated_jumps': 161.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 104.0, 'lemmas_loop': 39.0, 'lemmas_other': 604.0, 'lits_conflict': 1124.0, 'lits_loop': 278.0, 'lits_other': 2088.0, 'jumps': {'jumps': 104.0, 'jumps_bounded': 13.0, 'levels': 3977.0, 'levels_bounded': 3562.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 274.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.5086250305175781, 'cpu': 0.609375, 'solve': 0.08624839782714844, 'unsat': 0.017976760864257812, 'sat': 0.01197052001953125}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.117073059082031, 'cpu': 13.53125, 'solve': 1.7152061462402344, 'unsat': 0.6895790100097656, 'sat': 0.4616584777832031}, 'models': {'enumerated': 40.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 31165.0, 'conflicts': 5734.0, 'conflicts_analyzed': 5449.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4692.0, 'models': 40.0, 'models_level': 13274.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4670.0, 'distributed_sum_lbd': 11388.0, 'integrated': 27179.0, 'lemmas': 38441.0, 'lits_learnt': 3651560.0, 'lemmas_binary': 3785.0, 'lemmas_ternary': 2021.0, 'cpu_time': 7.171875, 'integrated_imps': 8313.0, 'integrated_jumps': 5807.0, 'guiding_paths_lits': 23283.0, 'guiding_paths': 352.0, 'splits': 0.0, 'lemmas_conflict': 5385.0, 'lemmas_loop': 8116.0, 'lemmas_other': 24940.0, 'lits_conflict': 673074.0, 'lits_loop': 69099.0, 'lits_other': 2909387.0, 'jumps': {'jumps': 5449.0, 'jumps_bounded': 835.0, 'levels': 128704.0, 'levels_bounded': 119062.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23}

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None)

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 23]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 11)

[15-11-2021_15-11-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241840s.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(11,23).

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025851s with result Unsatisfiable.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.267690800000004, Incremental time limit = None
Running cumulative time = 8.140513600000023, Cumulative time limit = 3600
Used memory = (RSS = 374.117188Mb, VMS = 378.449219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.063367900000017, solving_time=2.077145700000006, total_time=8.140513600000023, memory=Memory(rss=374.1171875, vms=378.44921875), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24183969999999988, solving_time=0.025851100000004124, total_time=0.267690800000004, memory=Memory(rss=374.1171875, vms=378.44921875), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 96801.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 294496.0, 'bodies_tr': 294496.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4884.0, 'count_bodies_tr': 4884.0, 'sccs': 549.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11946.0, 'rules': 413551.0, 'rules_normal': 408187.0, 'rules_choice': 5028.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 413477.0, 'rules_tr_normal': 408187.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 214.0, 'eqs': 211897.0, 'eqs_atom': 46169.0, 'eqs_body': 6409.0, 'eqs_other': 159319.0}, 'lpStep': {'atoms': 3435.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10606.0, 'bodies_tr': 10606.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 14829.0, 'rules_normal': 14620.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14821.0, 'rules_tr_normal': 14620.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6980.0, 'eqs_atom': 937.0, 'eqs_body': 400.0, 'eqs_other': 5643.0}, 'generator': {'vars': 51585.0, 'vars_eliminated': 0.0, 'vars_frozen': 31527.0, 'constraints': 592.0, 'constraints_binary': 31228.0, 'constraints_ternary': 3003.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 11.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2044.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 11.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2744178771972656, 'cpu': 0.265625, 'solve': 0.003963470458984375, 'unsat': 0.003963470458984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.391490936279297, 'cpu': 13.796875, 'solve': 1.7191696166992188, 'unsat': 0.69354248046875, 'sat': 0.4616584777832031}, 'models': {'enumerated': 40.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 31165.0, 'conflicts': 5736.0, 'conflicts_analyzed': 5449.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4692.0, 'models': 40.0, 'models_level': 13274.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4671.0, 'distributed_sum_lbd': 11390.0, 'integrated': 27179.0, 'lemmas': 38443.0, 'lits_learnt': 3651571.0, 'lemmas_binary': 3786.0, 'lemmas_ternary': 2021.0, 'cpu_time': 7.171875, 'integrated_imps': 8313.0, 'integrated_jumps': 5807.0, 'guiding_paths_lits': 25327.0, 'guiding_paths': 359.0, 'splits': 0.0, 'lemmas_conflict': 5385.0, 'lemmas_loop': 8118.0, 'lemmas_other': 24940.0, 'lits_conflict': 673074.0, 'lits_loop': 69110.0, 'lits_other': 2909387.0, 'jumps': {'jumps': 5449.0, 'jumps_bounded': 835.0, 'levels': 128704.0, 'levels_bounded': 119062.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236984s.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.166035s with result Satisfiable.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4030194999999992, Incremental time limit = None
Running cumulative time = 8.543533100000023, Cumulative time limit = 3600
Used memory = (RSS = 378.312500Mb, VMS = 381.964844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 41
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.300352s, Solving = 2.243181s, Total = 8.543533s, Memory = (RSS = 378.312500Mb, VMS = 381.964844Mb)), Calls = 25
Final Model :: Total atoms = 16530, Cost = (28, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.300351900000017, solving_time=2.2431812000000058, total_time=8.543533100000023, memory=Memory(rss=378.3125, vms=381.96484375), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23698399999999964, solving_time=0.16603549999999956, total_time=0.4030194999999992, memory=Memory(rss=378.3125, vms=381.96484375), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 100016.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 305642.0, 'bodies_tr': 305642.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5085.0, 'count_bodies_tr': 5085.0, 'sccs': 572.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12258.0, 'rules': 429842.0, 'rules_normal': 424269.0, 'rules_choice': 5223.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 429762.0, 'rules_tr_normal': 424269.0, 'rules_tr_choice': 5223.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 220.0, 'eqs': 222931.0, 'eqs_atom': 47847.0, 'eqs_body': 6786.0, 'eqs_other': 168298.0}, 'lpStep': {'atoms': 3215.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11146.0, 'bodies_tr': 11146.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16291.0, 'rules_normal': 16082.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16285.0, 'rules_tr_normal': 16082.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11034.0, 'eqs_atom': 1678.0, 'eqs_body': 377.0, 'eqs_other': 8979.0}, 'generator': {'vars': 52952.0, 'vars_eliminated': 0.0, 'vars_frozen': 32401.0, 'constraints': 882.0, 'constraints_binary': 38840.0, 'constraints_ternary': 4701.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 1441.0, 'conflicts': 59.0, 'conflicts_analyzed': 52.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 51.0, 'models': 1.0, 'models_level': 495.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 54.0, 'distributed_sum_lbd': 94.0, 'integrated': 324.0, 'lemmas': 377.0, 'lits_learnt': 1856.0, 'lemmas_binary': 52.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.1875, 'integrated_imps': 151.0, 'integrated_jumps': 104.0, 'guiding_paths_lits': 2177.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 43.0, 'lemmas_loop': 107.0, 'lemmas_other': 227.0, 'lits_conflict': 205.0, 'lits_loop': 677.0, 'lits_other': 974.0, 'jumps': {'jumps': 52.0, 'jumps_bounded': 21.0, 'levels': 5075.0, 'levels_bounded': 4992.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 312.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [28.0, 0.0], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.40788841247558594, 'cpu': 0.453125, 'solve': 0.1376056671142578, 'unsat': 0.1326427459716797, 'sat': 0.004962921142578125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.799379348754883, 'cpu': 14.25, 'solve': 1.8567752838134766, 'unsat': 0.8261852264404297, 'sat': 0.46662139892578125}, 'models': {'enumerated': 41.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 32606.0, 'conflicts': 5795.0, 'conflicts_analyzed': 5501.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4743.0, 'models': 41.0, 'models_level': 13769.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4725.0, 'distributed_sum_lbd': 11484.0, 'integrated': 27503.0, 'lemmas': 38820.0, 'lits_learnt': 3653427.0, 'lemmas_binary': 3838.0, 'lemmas_ternary': 2045.0, 'cpu_time': 7.359375, 'integrated_imps': 8464.0, 'integrated_jumps': 5911.0, 'guiding_paths_lits': 27504.0, 'guiding_paths': 372.0, 'splits': 0.0, 'lemmas_conflict': 5428.0, 'lemmas_loop': 8225.0, 'lemmas_other': 25167.0, 'lits_conflict': 673279.0, 'lits_loop': 69787.0, 'lits_other': 2910361.0, 'jumps': {'jumps': 5501.0, 'jumps_bounded': 856.0, 'levels': 133779.0, 'levels_bounded': 124054.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25}

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None)

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 25]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235320s.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(12,25).

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033423s with result Unsatisfiable.

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.26874379999999576, Incremental time limit = None
Running cumulative time = 8.812276900000018, Cumulative time limit = 3600
Used memory = (RSS = 379.691406Mb, VMS = 382.664062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.535672300000016, solving_time=2.2766046000000024, total_time=8.812276900000018, memory=Memory(rss=379.69140625, vms=382.6640625), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2353203999999991, solving_time=0.03342339999999666, total_time=0.26874379999999576, memory=Memory(rss=379.69140625, vms=382.6640625), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 103306.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 316895.0, 'bodies_tr': 316895.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5286.0, 'count_bodies_tr': 5286.0, 'sccs': 595.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12570.0, 'rules': 446377.0, 'rules_normal': 440595.0, 'rules_choice': 5418.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 446291.0, 'rules_tr_normal': 440595.0, 'rules_tr_choice': 5418.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 234709.0, 'eqs_atom': 49527.0, 'eqs_body': 7169.0, 'eqs_other': 178013.0}, 'lpStep': {'atoms': 3290.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11253.0, 'bodies_tr': 11253.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16535.0, 'rules_normal': 16326.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16529.0, 'rules_tr_normal': 16326.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11778.0, 'eqs_atom': 1680.0, 'eqs_body': 383.0, 'eqs_other': 9715.0}, 'generator': {'vars': 54397.0, 'vars_eliminated': 0.0, 'vars_frozen': 33324.0, 'constraints': 1103.0, 'constraints_binary': 45074.0, 'constraints_ternary': 6003.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 33.0, 'conflicts': 36.0, 'conflicts_analyzed': 30.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 29.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 31.0, 'integrated': 102.0, 'lemmas': 115.0, 'lits_learnt': 147.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 86.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 2310.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 3.0, 'lemmas_other': 86.0, 'lits_conflict': 31.0, 'lits_loop': 27.0, 'lits_other': 89.0, 'jumps': {'jumps': 30.0, 'jumps_bounded': 22.0, 'levels': 6972.0, 'levels_bounded': 6942.0, 'max': 332.0, 'max_executed': 331.0, 'max_bounded': 331.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [24.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2732715606689453, 'cpu': 0.25, 'solve': 0.005985260009765625, 'unsat': 0.005985260009765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.072650909423828, 'cpu': 14.5, 'solve': 1.8627605438232422, 'unsat': 0.8321704864501953, 'sat': 0.46662139892578125}, 'models': {'enumerated': 41.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 32639.0, 'conflicts': 5831.0, 'conflicts_analyzed': 5531.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4772.0, 'models': 41.0, 'models_level': 13769.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4751.0, 'distributed_sum_lbd': 11515.0, 'integrated': 27605.0, 'lemmas': 38935.0, 'lits_learnt': 3653574.0, 'lemmas_binary': 3846.0, 'lemmas_ternary': 2045.0, 'cpu_time': 7.359375, 'integrated_imps': 8550.0, 'integrated_jumps': 5913.0, 'guiding_paths_lits': 29814.0, 'guiding_paths': 381.0, 'splits': 0.0, 'lemmas_conflict': 5454.0, 'lemmas_loop': 8228.0, 'lemmas_other': 25253.0, 'lits_conflict': 673310.0, 'lits_loop': 69814.0, 'lits_other': 2910450.0, 'jumps': {'jumps': 5531.0, 'jumps_bounded': 878.0, 'levels': 140751.0, 'levels_bounded': 130996.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254529s.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032794s with result Unsatisfiable.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.28732360000000057, Incremental time limit = None
Running cumulative time = 9.099600500000019, Cumulative time limit = 3600
Used memory = (RSS = 382.000000Mb, VMS = 383.320312Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.790201500000016, solving_time=2.3093990000000026, total_time=9.099600500000019, memory=Memory(rss=382.0, vms=383.3203125), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25452920000000034, solving_time=0.03279440000000022, total_time=0.28732360000000057, memory=Memory(rss=382.0, vms=383.3203125), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 106609.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 328681.0, 'bodies_tr': 328681.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5487.0, 'count_bodies_tr': 5487.0, 'sccs': 620.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13056.0, 'rules': 463582.0, 'rules_normal': 457591.0, 'rules_choice': 5613.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 463494.0, 'rules_tr_normal': 457591.0, 'rules_tr_choice': 5613.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 236.0, 'eqs': 243782.0, 'eqs_atom': 51080.0, 'eqs_body': 7302.0, 'eqs_other': 185400.0}, 'lpStep': {'atoms': 3303.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11786.0, 'bodies_tr': 11786.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17205.0, 'rules_normal': 16996.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17203.0, 'rules_tr_normal': 16996.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9073.0, 'eqs_atom': 1553.0, 'eqs_body': 133.0, 'eqs_other': 7387.0}, 'generator': {'vars': 56498.0, 'vars_eliminated': 0.0, 'vars_frozen': 34645.0, 'constraints': 1589.0, 'constraints_binary': 56718.0, 'constraints_ternary': 8568.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 279.0, 'conflicts': 108.0, 'conflicts_analyzed': 100.0, 'restarts': 0.0, 'restarts_last': 25.0, 'extra': {'domain_choices': 55.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 92.0, 'distributed_sum_lbd': 188.0, 'integrated': 464.0, 'lemmas': 701.0, 'lits_learnt': 8404.0, 'lemmas_binary': 38.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 251.0, 'integrated_jumps': 80.0, 'guiding_paths_lits': 2443.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 99.0, 'lemmas_loop': 184.0, 'lemmas_other': 418.0, 'lits_conflict': 1835.0, 'lits_loop': 1367.0, 'lits_other': 5202.0, 'jumps': {'jumps': 100.0, 'jumps_bounded': 37.0, 'levels': 11590.0, 'levels_bounded': 11399.0, 'max': 370.0, 'max_executed': 370.0, 'max_bounded': 369.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2902240753173828, 'cpu': 0.3125, 'solve': 0.008975982666015625, 'unsat': 0.008975982666015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.362874984741211, 'cpu': 14.8125, 'solve': 1.8717365264892578, 'unsat': 0.8411464691162109, 'sat': 0.46662139892578125}, 'models': {'enumerated': 41.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 32918.0, 'conflicts': 5939.0, 'conflicts_analyzed': 5631.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4827.0, 'models': 41.0, 'models_level': 13769.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4843.0, 'distributed_sum_lbd': 11703.0, 'integrated': 28069.0, 'lemmas': 39636.0, 'lits_learnt': 3661978.0, 'lemmas_binary': 3884.0, 'lemmas_ternary': 2045.0, 'cpu_time': 7.390625, 'integrated_imps': 8801.0, 'integrated_jumps': 5993.0, 'guiding_paths_lits': 32257.0, 'guiding_paths': 391.0, 'splits': 0.0, 'lemmas_conflict': 5553.0, 'lemmas_loop': 8412.0, 'lemmas_other': 25671.0, 'lits_conflict': 675145.0, 'lits_loop': 71181.0, 'lits_other': 2915652.0, 'jumps': {'jumps': 5631.0, 'jumps_bounded': 915.0, 'levels': 152341.0, 'levels_bounded': 142395.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264553s.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070678s with result Satisfiable.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.33523049999999444, Incremental time limit = None
Running cumulative time = 9.434831000000013, Cumulative time limit = 3600
Used memory = (RSS = 386.484375Mb, VMS = 386.804688Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 43
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.054754s, Solving = 2.380077s, Total = 9.434831s, Memory = (RSS = 386.484375Mb, VMS = 386.804688Mb)), Calls = 28
Final Model :: Total atoms = 17672, Cost = (31, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.054754400000014, solving_time=2.380076599999999, total_time=9.434831000000013, memory=Memory(rss=386.484375, vms=386.8046875), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2645528999999982, solving_time=0.07067759999999623, total_time=0.33523049999999444, memory=Memory(rss=386.484375, vms=386.8046875), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 110167.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 340712.0, 'bodies_tr': 340712.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5688.0, 'count_bodies_tr': 5688.0, 'sccs': 645.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13542.0, 'rules': 481171.0, 'rules_normal': 474971.0, 'rules_choice': 5808.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 481081.0, 'rules_tr_normal': 474971.0, 'rules_tr_choice': 5808.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 246.0, 'eqs': 253199.0, 'eqs_atom': 52657.0, 'eqs_body': 7452.0, 'eqs_other': 193090.0}, 'lpStep': {'atoms': 3558.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12031.0, 'bodies_tr': 12031.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17589.0, 'rules_normal': 17380.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17587.0, 'rules_tr_normal': 17380.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9417.0, 'eqs_atom': 1577.0, 'eqs_body': 150.0, 'eqs_other': 7690.0}, 'generator': {'vars': 58608.0, 'vars_eliminated': 0.0, 'vars_frozen': 35970.0, 'constraints': 1770.0, 'constraints_binary': 62652.0, 'constraints_ternary': 9904.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 1996.0, 'conflicts': 120.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 56.0, 'models': 2.0, 'models_level': 1142.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 99.0, 'distributed_sum_lbd': 208.0, 'integrated': 571.0, 'lemmas': 824.0, 'lits_learnt': 10141.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.046875, 'integrated_imps': 269.0, 'integrated_jumps': 376.0, 'guiding_paths_lits': 2576.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 110.0, 'lemmas_loop': 187.0, 'lemmas_other': 527.0, 'lits_conflict': 1684.0, 'lits_loop': 1456.0, 'lits_other': 7001.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 31.0, 'levels': 11199.0, 'levels_bounded': 10973.0, 'max': 373.0, 'max_executed': 373.0, 'max_bounded': 369.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.34174156188964844, 'cpu': 0.34375, 'solve': 0.04288291931152344, 'unsat': 0.0169525146484375, 'sat': 0.008975982666015625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.70461654663086, 'cpu': 15.15625, 'solve': 1.9146194458007812, 'unsat': 0.8580989837646484, 'sat': 0.4755973815917969}, 'models': {'enumerated': 43.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 34914.0, 'conflicts': 6059.0, 'conflicts_analyzed': 5744.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4883.0, 'models': 43.0, 'models_level': 14911.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4942.0, 'distributed_sum_lbd': 11911.0, 'integrated': 28640.0, 'lemmas': 40460.0, 'lits_learnt': 3672119.0, 'lemmas_binary': 3940.0, 'lemmas_ternary': 2066.0, 'cpu_time': 7.4375, 'integrated_imps': 9070.0, 'integrated_jumps': 6369.0, 'guiding_paths_lits': 34833.0, 'guiding_paths': 404.0, 'splits': 0.0, 'lemmas_conflict': 5663.0, 'lemmas_loop': 8599.0, 'lemmas_other': 26198.0, 'lits_conflict': 676829.0, 'lits_loop': 72637.0, 'lits_other': 2922653.0, 'jumps': {'jumps': 5744.0, 'jumps_bounded': 946.0, 'levels': 163540.0, 'levels_bounded': 153368.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28}

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None)

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 28]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)

[15-11-2021_15-11-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322345s.

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(13,28).

[15-11-2021_15-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079571s with result Satisfiable.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.40191659999999274, Incremental time limit = None
Running cumulative time = 9.836747600000006, Cumulative time limit = 3600
Used memory = (RSS = 398.839844Mb, VMS = 398.132812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 45
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.377100s, Solving = 2.459648s, Total = 9.836748s, Memory = (RSS = 398.839844Mb, VMS = 398.132812Mb)), Calls = 29
Final Model :: Total atoms = 18056, Cost = (32, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.377099900000012, solving_time=2.4596476999999943, total_time=9.836747600000006, memory=Memory(rss=398.83984375, vms=398.1328125), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3223454999999973, solving_time=0.07957109999999545, total_time=0.40191659999999274, memory=Memory(rss=398.83984375, vms=398.1328125), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 113744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 352784.0, 'bodies_tr': 352784.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5889.0, 'count_bodies_tr': 5889.0, 'sccs': 670.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14028.0, 'rules': 498941.0, 'rules_normal': 492532.0, 'rules_choice': 6003.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 498849.0, 'rules_tr_normal': 492532.0, 'rules_tr_choice': 6003.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 256.0, 'eqs': 262718.0, 'eqs_atom': 54246.0, 'eqs_body': 7602.0, 'eqs_other': 200870.0}, 'lpStep': {'atoms': 3577.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12072.0, 'bodies_tr': 12072.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17770.0, 'rules_normal': 17561.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17768.0, 'rules_tr_normal': 17561.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9519.0, 'eqs_atom': 1589.0, 'eqs_body': 150.0, 'eqs_other': 7780.0}, 'generator': {'vars': 60734.0, 'vars_eliminated': 0.0, 'vars_frozen': 37302.0, 'constraints': 1964.0, 'constraints_binary': 68708.0, 'constraints_ternary': 11155.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 2422.0, 'conflicts': 64.0, 'conflicts_analyzed': 58.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 8.0, 'models': 2.0, 'models_level': 1173.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 58.0, 'distributed_sum_lbd': 58.0, 'integrated': 115.0, 'lemmas': 304.0, 'lits_learnt': 1272.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 115.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 2709.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 58.0, 'lemmas_loop': 131.0, 'lemmas_other': 115.0, 'lits_conflict': 58.0, 'lits_loop': 1099.0, 'lits_other': 115.0, 'jumps': {'jumps': 58.0, 'jumps_bounded': 0.0, 'levels': 58.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [32.0, 0.0], 'lower': [32.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.408935546875, 'cpu': 0.453125, 'solve': 0.051860809326171875, 'unsat': 0.018951416015625, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.11355209350586, 'cpu': 15.609375, 'solve': 1.9664802551269531, 'unsat': 0.8770503997802734, 'sat': 0.48258018493652344}, 'models': {'enumerated': 45.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 37336.0, 'conflicts': 6123.0, 'conflicts_analyzed': 5802.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4891.0, 'models': 45.0, 'models_level': 16084.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5000.0, 'distributed_sum_lbd': 11969.0, 'integrated': 28755.0, 'lemmas': 40764.0, 'lits_learnt': 3673391.0, 'lemmas_binary': 3940.0, 'lemmas_ternary': 2066.0, 'cpu_time': 7.53125, 'integrated_imps': 9185.0, 'integrated_jumps': 6376.0, 'guiding_paths_lits': 37542.0, 'guiding_paths': 417.0, 'splits': 0.0, 'lemmas_conflict': 5721.0, 'lemmas_loop': 8730.0, 'lemmas_other': 26313.0, 'lits_conflict': 676887.0, 'lits_loop': 73736.0, 'lits_other': 2922768.0, 'jumps': {'jumps': 5802.0, 'jumps_bounded': 946.0, 'levels': 163598.0, 'levels_bounded': 153368.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29}

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None)

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 29]:
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14)

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250408s.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(14,29).

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039272s with result Unsatisfiable.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2896801999999994, Incremental time limit = None
Running cumulative time = 10.126427800000005, Cumulative time limit = 3600
Used memory = (RSS = 402.128906Mb, VMS = 400.132812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.627507800000011, solving_time=2.4989199999999947, total_time=10.126427800000005, memory=Memory(rss=402.12890625, vms=400.1328125), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.250407899999999, solving_time=0.03927230000000037, total_time=0.2896801999999994, memory=Memory(rss=402.12890625, vms=400.1328125), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 117342.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 365230.0, 'bodies_tr': 365230.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6090.0, 'count_bodies_tr': 6090.0, 'sccs': 695.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14518.0, 'rules': 517399.0, 'rules_normal': 510781.0, 'rules_choice': 6198.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 517305.0, 'rules_tr_normal': 510781.0, 'rules_tr_choice': 6198.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 266.0, 'eqs': 277044.0, 'eqs_atom': 56047.0, 'eqs_body': 7786.0, 'eqs_other': 213211.0}, 'lpStep': {'atoms': 3598.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12446.0, 'bodies_tr': 12446.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 18458.0, 'rules_normal': 18249.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18456.0, 'rules_tr_normal': 18249.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 14326.0, 'eqs_atom': 1801.0, 'eqs_body': 184.0, 'eqs_other': 12341.0}, 'generator': {'vars': 63019.0, 'vars_eliminated': 0.0, 'vars_frozen': 38692.0, 'constraints': 2419.0, 'constraints_binary': 78676.0, 'constraints_ternary': 13181.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2842.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 30.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2952423095703125, 'cpu': 0.296875, 'solve': 0.007986068725585938, 'unsat': 0.007986068725585938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.408794403076172, 'cpu': 15.90625, 'solve': 1.974466323852539, 'unsat': 0.8850364685058594, 'sat': 0.48258018493652344}, 'models': {'enumerated': 45.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 37336.0, 'conflicts': 6131.0, 'conflicts_analyzed': 5802.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 4891.0, 'models': 45.0, 'models_level': 16084.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5000.0, 'distributed_sum_lbd': 11969.0, 'integrated': 28755.0, 'lemmas': 40764.0, 'lits_learnt': 3673391.0, 'lemmas_binary': 3940.0, 'lemmas_ternary': 2066.0, 'cpu_time': 7.546875, 'integrated_imps': 9185.0, 'integrated_jumps': 6376.0, 'guiding_paths_lits': 40384.0, 'guiding_paths': 424.0, 'splits': 0.0, 'lemmas_conflict': 5721.0, 'lemmas_loop': 8730.0, 'lemmas_other': 26313.0, 'lits_conflict': 676887.0, 'lits_loop': 73736.0, 'lits_other': 2922768.0, 'jumps': {'jumps': 5802.0, 'jumps_bounded': 946.0, 'levels': 163598.0, 'levels_bounded': 153368.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250967s.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085792s with result Satisfiable.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3367588999999924, Incremental time limit = None
Running cumulative time = 10.463186699999998, Cumulative time limit = 3600
Used memory = (RSS = 409.828125Mb, VMS = 405.949219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 47
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.878475s, Solving = 2.584712s, Total = 10.463187s, Memory = (RSS = 409.828125Mb, VMS = 405.949219Mb)), Calls = 31
Final Model :: Total atoms = 18821, Cost = (34, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.878475000000009, solving_time=2.584711699999989, total_time=10.463186699999998, memory=Memory(rss=409.828125, vms=405.94921875), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25096719999999806, solving_time=0.08579169999999436, total_time=0.3367588999999924, memory=Memory(rss=409.828125, vms=405.94921875), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 120968.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 378029.0, 'bodies_tr': 378029.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6291.0, 'count_bodies_tr': 6291.0, 'sccs': 720.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15112.0, 'rules': 536347.0, 'rules_normal': 529520.0, 'rules_choice': 6393.0, 'rules_minimize': 62.0, 'rules_acyc': 0.0, 'rules_heuristic': 372.0, 'rules_tr': 536253.0, 'rules_tr_normal': 529520.0, 'rules_tr_choice': 6393.0, 'rules_tr_minimize': 62.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 278.0, 'eqs': 285394.0, 'eqs_atom': 57818.0, 'eqs_body': 7856.0, 'eqs_other': 219720.0}, 'lpStep': {'atoms': 3626.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12799.0, 'bodies_tr': 12799.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 18948.0, 'rules_normal': 18739.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18948.0, 'rules_tr_normal': 18739.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8350.0, 'eqs_atom': 1771.0, 'eqs_body': 70.0, 'eqs_other': 6509.0}, 'generator': {'vars': 65650.0, 'vars_eliminated': 0.0, 'vars_frozen': 40293.0, 'constraints': 3055.0, 'constraints_binary': 94287.0, 'constraints_ternary': 17047.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 2625.0, 'conflicts': 221.0, 'conflicts_analyzed': 206.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 336.0, 'models': 2.0, 'models_level': 1330.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 175.0, 'distributed_sum_lbd': 386.0, 'integrated': 1024.0, 'lemmas': 1442.0, 'lits_learnt': 20007.0, 'lemmas_binary': 126.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.171875, 'integrated_imps': 448.0, 'integrated_jumps': 453.0, 'guiding_paths_lits': 2975.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 421.0, 'lemmas_other': 828.0, 'lits_conflict': 3753.0, 'lits_loop': 3404.0, 'lits_other': 12850.0, 'jumps': {'jumps': 206.0, 'jumps_bounded': 44.0, 'levels': 10344.0, 'levels_bounded': 10001.0, 'max': 774.0, 'max_executed': 774.0, 'max_bounded': 773.0}}}}, 'summary': {'call': 31.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [34.0, 0.0], 'lower': [34.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.34108924865722656, 'cpu': 0.453125, 'solve': 0.059841156005859375, 'unsat': 0.022939682006835938, 'sat': 0.015960693359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.749883651733398, 'cpu': 16.359375, 'solve': 2.0343074798583984, 'unsat': 0.9079761505126953, 'sat': 0.49854087829589844}, 'models': {'enumerated': 47.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 39961.0, 'conflicts': 6352.0, 'conflicts_analyzed': 6008.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 5227.0, 'models': 47.0, 'models_level': 17414.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5175.0, 'distributed_sum_lbd': 12355.0, 'integrated': 29779.0, 'lemmas': 42206.0, 'lits_learnt': 3693398.0, 'lemmas_binary': 4066.0, 'lemmas_ternary': 2122.0, 'cpu_time': 7.71875, 'integrated_imps': 9633.0, 'integrated_jumps': 6829.0, 'guiding_paths_lits': 43359.0, 'guiding_paths': 440.0, 'splits': 0.0, 'lemmas_conflict': 5914.0, 'lemmas_loop': 9151.0, 'lemmas_other': 27141.0, 'lits_conflict': 680640.0, 'lits_loop': 77140.0, 'lits_other': 2935618.0, 'jumps': {'jumps': 6008.0, 'jumps_bounded': 990.0, 'levels': 173942.0, 'levels_bounded': 163369.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31}

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None)

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 31]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 15)
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15)

[15-11-2021_15-11-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281112s.

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(15,31).

[15-11-2021_15-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.273174s with result Satisfiable.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5542860999999988, Incremental time limit = None
Running cumulative time = 11.017472799999997, Cumulative time limit = 3600
Used memory = (RSS = 420.789062Mb, VMS = 416.578125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 50
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.159587s, Solving = 2.857886s, Total = 11.017473s, Memory = (RSS = 420.789062Mb, VMS = 416.578125Mb)), Calls = 32
Final Model :: Total atoms = 19209, Cost = (36, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.159587000000009, solving_time=2.8578857999999876, total_time=11.017472799999997, memory=Memory(rss=420.7890625, vms=416.578125), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28111200000000025, solving_time=0.27317409999999853, total_time=0.5542860999999988, memory=Memory(rss=420.7890625, vms=416.578125), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 124728.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 390980.0, 'bodies_tr': 390980.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6492.0, 'count_bodies_tr': 6492.0, 'sccs': 745.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15706.0, 'rules': 555583.0, 'rules_normal': 548547.0, 'rules_choice': 6588.0, 'rules_minimize': 64.0, 'rules_acyc': 0.0, 'rules_heuristic': 384.0, 'rules_tr': 555489.0, 'rules_tr_normal': 548547.0, 'rules_tr_choice': 6588.0, 'rules_tr_minimize': 64.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 290.0, 'eqs': 293912.0, 'eqs_atom': 59609.0, 'eqs_body': 7932.0, 'eqs_other': 226371.0}, 'lpStep': {'atoms': 3760.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12951.0, 'bodies_tr': 12951.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19236.0, 'rules_normal': 19027.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19236.0, 'rules_tr_normal': 19027.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8518.0, 'eqs_atom': 1791.0, 'eqs_body': 76.0, 'eqs_other': 6651.0}, 'generator': {'vars': 68281.0, 'vars_eliminated': 0.0, 'vars_frozen': 41894.0, 'constraints': 3394.0, 'constraints_binary': 104019.0, 'constraints_ternary': 19162.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3588.0, 'conflicts': 109.0, 'conflicts_analyzed': 92.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 89.0, 'models': 3.0, 'models_level': 2344.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 116.0, 'integrated': 362.0, 'lemmas': 817.0, 'lits_learnt': 6386.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.671875, 'integrated_imps': 291.0, 'integrated_jumps': 1049.0, 'guiding_paths_lits': 3108.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 91.0, 'lemmas_loop': 394.0, 'lemmas_other': 332.0, 'lits_conflict': 982.0, 'lits_loop': 3059.0, 'lits_other': 2345.0, 'jumps': {'jumps': 92.0, 'jumps_bounded': 8.0, 'levels': 886.0, 'levels_bounded': 735.0, 'max': 544.0, 'max_executed': 34.0, 'max_bounded': 543.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.5637722015380859, 'cpu': 0.96875, 'solve': 0.24700164794921875, 'unsat': 0.19316482543945312, 'sat': 0.01393890380859375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.313655853271484, 'cpu': 17.328125, 'solve': 2.281309127807617, 'unsat': 1.1011409759521484, 'sat': 0.5124797821044922}, 'models': {'enumerated': 50.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 43549.0, 'conflicts': 6461.0, 'conflicts_analyzed': 6100.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 5316.0, 'models': 50.0, 'models_level': 19758.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5260.0, 'distributed_sum_lbd': 12471.0, 'integrated': 30141.0, 'lemmas': 43023.0, 'lits_learnt': 3699784.0, 'lemmas_binary': 4108.0, 'lemmas_ternary': 2155.0, 'cpu_time': 8.390625, 'integrated_imps': 9924.0, 'integrated_jumps': 7878.0, 'guiding_paths_lits': 46467.0, 'guiding_paths': 457.0, 'splits': 0.0, 'lemmas_conflict': 6005.0, 'lemmas_loop': 9545.0, 'lemmas_other': 27473.0, 'lits_conflict': 681622.0, 'lits_loop': 80199.0, 'lits_other': 2937963.0, 'jumps': {'jumps': 6100.0, 'jumps_bounded': 998.0, 'levels': 174828.0, 'levels_bounded': 164104.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32}

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None)

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 32]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16)
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.277160s.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(16,32).

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047405s with result Unsatisfiable.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.32456499999999977, Incremental time limit = None
Running cumulative time = 11.342037799999996, Cumulative time limit = 3600
Used memory = (RSS = 428.007812Mb, VMS = 441.359375Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=8.436746500000012, solving_time=2.905291299999984, total_time=11.342037799999996, memory=Memory(rss=428.0078125, vms=441.359375), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27715950000000333, solving_time=0.04740549999999644, total_time=0.32456499999999977, memory=Memory(rss=428.0078125, vms=441.359375), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 128501.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 404055.0, 'bodies_tr': 404055.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6693.0, 'count_bodies_tr': 6693.0, 'sccs': 770.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16300.0, 'rules': 575163.0, 'rules_normal': 567918.0, 'rules_choice': 6783.0, 'rules_minimize': 66.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 575069.0, 'rules_tr_normal': 567918.0, 'rules_tr_choice': 6783.0, 'rules_tr_minimize': 66.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 302.0, 'eqs': 302680.0, 'eqs_atom': 61494.0, 'eqs_body': 8002.0, 'eqs_other': 233184.0}, 'lpStep': {'atoms': 3773.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13075.0, 'bodies_tr': 13075.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19580.0, 'rules_normal': 19371.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19580.0, 'rules_tr_normal': 19371.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8768.0, 'eqs_atom': 1885.0, 'eqs_body': 70.0, 'eqs_other': 6813.0}, 'generator': {'vars': 70946.0, 'vars_eliminated': 0.0, 'vars_frozen': 43501.0, 'constraints': 3853.0, 'constraints_binary': 115724.0, 'constraints_ternary': 21675.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3.0, 'conflicts': 10.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 3.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 35.0, 'lits_learnt': 278.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3241.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 33.0, 'lemmas_other': 0.0, 'lits_conflict': 4.0, 'lits_loop': 274.0, 'lits_other': 0.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3308696746826172, 'cpu': 0.421875, 'solve': 0.014959335327148438, 'unsat': 0.014959335327148438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.644525527954102, 'cpu': 17.75, 'solve': 2.2962684631347656, 'unsat': 1.1161003112792969, 'sat': 0.5124797821044922}, 'models': {'enumerated': 50.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 43552.0, 'conflicts': 6471.0, 'conflicts_analyzed': 6103.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 5319.0, 'models': 50.0, 'models_level': 19758.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5262.0, 'distributed_sum_lbd': 12475.0, 'integrated': 30141.0, 'lemmas': 43058.0, 'lits_learnt': 3700062.0, 'lemmas_binary': 4110.0, 'lemmas_ternary': 2155.0, 'cpu_time': 8.5, 'integrated_imps': 9924.0, 'integrated_jumps': 7878.0, 'guiding_paths_lits': 49708.0, 'guiding_paths': 464.0, 'splits': 0.0, 'lemmas_conflict': 6007.0, 'lemmas_loop': 9578.0, 'lemmas_other': 27473.0, 'lits_conflict': 681626.0, 'lits_loop': 80473.0, 'lits_other': 2937963.0, 'jumps': {'jumps': 6103.0, 'jumps_bounded': 1001.0, 'levels': 174836.0, 'levels_bounded': 164109.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.300818s.

[15-11-2021_15-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.144155s with result Satisfiable.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4449723999999975, Incremental time limit = None
Running cumulative time = 11.787010199999994, Cumulative time limit = 3600
Used memory = (RSS = 443.070312Mb, VMS = 454.914062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 53
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.737564s, Solving = 3.049446s, Total = 11.787010s, Memory = (RSS = 443.070312Mb, VMS = 454.914062Mb)), Calls = 34
Final Model :: Total atoms = 19983, Cost = (39, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.73756430000001, solving_time=3.0494458999999843, total_time=11.787010199999994, memory=Memory(rss=443.0703125, vms=454.9140625), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30081779999999725, solving_time=0.14415460000000024, total_time=0.4449723999999975, memory=Memory(rss=443.0703125, vms=454.9140625), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 132273.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 417162.0, 'bodies_tr': 417162.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6894.0, 'count_bodies_tr': 6894.0, 'sccs': 795.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16894.0, 'rules': 594911.0, 'rules_normal': 587457.0, 'rules_choice': 6978.0, 'rules_minimize': 68.0, 'rules_acyc': 0.0, 'rules_heuristic': 408.0, 'rules_tr': 594817.0, 'rules_tr_normal': 587457.0, 'rules_tr_choice': 6978.0, 'rules_tr_minimize': 68.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 314.0, 'eqs': 311526.0, 'eqs_atom': 63393.0, 'eqs_body': 8072.0, 'eqs_other': 240061.0}, 'lpStep': {'atoms': 3772.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13107.0, 'bodies_tr': 13107.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19748.0, 'rules_normal': 19539.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19748.0, 'rules_tr_normal': 19539.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8846.0, 'eqs_atom': 1899.0, 'eqs_body': 70.0, 'eqs_other': 6877.0}, 'generator': {'vars': 73611.0, 'vars_eliminated': 0.0, 'vars_frozen': 45108.0, 'constraints': 4500.0, 'constraints_binary': 131873.0, 'constraints_ternary': 25740.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3609.0, 'conflicts': 198.0, 'conflicts_analyzed': 184.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 478.0, 'models': 3.0, 'models_level': 2626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 157.0, 'distributed_sum_lbd': 392.0, 'integrated': 881.0, 'lemmas': 1689.0, 'lits_learnt': 43650.0, 'lemmas_binary': 155.0, 'lemmas_ternary': 139.0, 'cpu_time': 0.59375, 'integrated_imps': 313.0, 'integrated_jumps': 548.0, 'guiding_paths_lits': 3374.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 182.0, 'lemmas_loop': 713.0, 'lemmas_other': 794.0, 'lits_conflict': 8405.0, 'lits_loop': 6232.0, 'lits_other': 29013.0, 'jumps': {'jumps': 184.0, 'jumps_bounded': 37.0, 'levels': 9128.0, 'levels_bounded': 8754.0, 'max': 971.0, 'max_executed': 971.0, 'max_bounded': 970.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [39.0, 0.0], 'lower': [39.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.45079612731933594, 'cpu': 0.890625, 'solve': 0.11668968200683594, 'unsat': 0.04488182067871094, 'sat': 0.022939682006835938}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 12.095321655273438, 'cpu': 18.640625, 'solve': 2.4129581451416016, 'unsat': 1.1609821319580078, 'sat': 0.5354194641113281}, 'models': {'enumerated': 53.0, 'optimal': 16.0}, 'solving': {'solvers': {'choices': 47161.0, 'conflicts': 6669.0, 'conflicts_analyzed': 6287.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 5797.0, 'models': 53.0, 'models_level': 22384.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5419.0, 'distributed_sum_lbd': 12867.0, 'integrated': 31022.0, 'lemmas': 44747.0, 'lits_learnt': 3743712.0, 'lemmas_binary': 4265.0, 'lemmas_ternary': 2294.0, 'cpu_time': 9.09375, 'integrated_imps': 10237.0, 'integrated_jumps': 8426.0, 'guiding_paths_lits': 53082.0, 'guiding_paths': 481.0, 'splits': 0.0, 'lemmas_conflict': 6189.0, 'lemmas_loop': 10291.0, 'lemmas_other': 28267.0, 'lits_conflict': 690031.0, 'lits_loop': 86705.0, 'lits_other': 2966976.0, 'jumps': {'jumps': 6287.0, 'jumps_bounded': 1038.0, 'levels': 183964.0, 'levels_bounded': 172863.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34}

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None)

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 34]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17)
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17)

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280591s.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(17,34).

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.129652s with result Satisfiable.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4102427999999989, Incremental time limit = None
Running cumulative time = 12.197252999999993, Cumulative time limit = 3600
Used memory = (RSS = 457.222656Mb, VMS = 467.375000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 56
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.018155s, Solving = 3.179098s, Total = 12.197253s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)), Calls = 35
Final Model :: Total atoms = 20373, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=35, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.018154800000012, solving_time=3.179098199999981, total_time=12.197252999999993, memory=Memory(rss=457.22265625, vms=467.375), step_range=range(0, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2805905000000024, solving_time=0.1296522999999965, total_time=0.4102427999999989, memory=Memory(rss=457.22265625, vms=467.375), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 136059.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 430301.0, 'bodies_tr': 430301.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7095.0, 'count_bodies_tr': 7095.0, 'sccs': 820.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17488.0, 'rules': 614827.0, 'rules_normal': 607164.0, 'rules_choice': 7173.0, 'rules_minimize': 70.0, 'rules_acyc': 0.0, 'rules_heuristic': 420.0, 'rules_tr': 614733.0, 'rules_tr_normal': 607164.0, 'rules_tr_choice': 7173.0, 'rules_tr_minimize': 70.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 326.0, 'eqs': 320450.0, 'eqs_atom': 65306.0, 'eqs_body': 8142.0, 'eqs_other': 247002.0}, 'lpStep': {'atoms': 3786.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13139.0, 'bodies_tr': 13139.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19916.0, 'rules_normal': 19707.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19916.0, 'rules_tr_normal': 19707.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8924.0, 'eqs_atom': 1913.0, 'eqs_body': 70.0, 'eqs_other': 6941.0}, 'generator': {'vars': 76276.0, 'vars_eliminated': 0.0, 'vars_frozen': 46715.0, 'constraints': 5147.0, 'constraints_binary': 148128.0, 'constraints_ternary': 29735.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3400.0, 'conflicts': 150.0, 'conflicts_analyzed': 135.0, 'restarts': 0.0, 'restarts_last': 28.0, 'extra': {'domain_choices': 212.0, 'models': 3.0, 'models_level': 2233.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 183.0, 'integrated': 269.0, 'lemmas': 602.0, 'lits_learnt': 37306.0, 'lemmas_binary': 45.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.296875, 'integrated_imps': 64.0, 'integrated_jumps': 211.0, 'guiding_paths_lits': 3507.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 135.0, 'lemmas_loop': 204.0, 'lemmas_other': 263.0, 'lits_conflict': 12887.0, 'lits_loop': 1865.0, 'lits_other': 22554.0, 'jumps': {'jumps': 135.0, 'jumps_bounded': 11.0, 'levels': 1641.0, 'levels_bounded': 1464.0, 'max': 654.0, 'max_executed': 654.0, 'max_bounded': 652.0}}}}, 'summary': {'call': 35.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [41.0, 0.0], 'lower': [41.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.41588783264160156, 'cpu': 0.640625, 'solve': 0.09773063659667969, 'unsat': 0.030918121337890625, 'sat': 0.013956069946289062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 12.511209487915039, 'cpu': 19.28125, 'solve': 2.5106887817382812, 'unsat': 1.1919002532958984, 'sat': 0.5493755340576172}, 'models': {'enumerated': 56.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 50561.0, 'conflicts': 6819.0, 'conflicts_analyzed': 6422.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6009.0, 'models': 56.0, 'models_level': 24617.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5487.0, 'distributed_sum_lbd': 13050.0, 'integrated': 31291.0, 'lemmas': 45349.0, 'lits_learnt': 3781018.0, 'lemmas_binary': 4310.0, 'lemmas_ternary': 2329.0, 'cpu_time': 9.390625, 'integrated_imps': 10301.0, 'integrated_jumps': 8637.0, 'guiding_paths_lits': 56589.0, 'guiding_paths': 500.0, 'splits': 0.0, 'lemmas_conflict': 6324.0, 'lemmas_loop': 10495.0, 'lemmas_other': 28530.0, 'lits_conflict': 702918.0, 'lits_loop': 88570.0, 'lits_other': 2989530.0, 'jumps': {'jumps': 6422.0, 'jumps_bounded': 1049.0, 'levels': 185605.0, 'levels_bounded': 174327.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34, 17: 35}

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.284128s, Solving = 0.012072s, Total = 0.296200s, Memory = (RSS = 206.820312Mb, VMS = 198.023438Mb)
2 : Statistics :: Grounding = 0.177001s, Solving = 0.009038s, Total = 0.186039s, Memory = (RSS = 210.468750Mb, VMS = 201.750000Mb)
3 : Statistics :: Grounding = 0.214026s, Solving = 0.056852s, Total = 0.270878s, Memory = (RSS = 212.648438Mb, VMS = 204.187500Mb)
4 : Statistics :: Grounding = 0.217635s, Solving = 0.007007s, Total = 0.224643s, Memory = (RSS = 214.257812Mb, VMS = 205.769531Mb)
5 : Statistics :: Grounding = 0.231906s, Solving = 0.009234s, Total = 0.241140s, Memory = (RSS = 218.136719Mb, VMS = 210.210938Mb)
6 : Statistics :: Grounding = 0.214007s, Solving = 0.013613s, Total = 0.227620s, Memory = (RSS = 222.246094Mb, VMS = 214.910156Mb)
7 : Statistics :: Grounding = 0.232535s, Solving = 0.015558s, Total = 0.248093s, Memory = (RSS = 226.152344Mb, VMS = 218.300781Mb)
8 : Statistics :: Grounding = 0.243459s, Solving = 0.019678s, Total = 0.263137s, Memory = (RSS = 232.339844Mb, VMS = 225.277344Mb)
9 : Statistics :: Grounding = 0.248449s, Solving = 0.027743s, Total = 0.276192s, Memory = (RSS = 236.246094Mb, VMS = 228.507812Mb)
10 : Statistics :: Grounding = 0.266833s, Solving = 0.030000s, Total = 0.296833s, Memory = (RSS = 244.566406Mb, VMS = 238.484375Mb)
11 : Statistics :: Grounding = 0.252803s, Solving = 0.042466s, Total = 0.295269s, Memory = (RSS = 248.804688Mb, VMS = 242.238281Mb)
12 : Statistics :: Grounding = 0.246769s, Solving = 0.065091s, Total = 0.311860s, Memory = (RSS = 258.699219Mb, VMS = 255.296875Mb)
13 : Statistics :: Grounding = 0.262959s, Solving = 0.103116s, Total = 0.366075s, Memory = (RSS = 264.894531Mb, VMS = 260.121094Mb)
14 : Statistics :: Grounding = 0.267125s, Solving = 0.039150s, Total = 0.306275s, Memory = (RSS = 268.644531Mb, VMS = 262.925781Mb)
15 : Statistics :: Grounding = 0.267509s, Solving = 0.269818s, Total = 0.537327s, Memory = (RSS = 283.707031Mb, VMS = 277.468750Mb)
16 : Statistics :: Grounding = 0.268780s, Solving = 0.066745s, Total = 0.335525s, Memory = (RSS = 295.007812Mb, VMS = 296.117188Mb)
17 : Statistics :: Grounding = 0.270245s, Solving = 0.196221s, Total = 0.466466s, Memory = (RSS = 307.492188Mb, VMS = 307.335938Mb)
18 : Statistics :: Grounding = 0.268724s, Solving = 0.082561s, Total = 0.351284s, Memory = (RSS = 316.988281Mb, VMS = 315.171875Mb)
19 : Statistics :: Grounding = 0.270026s, Solving = 0.166364s, Total = 0.436390s, Memory = (RSS = 327.851562Mb, VMS = 324.691406Mb)
20 : Statistics :: Grounding = 0.279604s, Solving = 0.034192s, Total = 0.313796s, Memory = (RSS = 332.535156Mb, VMS = 328.101562Mb)
21 : Statistics :: Grounding = 0.273420s, Solving = 0.261086s, Total = 0.534506s, Memory = (RSS = 340.019531Mb, VMS = 334.746094Mb)
22 : Statistics :: Grounding = 0.283492s, Solving = 0.401929s, Total = 0.685421s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)
23 : Statistics :: Grounding = 0.280093s, Solving = 0.121760s, Total = 0.401853s, Memory = (RSS = 372.664062Mb, VMS = 377.468750Mb)
24 : Statistics :: Grounding = 0.241840s, Solving = 0.025851s, Total = 0.267691s, Memory = (RSS = 374.117188Mb, VMS = 378.449219Mb)
25 : Statistics :: Grounding = 0.236984s, Solving = 0.166035s, Total = 0.403019s, Memory = (RSS = 378.312500Mb, VMS = 381.964844Mb)
26 : Statistics :: Grounding = 0.235320s, Solving = 0.033423s, Total = 0.268744s, Memory = (RSS = 379.691406Mb, VMS = 382.664062Mb)
27 : Statistics :: Grounding = 0.254529s, Solving = 0.032794s, Total = 0.287324s, Memory = (RSS = 382.000000Mb, VMS = 383.320312Mb)
28 : Statistics :: Grounding = 0.264553s, Solving = 0.070678s, Total = 0.335230s, Memory = (RSS = 386.484375Mb, VMS = 386.804688Mb)
29 : Statistics :: Grounding = 0.322345s, Solving = 0.079571s, Total = 0.401917s, Memory = (RSS = 398.839844Mb, VMS = 398.132812Mb)
30 : Statistics :: Grounding = 0.250408s, Solving = 0.039272s, Total = 0.289680s, Memory = (RSS = 402.128906Mb, VMS = 400.132812Mb)
31 : Statistics :: Grounding = 0.250967s, Solving = 0.085792s, Total = 0.336759s, Memory = (RSS = 409.828125Mb, VMS = 405.949219Mb)
32 : Statistics :: Grounding = 0.281112s, Solving = 0.273174s, Total = 0.554286s, Memory = (RSS = 420.789062Mb, VMS = 416.578125Mb)
33 : Statistics :: Grounding = 0.277160s, Solving = 0.047405s, Total = 0.324565s, Memory = (RSS = 428.007812Mb, VMS = 441.359375Mb)
34 : Statistics :: Grounding = 0.300818s, Solving = 0.144155s, Total = 0.444972s, Memory = (RSS = 443.070312Mb, VMS = 454.914062Mb)
35 : Statistics :: Grounding = 0.280591s, Solving = 0.129652s, Total = 0.410243s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 12.197253s due to: External generator exit.

[15-11-2021_15-11-51] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_15-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.018155s, Solving = 3.179098s, Total = 12.197253s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)), Calls = 35
Model :: Total atoms = 20373, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 35 :: Actions = 44                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 2 : Total constraining sgoals = 17 : Achieved sgoals = 17 : Unachieved sgoals = 0

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.792s (Gro =   1.543s, Sea =   0.249s), Expan (L=1.00, A=1.00) (Dev = (L=0.00, A=0.00), Bal = (L=0.00, A=0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-14]

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [8-14], problem number = 2, increment number = 3

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 14)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 8
last_sgoals = 14
start_step = 18
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 24

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [8-14] : Minimum search length bound = disabled with value = 24

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14})

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 9).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(3, talos, move(store_room), in(talos), store_room, 11).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14).

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190BBCE2950>

[15-11-2021_15-11-52] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_15-11-52] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190BBCE2950> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(2, talos, move(hallway), 1)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 2)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 2)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, actuate(manipulator_arm_1,puzzle_room_door), 4)).
fix_action(occurs(2, talos, actuate(manipulator_arm_2,store_room_door), 4)).
fix_action(occurs(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 6)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 6)).
fix_action(occurs(2, talos, move(store_room), 7)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 8)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 8)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,6)), 9)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,5)), 9)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 10)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 10)).
fix_action(occurs(2, talos, move(hallway), 11)).
fix_action(occurs(2, talos, move(puzzle_room), 12)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 13)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), 14)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 15)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,6)), 15)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,3)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,5),(block,6)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), 17)).
fix_action(occurs(2, talos, release(manipulator_arm_2,(block,5)), 17)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,2)), 18)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,3)), 18)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_15-11-52] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190BBCE2950> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(3, complete(blue), false, 0)).
fix_fluent(holds(3, complete(red), false, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,4)), store_room, 0)).
fix_fluent(holds(3, in((block,5)), store_room, 0)).
fix_fluent(holds(3, in((block,6)), store_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(3, in(talos), starting_room, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,3)), (block,1), 0)).
fix_fluent(holds(3, on((block,4)), nothing, 0)).
fix_fluent(holds(3, on((block,5)), nothing, 0)).
fix_fluent(holds(3, on((block,6)), nothing, 0)).
fix_fluent(holds(3, tower_base((block,1)), true, 0)).
fix_fluent(holds(3, tower_base((block,2)), true, 0)).
fix_fluent(holds(3, tower_base((block,3)), false, 0)).
fix_fluent(holds(3, tower_base((block,4)), false, 0)).
fix_fluent(holds(3, tower_base((block,5)), false, 0)).
fix_fluent(holds(3, tower_base((block,6)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), hallway, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(3, complete(blue), false, 1)).
fix_fluent(holds(3, complete(red), false, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,4)), store_room, 1)).
fix_fluent(holds(3, in((block,5)), store_room, 1)).
fix_fluent(holds(3, in((block,6)), store_room, 1)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(3, in(talos), hallway, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,3)), (block,1), 1)).
fix_fluent(holds(3, on((block,4)), nothing, 1)).
fix_fluent(holds(3, on((block,5)), nothing, 1)).
fix_fluent(holds(3, on((block,6)), nothing, 1)).
fix_fluent(holds(3, tower_base((block,1)), true, 1)).
fix_fluent(holds(3, tower_base((block,2)), true, 1)).
fix_fluent(holds(3, tower_base((block,3)), false, 1)).
fix_fluent(holds(3, tower_base((block,4)), false, 1)).
fix_fluent(holds(3, tower_base((block,5)), false, 1)).
fix_fluent(holds(3, tower_base((block,6)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(3, complete(blue), false, 2)).
fix_fluent(holds(3, complete(red), false, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,4)), store_room, 2)).
fix_fluent(holds(3, in((block,5)), store_room, 2)).
fix_fluent(holds(3, in((block,6)), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(3, in(talos), hallway, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,3)), (block,1), 2)).
fix_fluent(holds(3, on((block,4)), nothing, 2)).
fix_fluent(holds(3, on((block,5)), nothing, 2)).
fix_fluent(holds(3, on((block,6)), nothing, 2)).
fix_fluent(holds(3, tower_base((block,1)), true, 2)).
fix_fluent(holds(3, tower_base((block,2)), true, 2)).
fix_fluent(holds(3, tower_base((block,3)), false, 2)).
fix_fluent(holds(3, tower_base((block,4)), false, 2)).
fix_fluent(holds(3, tower_base((block,5)), false, 2)).
fix_fluent(holds(3, tower_base((block,6)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(3, complete(blue), false, 3)).
fix_fluent(holds(3, complete(red), false, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,4)), store_room, 3)).
fix_fluent(holds(3, in((block,5)), store_room, 3)).
fix_fluent(holds(3, in((block,6)), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(3, in(talos), hallway, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,3)), (block,1), 3)).
fix_fluent(holds(3, on((block,4)), nothing, 3)).
fix_fluent(holds(3, on((block,5)), nothing, 3)).
fix_fluent(holds(3, on((block,6)), nothing, 3)).
fix_fluent(holds(3, tower_base((block,1)), true, 3)).
fix_fluent(holds(3, tower_base((block,2)), true, 3)).
fix_fluent(holds(3, tower_base((block,3)), false, 3)).
fix_fluent(holds(3, tower_base((block,4)), false, 3)).
fix_fluent(holds(3, tower_base((block,5)), false, 3)).
fix_fluent(holds(3, tower_base((block,6)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), open, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(3, complete(blue), false, 4)).
fix_fluent(holds(3, complete(red), false, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,4)), store_room, 4)).
fix_fluent(holds(3, in((block,5)), store_room, 4)).
fix_fluent(holds(3, in((block,6)), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(3, in(talos), hallway, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,3)), (block,1), 4)).
fix_fluent(holds(3, on((block,4)), nothing, 4)).
fix_fluent(holds(3, on((block,5)), nothing, 4)).
fix_fluent(holds(3, on((block,6)), nothing, 4)).
fix_fluent(holds(3, tower_base((block,1)), true, 4)).
fix_fluent(holds(3, tower_base((block,2)), true, 4)).
fix_fluent(holds(3, tower_base((block,3)), false, 4)).
fix_fluent(holds(3, tower_base((block,4)), false, 4)).
fix_fluent(holds(3, tower_base((block,5)), false, 4)).
fix_fluent(holds(3, tower_base((block,6)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), open, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(3, complete(blue), false, 5)).
fix_fluent(holds(3, complete(red), false, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,4)), store_room, 5)).
fix_fluent(holds(3, in((block,5)), store_room, 5)).
fix_fluent(holds(3, in((block,6)), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(3, in(talos), hallway, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,3)), (block,1), 5)).
fix_fluent(holds(3, on((block,4)), nothing, 5)).
fix_fluent(holds(3, on((block,5)), nothing, 5)).
fix_fluent(holds(3, on((block,6)), nothing, 5)).
fix_fluent(holds(3, tower_base((block,1)), true, 5)).
fix_fluent(holds(3, tower_base((block,2)), true, 5)).
fix_fluent(holds(3, tower_base((block,3)), false, 5)).
fix_fluent(holds(3, tower_base((block,4)), false, 5)).
fix_fluent(holds(3, tower_base((block,5)), false, 5)).
fix_fluent(holds(3, tower_base((block,6)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), open, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(3, complete(blue), false, 6)).
fix_fluent(holds(3, complete(red), false, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,4)), store_room, 6)).
fix_fluent(holds(3, in((block,5)), store_room, 6)).
fix_fluent(holds(3, in((block,6)), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(3, in(talos), hallway, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,3)), (block,1), 6)).
fix_fluent(holds(3, on((block,4)), nothing, 6)).
fix_fluent(holds(3, on((block,5)), nothing, 6)).
fix_fluent(holds(3, on((block,6)), nothing, 6)).
fix_fluent(holds(3, tower_base((block,1)), true, 6)).
fix_fluent(holds(3, tower_base((block,2)), true, 6)).
fix_fluent(holds(3, tower_base((block,3)), false, 6)).
fix_fluent(holds(3, tower_base((block,4)), false, 6)).
fix_fluent(holds(3, tower_base((block,5)), false, 6)).
fix_fluent(holds(3, tower_base((block,6)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), open, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(3, complete(blue), false, 7)).
fix_fluent(holds(3, complete(red), false, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,4)), store_room, 7)).
fix_fluent(holds(3, in((block,5)), store_room, 7)).
fix_fluent(holds(3, in((block,6)), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(3, in(talos), store_room, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,3)), (block,1), 7)).
fix_fluent(holds(3, on((block,4)), nothing, 7)).
fix_fluent(holds(3, on((block,5)), nothing, 7)).
fix_fluent(holds(3, on((block,6)), nothing, 7)).
fix_fluent(holds(3, tower_base((block,1)), true, 7)).
fix_fluent(holds(3, tower_base((block,2)), true, 7)).
fix_fluent(holds(3, tower_base((block,3)), false, 7)).
fix_fluent(holds(3, tower_base((block,4)), false, 7)).
fix_fluent(holds(3, tower_base((block,5)), false, 7)).
fix_fluent(holds(3, tower_base((block,6)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), open, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(3, complete(blue), false, 8)).
fix_fluent(holds(3, complete(red), false, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,4)), store_room, 8)).
fix_fluent(holds(3, in((block,5)), store_room, 8)).
fix_fluent(holds(3, in((block,6)), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(3, in(talos), store_room, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,3)), (block,1), 8)).
fix_fluent(holds(3, on((block,4)), nothing, 8)).
fix_fluent(holds(3, on((block,5)), nothing, 8)).
fix_fluent(holds(3, on((block,6)), nothing, 8)).
fix_fluent(holds(3, tower_base((block,1)), true, 8)).
fix_fluent(holds(3, tower_base((block,2)), true, 8)).
fix_fluent(holds(3, tower_base((block,3)), false, 8)).
fix_fluent(holds(3, tower_base((block,4)), false, 8)).
fix_fluent(holds(3, tower_base((block,5)), false, 8)).
fix_fluent(holds(3, tower_base((block,6)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), open, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(3, complete(blue), false, 9)).
fix_fluent(holds(3, complete(red), false, 9)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,4)), store_room, 9)).
fix_fluent(holds(3, in((block,5)), store_room, 9)).
fix_fluent(holds(3, in((block,6)), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(3, in(talos), store_room, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,3)), (block,1), 9)).
fix_fluent(holds(3, on((block,4)), nothing, 9)).
fix_fluent(holds(3, on((block,5)), nothing, 9)).
fix_fluent(holds(3, on((block,6)), nothing, 9)).
fix_fluent(holds(3, tower_base((block,1)), true, 9)).
fix_fluent(holds(3, tower_base((block,2)), true, 9)).
fix_fluent(holds(3, tower_base((block,3)), false, 9)).
fix_fluent(holds(3, tower_base((block,4)), false, 9)).
fix_fluent(holds(3, tower_base((block,5)), false, 9)).
fix_fluent(holds(3, tower_base((block,6)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), open, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(3, complete(blue), false, 10)).
fix_fluent(holds(3, complete(red), false, 10)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,4)), store_room, 10)).
fix_fluent(holds(3, in((block,5)), store_room, 10)).
fix_fluent(holds(3, in((block,6)), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(3, in(talos), store_room, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,3)), (block,1), 10)).
fix_fluent(holds(3, on((block,4)), nothing, 10)).
fix_fluent(holds(3, on((block,5)), nothing, 10)).
fix_fluent(holds(3, on((block,6)), nothing, 10)).
fix_fluent(holds(3, tower_base((block,1)), true, 10)).
fix_fluent(holds(3, tower_base((block,2)), true, 10)).
fix_fluent(holds(3, tower_base((block,3)), false, 10)).
fix_fluent(holds(3, tower_base((block,4)), false, 10)).
fix_fluent(holds(3, tower_base((block,5)), false, 10)).
fix_fluent(holds(3, tower_base((block,6)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), open, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), hallway, 11)).
fix_fluent(holds(2, in((block,6)), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(3, complete(blue), false, 11)).
fix_fluent(holds(3, complete(red), false, 11)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,4)), store_room, 11)).
fix_fluent(holds(3, in((block,5)), hallway, 11)).
fix_fluent(holds(3, in((block,6)), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(3, in(talos), hallway, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,3)), (block,1), 11)).
fix_fluent(holds(3, on((block,4)), nothing, 11)).
fix_fluent(holds(3, on((block,5)), nothing, 11)).
fix_fluent(holds(3, on((block,6)), nothing, 11)).
fix_fluent(holds(3, tower_base((block,1)), true, 11)).
fix_fluent(holds(3, tower_base((block,2)), true, 11)).
fix_fluent(holds(3, tower_base((block,3)), false, 11)).
fix_fluent(holds(3, tower_base((block,4)), false, 11)).
fix_fluent(holds(3, tower_base((block,5)), false, 11)).
fix_fluent(holds(3, tower_base((block,6)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), open, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), puzzle_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(3, complete(blue), false, 12)).
fix_fluent(holds(3, complete(red), false, 12)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,4)), store_room, 12)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(3, in(talos), puzzle_room, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,3)), (block,1), 12)).
fix_fluent(holds(3, on((block,4)), nothing, 12)).
fix_fluent(holds(3, on((block,5)), nothing, 12)).
fix_fluent(holds(3, on((block,6)), nothing, 12)).
fix_fluent(holds(3, tower_base((block,1)), true, 12)).
fix_fluent(holds(3, tower_base((block,2)), true, 12)).
fix_fluent(holds(3, tower_base((block,3)), false, 12)).
fix_fluent(holds(3, tower_base((block,4)), false, 12)).
fix_fluent(holds(3, tower_base((block,5)), false, 12)).
fix_fluent(holds(3, tower_base((block,6)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), open, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), puzzle_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(3, complete(blue), false, 13)).
fix_fluent(holds(3, complete(red), false, 13)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,4)), store_room, 13)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(3, in(talos), puzzle_room, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,3)), (block,1), 13)).
fix_fluent(holds(3, on((block,4)), nothing, 13)).
fix_fluent(holds(3, on((block,5)), nothing, 13)).
fix_fluent(holds(3, on((block,6)), nothing, 13)).
fix_fluent(holds(3, tower_base((block,1)), true, 13)).
fix_fluent(holds(3, tower_base((block,2)), true, 13)).
fix_fluent(holds(3, tower_base((block,3)), false, 13)).
fix_fluent(holds(3, tower_base((block,4)), false, 13)).
fix_fluent(holds(3, tower_base((block,5)), false, 13)).
fix_fluent(holds(3, tower_base((block,6)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), open, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), puzzle_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(3, complete(blue), false, 14)).
fix_fluent(holds(3, complete(red), false, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,4)), store_room, 14)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(3, in(talos), puzzle_room, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,3)), (block,1), 14)).
fix_fluent(holds(3, on((block,4)), nothing, 14)).
fix_fluent(holds(3, on((block,5)), nothing, 14)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(3, tower_base((block,1)), true, 14)).
fix_fluent(holds(3, tower_base((block,2)), true, 14)).
fix_fluent(holds(3, tower_base((block,3)), false, 14)).
fix_fluent(holds(3, tower_base((block,4)), false, 14)).
fix_fluent(holds(3, tower_base((block,5)), false, 14)).
fix_fluent(holds(3, tower_base((block,6)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), puzzle_room, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(3, complete(blue), false, 15)).
fix_fluent(holds(3, complete(red), false, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,4)), store_room, 15)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(3, in(talos), puzzle_room, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,3)), (block,1), 15)).
fix_fluent(holds(3, on((block,4)), nothing, 15)).
fix_fluent(holds(3, on((block,5)), nothing, 15)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(3, tower_base((block,1)), true, 15)).
fix_fluent(holds(3, tower_base((block,2)), true, 15)).
fix_fluent(holds(3, tower_base((block,3)), false, 15)).
fix_fluent(holds(3, tower_base((block,4)), false, 15)).
fix_fluent(holds(3, tower_base((block,5)), false, 15)).
fix_fluent(holds(3, tower_base((block,6)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), puzzle_room, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), (block,6), 16)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(3, complete(blue), false, 16)).
fix_fluent(holds(3, complete(red), false, 16)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,4)), store_room, 16)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(3, in(talos), puzzle_room, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,3)), (block,1), 16)).
fix_fluent(holds(3, on((block,4)), nothing, 16)).
fix_fluent(holds(3, on((block,5)), (block,6), 16)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(3, tower_base((block,1)), true, 16)).
fix_fluent(holds(3, tower_base((block,2)), true, 16)).
fix_fluent(holds(3, tower_base((block,3)), false, 16)).
fix_fluent(holds(3, tower_base((block,4)), false, 16)).
fix_fluent(holds(3, tower_base((block,5)), false, 16)).
fix_fluent(holds(3, tower_base((block,6)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), puzzle_room, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), (block,6), 17)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), true, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(3, complete(blue), false, 17)).
fix_fluent(holds(3, complete(red), false, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,4)), store_room, 17)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(3, in(talos), puzzle_room, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,4)), nothing, 17)).
fix_fluent(holds(3, on((block,5)), (block,6), 17)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(3, tower_base((block,1)), true, 17)).
fix_fluent(holds(3, tower_base((block,2)), true, 17)).
fix_fluent(holds(3, tower_base((block,3)), true, 17)).
fix_fluent(holds(3, tower_base((block,4)), false, 17)).
fix_fluent(holds(3, tower_base((block,5)), false, 17)).
fix_fluent(holds(3, tower_base((block,6)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), puzzle_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), (block,6), 18)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), true, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(3, complete(blue), false, 18)).
fix_fluent(holds(3, complete(red), false, 18)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,2), 18)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,4)), store_room, 18)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(3, in(talos), puzzle_room, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,4)), nothing, 18)).
fix_fluent(holds(3, on((block,5)), (block,6), 18)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(3, tower_base((block,1)), true, 18)).
fix_fluent(holds(3, tower_base((block,2)), true, 18)).
fix_fluent(holds(3, tower_base((block,3)), true, 18)).
fix_fluent(holds(3, tower_base((block,4)), false, 18)).
fix_fluent(holds(3, tower_base((block,5)), false, 18)).
fix_fluent(holds(3, tower_base((block,6)), true, 18)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 18)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 18)
	('last_sgoals', 14)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 8)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190BBCE2950>)

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None)

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161530s.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(8,19).

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066771s with result Satisfiable.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2283003000000079, Incremental time limit = None
Running cumulative time = 3.1815669000000213, Cumulative time limit = 3600
Used memory = (RSS = 466.460938Mb, VMS = 475.656250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.732822s, Solving = 0.448745s, Total = 3.181567s, Memory = (RSS = 466.460938Mb, VMS = 475.656250Mb)), Calls = 19
Final Model :: Total atoms = 12402, Cost = (29, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.732821900000019, solving_time=0.4487450000000024, total_time=3.1815669000000213, memory=Memory(rss=466.4609375, vms=475.65625), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16152970000000266, solving_time=0.06677060000000523, total_time=0.2283003000000079, memory=Memory(rss=466.4609375, vms=475.65625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 53141.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 151780.0, 'bodies_tr': 151780.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3466.0, 'count_bodies_tr': 3466.0, 'sccs': 312.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5796.0, 'rules': 210592.0, 'rules_normal': 207259.0, 'rules_choice': 3067.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 210525.0, 'rules_tr_normal': 207259.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 161.0, 'eqs': 106403.0, 'eqs_atom': 21564.0, 'eqs_body': 5674.0, 'eqs_other': 79165.0}, 'lpStep': {'atoms': 5509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8396.0, 'bodies_tr': 8396.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 14856.0, 'rules_normal': 14690.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14855.0, 'rules_tr_normal': 14690.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 5895.0, 'eqs_atom': 1215.0, 'eqs_body': 384.0, 'eqs_other': 4296.0}, 'generator': {'vars': 26454.0, 'vars_eliminated': 0.0, 'vars_frozen': 17632.0, 'constraints': 290.0, 'constraints_binary': 16627.0, 'constraints_ternary': 1498.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 1356.0, 'conflicts': 21.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 3.0, 'models_level': 1088.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 21.0, 'integrated': 42.0, 'lemmas': 63.0, 'lits_learnt': 63.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 42.0, 'integrated_jumps': 64.0, 'guiding_paths_lits': 1656.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 0.0, 'lemmas_other': 42.0, 'lits_conflict': 21.0, 'lits_loop': 0.0, 'lits_other': 42.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 0.0, 'levels': 21.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.3181476593017578, 'cpu': 0.40625, 'solve': 0.04587745666503906, 'unsat': 0.014926910400390625, 'sat': 0.004985809326171875}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.3418445587158203, 'cpu': 3.734375, 'solve': 0.2899913787841797, 'unsat': 0.1524333953857422, 'sat': 0.06770706176757812}, 'models': {'enumerated': 16.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 11222.0, 'conflicts': 1198.0, 'conflicts_analyzed': 1014.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 936.0, 'models': 16.0, 'models_level': 4295.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 897.0, 'distributed_sum_lbd': 1907.0, 'integrated': 4695.0, 'lemmas': 7352.0, 'lits_learnt': 157073.0, 'lemmas_binary': 782.0, 'lemmas_ternary': 378.0, 'cpu_time': 0.765625, 'integrated_imps': 2370.0, 'integrated_jumps': 2151.0, 'guiding_paths_lits': 14883.0, 'guiding_paths': 232.0, 'splits': 0.0, 'lemmas_conflict': 922.0, 'lemmas_loop': 2197.0, 'lemmas_other': 4233.0, 'lits_conflict': 23968.0, 'lits_loop': 17153.0, 'lits_other': 115952.0, 'jumps': {'jumps': 1014.0, 'jumps_bounded': 339.0, 'levels': 20443.0, 'levels_bounded': 18340.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19}

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 9)
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 9)

[15-11-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113388s.

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[15-11-2021_15-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.245425s with result Satisfiable.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3588125000000062, Incremental time limit = None
Running cumulative time = 3.5403794000000275, Cumulative time limit = 3600
Used memory = (RSS = 470.996094Mb, VMS = 480.281250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.846209s, Solving = 0.694170s, Total = 3.540379s, Memory = (RSS = 470.996094Mb, VMS = 480.281250Mb)), Calls = 20
Final Model :: Total atoms = 12751, Cost = (29, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.8462094000000207, solving_time=0.6941700000000068, total_time=3.5403794000000275, memory=Memory(rss=470.99609375, vms=480.28125), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11338750000000175, solving_time=0.24542500000000445, total_time=0.3588125000000062, memory=Memory(rss=470.99609375, vms=480.28125), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 55044.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 158891.0, 'bodies_tr': 158891.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3646.0, 'count_bodies_tr': 3646.0, 'sccs': 325.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5950.0, 'rules': 220374.0, 'rules_normal': 216875.0, 'rules_choice': 3219.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 220300.0, 'rules_tr_normal': 216875.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 166.0, 'eqs': 110191.0, 'eqs_atom': 22036.0, 'eqs_body': 5981.0, 'eqs_other': 82174.0}, 'lpStep': {'atoms': 1903.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7111.0, 'bodies_tr': 7111.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 9782.0, 'rules_normal': 9616.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9775.0, 'rules_tr_normal': 9616.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 3788.0, 'eqs_atom': 472.0, 'eqs_body': 307.0, 'eqs_other': 3009.0}, 'generator': {'vars': 27198.0, 'vars_eliminated': 0.0, 'vars_frozen': 18166.0, 'constraints': 399.0, 'constraints_binary': 17853.0, 'constraints_ternary': 1410.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 1798.0, 'conflicts': 23.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 45.0, 'models': 3.0, 'models_level': 1214.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 27.0, 'integrated': 60.0, 'lemmas': 117.0, 'lits_learnt': 477.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 27.0, 'cpu_time': 0.28125, 'integrated_imps': 36.0, 'integrated_jumps': 82.0, 'guiding_paths_lits': 1784.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 50.0, 'lemmas_other': 51.0, 'lits_conflict': 98.0, 'lits_loop': 232.0, 'lits_other': 147.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 11.0, 'levels': 91.0, 'levels_bounded': 49.0, 'max': 35.0, 'max_executed': 14.0, 'max_bounded': 34.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.36158180236816406, 'cpu': 0.40625, 'solve': 0.2329273223876953, 'unsat': 0.012966156005859375, 'sat': 0.001995086669921875}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.7034263610839844, 'cpu': 4.140625, 'solve': 0.522918701171875, 'unsat': 0.16539955139160156, 'sat': 0.0697021484375}, 'models': {'enumerated': 19.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 13020.0, 'conflicts': 1221.0, 'conflicts_analyzed': 1036.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 981.0, 'models': 19.0, 'models_level': 5509.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 912.0, 'distributed_sum_lbd': 1934.0, 'integrated': 4755.0, 'lemmas': 7469.0, 'lits_learnt': 157550.0, 'lemmas_binary': 790.0, 'lemmas_ternary': 405.0, 'cpu_time': 1.046875, 'integrated_imps': 2406.0, 'integrated_jumps': 2233.0, 'guiding_paths_lits': 16667.0, 'guiding_paths': 240.0, 'splits': 0.0, 'lemmas_conflict': 938.0, 'lemmas_loop': 2247.0, 'lemmas_other': 4284.0, 'lits_conflict': 24066.0, 'lits_loop': 17385.0, 'lits_other': 116099.0, 'jumps': {'jumps': 1036.0, 'jumps_bounded': 350.0, 'levels': 20534.0, 'levels_bounded': 18389.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20}

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 20]:
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10)
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124268s.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(10,20).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059971s with result Satisfiable.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18423910000000632, Incremental time limit = None
Running cumulative time = 3.724618500000034, Cumulative time limit = 3600
Used memory = (RSS = 477.464844Mb, VMS = 486.277344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 22
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.970478s, Solving = 0.754141s, Total = 3.724619s, Memory = (RSS = 477.464844Mb, VMS = 486.277344Mb)), Calls = 21
Final Model :: Total atoms = 13099, Cost = (29, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.9704775000000225, solving_time=0.7541410000000113, total_time=3.724618500000034, memory=Memory(rss=477.46484375, vms=486.27734375), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12426810000000188, solving_time=0.05997100000000444, total_time=0.18423910000000632, memory=Memory(rss=477.46484375, vms=486.27734375), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 57025.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166437.0, 'bodies_tr': 166437.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3826.0, 'count_bodies_tr': 3826.0, 'sccs': 341.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6135.0, 'rules': 230796.0, 'rules_normal': 227131.0, 'rules_choice': 3371.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 230718.0, 'rules_tr_normal': 227131.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 115179.0, 'eqs_atom': 22797.0, 'eqs_body': 6269.0, 'eqs_other': 86113.0}, 'lpStep': {'atoms': 1981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7546.0, 'bodies_tr': 7546.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 185.0, 'rules': 10422.0, 'rules_normal': 10256.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10418.0, 'rules_tr_normal': 10256.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4988.0, 'eqs_atom': 761.0, 'eqs_body': 288.0, 'eqs_other': 3939.0}, 'generator': {'vars': 28242.0, 'vars_eliminated': 0.0, 'vars_frozen': 18865.0, 'constraints': 659.0, 'constraints_binary': 22773.0, 'constraints_ternary': 2447.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 1761.0, 'conflicts': 39.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 107.0, 'models': 3.0, 'models_level': 1355.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 66.0, 'integrated': 201.0, 'lemmas': 341.0, 'lits_learnt': 1959.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.0625, 'integrated_imps': 113.0, 'integrated_jumps': 181.0, 'guiding_paths_lits': 1912.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 117.0, 'lemmas_other': 188.0, 'lits_conflict': 222.0, 'lits_loop': 603.0, 'lits_other': 1134.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 14.0, 'levels': 1131.0, 'levels_bounded': 1065.0, 'max': 245.0, 'max_executed': 245.0, 'max_bounded': 240.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.18650245666503906, 'cpu': 0.21875, 'solve': 0.04288482666015625, 'unsat': 0.012937545776367188, 'sat': 0.00299072265625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.8899288177490234, 'cpu': 4.359375, 'solve': 0.5658035278320312, 'unsat': 0.17833709716796875, 'sat': 0.07269287109375}, 'models': {'enumerated': 22.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 14781.0, 'conflicts': 1260.0, 'conflicts_analyzed': 1074.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1088.0, 'models': 22.0, 'models_level': 6864.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 949.0, 'distributed_sum_lbd': 2000.0, 'integrated': 4956.0, 'lemmas': 7810.0, 'lits_learnt': 159509.0, 'lemmas_binary': 850.0, 'lemmas_ternary': 425.0, 'cpu_time': 1.109375, 'integrated_imps': 2519.0, 'integrated_jumps': 2414.0, 'guiding_paths_lits': 18579.0, 'guiding_paths': 248.0, 'splits': 0.0, 'lemmas_conflict': 974.0, 'lemmas_loop': 2364.0, 'lemmas_other': 4472.0, 'lits_conflict': 24288.0, 'lits_loop': 17988.0, 'lits_other': 117233.0, 'jumps': {'jumps': 1074.0, 'jumps_bounded': 364.0, 'levels': 21665.0, 'levels_bounded': 19454.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21}

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 21]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 11)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146601s.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(11,21).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018698s with result Unsatisfiable.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16529859999999985, Incremental time limit = None
Running cumulative time = 3.8899171000000337, Cumulative time limit = 3600
Used memory = (RSS = 479.144531Mb, VMS = 487.265625Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.117078100000022, solving_time=0.7728390000000118, total_time=3.8899171000000337, memory=Memory(rss=479.14453125, vms=487.265625), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1466005999999993, solving_time=0.018698000000000548, total_time=0.16529859999999985, memory=Memory(rss=479.14453125, vms=487.265625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 59320.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 174450.0, 'bodies_tr': 174450.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4006.0, 'count_bodies_tr': 4006.0, 'sccs': 359.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6411.0, 'rules': 242033.0, 'rules_normal': 238202.0, 'rules_choice': 3523.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 241953.0, 'rules_tr_normal': 238202.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 184.0, 'eqs': 120124.0, 'eqs_atom': 23821.0, 'eqs_body': 6491.0, 'eqs_other': 89812.0}, 'lpStep': {'atoms': 2295.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8013.0, 'bodies_tr': 8013.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 276.0, 'rules': 11237.0, 'rules_normal': 11071.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11235.0, 'rules_tr_normal': 11071.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 4945.0, 'eqs_atom': 1024.0, 'eqs_body': 222.0, 'eqs_other': 3699.0}, 'generator': {'vars': 29621.0, 'vars_eliminated': 0.0, 'vars_frozen': 19783.0, 'constraints': 998.0, 'constraints_binary': 29263.0, 'constraints_ternary': 3920.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 81.0, 'conflicts': 74.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 81.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 134.0, 'integrated': 384.0, 'lemmas': 180.0, 'lits_learnt': 1605.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.078125, 'integrated_imps': 84.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 1785.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 0.0, 'lemmas_other': 115.0, 'lits_conflict': 483.0, 'lits_loop': 0.0, 'lits_other': 1122.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 10.0, 'levels': 328.0, 'levels_bounded': 263.0, 'max': 246.0, 'max_executed': 3.0, 'max_bounded': 245.0}}}}, 'summary': {'call': 22.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.16739654541015625, 'cpu': 0.234375, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.05732536315918, 'cpu': 4.59375, 'solve': 0.569793701171875, 'unsat': 0.1823272705078125, 'sat': 0.07269287109375}, 'models': {'enumerated': 22.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 14862.0, 'conflicts': 1334.0, 'conflicts_analyzed': 1139.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1169.0, 'models': 22.0, 'models_level': 6864.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1014.0, 'distributed_sum_lbd': 2134.0, 'integrated': 5340.0, 'lemmas': 7990.0, 'lits_learnt': 161114.0, 'lemmas_binary': 850.0, 'lemmas_ternary': 432.0, 'cpu_time': 1.1875, 'integrated_imps': 2603.0, 'integrated_jumps': 2430.0, 'guiding_paths_lits': 20364.0, 'guiding_paths': 256.0, 'splits': 0.0, 'lemmas_conflict': 1039.0, 'lemmas_loop': 2364.0, 'lemmas_other': 4587.0, 'lits_conflict': 24771.0, 'lits_loop': 17988.0, 'lits_other': 118355.0, 'jumps': {'jumps': 1139.0, 'jumps_bounded': 374.0, 'levels': 21993.0, 'levels_bounded': 19717.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150781s.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058279s with result Satisfiable.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2090600000000009, Incremental time limit = None
Running cumulative time = 4.098977100000035, Cumulative time limit = 3600
Used memory = (RSS = 487.304688Mb, VMS = 503.019531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 24
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.267859s, Solving = 0.831118s, Total = 4.098977s, Memory = (RSS = 487.304688Mb, VMS = 503.019531Mb)), Calls = 23
Final Model :: Total atoms = 13788, Cost = (31, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.2678590000000227, solving_time=0.8311181000000119, total_time=4.098977100000035, memory=Memory(rss=487.3046875, vms=503.01953125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15078090000000088, solving_time=0.05827910000000003, total_time=0.2090600000000009, memory=Memory(rss=487.3046875, vms=503.01953125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 61735.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182845.0, 'bodies_tr': 182845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4186.0, 'count_bodies_tr': 4186.0, 'sccs': 379.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6842.0, 'rules': 253803.0, 'rules_normal': 249806.0, 'rules_choice': 3675.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 253723.0, 'rules_tr_normal': 249806.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 196.0, 'eqs': 125539.0, 'eqs_atom': 24895.0, 'eqs_body': 6616.0, 'eqs_other': 94028.0}, 'lpStep': {'atoms': 2415.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8395.0, 'bodies_tr': 8395.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 431.0, 'rules': 11770.0, 'rules_normal': 11604.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11770.0, 'rules_tr_normal': 11604.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5415.0, 'eqs_atom': 1074.0, 'eqs_body': 125.0, 'eqs_other': 4216.0}, 'generator': {'vars': 31492.0, 'vars_eliminated': 0.0, 'vars_frozen': 21017.0, 'constraints': 1475.0, 'constraints_binary': 39365.0, 'constraints_ternary': 6276.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 2025.0, 'conflicts': 182.0, 'conflicts_analyzed': 178.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 273.0, 'models': 2.0, 'models_level': 1107.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 171.0, 'distributed_sum_lbd': 417.0, 'integrated': 1007.0, 'lemmas': 1508.0, 'lits_learnt': 16132.0, 'lemmas_binary': 140.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.1875, 'integrated_imps': 350.0, 'integrated_jumps': 187.0, 'guiding_paths_lits': 1897.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 172.0, 'lemmas_loop': 424.0, 'lemmas_other': 912.0, 'lits_conflict': 2213.0, 'lits_loop': 3072.0, 'lits_other': 10847.0, 'jumps': {'jumps': 178.0, 'jumps_bounded': 45.0, 'levels': 1642.0, 'levels_bounded': 1381.0, 'max': 450.0, 'max_executed': 450.0, 'max_bounded': 449.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.211456298828125, 'cpu': 0.359375, 'solve': 0.0408935546875, 'unsat': 0.017953872680664062, 'sat': 0.009973526000976562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.268781661987305, 'cpu': 4.953125, 'solve': 0.610687255859375, 'unsat': 0.20028114318847656, 'sat': 0.08266639709472656}, 'models': {'enumerated': 24.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 16887.0, 'conflicts': 1516.0, 'conflicts_analyzed': 1317.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1442.0, 'models': 24.0, 'models_level': 7971.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1185.0, 'distributed_sum_lbd': 2551.0, 'integrated': 6347.0, 'lemmas': 9498.0, 'lits_learnt': 177246.0, 'lemmas_binary': 990.0, 'lemmas_ternary': 460.0, 'cpu_time': 1.375, 'integrated_imps': 2953.0, 'integrated_jumps': 2617.0, 'guiding_paths_lits': 22261.0, 'guiding_paths': 265.0, 'splits': 0.0, 'lemmas_conflict': 1211.0, 'lemmas_loop': 2788.0, 'lemmas_other': 5499.0, 'lits_conflict': 26984.0, 'lits_loop': 21060.0, 'lits_other': 129202.0, 'jumps': {'jumps': 1317.0, 'jumps_bounded': 419.0, 'levels': 23635.0, 'levels_bounded': 21098.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23}

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 23]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12)

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160445s.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(12,23).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019467s with result Unsatisfiable.

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17991190000000046, Incremental time limit = None
Running cumulative time = 4.278889000000035, Cumulative time limit = 3600
Used memory = (RSS = 489.191406Mb, VMS = 503.746094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.428304400000023, solving_time=0.8505846000000119, total_time=4.278889000000035, memory=Memory(rss=489.19140625, vms=503.74609375), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1604454000000004, solving_time=0.019466500000000053, total_time=0.17991190000000046, memory=Memory(rss=489.19140625, vms=503.74609375), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 64188.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 191437.0, 'bodies_tr': 191437.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4366.0, 'count_bodies_tr': 4366.0, 'sccs': 399.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7278.0, 'rules': 265864.0, 'rules_normal': 261701.0, 'rules_choice': 3827.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 265784.0, 'rules_tr_normal': 261701.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 208.0, 'eqs': 131082.0, 'eqs_atom': 25971.0, 'eqs_body': 6730.0, 'eqs_other': 98381.0}, 'lpStep': {'atoms': 2453.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8592.0, 'bodies_tr': 8592.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12061.0, 'rules_normal': 11895.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12061.0, 'rules_tr_normal': 11895.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5543.0, 'eqs_atom': 1076.0, 'eqs_body': 114.0, 'eqs_other': 4353.0}, 'generator': {'vars': 33410.0, 'vars_eliminated': 0.0, 'vars_frozen': 22271.0, 'constraints': 1965.0, 'constraints_binary': 49812.0, 'constraints_ternary': 8668.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 46.0, 'conflicts': 37.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 43.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 54.0, 'integrated': 98.0, 'lemmas': 271.0, 'lits_learnt': 2606.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 42.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 2009.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 179.0, 'lemmas_other': 67.0, 'lits_conflict': 329.0, 'lits_loop': 1396.0, 'lits_other': 881.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 8.0, 'levels': 51.0, 'levels_bounded': 12.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [32.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18251419067382812, 'cpu': 0.1875, 'solve': 0.0059833526611328125, 'unsat': 0.0059833526611328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.451295852661133, 'cpu': 5.140625, 'solve': 0.6166706085205078, 'unsat': 0.20626449584960938, 'sat': 0.08266639709472656}, 'models': {'enumerated': 24.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 16933.0, 'conflicts': 1553.0, 'conflicts_analyzed': 1343.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1485.0, 'models': 24.0, 'models_level': 7971.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1210.0, 'distributed_sum_lbd': 2605.0, 'integrated': 6445.0, 'lemmas': 9769.0, 'lits_learnt': 179852.0, 'lemmas_binary': 1000.0, 'lemmas_ternary': 460.0, 'cpu_time': 1.375, 'integrated_imps': 2995.0, 'integrated_jumps': 2624.0, 'guiding_paths_lits': 24270.0, 'guiding_paths': 275.0, 'splits': 0.0, 'lemmas_conflict': 1236.0, 'lemmas_loop': 2967.0, 'lemmas_other': 5566.0, 'lits_conflict': 27313.0, 'lits_loop': 22456.0, 'lits_other': 130083.0, 'jumps': {'jumps': 1343.0, 'jumps_bounded': 427.0, 'levels': 23686.0, 'levels_bounded': 21110.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151005s.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075291s with result Satisfiable.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22629690000000124, Incremental time limit = None
Running cumulative time = 4.505185900000036, Cumulative time limit = 3600
Used memory = (RSS = 495.867188Mb, VMS = 509.503906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 27
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.579310s, Solving = 0.925876s, Total = 4.505186s, Memory = (RSS = 495.867188Mb, VMS = 509.503906Mb)), Calls = 25
Final Model :: Total atoms = 14471, Cost = (33, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.5793098000000256, solving_time=0.9258761000000106, total_time=4.505185900000036, memory=Memory(rss=495.8671875, vms=509.50390625), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1510054000000025, solving_time=0.07529149999999873, total_time=0.22629690000000124, memory=Memory(rss=495.8671875, vms=509.50390625), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 66650.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 200054.0, 'bodies_tr': 200054.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4546.0, 'count_bodies_tr': 4546.0, 'sccs': 419.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7714.0, 'rules': 278042.0, 'rules_normal': 273713.0, 'rules_choice': 3979.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 277962.0, 'rules_tr_normal': 273713.0, 'rules_tr_choice': 3979.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 220.0, 'eqs': 136675.0, 'eqs_atom': 27054.0, 'eqs_body': 6842.0, 'eqs_other': 102779.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8617.0, 'bodies_tr': 8617.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12178.0, 'rules_normal': 12012.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12178.0, 'rules_tr_normal': 12012.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5593.0, 'eqs_atom': 1083.0, 'eqs_body': 112.0, 'eqs_other': 4398.0}, 'generator': {'vars': 35335.0, 'vars_eliminated': 0.0, 'vars_frozen': 23527.0, 'constraints': 2457.0, 'constraints_binary': 60381.0, 'constraints_ternary': 11065.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 2706.0, 'conflicts': 247.0, 'conflicts_analyzed': 243.0, 'restarts': 0.0, 'restarts_last': 43.0, 'extra': {'domain_choices': 425.0, 'models': 3.0, 'models_level': 1496.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 228.0, 'distributed_sum_lbd': 638.0, 'integrated': 1344.0, 'lemmas': 2097.0, 'lits_learnt': 35957.0, 'lemmas_binary': 127.0, 'lemmas_ternary': 133.0, 'cpu_time': 0.203125, 'integrated_imps': 431.0, 'integrated_jumps': 362.0, 'guiding_paths_lits': 2121.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 237.0, 'lemmas_loop': 570.0, 'lemmas_other': 1290.0, 'lits_conflict': 4886.0, 'lits_loop': 4570.0, 'lits_other': 26501.0, 'jumps': {'jumps': 243.0, 'jumps_bounded': 27.0, 'levels': 1822.0, 'levels_bounded': 1432.0, 'max': 259.0, 'max_executed': 259.0, 'max_bounded': 258.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [33.0, 0.0], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22843551635742188, 'cpu': 0.359375, 'solve': 0.05983924865722656, 'unsat': 0.01496124267578125, 'sat': 0.015956878662109375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.679731369018555, 'cpu': 5.5, 'solve': 0.6765098571777344, 'unsat': 0.22122573852539062, 'sat': 0.09862327575683594}, 'models': {'enumerated': 27.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 19639.0, 'conflicts': 1800.0, 'conflicts_analyzed': 1586.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1910.0, 'models': 27.0, 'models_level': 9467.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1438.0, 'distributed_sum_lbd': 3243.0, 'integrated': 7789.0, 'lemmas': 11866.0, 'lits_learnt': 215809.0, 'lemmas_binary': 1127.0, 'lemmas_ternary': 593.0, 'cpu_time': 1.578125, 'integrated_imps': 3426.0, 'integrated_jumps': 2986.0, 'guiding_paths_lits': 26391.0, 'guiding_paths': 286.0, 'splits': 0.0, 'lemmas_conflict': 1473.0, 'lemmas_loop': 3537.0, 'lemmas_other': 6856.0, 'lits_conflict': 32199.0, 'lits_loop': 27026.0, 'lits_other': 156584.0, 'jumps': {'jumps': 1586.0, 'jumps_bounded': 454.0, 'levels': 25508.0, 'levels_bounded': 22542.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25}

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None)

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 25]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13)

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153559s.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025305s with result Unsatisfiable.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17886340000000445, Incremental time limit = None
Running cumulative time = 4.684049300000041, Cumulative time limit = 3600
Used memory = (RSS = 497.929688Mb, VMS = 510.730469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.7328685000000306, solving_time=0.9511808000000102, total_time=4.684049300000041, memory=Memory(rss=497.9296875, vms=510.73046875), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15355870000000493, solving_time=0.025304699999999514, total_time=0.17886340000000445, memory=Memory(rss=497.9296875, vms=510.73046875), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 69121.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 208695.0, 'bodies_tr': 208695.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4726.0, 'count_bodies_tr': 4726.0, 'sccs': 439.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8150.0, 'rules': 290335.0, 'rules_normal': 285840.0, 'rules_choice': 4131.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 290255.0, 'rules_tr_normal': 285840.0, 'rules_tr_choice': 4131.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 232.0, 'eqs': 142324.0, 'eqs_atom': 28146.0, 'eqs_body': 6953.0, 'eqs_other': 107225.0}, 'lpStep': {'atoms': 2471.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8641.0, 'bodies_tr': 8641.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12293.0, 'rules_normal': 12127.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12293.0, 'rules_tr_normal': 12127.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5649.0, 'eqs_atom': 1092.0, 'eqs_body': 111.0, 'eqs_other': 4446.0}, 'generator': {'vars': 37260.0, 'vars_eliminated': 0.0, 'vars_frozen': 24783.0, 'constraints': 2945.0, 'constraints_binary': 71000.0, 'constraints_ternary': 13312.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 22.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 25.0, 'integrated': 51.0, 'lemmas': 129.0, 'lits_learnt': 2374.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 38.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 2233.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 67.0, 'lemmas_other': 50.0, 'lits_conflict': 304.0, 'lits_loop': 560.0, 'lits_other': 1510.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 10.0, 'levels': 791.0, 'levels_bounded': 778.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [34.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1825122833251953, 'cpu': 0.171875, 'solve': 0.0079803466796875, 'unsat': 0.0079803466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.86224365234375, 'cpu': 5.671875, 'solve': 0.6844902038574219, 'unsat': 0.22920608520507812, 'sat': 0.09862327575683594}, 'models': {'enumerated': 27.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 19664.0, 'conflicts': 1822.0, 'conflicts_analyzed': 1599.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 1935.0, 'models': 27.0, 'models_level': 9467.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1450.0, 'distributed_sum_lbd': 3268.0, 'integrated': 7840.0, 'lemmas': 11995.0, 'lits_learnt': 218183.0, 'lemmas_binary': 1134.0, 'lemmas_ternary': 594.0, 'cpu_time': 1.578125, 'integrated_imps': 3464.0, 'integrated_jumps': 2993.0, 'guiding_paths_lits': 28624.0, 'guiding_paths': 298.0, 'splits': 0.0, 'lemmas_conflict': 1485.0, 'lemmas_loop': 3604.0, 'lemmas_other': 6906.0, 'lits_conflict': 32503.0, 'lits_loop': 27586.0, 'lits_other': 158094.0, 'jumps': {'jumps': 1599.0, 'jumps_bounded': 464.0, 'levels': 26299.0, 'levels_bounded': 23320.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160497s.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048474s with result Unsatisfiable.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2089710999999923, Incremental time limit = None
Running cumulative time = 4.893020400000033, Cumulative time limit = 3600
Used memory = (RSS = 499.839844Mb, VMS = 511.289062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.8933653000000277, solving_time=0.9996551000000053, total_time=4.893020400000033, memory=Memory(rss=499.83984375, vms=511.2890625), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1604967999999971, solving_time=0.048474299999995196, total_time=0.2089710999999923, memory=Memory(rss=499.83984375, vms=511.2890625), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 71601.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 217360.0, 'bodies_tr': 217360.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4906.0, 'count_bodies_tr': 4906.0, 'sccs': 459.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8586.0, 'rules': 302743.0, 'rules_normal': 298082.0, 'rules_choice': 4283.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 302663.0, 'rules_tr_normal': 298082.0, 'rules_tr_choice': 4283.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 244.0, 'eqs': 148031.0, 'eqs_atom': 29247.0, 'eqs_body': 7065.0, 'eqs_other': 111719.0}, 'lpStep': {'atoms': 2480.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8665.0, 'bodies_tr': 8665.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12408.0, 'rules_normal': 12242.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12408.0, 'rules_tr_normal': 12242.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5707.0, 'eqs_atom': 1101.0, 'eqs_body': 112.0, 'eqs_other': 4494.0}, 'generator': {'vars': 39185.0, 'vars_eliminated': 0.0, 'vars_frozen': 26039.0, 'constraints': 3437.0, 'constraints_binary': 81791.0, 'constraints_ternary': 15719.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 1017.0, 'conflicts': 473.0, 'conflicts_analyzed': 460.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 909.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 425.0, 'distributed_sum_lbd': 1295.0, 'integrated': 2516.0, 'lemmas': 3569.0, 'lits_learnt': 100212.0, 'lemmas_binary': 255.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.21875, 'integrated_imps': 588.0, 'integrated_jumps': 413.0, 'guiding_paths_lits': 2345.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 453.0, 'lemmas_loop': 696.0, 'lemmas_other': 2420.0, 'lits_conflict': 14876.0, 'lits_loop': 5970.0, 'lits_other': 79366.0, 'jumps': {'jumps': 460.0, 'jumps_bounded': 28.0, 'levels': 6228.0, 'levels_bounded': 5624.0, 'max': 438.0, 'max_executed': 438.0, 'max_bounded': 437.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [34.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.21143722534179688, 'cpu': 0.390625, 'solve': 0.030893325805664062, 'unsat': 0.030893325805664062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.073680877685547, 'cpu': 6.0625, 'solve': 0.7153835296630859, 'unsat': 0.2600994110107422, 'sat': 0.09862327575683594}, 'models': {'enumerated': 27.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 20681.0, 'conflicts': 2295.0, 'conflicts_analyzed': 2059.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 2844.0, 'models': 27.0, 'models_level': 9467.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1875.0, 'distributed_sum_lbd': 4563.0, 'integrated': 10356.0, 'lemmas': 15564.0, 'lits_learnt': 318395.0, 'lemmas_binary': 1389.0, 'lemmas_ternary': 683.0, 'cpu_time': 1.796875, 'integrated_imps': 4052.0, 'integrated_jumps': 3406.0, 'guiding_paths_lits': 30969.0, 'guiding_paths': 310.0, 'splits': 0.0, 'lemmas_conflict': 1938.0, 'lemmas_loop': 4300.0, 'lemmas_other': 9326.0, 'lits_conflict': 47379.0, 'lits_loop': 33556.0, 'lits_other': 237460.0, 'jumps': {'jumps': 2059.0, 'jumps_bounded': 492.0, 'levels': 32527.0, 'levels_bounded': 28944.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.195374s.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.164378s with result Satisfiable.

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3597516999999897, Incremental time limit = None
Running cumulative time = 5.252772100000023, Cumulative time limit = 3600
Used memory = (RSS = 509.914062Mb, VMS = 521.011719Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.088739s, Solving = 1.164033s, Total = 5.252772s, Memory = (RSS = 509.914062Mb, VMS = 521.011719Mb)), Calls = 28
Final Model :: Total atoms = 15508, Cost = (36, 0), Optimality proven = False, Number = 4, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.088739400000023, solving_time=1.1640327, total_time=5.252772100000023, memory=Memory(rss=509.9140625, vms=521.01171875), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1953740999999951, solving_time=0.16437759999999457, total_time=0.3597516999999897, memory=Memory(rss=509.9140625, vms=521.01171875), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 74090.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 226049.0, 'bodies_tr': 226049.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5086.0, 'count_bodies_tr': 5086.0, 'sccs': 479.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9022.0, 'rules': 315266.0, 'rules_normal': 310439.0, 'rules_choice': 4435.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 315186.0, 'rules_tr_normal': 310439.0, 'rules_tr_choice': 4435.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 256.0, 'eqs': 153794.0, 'eqs_atom': 30357.0, 'eqs_body': 7176.0, 'eqs_other': 116261.0}, 'lpStep': {'atoms': 2489.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8689.0, 'bodies_tr': 8689.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12523.0, 'rules_normal': 12357.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12523.0, 'rules_tr_normal': 12357.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5763.0, 'eqs_atom': 1110.0, 'eqs_body': 111.0, 'eqs_other': 4542.0}, 'generator': {'vars': 41110.0, 'vars_eliminated': 0.0, 'vars_frozen': 27295.0, 'constraints': 3929.0, 'constraints_binary': 92191.0, 'constraints_ternary': 18030.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 7833.0, 'conflicts': 1014.0, 'conflicts_analyzed': 1006.0, 'restarts': 6.0, 'restarts_last': 137.0, 'extra': {'domain_choices': 1800.0, 'models': 4.0, 'models_level': 2465.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 772.0, 'distributed_sum_lbd': 2463.0, 'integrated': 4622.0, 'lemmas': 6539.0, 'lits_learnt': 291060.0, 'lemmas_binary': 504.0, 'lemmas_ternary': 269.0, 'cpu_time': 0.765625, 'integrated_imps': 869.0, 'integrated_jumps': 1715.0, 'guiding_paths_lits': 2457.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 998.0, 'lemmas_loop': 1084.0, 'lemmas_other': 4457.0, 'lits_conflict': 52547.0, 'lits_loop': 8814.0, 'lits_other': 229699.0, 'jumps': {'jumps': 1006.0, 'jumps_bounded': 18.0, 'levels': 3265.0, 'levels_bounded': 1868.0, 'max': 355.0, 'max_executed': 355.0, 'max_bounded': 352.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.36563873291015625, 'cpu': 0.984375, 'solve': 0.14916229248046875, 'unsat': 0.015956878662109375, 'sat': 0.07579994201660156}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.439319610595703, 'cpu': 7.046875, 'solve': 0.8645458221435547, 'unsat': 0.27605628967285156, 'sat': 0.1744232177734375}, 'models': {'enumerated': 31.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 28514.0, 'conflicts': 3309.0, 'conflicts_analyzed': 3065.0, 'restarts': 6.0, 'restarts_last': 137.0, 'extra': {'domain_choices': 4644.0, 'models': 31.0, 'models_level': 11932.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2647.0, 'distributed_sum_lbd': 7026.0, 'integrated': 14978.0, 'lemmas': 22103.0, 'lits_learnt': 609455.0, 'lemmas_binary': 1893.0, 'lemmas_ternary': 952.0, 'cpu_time': 2.5625, 'integrated_imps': 4921.0, 'integrated_jumps': 5121.0, 'guiding_paths_lits': 33426.0, 'guiding_paths': 324.0, 'splits': 0.0, 'lemmas_conflict': 2936.0, 'lemmas_loop': 5384.0, 'lemmas_other': 13783.0, 'lits_conflict': 99926.0, 'lits_loop': 42370.0, 'lits_other': 467159.0, 'jumps': {'jumps': 3065.0, 'jumps_bounded': 510.0, 'levels': 35792.0, 'levels_bounded': 30812.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28}

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None)

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 28]:
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14)
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14)

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[15-11-2021_15-11-54] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165571s.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(14,28).

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024735s with result Unsatisfiable.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19030560000000207, Incremental time limit = None
Running cumulative time = 5.443077700000025, Cumulative time limit = 3600
Used memory = (RSS = 512.750000Mb, VMS = 523.046875Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.2543103000000215, solving_time=1.1887674000000032, total_time=5.443077700000025, memory=Memory(rss=512.75, vms=523.046875), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16557089999999874, solving_time=0.02473470000000333, total_time=0.19030560000000207, memory=Memory(rss=512.75, vms=523.046875), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 76588.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 234759.0, 'bodies_tr': 234759.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5266.0, 'count_bodies_tr': 5266.0, 'sccs': 499.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9458.0, 'rules': 327900.0, 'rules_normal': 322907.0, 'rules_choice': 4587.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 327820.0, 'rules_tr_normal': 322907.0, 'rules_tr_choice': 4587.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 268.0, 'eqs': 159604.0, 'eqs_atom': 31472.0, 'eqs_body': 7288.0, 'eqs_other': 120844.0}, 'lpStep': {'atoms': 2498.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8710.0, 'bodies_tr': 8710.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12634.0, 'rules_normal': 12468.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12634.0, 'rules_tr_normal': 12468.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5810.0, 'eqs_atom': 1115.0, 'eqs_body': 112.0, 'eqs_other': 4583.0}, 'generator': {'vars': 43035.0, 'vars_eliminated': 0.0, 'vars_frozen': 28551.0, 'constraints': 4272.0, 'constraints_binary': 99943.0, 'constraints_ternary': 19816.0, 'acyc_edges': 0.0, 'complexity': 125499.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 7.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 6.0, 'lits_learnt': 12.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 4.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 2569.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 4.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 8.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 4.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.19644927978515625, 'cpu': 0.28125, 'solve': 0.0069561004638671875, 'unsat': 0.0069561004638671875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.635768890380859, 'cpu': 7.328125, 'solve': 0.8715019226074219, 'unsat': 0.28301239013671875, 'sat': 0.1744232177734375}, 'models': {'enumerated': 31.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 28520.0, 'conflicts': 3316.0, 'conflicts_analyzed': 3067.0, 'restarts': 6.0, 'restarts_last': 137.0, 'extra': {'domain_choices': 4650.0, 'models': 31.0, 'models_level': 11932.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2649.0, 'distributed_sum_lbd': 7030.0, 'integrated': 14982.0, 'lemmas': 22109.0, 'lits_learnt': 609467.0, 'lemmas_binary': 1899.0, 'lemmas_ternary': 952.0, 'cpu_time': 2.640625, 'integrated_imps': 4925.0, 'integrated_jumps': 5123.0, 'guiding_paths_lits': 35995.0, 'guiding_paths': 331.0, 'splits': 0.0, 'lemmas_conflict': 2938.0, 'lemmas_loop': 5384.0, 'lemmas_other': 13787.0, 'lits_conflict': 99930.0, 'lits_loop': 42370.0, 'lits_other': 467167.0, 'jumps': {'jumps': 3067.0, 'jumps_bounded': 512.0, 'levels': 35796.0, 'levels_bounded': 30814.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158657s.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.099365s with result Satisfiable.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.25802229999999327, Incremental time limit = None
Running cumulative time = 5.701100000000018, Cumulative time limit = 3600
Used memory = (RSS = 516.359375Mb, VMS = 525.187500Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 32
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.412967s, Solving = 1.288133s, Total = 5.701100s, Memory = (RSS = 516.359375Mb, VMS = 525.187500Mb)), Calls = 30
Final Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.412967200000018, solving_time=1.2881327999999996, total_time=5.701100000000018, memory=Memory(rss=516.359375, vms=525.1875), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15865689999999688, solving_time=0.09936539999999638, total_time=0.25802229999999327, memory=Memory(rss=516.359375, vms=525.1875), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 79091.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 243493.0, 'bodies_tr': 243493.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5446.0, 'count_bodies_tr': 5446.0, 'sccs': 519.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9894.0, 'rules': 340649.0, 'rules_normal': 335490.0, 'rules_choice': 4739.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 340569.0, 'rules_tr_normal': 335490.0, 'rules_tr_choice': 4739.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 280.0, 'eqs': 165470.0, 'eqs_atom': 32596.0, 'eqs_body': 7399.0, 'eqs_other': 125475.0}, 'lpStep': {'atoms': 2503.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8734.0, 'bodies_tr': 8734.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12749.0, 'rules_normal': 12583.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12749.0, 'rules_tr_normal': 12583.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5866.0, 'eqs_atom': 1124.0, 'eqs_body': 111.0, 'eqs_other': 4631.0}, 'generator': {'vars': 44960.0, 'vars_eliminated': 0.0, 'vars_frozen': 29807.0, 'constraints': 4764.0, 'constraints_binary': 111042.0, 'constraints_ternary': 22225.0, 'acyc_edges': 0.0, 'complexity': 138719.0}}, 'solving': {'solvers': {'choices': 6680.0, 'conflicts': 500.0, 'conflicts_analyzed': 485.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 1412.0, 'models': 1.0, 'models_level': 619.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 438.0, 'distributed_sum_lbd': 1283.0, 'integrated': 2595.0, 'lemmas': 3297.0, 'lits_learnt': 156748.0, 'lemmas_binary': 254.0, 'lemmas_ternary': 294.0, 'cpu_time': 0.453125, 'integrated_imps': 712.0, 'integrated_jumps': 4079.0, 'guiding_paths_lits': 2681.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 481.0, 'lemmas_loop': 374.0, 'lemmas_other': 2442.0, 'lits_conflict': 27998.0, 'lits_loop': 3109.0, 'lits_other': 125641.0, 'jumps': {'jumps': 485.0, 'jumps_bounded': 21.0, 'levels': 1847.0, 'levels_bounded': 852.0, 'max': 161.0, 'max_executed': 161.0, 'max_bounded': 157.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [40.0, 0.0], 'lower': [40.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2618675231933594, 'cpu': 0.640625, 'solve': 0.08177757263183594, 'unsat': 0.023931503295898438, 'sat': 0.0578460693359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.897636413574219, 'cpu': 7.96875, 'solve': 0.9532794952392578, 'unsat': 0.3069438934326172, 'sat': 0.232269287109375}, 'models': {'enumerated': 32.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 35200.0, 'conflicts': 3816.0, 'conflicts_analyzed': 3552.0, 'restarts': 6.0, 'restarts_last': 137.0, 'extra': {'domain_choices': 6062.0, 'models': 32.0, 'models_level': 12551.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3087.0, 'distributed_sum_lbd': 8313.0, 'integrated': 17577.0, 'lemmas': 25406.0, 'lits_learnt': 766215.0, 'lemmas_binary': 2153.0, 'lemmas_ternary': 1246.0, 'cpu_time': 3.09375, 'integrated_imps': 5637.0, 'integrated_jumps': 9202.0, 'guiding_paths_lits': 38676.0, 'guiding_paths': 347.0, 'splits': 0.0, 'lemmas_conflict': 3419.0, 'lemmas_loop': 5758.0, 'lemmas_other': 16229.0, 'lits_conflict': 127928.0, 'lits_loop': 45479.0, 'lits_other': 592808.0, 'jumps': {'jumps': 3552.0, 'jumps_bounded': 533.0, 'levels': 37643.0, 'levels_bounded': 31666.0, 'max': 731.0, 'max_executed': 731.0, 'max_bounded': 730.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28, 14: 30}

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.163097s, Solving = 0.008979s, Total = 0.172077s, Memory = (RSS = 127.675781Mb, VMS = 115.781250Mb)
2 : Statistics :: Grounding = 0.110412s, Solving = 0.004943s, Total = 0.115356s, Memory = (RSS = 130.652344Mb, VMS = 119.578125Mb)
3 : Statistics :: Grounding = 0.121909s, Solving = 0.005971s, Total = 0.127880s, Memory = (RSS = 131.554688Mb, VMS = 120.207031Mb)
4 : Statistics :: Grounding = 0.128057s, Solving = 0.005935s, Total = 0.133992s, Memory = (RSS = 132.503906Mb, VMS = 121.164062Mb)
5 : Statistics :: Grounding = 0.139395s, Solving = 0.006110s, Total = 0.145505s, Memory = (RSS = 136.074219Mb, VMS = 124.289062Mb)
6 : Statistics :: Grounding = 0.140057s, Solving = 0.007828s, Total = 0.147885s, Memory = (RSS = 136.910156Mb, VMS = 125.242188Mb)
7 : Statistics :: Grounding = 0.134728s, Solving = 0.016104s, Total = 0.150832s, Memory = (RSS = 139.500000Mb, VMS = 127.933594Mb)
8 : Statistics :: Grounding = 0.137365s, Solving = 0.009241s, Total = 0.146605s, Memory = (RSS = 141.234375Mb, VMS = 128.714844Mb)
9 : Statistics :: Grounding = 0.139831s, Solving = 0.064954s, Total = 0.204785s, Memory = (RSS = 148.953125Mb, VMS = 136.765625Mb)
10 : Statistics :: Grounding = 0.135686s, Solving = 0.010673s, Total = 0.146359s, Memory = (RSS = 150.859375Mb, VMS = 138.332031Mb)
11 : Statistics :: Grounding = 0.141538s, Solving = 0.018323s, Total = 0.159861s, Memory = (RSS = 156.046875Mb, VMS = 144.289062Mb)
12 : Statistics :: Grounding = 0.145891s, Solving = 0.041861s, Total = 0.187752s, Memory = (RSS = 160.832031Mb, VMS = 148.726562Mb)
13 : Statistics :: Grounding = 0.153626s, Solving = 0.014048s, Total = 0.167674s, Memory = (RSS = 167.960938Mb, VMS = 158.093750Mb)
14 : Statistics :: Grounding = 0.151854s, Solving = 0.036046s, Total = 0.187900s, Memory = (RSS = 171.757812Mb, VMS = 161.222656Mb)
15 : Statistics :: Grounding = 0.148286s, Solving = 0.026280s, Total = 0.174566s, Memory = (RSS = 176.664062Mb, VMS = 165.613281Mb)
16 : Statistics :: Grounding = 0.158482s, Solving = 0.025439s, Total = 0.183921s, Memory = (RSS = 181.492188Mb, VMS = 169.910156Mb)
17 : Statistics :: Grounding = 0.164061s, Solving = 0.028835s, Total = 0.192896s, Memory = (RSS = 190.503906Mb, VMS = 181.628906Mb)
18 : Statistics :: Grounding = 0.157017s, Solving = 0.050404s, Total = 0.207421s, Memory = (RSS = 196.621094Mb, VMS = 187.550781Mb)
19 : Statistics :: Grounding = 0.161530s, Solving = 0.066771s, Total = 0.228300s, Memory = (RSS = 466.460938Mb, VMS = 475.656250Mb)
20 : Statistics :: Grounding = 0.113388s, Solving = 0.245425s, Total = 0.358813s, Memory = (RSS = 470.996094Mb, VMS = 480.281250Mb)
21 : Statistics :: Grounding = 0.124268s, Solving = 0.059971s, Total = 0.184239s, Memory = (RSS = 477.464844Mb, VMS = 486.277344Mb)
22 : Statistics :: Grounding = 0.146601s, Solving = 0.018698s, Total = 0.165299s, Memory = (RSS = 479.144531Mb, VMS = 487.265625Mb)
23 : Statistics :: Grounding = 0.150781s, Solving = 0.058279s, Total = 0.209060s, Memory = (RSS = 487.304688Mb, VMS = 503.019531Mb)
24 : Statistics :: Grounding = 0.160445s, Solving = 0.019467s, Total = 0.179912s, Memory = (RSS = 489.191406Mb, VMS = 503.746094Mb)
25 : Statistics :: Grounding = 0.151005s, Solving = 0.075291s, Total = 0.226297s, Memory = (RSS = 495.867188Mb, VMS = 509.503906Mb)
26 : Statistics :: Grounding = 0.153559s, Solving = 0.025305s, Total = 0.178863s, Memory = (RSS = 497.929688Mb, VMS = 510.730469Mb)
27 : Statistics :: Grounding = 0.160497s, Solving = 0.048474s, Total = 0.208971s, Memory = (RSS = 499.839844Mb, VMS = 511.289062Mb)
28 : Statistics :: Grounding = 0.195374s, Solving = 0.164378s, Total = 0.359752s, Memory = (RSS = 509.914062Mb, VMS = 521.011719Mb)
29 : Statistics :: Grounding = 0.165571s, Solving = 0.024735s, Total = 0.190306s, Memory = (RSS = 512.750000Mb, VMS = 523.046875Mb)
30 : Statistics :: Grounding = 0.158657s, Solving = 0.099365s, Total = 0.258022s, Memory = (RSS = 516.359375Mb, VMS = 525.187500Mb)

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.701100s due to: External generator exit.

[15-11-2021_15-11-55] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.412967s, Solving = 1.288133s, Total = 5.701100s, Memory = (RSS = 516.359375Mb, VMS = 525.187500Mb)), Calls = 30
Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 30 :: Actions = 49                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
        talos : lift(manipulator_arm_1,(block,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 29:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, total_plan_length=30, step_range=range(17, 31)

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 35, Actions = 44
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   5.733s (Gro =   4.441s, Sea =   1.293s), Expan (L=1.86, A=1.91) (Dev = (L=0.90, A=1.41), Bal = (L=0.48, A=0.74))

[15-11-2021_15-11-56] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=17, blend=Blend(left=0, right=0.2)

[15-11-2021_15-11-56] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[15-11-2021_15-11-56] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=23, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   5.733s (Gro =   4.441s, Sea =   1.293s), Expan (L=1.86, A=1.91) (Dev = (L=0.90, A=1.41), Bal = (L=0.48, A=0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   5.733s (Gro =   4.441s, Sea =   1.293s), Expan (L=1.86, A=1.91) (Dev = (L=0.90, A=1.41), Bal = (L=0.48, A=0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-24]

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-24], problem number = 3, increment number = 3

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 24)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 24
start_step = 35
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 41

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-24] : Minimum search length bound = disabled with value = 41

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 24})

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 18).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 20).
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21).
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 21).
sub_goal(2, talos, move(hallway), in(talos), hallway, 22).
sub_goal(2, talos, move(store_room), in(talos), store_room, 23).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24).

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190CB8CBD60>

[15-11-2021_15-11-56] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_15-11-56] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 31)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_15-11-56] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 35)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60>)

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None)

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279652s.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(18,36).

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053152s with result Unsatisfiable.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3328033000000019, Incremental time limit = None
Running cumulative time = 12.530056299999995, Cumulative time limit = 3600
Used memory = (RSS = 434.843750Mb, VMS = 443.144531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=36, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=9.297806400000013, solving_time=3.2322498999999816, total_time=12.530056299999995, memory=Memory(rss=457.22265625, vms=467.375), step_range=range(0, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2796516000000011, solving_time=0.0531517000000008, total_time=0.3328033000000019, memory=Memory(rss=434.84375, vms=443.14453125), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 142713.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 443158.0, 'bodies_tr': 443158.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7296.0, 'count_bodies_tr': 7296.0, 'sccs': 845.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18075.0, 'rules': 637768.0, 'rules_normal': 629896.0, 'rules_choice': 7368.0, 'rules_minimize': 72.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 637673.0, 'rules_tr_normal': 629896.0, 'rules_tr_choice': 7368.0, 'rules_tr_minimize': 72.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 337.0, 'eqs': 330349.0, 'eqs_atom': 67513.0, 'eqs_body': 8673.0, 'eqs_other': 254163.0}, 'lpStep': {'atoms': 6654.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12857.0, 'bodies_tr': 12857.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 22941.0, 'rules_normal': 22732.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22940.0, 'rules_tr_normal': 22732.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 9899.0, 'eqs_atom': 2207.0, 'eqs_body': 531.0, 'eqs_other': 7161.0}, 'generator': {'vars': 78926.0, 'vars_eliminated': 0.0, 'vars_frozen': 48339.0, 'constraints': 701.0, 'constraints_binary': 64232.0, 'constraints_ternary': 3550.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 527.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 36.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.4878406524658203, 'cpu': 0.578125, 'solve': 0.012941360473632812, 'unsat': 0.012941360473632812, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.99905014038086, 'cpu': 19.859375, 'solve': 2.523630142211914, 'unsat': 1.2048416137695312, 'sat': 0.5493755340576172}, 'models': {'enumerated': 56.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 50561.0, 'conflicts': 6819.0, 'conflicts_analyzed': 6422.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6009.0, 'models': 56.0, 'models_level': 24617.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5487.0, 'distributed_sum_lbd': 13050.0, 'integrated': 31291.0, 'lemmas': 45349.0, 'lits_learnt': 3781018.0, 'lemmas_binary': 4310.0, 'lemmas_ternary': 2329.0, 'cpu_time': 9.5, 'integrated_imps': 10301.0, 'integrated_jumps': 8637.0, 'guiding_paths_lits': 57116.0, 'guiding_paths': 501.0, 'splits': 0.0, 'lemmas_conflict': 6324.0, 'lemmas_loop': 10495.0, 'lemmas_other': 28530.0, 'lits_conflict': 702918.0, 'lits_loop': 88570.0, 'lits_other': 2989530.0, 'jumps': {'jumps': 6422.0, 'jumps_bounded': 1049.0, 'levels': 185605.0, 'levels_bounded': 174327.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182989s.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057822s with result Satisfiable.

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2408109000000067, Incremental time limit = None
Running cumulative time = 12.770867200000001, Cumulative time limit = 3600
Used memory = (RSS = 439.093750Mb, VMS = 446.863281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 57
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.480796s, Solving = 3.290072s, Total = 12.770867s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)), Calls = 37
Final Model :: Total atoms = 23532, Cost = (42, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=37, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.480795600000015, solving_time=3.2900715999999868, total_time=12.770867200000001, memory=Memory(rss=457.22265625, vms=467.375), step_range=range(0, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18298920000000152, solving_time=0.057821700000005194, total_time=0.2408109000000067, memory=Memory(rss=439.09375, vms=446.86328125), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 144930.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 453583.0, 'bodies_tr': 453583.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7497.0, 'count_bodies_tr': 7497.0, 'sccs': 847.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18112.0, 'rules': 654258.0, 'rules_normal': 646177.0, 'rules_choice': 7563.0, 'rules_minimize': 74.0, 'rules_acyc': 0.0, 'rules_heuristic': 444.0, 'rules_tr': 654152.0, 'rules_tr_normal': 646177.0, 'rules_tr_choice': 7563.0, 'rules_tr_minimize': 74.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 338.0, 'eqs': 335778.0, 'eqs_atom': 68277.0, 'eqs_body': 9126.0, 'eqs_other': 258375.0}, 'lpStep': {'atoms': 2217.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10425.0, 'bodies_tr': 10425.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 16490.0, 'rules_normal': 16281.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16479.0, 'rules_tr_normal': 16281.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5429.0, 'eqs_atom': 764.0, 'eqs_body': 453.0, 'eqs_other': 4212.0}, 'generator': {'vars': 79409.0, 'vars_eliminated': 0.0, 'vars_frozen': 48684.0, 'constraints': 779.0, 'constraints_binary': 69069.0, 'constraints_ternary': 4085.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 5673.0, 'conflicts': 30.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 108.0, 'models': 1.0, 'models_level': 851.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 28.0, 'integrated': 72.0, 'lemmas': 97.0, 'lits_learnt': 130.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.0625, 'integrated_imps': 65.0, 'integrated_jumps': 1678.0, 'guiding_paths_lits': 3871.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 0.0, 'lemmas_other': 71.0, 'lits_conflict': 31.0, 'lits_loop': 0.0, 'lits_other': 99.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 15.0, 'levels': 7881.0, 'levels_bounded': 5807.0, 'max': 828.0, 'max_executed': 263.0, 'max_bounded': 620.0}}}}, 'summary': {'call': 37.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [42.0, 0.0], 'lower': [42.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.2483386993408203, 'cpu': 0.28125, 'solve': 0.029890060424804688, 'unsat': 0.023935317993164062, 'sat': 0.005954742431640625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.24738883972168, 'cpu': 20.140625, 'solve': 2.5535202026367188, 'unsat': 1.2287769317626953, 'sat': 0.5553302764892578}, 'models': {'enumerated': 57.0, 'optimal': 18.0}, 'solving': {'solvers': {'choices': 56234.0, 'conflicts': 6849.0, 'conflicts_analyzed': 6451.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6117.0, 'models': 57.0, 'models_level': 25468.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5513.0, 'distributed_sum_lbd': 13078.0, 'integrated': 31363.0, 'lemmas': 45446.0, 'lits_learnt': 3781148.0, 'lemmas_binary': 4310.0, 'lemmas_ternary': 2335.0, 'cpu_time': 9.5625, 'integrated_imps': 10366.0, 'integrated_jumps': 10315.0, 'guiding_paths_lits': 60987.0, 'guiding_paths': 508.0, 'splits': 0.0, 'lemmas_conflict': 6350.0, 'lemmas_loop': 10495.0, 'lemmas_other': 28601.0, 'lits_conflict': 702949.0, 'lits_loop': 88570.0, 'lits_other': 2989629.0, 'jumps': {'jumps': 6451.0, 'jumps_bounded': 1064.0, 'levels': 193486.0, 'levels_bounded': 180134.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37}

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None)

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 37]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19)
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19)

[15-11-2021_15-11-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186121s.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(19,37).

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.344006s with result Satisfiable.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5301268999999991, Incremental time limit = None
Running cumulative time = 13.3009941, Cumulative time limit = 3600
Used memory = (RSS = 450.503906Mb, VMS = 458.355469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 61
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.666916s, Solving = 3.634078s, Total = 13.300994s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)), Calls = 38
Final Model :: Total atoms = 23926, Cost = (45, 0), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=38, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.666916400000012, solving_time=3.634077699999988, total_time=13.3009941, memory=Memory(rss=457.22265625, vms=467.375), step_range=range(0, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18612079999999764, solving_time=0.3440061000000014, total_time=0.5301268999999991, memory=Memory(rss=450.50390625, vms=458.35546875), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 147323.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 464244.0, 'bodies_tr': 464244.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7698.0, 'count_bodies_tr': 7698.0, 'sccs': 870.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18418.0, 'rules': 671353.0, 'rules_normal': 663063.0, 'rules_choice': 7758.0, 'rules_minimize': 76.0, 'rules_acyc': 0.0, 'rules_heuristic': 456.0, 'rules_tr': 671240.0, 'rules_tr_normal': 663063.0, 'rules_tr_choice': 7758.0, 'rules_tr_minimize': 76.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 343.0, 'eqs': 342148.0, 'eqs_atom': 68976.0, 'eqs_body': 9457.0, 'eqs_other': 263715.0}, 'lpStep': {'atoms': 2393.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10661.0, 'bodies_tr': 10661.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 306.0, 'rules': 17095.0, 'rules_normal': 16886.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17088.0, 'rules_tr_normal': 16886.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 6370.0, 'eqs_atom': 699.0, 'eqs_body': 331.0, 'eqs_other': 5340.0}, 'generator': {'vars': 80703.0, 'vars_eliminated': 0.0, 'vars_frozen': 49521.0, 'constraints': 970.0, 'constraints_binary': 74644.0, 'constraints_ternary': 4130.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 2965.0, 'conflicts': 38.0, 'conflicts_analyzed': 37.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 15.0, 'models': 4.0, 'models_level': 3507.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 63.0, 'integrated': 200.0, 'lemmas': 221.0, 'lits_learnt': 334.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.671875, 'integrated_imps': 148.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 4632.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 36.0, 'lemmas_other': 148.0, 'lits_conflict': 37.0, 'lits_loop': 149.0, 'lits_other': 148.0, 'jumps': {'jumps': 37.0, 'jumps_bounded': 0.0, 'levels': 37.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 38.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [45.0, 0.0], 'lower': [45.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.5361671447753906, 'cpu': 0.890625, 'solve': 0.31575584411621094, 'unsat': 0.025957107543945312, 'sat': 0.004985809326171875}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.78355598449707, 'cpu': 21.03125, 'solve': 2.8692760467529297, 'unsat': 1.2547340393066406, 'sat': 0.5603160858154297}, 'models': {'enumerated': 61.0, 'optimal': 19.0}, 'solving': {'solvers': {'choices': 59199.0, 'conflicts': 6887.0, 'conflicts_analyzed': 6488.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6132.0, 'models': 61.0, 'models_level': 28975.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5563.0, 'distributed_sum_lbd': 13141.0, 'integrated': 31563.0, 'lemmas': 45667.0, 'lits_learnt': 3781482.0, 'lemmas_binary': 4319.0, 'lemmas_ternary': 2339.0, 'cpu_time': 10.234375, 'integrated_imps': 10514.0, 'integrated_jumps': 10324.0, 'guiding_paths_lits': 65619.0, 'guiding_paths': 516.0, 'splits': 0.0, 'lemmas_conflict': 6387.0, 'lemmas_loop': 10531.0, 'lemmas_other': 28749.0, 'lits_conflict': 702986.0, 'lits_loop': 88719.0, 'lits_other': 2989777.0, 'jumps': {'jumps': 6488.0, 'jumps_bounded': 1064.0, 'levels': 193523.0, 'levels_bounded': 180134.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38}

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None)

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 38]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 20)
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20)
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20)

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242378s.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(20,38).

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089205s with result Satisfiable.

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.33158389999999827, Incremental time limit = None
Running cumulative time = 13.632577999999999, Cumulative time limit = 3600
Used memory = (RSS = 459.214844Mb, VMS = 465.335938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 63
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.909295s, Solving = 3.723283s, Total = 13.632578s, Memory = (RSS = 459.214844Mb, VMS = 467.375000Mb)), Calls = 39
Final Model :: Total atoms = 24320, Cost = (47, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=39, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.909294800000012, solving_time=3.7232831999999867, total_time=13.632577999999999, memory=Memory(rss=459.21484375, vms=467.375), step_range=range(0, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24237839999999977, solving_time=0.0892054999999985, total_time=0.33158389999999827, memory=Memory(rss=459.21484375, vms=465.3359375), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 150738.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 475920.0, 'bodies_tr': 475920.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7899.0, 'count_bodies_tr': 7899.0, 'sccs': 893.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18737.0, 'rules': 689861.0, 'rules_normal': 681362.0, 'rules_choice': 7953.0, 'rules_minimize': 78.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 689744.0, 'rules_tr_normal': 681362.0, 'rules_tr_choice': 7953.0, 'rules_tr_minimize': 78.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 351.0, 'eqs': 353441.0, 'eqs_atom': 69809.0, 'eqs_body': 9739.0, 'eqs_other': 273893.0}, 'lpStep': {'atoms': 3415.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11676.0, 'bodies_tr': 11676.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 18508.0, 'rules_normal': 18299.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18504.0, 'rules_tr_normal': 18299.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 11293.0, 'eqs_atom': 833.0, 'eqs_body': 282.0, 'eqs_other': 10178.0}, 'generator': {'vars': 82191.0, 'vars_eliminated': 0.0, 'vars_frozen': 50465.0, 'constraints': 1180.0, 'constraints_binary': 82245.0, 'constraints_ternary': 4899.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3264.0, 'conflicts': 23.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 14.0, 'models': 2.0, 'models_level': 1755.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 31.0, 'distributed_sum_lbd': 39.0, 'integrated': 36.0, 'lemmas': 119.0, 'lits_learnt': 589.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4235.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 96.0, 'lemmas_other': 0.0, 'lits_conflict': 23.0, 'lits_loop': 566.0, 'lits_other': 0.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 0.0, 'levels': 23.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 39.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [47.0, 0.0], 'lower': [47.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.33809471130371094, 'cpu': 0.375, 'solve': 0.05086326599121094, 'unsat': 0.021940231323242188, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.121650695800781, 'cpu': 21.40625, 'solve': 2.9201393127441406, 'unsat': 1.2766742706298828, 'sat': 0.5653038024902344}, 'models': {'enumerated': 63.0, 'optimal': 20.0}, 'solving': {'solvers': {'choices': 62463.0, 'conflicts': 6910.0, 'conflicts_analyzed': 6511.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6146.0, 'models': 63.0, 'models_level': 30730.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5594.0, 'distributed_sum_lbd': 13180.0, 'integrated': 31599.0, 'lemmas': 45786.0, 'lits_learnt': 3782071.0, 'lemmas_binary': 4325.0, 'lemmas_ternary': 2341.0, 'cpu_time': 10.3125, 'integrated_imps': 10514.0, 'integrated_jumps': 10324.0, 'guiding_paths_lits': 69854.0, 'guiding_paths': 523.0, 'splits': 0.0, 'lemmas_conflict': 6410.0, 'lemmas_loop': 10627.0, 'lemmas_other': 28749.0, 'lits_conflict': 703009.0, 'lits_loop': 89285.0, 'lits_other': 2989777.0, 'jumps': {'jumps': 6511.0, 'jumps_bounded': 1064.0, 'levels': 193546.0, 'levels_bounded': 180134.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39}

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None)

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 39]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21)
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 21)

[15-11-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259008s.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(21,39).

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.117983s with result Satisfiable.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37699100000000385, Incremental time limit = None
Running cumulative time = 14.009569000000003, Cumulative time limit = 3600
Used memory = (RSS = 474.289062Mb, VMS = 479.292969Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 66
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.168303s, Solving = 3.841266s, Total = 14.009569s, Memory = (RSS = 474.289062Mb, VMS = 479.292969Mb)), Calls = 40
Final Model :: Total atoms = 24717, Cost = (49, 0), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=40, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.168302700000012, solving_time=3.8412662999999903, total_time=14.009569000000003, memory=Memory(rss=474.2890625, vms=479.29296875), step_range=range(0, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2590079000000003, solving_time=0.11798310000000356, total_time=0.37699100000000385, memory=Memory(rss=474.2890625, vms=479.29296875), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 154152.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 487839.0, 'bodies_tr': 487839.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8100.0, 'count_bodies_tr': 8100.0, 'sccs': 916.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19130.0, 'rules': 709072.0, 'rules_normal': 700364.0, 'rules_choice': 8148.0, 'rules_minimize': 80.0, 'rules_acyc': 0.0, 'rules_heuristic': 480.0, 'rules_tr': 708952.0, 'rules_tr_normal': 700364.0, 'rules_tr_choice': 8148.0, 'rules_tr_minimize': 80.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 360.0, 'eqs': 361851.0, 'eqs_atom': 70813.0, 'eqs_body': 9946.0, 'eqs_other': 281092.0}, 'lpStep': {'atoms': 3414.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11919.0, 'bodies_tr': 11919.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 393.0, 'rules': 19211.0, 'rules_normal': 19002.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19208.0, 'rules_tr_normal': 19002.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 9.0, 'eqs': 8410.0, 'eqs_atom': 1004.0, 'eqs_body': 207.0, 'eqs_other': 7199.0}, 'generator': {'vars': 83964.0, 'vars_eliminated': 0.0, 'vars_frozen': 51570.0, 'constraints': 1573.0, 'constraints_binary': 92479.0, 'constraints_ternary': 6692.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3914.0, 'conflicts': 26.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 14.0, 'models': 3.0, 'models_level': 2761.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 28.0, 'integrated': 34.0, 'lemmas': 164.0, 'lits_learnt': 1514.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 4.0, 'integrated_jumps': 292.0, 'guiding_paths_lits': 4417.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 138.0, 'lemmas_other': 4.0, 'lits_conflict': 350.0, 'lits_loop': 952.0, 'lits_other': 212.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 0.0, 'levels': 23.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 40.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [49.0, 0.0], 'lower': [49.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.38277435302734375, 'cpu': 0.453125, 'solve': 0.08477210998535156, 'unsat': 0.02593231201171875, 'sat': 0.0069789886474609375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.504425048828125, 'cpu': 21.859375, 'solve': 3.004911422729492, 'unsat': 1.3026065826416016, 'sat': 0.5722827911376953}, 'models': {'enumerated': 66.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 66377.0, 'conflicts': 6936.0, 'conflicts_analyzed': 6533.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6160.0, 'models': 66.0, 'models_level': 33491.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5616.0, 'distributed_sum_lbd': 13208.0, 'integrated': 31633.0, 'lemmas': 45950.0, 'lits_learnt': 3783585.0, 'lemmas_binary': 4330.0, 'lemmas_ternary': 2341.0, 'cpu_time': 10.46875, 'integrated_imps': 10518.0, 'integrated_jumps': 10616.0, 'guiding_paths_lits': 74271.0, 'guiding_paths': 531.0, 'splits': 0.0, 'lemmas_conflict': 6432.0, 'lemmas_loop': 10765.0, 'lemmas_other': 28753.0, 'lits_conflict': 703359.0, 'lits_loop': 90237.0, 'lits_other': 2989989.0, 'jumps': {'jumps': 6533.0, 'jumps_bounded': 1064.0, 'levels': 193569.0, 'levels_bounded': 180134.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40}

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None)

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 40]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 22)

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264137s.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(22,40).

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042377s with result Unsatisfiable.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.306513300000006, Incremental time limit = None
Running cumulative time = 14.316082300000009, Cumulative time limit = 3600
Used memory = (RSS = 476.152344Mb, VMS = 480.023438Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=41, start_step=40, end_step=41, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.432439500000015, solving_time=3.8836427999999934, total_time=14.316082300000009, memory=Memory(rss=476.15234375, vms=480.0234375), step_range=range(0, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26413680000000284, solving_time=0.04237650000000315, total_time=0.306513300000006, memory=Memory(rss=476.15234375, vms=480.0234375), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 157705.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 500167.0, 'bodies_tr': 500167.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8301.0, 'count_bodies_tr': 8301.0, 'sccs': 939.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19540.0, 'rules': 729257.0, 'rules_normal': 720340.0, 'rules_choice': 8343.0, 'rules_minimize': 82.0, 'rules_acyc': 0.0, 'rules_heuristic': 492.0, 'rules_tr': 729135.0, 'rules_tr_normal': 720340.0, 'rules_tr_choice': 8343.0, 'rules_tr_minimize': 82.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 370.0, 'eqs': 371220.0, 'eqs_atom': 72122.0, 'eqs_body': 10117.0, 'eqs_other': 288981.0}, 'lpStep': {'atoms': 3553.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12328.0, 'bodies_tr': 12328.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 20185.0, 'rules_normal': 19976.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 20183.0, 'rules_tr_normal': 19976.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9369.0, 'eqs_atom': 1309.0, 'eqs_body': 171.0, 'eqs_other': 7889.0}, 'generator': {'vars': 85887.0, 'vars_eliminated': 0.0, 'vars_frozen': 52748.0, 'constraints': 2000.0, 'constraints_binary': 104572.0, 'constraints_ternary': 8695.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 108.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4599.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 108.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 41.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.31316375732421875, 'cpu': 0.40625, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.817588806152344, 'cpu': 22.265625, 'solve': 3.0148849487304688, 'unsat': 1.3125801086425781, 'sat': 0.5722827911376953}, 'models': {'enumerated': 66.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 66377.0, 'conflicts': 6943.0, 'conflicts_analyzed': 6533.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6160.0, 'models': 66.0, 'models_level': 33491.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5616.0, 'distributed_sum_lbd': 13208.0, 'integrated': 31633.0, 'lemmas': 45962.0, 'lits_learnt': 3783693.0, 'lemmas_binary': 4330.0, 'lemmas_ternary': 2341.0, 'cpu_time': 10.578125, 'integrated_imps': 10518.0, 'integrated_jumps': 10616.0, 'guiding_paths_lits': 78870.0, 'guiding_paths': 538.0, 'splits': 0.0, 'lemmas_conflict': 6432.0, 'lemmas_loop': 10777.0, 'lemmas_other': 28753.0, 'lits_conflict': 703359.0, 'lits_loop': 90345.0, 'lits_other': 2989989.0, 'jumps': {'jumps': 6533.0, 'jumps_bounded': 1064.0, 'levels': 193569.0, 'levels_bounded': 180134.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268450s.

[15-11-2021_15-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.335828s with result Satisfiable.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6042784000000054, Incremental time limit = None
Running cumulative time = 14.920360700000014, Cumulative time limit = 3600
Used memory = (RSS = 485.906250Mb, VMS = 489.214844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 68
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.700890s, Solving = 4.219471s, Total = 14.920361s, Memory = (RSS = 485.906250Mb, VMS = 489.214844Mb)), Calls = 42
Final Model :: Total atoms = 25502, Cost = (51, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=42, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.700889700000019, solving_time=4.219470999999995, total_time=14.920360700000014, memory=Memory(rss=485.90625, vms=489.21484375), step_range=range(0, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26845020000000375, solving_time=0.3358282000000017, total_time=0.6042784000000054, memory=Memory(rss=485.90625, vms=489.21484375), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 161280.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 512802.0, 'bodies_tr': 512802.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8502.0, 'count_bodies_tr': 8502.0, 'sccs': 962.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19974.0, 'rules': 750517.0, 'rules_normal': 741391.0, 'rules_choice': 8538.0, 'rules_minimize': 84.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 750393.0, 'rules_tr_normal': 741391.0, 'rules_tr_choice': 8538.0, 'rules_tr_minimize': 84.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 380.0, 'eqs': 379916.0, 'eqs_atom': 73970.0, 'eqs_body': 10348.0, 'eqs_other': 295598.0}, 'lpStep': {'atoms': 3575.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12635.0, 'bodies_tr': 12635.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 21260.0, 'rules_normal': 21051.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21258.0, 'rules_tr_normal': 21051.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8696.0, 'eqs_atom': 1848.0, 'eqs_body': 231.0, 'eqs_other': 6617.0}, 'generator': {'vars': 88005.0, 'vars_eliminated': 0.0, 'vars_frozen': 54033.0, 'constraints': 2503.0, 'constraints_binary': 119454.0, 'constraints_ternary': 11811.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3325.0, 'conflicts': 162.0, 'conflicts_analyzed': 150.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 313.0, 'models': 2.0, 'models_level': 2051.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 146.0, 'distributed_sum_lbd': 334.0, 'integrated': 875.0, 'lemmas': 1484.0, 'lits_learnt': 23030.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.640625, 'integrated_imps': 549.0, 'integrated_jumps': 416.0, 'guiding_paths_lits': 4781.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 150.0, 'lemmas_loop': 464.0, 'lemmas_other': 870.0, 'lits_conflict': 3826.0, 'lits_loop': 3152.0, 'lits_other': 16052.0, 'jumps': {'jumps': 150.0, 'jumps_bounded': 56.0, 'levels': 2381.0, 'levels_bounded': 2131.0, 'max': 575.0, 'max_executed': 575.0, 'max_bounded': 573.0}}}}, 'summary': {'call': 42.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [51.0, 0.0], 'lower': [51.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.6113662719726562, 'cpu': 0.953125, 'solve': 0.3051872253417969, 'unsat': 0.026927947998046875, 'sat': 0.013963699340820312}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.428955078125, 'cpu': 23.21875, 'solve': 3.3200721740722656, 'unsat': 1.339508056640625, 'sat': 0.5862464904785156}, 'models': {'enumerated': 68.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 69702.0, 'conflicts': 7105.0, 'conflicts_analyzed': 6683.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6473.0, 'models': 68.0, 'models_level': 35542.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5762.0, 'distributed_sum_lbd': 13542.0, 'integrated': 32508.0, 'lemmas': 47446.0, 'lits_learnt': 3806723.0, 'lemmas_binary': 4358.0, 'lemmas_ternary': 2341.0, 'cpu_time': 11.21875, 'integrated_imps': 11067.0, 'integrated_jumps': 11032.0, 'guiding_paths_lits': 83651.0, 'guiding_paths': 551.0, 'splits': 0.0, 'lemmas_conflict': 6582.0, 'lemmas_loop': 11241.0, 'lemmas_other': 29623.0, 'lits_conflict': 707185.0, 'lits_loop': 93497.0, 'lits_other': 3006041.0, 'jumps': {'jumps': 6683.0, 'jumps_bounded': 1120.0, 'levels': 195950.0, 'levels_bounded': 182265.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42}

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None)

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 42]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 23)

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [43]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(0)]), ('plan_module', [Number(43), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268470s.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(23,42).

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047887s with result Unsatisfiable.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [43]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.31635700000000355, Incremental time limit = None
Running cumulative time = 15.236717700000018, Cumulative time limit = 3600
Used memory = (RSS = 487.871094Mb, VMS = 489.406250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=43, start_step=42, end_step=43, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.969359500000017, solving_time=4.2673582, total_time=15.236717700000018, memory=Memory(rss=487.87109375, vms=489.40625), step_range=range(0, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2684697999999983, solving_time=0.04788720000000524, total_time=0.31635700000000355, memory=Memory(rss=487.87109375, vms=489.40625), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 165002.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 525577.0, 'bodies_tr': 525577.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8703.0, 'count_bodies_tr': 8703.0, 'sccs': 985.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20408.0, 'rules': 772196.0, 'rules_normal': 762861.0, 'rules_choice': 8733.0, 'rules_minimize': 86.0, 'rules_acyc': 0.0, 'rules_heuristic': 516.0, 'rules_tr': 772070.0, 'rules_tr_normal': 762861.0, 'rules_tr_choice': 8733.0, 'rules_tr_minimize': 86.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 390.0, 'eqs': 390988.0, 'eqs_atom': 75836.0, 'eqs_body': 10550.0, 'eqs_other': 304602.0}, 'lpStep': {'atoms': 3722.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12775.0, 'bodies_tr': 12775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 21679.0, 'rules_normal': 21470.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21677.0, 'rules_tr_normal': 21470.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 11072.0, 'eqs_atom': 1866.0, 'eqs_body': 202.0, 'eqs_other': 9004.0}, 'generator': {'vars': 90105.0, 'vars_eliminated': 0.0, 'vars_frozen': 55322.0, 'constraints': 2976.0, 'constraints_binary': 133302.0, 'constraints_ternary': 14218.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 51.0, 'conflicts_analyzed': 42.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 57.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 106.0, 'integrated': 189.0, 'lemmas': 227.0, 'lits_learnt': 8765.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 39.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 4254.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 40.0, 'lemmas_loop': 85.0, 'lemmas_other': 102.0, 'lits_conflict': 2331.0, 'lits_loop': 617.0, 'lits_other': 5817.0, 'jumps': {'jumps': 42.0, 'jumps_bounded': 9.0, 'levels': 79.0, 'levels_bounded': 15.0, 'max': 5.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 43.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [47.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3231353759765625, 'cpu': 0.40625, 'solve': 0.011968612670898438, 'unsat': 0.011968612670898438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.752090454101562, 'cpu': 23.625, 'solve': 3.332040786743164, 'unsat': 1.3514766693115234, 'sat': 0.5862464904785156}, 'models': {'enumerated': 68.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 69774.0, 'conflicts': 7156.0, 'conflicts_analyzed': 6725.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 6530.0, 'models': 68.0, 'models_level': 35542.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5802.0, 'distributed_sum_lbd': 13648.0, 'integrated': 32697.0, 'lemmas': 47673.0, 'lits_learnt': 3815488.0, 'lemmas_binary': 4362.0, 'lemmas_ternary': 2341.0, 'cpu_time': 11.3125, 'integrated_imps': 11106.0, 'integrated_jumps': 11040.0, 'guiding_paths_lits': 87905.0, 'guiding_paths': 563.0, 'splits': 0.0, 'lemmas_conflict': 6622.0, 'lemmas_loop': 11326.0, 'lemmas_other': 29725.0, 'lits_conflict': 709516.0, 'lits_loop': 94114.0, 'lits_other': 3011858.0, 'jumps': {'jumps': 6725.0, 'jumps_bounded': 1129.0, 'levels': 196029.0, 'levels_bounded': 182280.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [44]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(0)]), ('plan_module', [Number(44), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275407s.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075635s with result Unsatisfiable.

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [44]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3510414999999938, Incremental time limit = None
Running cumulative time = 15.587759200000011, Cumulative time limit = 3600
Used memory = (RSS = 490.609375Mb, VMS = 490.613281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=44, start_step=43, end_step=44, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=11.244766100000014, solving_time=4.3429930999999975, total_time=15.587759200000011, memory=Memory(rss=490.609375, vms=490.61328125), step_range=range(0, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2754065999999966, solving_time=0.07563489999999717, total_time=0.3510414999999938, memory=Memory(rss=490.609375, vms=490.61328125), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 168622.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 538334.0, 'bodies_tr': 538334.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8904.0, 'count_bodies_tr': 8904.0, 'sccs': 1008.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20842.0, 'rules': 794131.0, 'rules_normal': 784587.0, 'rules_choice': 8928.0, 'rules_minimize': 88.0, 'rules_acyc': 0.0, 'rules_heuristic': 528.0, 'rules_tr': 794003.0, 'rules_tr_normal': 784587.0, 'rules_tr_choice': 8928.0, 'rules_tr_minimize': 88.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 400.0, 'eqs': 399929.0, 'eqs_atom': 77688.0, 'eqs_body': 10770.0, 'eqs_other': 311471.0}, 'lpStep': {'atoms': 3620.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12757.0, 'bodies_tr': 12757.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 21935.0, 'rules_normal': 21726.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21933.0, 'rules_tr_normal': 21726.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8941.0, 'eqs_atom': 1852.0, 'eqs_body': 220.0, 'eqs_other': 6869.0}, 'generator': {'vars': 92280.0, 'vars_eliminated': 0.0, 'vars_frozen': 56642.0, 'constraints': 3486.0, 'constraints_binary': 149316.0, 'constraints_ternary': 17342.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 1028.0, 'conflicts': 421.0, 'conflicts_analyzed': 409.0, 'restarts': 0.0, 'restarts_last': 71.0, 'extra': {'domain_choices': 908.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 378.0, 'distributed_sum_lbd': 1078.0, 'integrated': 2227.0, 'lemmas': 3165.0, 'lits_learnt': 102861.0, 'lemmas_binary': 125.0, 'lemmas_ternary': 58.0, 'cpu_time': 0.203125, 'integrated_imps': 477.0, 'integrated_jumps': 373.0, 'guiding_paths_lits': 5145.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 408.0, 'lemmas_loop': 643.0, 'lemmas_other': 2114.0, 'lits_conflict': 16668.0, 'lits_loop': 4475.0, 'lits_other': 81718.0, 'jumps': {'jumps': 409.0, 'jumps_bounded': 40.0, 'levels': 4731.0, 'levels_bounded': 4077.0, 'max': 603.0, 'max_executed': 603.0, 'max_bounded': 601.0}}}}, 'summary': {'call': 44.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [48.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.35704612731933594, 'cpu': 0.5, 'solve': 0.04189109802246094, 'unsat': 0.04189109802246094, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 16.1091365814209, 'cpu': 24.125, 'solve': 3.373931884765625, 'unsat': 1.3933677673339844, 'sat': 0.5862464904785156}, 'models': {'enumerated': 68.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 70802.0, 'conflicts': 7577.0, 'conflicts_analyzed': 7134.0, 'restarts': 13.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 7438.0, 'models': 68.0, 'models_level': 35542.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6180.0, 'distributed_sum_lbd': 14726.0, 'integrated': 34924.0, 'lemmas': 50838.0, 'lits_learnt': 3918349.0, 'lemmas_binary': 4487.0, 'lemmas_ternary': 2399.0, 'cpu_time': 11.515625, 'integrated_imps': 11583.0, 'integrated_jumps': 11413.0, 'guiding_paths_lits': 93050.0, 'guiding_paths': 577.0, 'splits': 0.0, 'lemmas_conflict': 7030.0, 'lemmas_loop': 11969.0, 'lemmas_other': 31839.0, 'lits_conflict': 726184.0, 'lits_loop': 98589.0, 'lits_other': 3093576.0, 'jumps': {'jumps': 7134.0, 'jumps_bounded': 1169.0, 'levels': 200760.0, 'levels_bounded': 186357.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-11-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [45]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(0)]), ('plan_module', [Number(45), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275938s.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.157183s with result Satisfiable.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [45]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43312129999999627, Incremental time limit = None
Running cumulative time = 16.020880500000008, Cumulative time limit = 3600
Used memory = (RSS = 501.234375Mb, VMS = 500.355469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 70
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.520704s, Solving = 4.500176s, Total = 16.020881s, Memory = (RSS = 501.234375Mb, VMS = 500.355469Mb)), Calls = 45
Final Model :: Total atoms = 26680, Cost = (54, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=45, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.52070410000001, solving_time=4.500176399999997, total_time=16.020880500000008, memory=Memory(rss=501.234375, vms=500.35546875), step_range=range(0, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27593799999999646, solving_time=0.1571832999999998, total_time=0.43312129999999627, memory=Memory(rss=501.234375, vms=500.35546875), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 172366.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 551522.0, 'bodies_tr': 551522.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9105.0, 'count_bodies_tr': 9105.0, 'sccs': 1033.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21436.0, 'rules': 816860.0, 'rules_normal': 807107.0, 'rules_choice': 9123.0, 'rules_minimize': 90.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 816732.0, 'rules_tr_normal': 807107.0, 'rules_tr_choice': 9123.0, 'rules_tr_minimize': 90.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 412.0, 'eqs': 409194.0, 'eqs_atom': 79581.0, 'eqs_body': 10846.0, 'eqs_other': 318767.0}, 'lpStep': {'atoms': 3744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13188.0, 'bodies_tr': 13188.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22729.0, 'rules_normal': 22520.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22729.0, 'rules_tr_normal': 22520.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9265.0, 'eqs_atom': 1893.0, 'eqs_body': 76.0, 'eqs_other': 7296.0}, 'generator': {'vars': 94917.0, 'vars_eliminated': 0.0, 'vars_frozen': 58249.0, 'constraints': 4128.0, 'constraints_binary': 168351.0, 'constraints_ternary': 21304.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 4382.0, 'conflicts': 629.0, 'conflicts_analyzed': 617.0, 'restarts': 3.0, 'restarts_last': 92.0, 'extra': {'domain_choices': 1419.0, 'models': 2.0, 'models_level': 2142.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 464.0, 'distributed_sum_lbd': 1417.0, 'integrated': 2637.0, 'lemmas': 3656.0, 'lits_learnt': 102101.0, 'lemmas_binary': 236.0, 'lemmas_ternary': 30.0, 'cpu_time': 0.546875, 'integrated_imps': 674.0, 'integrated_jumps': 775.0, 'guiding_paths_lits': 5327.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 609.0, 'lemmas_loop': 498.0, 'lemmas_other': 2549.0, 'lits_conflict': 21746.0, 'lits_loop': 4009.0, 'lits_other': 76346.0, 'jumps': {'jumps': 617.0, 'jumps_bounded': 19.0, 'levels': 2929.0, 'levels_bounded': 1886.0, 'max': 655.0, 'max_executed': 655.0, 'max_bounded': 654.0}}}}, 'summary': {'call': 45.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [54.0, 0.0], 'lower': [54.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.44033241271972656, 'cpu': 0.84375, 'solve': 0.12315750122070312, 'unsat': 0.03191375732421875, 'sat': 0.04685401916503906}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.549468994140625, 'cpu': 24.96875, 'solve': 3.497089385986328, 'unsat': 1.4252815246582031, 'sat': 0.6331005096435547}, 'models': {'enumerated': 70.0, 'optimal': 23.0}, 'solving': {'solvers': {'choices': 75184.0, 'conflicts': 8206.0, 'conflicts_analyzed': 7751.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 8857.0, 'models': 70.0, 'models_level': 37684.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6644.0, 'distributed_sum_lbd': 16143.0, 'integrated': 37561.0, 'lemmas': 54494.0, 'lits_learnt': 4020450.0, 'lemmas_binary': 4723.0, 'lemmas_ternary': 2429.0, 'cpu_time': 12.0625, 'integrated_imps': 12257.0, 'integrated_jumps': 12188.0, 'guiding_paths_lits': 98377.0, 'guiding_paths': 591.0, 'splits': 0.0, 'lemmas_conflict': 7639.0, 'lemmas_loop': 12467.0, 'lemmas_other': 34388.0, 'lits_conflict': 747930.0, 'lits_loop': 102598.0, 'lits_other': 3169922.0, 'jumps': {'jumps': 7751.0, 'jumps_bounded': 1188.0, 'levels': 203689.0, 'levels_bounded': 188243.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45}

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None)

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 45]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24)

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [46]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(0)]), ('plan_module', [Number(46), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.283246s.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(24,45).

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.107447s with result Satisfiable.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [46]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.39069239999999894, Incremental time limit = None
Running cumulative time = 16.411572900000007, Cumulative time limit = 3600
Used memory = (RSS = 513.437500Mb, VMS = 510.839844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 72
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.803950s, Solving = 4.607623s, Total = 16.411573s, Memory = (RSS = 513.437500Mb, VMS = 510.839844Mb)), Calls = 46
Final Model :: Total atoms = 27076, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=46, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.803950000000007, solving_time=4.607622899999999, total_time=16.411572900000007, memory=Memory(rss=513.4375, vms=510.83984375), step_range=range(0, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28324589999999716, solving_time=0.10744650000000178, total_time=0.39069239999999894, memory=Memory(rss=513.4375, vms=510.83984375), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 176144.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 564912.0, 'bodies_tr': 564912.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9306.0, 'count_bodies_tr': 9306.0, 'sccs': 1058.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22030.0, 'rules': 840067.0, 'rules_normal': 830105.0, 'rules_choice': 9318.0, 'rules_minimize': 92.0, 'rules_acyc': 0.0, 'rules_heuristic': 552.0, 'rules_tr': 839939.0, 'rules_tr_normal': 830105.0, 'rules_tr_choice': 9318.0, 'rules_tr_minimize': 92.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 424.0, 'eqs': 418610.0, 'eqs_atom': 81477.0, 'eqs_body': 10915.0, 'eqs_other': 326218.0}, 'lpStep': {'atoms': 3778.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13390.0, 'bodies_tr': 13390.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 23207.0, 'rules_normal': 22998.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23207.0, 'rules_tr_normal': 22998.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9416.0, 'eqs_atom': 1896.0, 'eqs_body': 69.0, 'eqs_other': 7451.0}, 'generator': {'vars': 97588.0, 'vars_eliminated': 0.0, 'vars_frozen': 59865.0, 'constraints': 4784.0, 'constraints_binary': 187902.0, 'constraints_ternary': 25289.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 3727.0, 'conflicts': 43.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 65.0, 'models': 2.0, 'models_level': 2206.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 40.0, 'integrated': 94.0, 'lemmas': 149.0, 'lits_learnt': 2987.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.21875, 'integrated_imps': 59.0, 'integrated_jumps': 154.0, 'guiding_paths_lits': 5509.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 56.0, 'lemmas_other': 64.0, 'lits_conflict': 1525.0, 'lits_loop': 504.0, 'lits_other': 958.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 7.0, 'levels': 132.0, 'levels_bounded': 14.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 5.0}}}}, 'summary': {'call': 46.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3985919952392578, 'cpu': 0.546875, 'solve': 0.07380485534667969, 'unsat': 0.030918121337890625, 'sat': 0.014963150024414062}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.948060989379883, 'cpu': 25.515625, 'solve': 3.570894241333008, 'unsat': 1.4561996459960938, 'sat': 0.6480636596679688}, 'models': {'enumerated': 72.0, 'optimal': 24.0}, 'solving': {'solvers': {'choices': 78911.0, 'conflicts': 8249.0, 'conflicts_analyzed': 7782.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 8922.0, 'models': 72.0, 'models_level': 39890.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6663.0, 'distributed_sum_lbd': 16183.0, 'integrated': 37655.0, 'lemmas': 54643.0, 'lits_learnt': 4023437.0, 'lemmas_binary': 4737.0, 'lemmas_ternary': 2471.0, 'cpu_time': 12.28125, 'integrated_imps': 12316.0, 'integrated_jumps': 12342.0, 'guiding_paths_lits': 103886.0, 'guiding_paths': 607.0, 'splits': 0.0, 'lemmas_conflict': 7668.0, 'lemmas_loop': 12523.0, 'lemmas_other': 34452.0, 'lits_conflict': 749455.0, 'lits_loop': 103102.0, 'lits_other': 3170880.0, 'jumps': {'jumps': 7782.0, 'jumps_bounded': 1195.0, 'levels': 203821.0, 'levels_bounded': 188257.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.284128s, Solving = 0.012072s, Total = 0.296200s, Memory = (RSS = 206.820312Mb, VMS = 198.023438Mb)
2 : Statistics :: Grounding = 0.177001s, Solving = 0.009038s, Total = 0.186039s, Memory = (RSS = 210.468750Mb, VMS = 201.750000Mb)
3 : Statistics :: Grounding = 0.214026s, Solving = 0.056852s, Total = 0.270878s, Memory = (RSS = 212.648438Mb, VMS = 204.187500Mb)
4 : Statistics :: Grounding = 0.217635s, Solving = 0.007007s, Total = 0.224643s, Memory = (RSS = 214.257812Mb, VMS = 205.769531Mb)
5 : Statistics :: Grounding = 0.231906s, Solving = 0.009234s, Total = 0.241140s, Memory = (RSS = 218.136719Mb, VMS = 210.210938Mb)
6 : Statistics :: Grounding = 0.214007s, Solving = 0.013613s, Total = 0.227620s, Memory = (RSS = 222.246094Mb, VMS = 214.910156Mb)
7 : Statistics :: Grounding = 0.232535s, Solving = 0.015558s, Total = 0.248093s, Memory = (RSS = 226.152344Mb, VMS = 218.300781Mb)
8 : Statistics :: Grounding = 0.243459s, Solving = 0.019678s, Total = 0.263137s, Memory = (RSS = 232.339844Mb, VMS = 225.277344Mb)
9 : Statistics :: Grounding = 0.248449s, Solving = 0.027743s, Total = 0.276192s, Memory = (RSS = 236.246094Mb, VMS = 228.507812Mb)
10 : Statistics :: Grounding = 0.266833s, Solving = 0.030000s, Total = 0.296833s, Memory = (RSS = 244.566406Mb, VMS = 238.484375Mb)
11 : Statistics :: Grounding = 0.252803s, Solving = 0.042466s, Total = 0.295269s, Memory = (RSS = 248.804688Mb, VMS = 242.238281Mb)
12 : Statistics :: Grounding = 0.246769s, Solving = 0.065091s, Total = 0.311860s, Memory = (RSS = 258.699219Mb, VMS = 255.296875Mb)
13 : Statistics :: Grounding = 0.262959s, Solving = 0.103116s, Total = 0.366075s, Memory = (RSS = 264.894531Mb, VMS = 260.121094Mb)
14 : Statistics :: Grounding = 0.267125s, Solving = 0.039150s, Total = 0.306275s, Memory = (RSS = 268.644531Mb, VMS = 262.925781Mb)
15 : Statistics :: Grounding = 0.267509s, Solving = 0.269818s, Total = 0.537327s, Memory = (RSS = 283.707031Mb, VMS = 277.468750Mb)
16 : Statistics :: Grounding = 0.268780s, Solving = 0.066745s, Total = 0.335525s, Memory = (RSS = 295.007812Mb, VMS = 296.117188Mb)
17 : Statistics :: Grounding = 0.270245s, Solving = 0.196221s, Total = 0.466466s, Memory = (RSS = 307.492188Mb, VMS = 307.335938Mb)
18 : Statistics :: Grounding = 0.268724s, Solving = 0.082561s, Total = 0.351284s, Memory = (RSS = 316.988281Mb, VMS = 315.171875Mb)
19 : Statistics :: Grounding = 0.270026s, Solving = 0.166364s, Total = 0.436390s, Memory = (RSS = 327.851562Mb, VMS = 324.691406Mb)
20 : Statistics :: Grounding = 0.279604s, Solving = 0.034192s, Total = 0.313796s, Memory = (RSS = 332.535156Mb, VMS = 328.101562Mb)
21 : Statistics :: Grounding = 0.273420s, Solving = 0.261086s, Total = 0.534506s, Memory = (RSS = 340.019531Mb, VMS = 334.746094Mb)
22 : Statistics :: Grounding = 0.283492s, Solving = 0.401929s, Total = 0.685421s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)
23 : Statistics :: Grounding = 0.280093s, Solving = 0.121760s, Total = 0.401853s, Memory = (RSS = 372.664062Mb, VMS = 377.468750Mb)
24 : Statistics :: Grounding = 0.241840s, Solving = 0.025851s, Total = 0.267691s, Memory = (RSS = 374.117188Mb, VMS = 378.449219Mb)
25 : Statistics :: Grounding = 0.236984s, Solving = 0.166035s, Total = 0.403019s, Memory = (RSS = 378.312500Mb, VMS = 381.964844Mb)
26 : Statistics :: Grounding = 0.235320s, Solving = 0.033423s, Total = 0.268744s, Memory = (RSS = 379.691406Mb, VMS = 382.664062Mb)
27 : Statistics :: Grounding = 0.254529s, Solving = 0.032794s, Total = 0.287324s, Memory = (RSS = 382.000000Mb, VMS = 383.320312Mb)
28 : Statistics :: Grounding = 0.264553s, Solving = 0.070678s, Total = 0.335230s, Memory = (RSS = 386.484375Mb, VMS = 386.804688Mb)
29 : Statistics :: Grounding = 0.322345s, Solving = 0.079571s, Total = 0.401917s, Memory = (RSS = 398.839844Mb, VMS = 398.132812Mb)
30 : Statistics :: Grounding = 0.250408s, Solving = 0.039272s, Total = 0.289680s, Memory = (RSS = 402.128906Mb, VMS = 400.132812Mb)
31 : Statistics :: Grounding = 0.250967s, Solving = 0.085792s, Total = 0.336759s, Memory = (RSS = 409.828125Mb, VMS = 405.949219Mb)
32 : Statistics :: Grounding = 0.281112s, Solving = 0.273174s, Total = 0.554286s, Memory = (RSS = 420.789062Mb, VMS = 416.578125Mb)
33 : Statistics :: Grounding = 0.277160s, Solving = 0.047405s, Total = 0.324565s, Memory = (RSS = 428.007812Mb, VMS = 441.359375Mb)
34 : Statistics :: Grounding = 0.300818s, Solving = 0.144155s, Total = 0.444972s, Memory = (RSS = 443.070312Mb, VMS = 454.914062Mb)
35 : Statistics :: Grounding = 0.280591s, Solving = 0.129652s, Total = 0.410243s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)
36 : Statistics :: Grounding = 0.279652s, Solving = 0.053152s, Total = 0.332803s, Memory = (RSS = 434.843750Mb, VMS = 443.144531Mb)
37 : Statistics :: Grounding = 0.182989s, Solving = 0.057822s, Total = 0.240811s, Memory = (RSS = 439.093750Mb, VMS = 446.863281Mb)
38 : Statistics :: Grounding = 0.186121s, Solving = 0.344006s, Total = 0.530127s, Memory = (RSS = 450.503906Mb, VMS = 458.355469Mb)
39 : Statistics :: Grounding = 0.242378s, Solving = 0.089205s, Total = 0.331584s, Memory = (RSS = 459.214844Mb, VMS = 465.335938Mb)
40 : Statistics :: Grounding = 0.259008s, Solving = 0.117983s, Total = 0.376991s, Memory = (RSS = 474.289062Mb, VMS = 479.292969Mb)
41 : Statistics :: Grounding = 0.264137s, Solving = 0.042377s, Total = 0.306513s, Memory = (RSS = 476.152344Mb, VMS = 480.023438Mb)
42 : Statistics :: Grounding = 0.268450s, Solving = 0.335828s, Total = 0.604278s, Memory = (RSS = 485.906250Mb, VMS = 489.214844Mb)
43 : Statistics :: Grounding = 0.268470s, Solving = 0.047887s, Total = 0.316357s, Memory = (RSS = 487.871094Mb, VMS = 489.406250Mb)
44 : Statistics :: Grounding = 0.275407s, Solving = 0.075635s, Total = 0.351041s, Memory = (RSS = 490.609375Mb, VMS = 490.613281Mb)
45 : Statistics :: Grounding = 0.275938s, Solving = 0.157183s, Total = 0.433121s, Memory = (RSS = 501.234375Mb, VMS = 500.355469Mb)
46 : Statistics :: Grounding = 0.283246s, Solving = 0.107447s, Total = 0.390692s, Memory = (RSS = 513.437500Mb, VMS = 510.839844Mb)

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 16.411573s due to: External generator exit.

[15-11-2021_15-12-00] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_15-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.803950s, Solving = 4.607623s, Total = 16.411573s, Memory = (RSS = 513.437500Mb, VMS = 510.839844Mb)), Calls = 46
Model :: Total atoms = 27076, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 46 :: Actions = 61                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : lift(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 14 : Achieved sgoals = 14 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 30 : Achieved sgoals = 24 : Unachieved sgoals = 6

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   5.733s (Gro =   4.441s, Sea =   1.293s), Expan (L=1.86, A=1.91) (Dev = (L=0.90, A=1.41), Bal = (L=0.48, A=0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [24-30]

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [24-30], problem number = 4, increment number = 4

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 24)
	('last_sgoals', 30)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 24
last_sgoals = 30
start_step = 45
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 51

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [24-30] : Minimum search length bound = disabled with value = 51

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-12-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 30})

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 25).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26).
sub_goal(2, talos, move(hallway), in(talos), hallway, 27).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30).

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_15-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000190CB8CBD60>

[15-11-2021_15-12-01] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_15-12-01] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 31)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,2))), 36)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 36)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,3)), 36)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,1))), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,2)), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,1)), 38)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,2),(block,3)), 38)).
fix_action(occurs(1, talos, lift(manipulator_end_1,(block,1)), 39)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,2)), 39)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 40)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 40)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 41)).
fix_action(occurs(1, talos, move((hallway,2)), 42)).
fix_action(occurs(1, talos, move((hallway,1)), 43)).
fix_action(occurs(1, talos, move((hallway,0)), 44)).
fix_action(occurs(1, talos, move((store_room,1)), 45)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_15-12-02] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(1, complete(blue), false, 36)).
fix_fluent(holds(1, complete(red), false, 36)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 36)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 36)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 36)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 36)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(1, configuration(store_room_door), open, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 36)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 36)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 36)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,4)), nothing, 36)).
fix_fluent(holds(1, on((block,5)), (block,6), 36)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, tower_base((block,1)), true, 36)).
fix_fluent(holds(1, tower_base((block,2)), true, 36)).
fix_fluent(holds(1, tower_base((block,3)), true, 36)).
fix_fluent(holds(1, tower_base((block,4)), false, 36)).
fix_fluent(holds(1, tower_base((block,5)), false, 36)).
fix_fluent(holds(1, tower_base((block,6)), true, 36)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(2, complete(blue), false, 36)).
fix_fluent(holds(2, complete(red), false, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 36)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(2, configuration(store_room_door), open, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,4)), store_room, 36)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 36)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 36)).
fix_fluent(holds(2, in(talos), puzzle_room, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,4)), nothing, 36)).
fix_fluent(holds(2, on((block,5)), (block,6), 36)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 36)).
fix_fluent(holds(2, tower_base((block,1)), true, 36)).
fix_fluent(holds(2, tower_base((block,2)), true, 36)).
fix_fluent(holds(2, tower_base((block,3)), true, 36)).
fix_fluent(holds(2, tower_base((block,4)), false, 36)).
fix_fluent(holds(2, tower_base((block,5)), false, 36)).
fix_fluent(holds(2, tower_base((block,6)), true, 36)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(1, complete(blue), false, 37)).
fix_fluent(holds(1, complete(red), false, 37)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 37)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 37)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 37)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 37)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(1, configuration(store_room_door), open, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 37)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 37)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 37)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,4)), nothing, 37)).
fix_fluent(holds(1, on((block,5)), (block,6), 37)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, tower_base((block,1)), true, 37)).
fix_fluent(holds(1, tower_base((block,2)), true, 37)).
fix_fluent(holds(1, tower_base((block,3)), true, 37)).
fix_fluent(holds(1, tower_base((block,4)), false, 37)).
fix_fluent(holds(1, tower_base((block,5)), false, 37)).
fix_fluent(holds(1, tower_base((block,6)), true, 37)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(2, complete(blue), false, 37)).
fix_fluent(holds(2, complete(red), false, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 37)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(2, configuration(store_room_door), open, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,4)), store_room, 37)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 37)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 37)).
fix_fluent(holds(2, in(talos), puzzle_room, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,4)), nothing, 37)).
fix_fluent(holds(2, on((block,5)), (block,6), 37)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 37)).
fix_fluent(holds(2, tower_base((block,1)), true, 37)).
fix_fluent(holds(2, tower_base((block,2)), true, 37)).
fix_fluent(holds(2, tower_base((block,3)), true, 37)).
fix_fluent(holds(2, tower_base((block,4)), false, 37)).
fix_fluent(holds(2, tower_base((block,5)), false, 37)).
fix_fluent(holds(2, tower_base((block,6)), true, 37)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(1, complete(blue), false, 38)).
fix_fluent(holds(1, complete(red), false, 38)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 38)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 38)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 38)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 38)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(1, configuration(store_room_door), open, 38)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 38)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 38)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 38)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 38)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 38)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,2)), (block,3), 38)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,4)), nothing, 38)).
fix_fluent(holds(1, on((block,5)), (block,6), 38)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 38)).
fix_fluent(holds(1, tower_base((block,1)), true, 38)).
fix_fluent(holds(1, tower_base((block,2)), false, 38)).
fix_fluent(holds(1, tower_base((block,3)), true, 38)).
fix_fluent(holds(1, tower_base((block,4)), false, 38)).
fix_fluent(holds(1, tower_base((block,5)), false, 38)).
fix_fluent(holds(1, tower_base((block,6)), true, 38)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(2, complete(blue), false, 38)).
fix_fluent(holds(2, complete(red), false, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 38)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(2, configuration(store_room_door), open, 38)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 38)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,4)), store_room, 38)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 38)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 38)).
fix_fluent(holds(2, in(talos), puzzle_room, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,2)), (block,3), 38)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,4)), nothing, 38)).
fix_fluent(holds(2, on((block,5)), (block,6), 38)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 38)).
fix_fluent(holds(2, tower_base((block,1)), true, 38)).
fix_fluent(holds(2, tower_base((block,2)), false, 38)).
fix_fluent(holds(2, tower_base((block,3)), true, 38)).
fix_fluent(holds(2, tower_base((block,4)), false, 38)).
fix_fluent(holds(2, tower_base((block,5)), false, 38)).
fix_fluent(holds(2, tower_base((block,6)), true, 38)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(1, complete(blue), false, 39)).
fix_fluent(holds(1, complete(red), false, 39)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 39)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 39)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 39)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 39)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(1, configuration(store_room_door), open, 39)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 39)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 39)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 39)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(1, on((block,1)), nothing, 39)).
fix_fluent(holds(1, on((block,2)), (block,3), 39)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 39)).
fix_fluent(holds(1, on((block,4)), nothing, 39)).
fix_fluent(holds(1, on((block,5)), (block,6), 39)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 39)).
fix_fluent(holds(1, tower_base((block,1)), false, 39)).
fix_fluent(holds(1, tower_base((block,2)), false, 39)).
fix_fluent(holds(1, tower_base((block,3)), true, 39)).
fix_fluent(holds(1, tower_base((block,4)), false, 39)).
fix_fluent(holds(1, tower_base((block,5)), false, 39)).
fix_fluent(holds(1, tower_base((block,6)), true, 39)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(2, complete(blue), false, 39)).
fix_fluent(holds(2, complete(red), false, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 39)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(2, configuration(store_room_door), open, 39)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,4)), store_room, 39)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 39)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 39)).
fix_fluent(holds(2, in(talos), puzzle_room, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(2, on((block,1)), nothing, 39)).
fix_fluent(holds(2, on((block,2)), (block,3), 39)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 39)).
fix_fluent(holds(2, on((block,4)), nothing, 39)).
fix_fluent(holds(2, on((block,5)), (block,6), 39)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 39)).
fix_fluent(holds(2, tower_base((block,1)), false, 39)).
fix_fluent(holds(2, tower_base((block,2)), false, 39)).
fix_fluent(holds(2, tower_base((block,3)), true, 39)).
fix_fluent(holds(2, tower_base((block,4)), false, 39)).
fix_fluent(holds(2, tower_base((block,5)), false, 39)).
fix_fluent(holds(2, tower_base((block,6)), true, 39)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(1, complete(blue), false, 40)).
fix_fluent(holds(1, complete(red), false, 40)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 40)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 40)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 40)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 40)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(1, configuration(store_room_door), open, 40)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 40)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 40)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 40)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(1, on((block,1)), nothing, 40)).
fix_fluent(holds(1, on((block,2)), (block,3), 40)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 40)).
fix_fluent(holds(1, on((block,4)), nothing, 40)).
fix_fluent(holds(1, on((block,5)), (block,6), 40)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 40)).
fix_fluent(holds(1, tower_base((block,1)), false, 40)).
fix_fluent(holds(1, tower_base((block,2)), false, 40)).
fix_fluent(holds(1, tower_base((block,3)), true, 40)).
fix_fluent(holds(1, tower_base((block,4)), false, 40)).
fix_fluent(holds(1, tower_base((block,5)), false, 40)).
fix_fluent(holds(1, tower_base((block,6)), true, 40)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(2, complete(blue), false, 40)).
fix_fluent(holds(2, complete(red), false, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 40)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(2, configuration(store_room_door), open, 40)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,4)), store_room, 40)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 40)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 40)).
fix_fluent(holds(2, in(talos), puzzle_room, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(2, on((block,1)), nothing, 40)).
fix_fluent(holds(2, on((block,2)), (block,3), 40)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 40)).
fix_fluent(holds(2, on((block,4)), nothing, 40)).
fix_fluent(holds(2, on((block,5)), (block,6), 40)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 40)).
fix_fluent(holds(2, tower_base((block,1)), false, 40)).
fix_fluent(holds(2, tower_base((block,2)), false, 40)).
fix_fluent(holds(2, tower_base((block,3)), true, 40)).
fix_fluent(holds(2, tower_base((block,4)), false, 40)).
fix_fluent(holds(2, tower_base((block,5)), false, 40)).
fix_fluent(holds(2, tower_base((block,6)), true, 40)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(1, complete(blue), false, 41)).
fix_fluent(holds(1, complete(red), false, 41)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 41)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 41)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 41)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 41)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(1, configuration(store_room_door), open, 41)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 41)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,0), 41)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 41)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 41)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(1, on((block,1)), nothing, 41)).
fix_fluent(holds(1, on((block,2)), (block,3), 41)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 41)).
fix_fluent(holds(1, on((block,4)), nothing, 41)).
fix_fluent(holds(1, on((block,5)), (block,6), 41)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 41)).
fix_fluent(holds(1, tower_base((block,1)), false, 41)).
fix_fluent(holds(1, tower_base((block,2)), false, 41)).
fix_fluent(holds(1, tower_base((block,3)), true, 41)).
fix_fluent(holds(1, tower_base((block,4)), false, 41)).
fix_fluent(holds(1, tower_base((block,5)), false, 41)).
fix_fluent(holds(1, tower_base((block,6)), true, 41)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(2, complete(blue), false, 41)).
fix_fluent(holds(2, complete(red), false, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 41)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(2, configuration(store_room_door), open, 41)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,4)), store_room, 41)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 41)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 41)).
fix_fluent(holds(2, in(talos), puzzle_room, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(2, on((block,1)), nothing, 41)).
fix_fluent(holds(2, on((block,2)), (block,3), 41)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 41)).
fix_fluent(holds(2, on((block,4)), nothing, 41)).
fix_fluent(holds(2, on((block,5)), (block,6), 41)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 41)).
fix_fluent(holds(2, tower_base((block,1)), false, 41)).
fix_fluent(holds(2, tower_base((block,2)), false, 41)).
fix_fluent(holds(2, tower_base((block,3)), true, 41)).
fix_fluent(holds(2, tower_base((block,4)), false, 41)).
fix_fluent(holds(2, tower_base((block,5)), false, 41)).
fix_fluent(holds(2, tower_base((block,6)), true, 41)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(1, complete(blue), false, 42)).
fix_fluent(holds(1, complete(red), false, 42)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 42)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 42)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 42)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 42)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(1, configuration(store_room_door), open, 42)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 42)).
fix_fluent(holds(1, in((block,1)), (hallway,2), 42)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 42)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 42)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(talos), (hallway,2), 42)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(1, on((block,1)), nothing, 42)).
fix_fluent(holds(1, on((block,2)), (block,3), 42)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 42)).
fix_fluent(holds(1, on((block,4)), nothing, 42)).
fix_fluent(holds(1, on((block,5)), (block,6), 42)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 42)).
fix_fluent(holds(1, tower_base((block,1)), false, 42)).
fix_fluent(holds(1, tower_base((block,2)), false, 42)).
fix_fluent(holds(1, tower_base((block,3)), true, 42)).
fix_fluent(holds(1, tower_base((block,4)), false, 42)).
fix_fluent(holds(1, tower_base((block,5)), false, 42)).
fix_fluent(holds(1, tower_base((block,6)), true, 42)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(2, complete(blue), false, 42)).
fix_fluent(holds(2, complete(red), false, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 42)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(2, configuration(store_room_door), open, 42)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(2, in((block,1)), hallway, 42)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,4)), store_room, 42)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 42)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 42)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 42)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 42)).
fix_fluent(holds(2, in(talos), hallway, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(2, on((block,1)), nothing, 42)).
fix_fluent(holds(2, on((block,2)), (block,3), 42)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 42)).
fix_fluent(holds(2, on((block,4)), nothing, 42)).
fix_fluent(holds(2, on((block,5)), (block,6), 42)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 42)).
fix_fluent(holds(2, tower_base((block,1)), false, 42)).
fix_fluent(holds(2, tower_base((block,2)), false, 42)).
fix_fluent(holds(2, tower_base((block,3)), true, 42)).
fix_fluent(holds(2, tower_base((block,4)), false, 42)).
fix_fluent(holds(2, tower_base((block,5)), false, 42)).
fix_fluent(holds(2, tower_base((block,6)), true, 42)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(1, complete(blue), false, 43)).
fix_fluent(holds(1, complete(red), false, 43)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 43)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 43)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 43)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 43)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(1, configuration(store_room_door), open, 43)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 43)).
fix_fluent(holds(1, in((block,1)), (hallway,1), 43)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 43)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(talos), (hallway,1), 43)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(1, on((block,1)), nothing, 43)).
fix_fluent(holds(1, on((block,2)), (block,3), 43)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 43)).
fix_fluent(holds(1, on((block,4)), nothing, 43)).
fix_fluent(holds(1, on((block,5)), (block,6), 43)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 43)).
fix_fluent(holds(1, tower_base((block,1)), false, 43)).
fix_fluent(holds(1, tower_base((block,2)), false, 43)).
fix_fluent(holds(1, tower_base((block,3)), true, 43)).
fix_fluent(holds(1, tower_base((block,4)), false, 43)).
fix_fluent(holds(1, tower_base((block,5)), false, 43)).
fix_fluent(holds(1, tower_base((block,6)), true, 43)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(2, complete(blue), false, 43)).
fix_fluent(holds(2, complete(red), false, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 43)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(2, configuration(store_room_door), open, 43)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(2, in((block,1)), hallway, 43)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,4)), store_room, 43)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 43)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 43)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 43)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 43)).
fix_fluent(holds(2, in(talos), hallway, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(2, on((block,1)), nothing, 43)).
fix_fluent(holds(2, on((block,2)), (block,3), 43)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 43)).
fix_fluent(holds(2, on((block,4)), nothing, 43)).
fix_fluent(holds(2, on((block,5)), (block,6), 43)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 43)).
fix_fluent(holds(2, tower_base((block,1)), false, 43)).
fix_fluent(holds(2, tower_base((block,2)), false, 43)).
fix_fluent(holds(2, tower_base((block,3)), true, 43)).
fix_fluent(holds(2, tower_base((block,4)), false, 43)).
fix_fluent(holds(2, tower_base((block,5)), false, 43)).
fix_fluent(holds(2, tower_base((block,6)), true, 43)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(1, complete(blue), false, 44)).
fix_fluent(holds(1, complete(red), false, 44)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 44)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 44)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 44)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 44)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(1, configuration(store_room_door), open, 44)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 44)).
fix_fluent(holds(1, in((block,1)), (hallway,0), 44)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 44)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 44)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(talos), (hallway,0), 44)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(1, on((block,1)), nothing, 44)).
fix_fluent(holds(1, on((block,2)), (block,3), 44)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 44)).
fix_fluent(holds(1, on((block,4)), nothing, 44)).
fix_fluent(holds(1, on((block,5)), (block,6), 44)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 44)).
fix_fluent(holds(1, tower_base((block,1)), false, 44)).
fix_fluent(holds(1, tower_base((block,2)), false, 44)).
fix_fluent(holds(1, tower_base((block,3)), true, 44)).
fix_fluent(holds(1, tower_base((block,4)), false, 44)).
fix_fluent(holds(1, tower_base((block,5)), false, 44)).
fix_fluent(holds(1, tower_base((block,6)), true, 44)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(2, complete(blue), false, 44)).
fix_fluent(holds(2, complete(red), false, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 44)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(2, configuration(store_room_door), open, 44)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(2, in((block,1)), hallway, 44)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,4)), store_room, 44)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 44)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 44)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 44)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 44)).
fix_fluent(holds(2, in(talos), hallway, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(2, on((block,1)), nothing, 44)).
fix_fluent(holds(2, on((block,2)), (block,3), 44)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 44)).
fix_fluent(holds(2, on((block,4)), nothing, 44)).
fix_fluent(holds(2, on((block,5)), (block,6), 44)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 44)).
fix_fluent(holds(2, tower_base((block,1)), false, 44)).
fix_fluent(holds(2, tower_base((block,2)), false, 44)).
fix_fluent(holds(2, tower_base((block,3)), true, 44)).
fix_fluent(holds(2, tower_base((block,4)), false, 44)).
fix_fluent(holds(2, tower_base((block,5)), false, 44)).
fix_fluent(holds(2, tower_base((block,6)), true, 44)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(1, complete(blue), false, 45)).
fix_fluent(holds(1, complete(red), false, 45)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 45)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 45)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 45)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 45)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(1, configuration(store_room_door), open, 45)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 45)).
fix_fluent(holds(1, in((block,1)), (store_room,1), 45)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 45)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(talos), (store_room,1), 45)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(1, on((block,1)), nothing, 45)).
fix_fluent(holds(1, on((block,2)), (block,3), 45)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 45)).
fix_fluent(holds(1, on((block,4)), nothing, 45)).
fix_fluent(holds(1, on((block,5)), (block,6), 45)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 45)).
fix_fluent(holds(1, tower_base((block,1)), false, 45)).
fix_fluent(holds(1, tower_base((block,2)), false, 45)).
fix_fluent(holds(1, tower_base((block,3)), true, 45)).
fix_fluent(holds(1, tower_base((block,4)), false, 45)).
fix_fluent(holds(1, tower_base((block,5)), false, 45)).
fix_fluent(holds(1, tower_base((block,6)), true, 45)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 45)).
fix_fluent(holds(2, complete(blue), false, 45)).
fix_fluent(holds(2, complete(red), false, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 45)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(2, configuration(store_room_door), open, 45)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(2, in((block,1)), store_room, 45)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,4)), store_room, 45)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 45)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 45)).
fix_fluent(holds(2, in(talos), store_room, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(2, on((block,1)), nothing, 45)).
fix_fluent(holds(2, on((block,2)), (block,3), 45)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 45)).
fix_fluent(holds(2, on((block,4)), nothing, 45)).
fix_fluent(holds(2, on((block,5)), (block,6), 45)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 45)).
fix_fluent(holds(2, tower_base((block,1)), false, 45)).
fix_fluent(holds(2, tower_base((block,2)), false, 45)).
fix_fluent(holds(2, tower_base((block,3)), true, 45)).
fix_fluent(holds(2, tower_base((block,4)), false, 45)).
fix_fluent(holds(2, tower_base((block,5)), false, 45)).
fix_fluent(holds(2, tower_base((block,6)), true, 45)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 45)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 45)
	('last_sgoals', 30)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000190B5F75270>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000190CB8CBD60>)

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None)

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [47]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(0)]), ('plan_module', [Number(47), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.288187s.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(25,46).

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118410s with result Satisfiable.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [47]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4065963000000039, Incremental time limit = None
Running cumulative time = 16.81816920000001, Cumulative time limit = 3600
Used memory = (RSS = 532.207031Mb, VMS = 527.863281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 74
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.092137s, Solving = 4.726032s, Total = 16.818169s, Memory = (RSS = 532.207031Mb, VMS = 527.863281Mb)), Calls = 47
Final Model :: Total atoms = 29055, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=47, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.092136700000012, solving_time=4.726032499999999, total_time=16.81816920000001, memory=Memory(rss=532.20703125, vms=527.86328125), step_range=range(0, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28818670000000424, solving_time=0.11840959999999967, total_time=0.4065963000000039, memory=Memory(rss=532.20703125, vms=527.86328125), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 181949.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 578760.0, 'bodies_tr': 578760.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9507.0, 'count_bodies_tr': 9507.0, 'sccs': 1083.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22624.0, 'rules': 866263.0, 'rules_normal': 856092.0, 'rules_choice': 9513.0, 'rules_minimize': 94.0, 'rules_acyc': 0.0, 'rules_heuristic': 564.0, 'rules_tr': 866135.0, 'rules_tr_normal': 856092.0, 'rules_tr_choice': 9513.0, 'rules_tr_minimize': 94.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 436.0, 'eqs': 429361.0, 'eqs_atom': 83795.0, 'eqs_body': 11393.0, 'eqs_other': 334173.0}, 'lpStep': {'atoms': 5805.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13848.0, 'bodies_tr': 13848.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26196.0, 'rules_normal': 25987.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26196.0, 'rules_tr_normal': 25987.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10751.0, 'eqs_atom': 2318.0, 'eqs_body': 478.0, 'eqs_other': 7955.0}, 'generator': {'vars': 100276.0, 'vars_eliminated': 0.0, 'vars_frozen': 61496.0, 'constraints': 1117.0, 'constraints_binary': 126390.0, 'constraints_ternary': 4179.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 2481.0, 'conflicts': 5.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 2.0, 'models': 2.0, 'models_level': 2299.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 48.0, 'lemmas': 76.0, 'lits_learnt': 1105.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.203125, 'integrated_imps': 12.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5733.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 25.0, 'lemmas_other': 48.0, 'lits_conflict': 171.0, 'lits_loop': 178.0, 'lits_other': 756.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 0.0, 'levels': 3.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 47.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.5897674560546875, 'cpu': 0.71875, 'solve': 0.0693511962890625, 'unsat': 0.030429840087890625, 'sat': 0.009973526000976562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 17.53782844543457, 'cpu': 26.234375, 'solve': 3.6402454376220703, 'unsat': 1.4866294860839844, 'sat': 0.6580371856689453}, 'models': {'enumerated': 74.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 81392.0, 'conflicts': 8254.0, 'conflicts_analyzed': 7785.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 8924.0, 'models': 74.0, 'models_level': 42189.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6671.0, 'distributed_sum_lbd': 16199.0, 'integrated': 37703.0, 'lemmas': 54719.0, 'lits_learnt': 4024542.0, 'lemmas_binary': 4779.0, 'lemmas_ternary': 2471.0, 'cpu_time': 12.484375, 'integrated_imps': 12328.0, 'integrated_jumps': 12342.0, 'guiding_paths_lits': 109619.0, 'guiding_paths': 615.0, 'splits': 0.0, 'lemmas_conflict': 7671.0, 'lemmas_loop': 12548.0, 'lemmas_other': 34500.0, 'lits_conflict': 749626.0, 'lits_loop': 103280.0, 'lits_other': 3171636.0, 'jumps': {'jumps': 7785.0, 'jumps_bounded': 1195.0, 'levels': 203824.0, 'levels_bounded': 188257.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47}

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None)

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 47]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26)

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [48]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(0)]), ('plan_module', [Number(48), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253289s.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(26,47).

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059185s with result Unsatisfiable.

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [48]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3124740000000017, Incremental time limit = None
Running cumulative time = 17.130643200000012, Cumulative time limit = 3600
Used memory = (RSS = 536.085938Mb, VMS = 531.257812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=48, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.34542600000001, solving_time=4.785217200000002, total_time=17.130643200000012, memory=Memory(rss=536.0859375, vms=531.2578125), step_range=range(0, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2532892999999987, solving_time=0.05918470000000298, total_time=0.3124740000000017, memory=Memory(rss=536.0859375, vms=531.2578125), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 185043.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 589705.0, 'bodies_tr': 589705.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9708.0, 'count_bodies_tr': 9708.0, 'sccs': 1096.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22858.0, 'rules': 887472.0, 'rules_normal': 877092.0, 'rules_choice': 9708.0, 'rules_minimize': 96.0, 'rules_acyc': 0.0, 'rules_heuristic': 576.0, 'rules_tr': 887333.0, 'rules_tr_normal': 877092.0, 'rules_tr_choice': 9708.0, 'rules_tr_minimize': 96.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 437.0, 'eqs': 441265.0, 'eqs_atom': 85499.0, 'eqs_body': 11901.0, 'eqs_other': 343865.0}, 'lpStep': {'atoms': 3094.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10945.0, 'bodies_tr': 10945.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 21209.0, 'rules_normal': 21000.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21198.0, 'rules_tr_normal': 21000.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 11904.0, 'eqs_atom': 1704.0, 'eqs_body': 508.0, 'eqs_other': 9692.0}, 'generator': {'vars': 101004.0, 'vars_eliminated': 0.0, 'vars_frozen': 62053.0, 'constraints': 1312.0, 'constraints_binary': 136367.0, 'constraints_ternary': 4925.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5957.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 48.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.32114219665527344, 'cpu': 0.328125, 'solve': 0.007007598876953125, 'unsat': 0.007007598876953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 17.858970642089844, 'cpu': 26.5625, 'solve': 3.6472530364990234, 'unsat': 1.4936370849609375, 'sat': 0.6580371856689453}, 'models': {'enumerated': 74.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 81392.0, 'conflicts': 8256.0, 'conflicts_analyzed': 7785.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 8924.0, 'models': 74.0, 'models_level': 42189.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6671.0, 'distributed_sum_lbd': 16199.0, 'integrated': 37703.0, 'lemmas': 54719.0, 'lits_learnt': 4024542.0, 'lemmas_binary': 4779.0, 'lemmas_ternary': 2471.0, 'cpu_time': 12.484375, 'integrated_imps': 12328.0, 'integrated_jumps': 12342.0, 'guiding_paths_lits': 115576.0, 'guiding_paths': 622.0, 'splits': 0.0, 'lemmas_conflict': 7671.0, 'lemmas_loop': 12548.0, 'lemmas_other': 34500.0, 'lits_conflict': 749626.0, 'lits_loop': 103280.0, 'lits_other': 3171636.0, 'jumps': {'jumps': 7785.0, 'jumps_bounded': 1195.0, 'levels': 203824.0, 'levels_bounded': 188257.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-02] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [49]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(0)]), ('plan_module', [Number(49), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245114s.

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046784s with result Unsatisfiable.

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [49]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2918972000000011, Incremental time limit = None
Running cumulative time = 17.422540400000013, Cumulative time limit = 3600
Used memory = (RSS = 540.046875Mb, VMS = 535.441406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=49, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.590539600000014, solving_time=4.832000799999999, total_time=17.422540400000013, memory=Memory(rss=540.046875, vms=535.44140625), step_range=range(0, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24511360000000337, solving_time=0.046783599999997705, total_time=0.2918972000000011, memory=Memory(rss=540.046875, vms=535.44140625), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 188305.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 601280.0, 'bodies_tr': 601280.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9909.0, 'count_bodies_tr': 9909.0, 'sccs': 1121.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23256.0, 'rules': 909820.0, 'rules_normal': 899231.0, 'rules_choice': 9903.0, 'rules_minimize': 98.0, 'rules_acyc': 0.0, 'rules_heuristic': 588.0, 'rules_tr': 909674.0, 'rules_tr_normal': 899231.0, 'rules_tr_choice': 9903.0, 'rules_tr_minimize': 98.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 442.0, 'eqs': 451263.0, 'eqs_atom': 87115.0, 'eqs_body': 12197.0, 'eqs_other': 351951.0}, 'lpStep': {'atoms': 3262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11575.0, 'bodies_tr': 11575.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 22348.0, 'rules_normal': 22139.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22341.0, 'rules_tr_normal': 22139.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 9998.0, 'eqs_atom': 1616.0, 'eqs_body': 296.0, 'eqs_other': 8086.0}, 'generator': {'vars': 102584.0, 'vars_eliminated': 0.0, 'vars_frozen': 63100.0, 'constraints': 1708.0, 'constraints_binary': 150486.0, 'constraints_ternary': 6627.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 14.0, 'conflicts': 12.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 13.0, 'integrated': 12.0, 'lemmas': 31.0, 'lits_learnt': 156.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 12.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6181.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 12.0, 'lemmas_other': 12.0, 'lits_conflict': 43.0, 'lits_loop': 44.0, 'lits_other': 69.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 906.0, 'levels_bounded': 892.0, 'max': 886.0, 'max_executed': 2.0, 'max_bounded': 884.0}}}}, 'summary': {'call': 49.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.29920005798339844, 'cpu': 0.40625, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.158170700073242, 'cpu': 26.96875, 'solve': 3.6572265625, 'unsat': 1.503610610961914, 'sat': 0.6580371856689453}, 'models': {'enumerated': 74.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 81406.0, 'conflicts': 8268.0, 'conflicts_analyzed': 7792.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 8938.0, 'models': 74.0, 'models_level': 42189.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6678.0, 'distributed_sum_lbd': 16212.0, 'integrated': 37715.0, 'lemmas': 54750.0, 'lits_learnt': 4024698.0, 'lemmas_binary': 4779.0, 'lemmas_ternary': 2471.0, 'cpu_time': 12.609375, 'integrated_imps': 12340.0, 'integrated_jumps': 12342.0, 'guiding_paths_lits': 121757.0, 'guiding_paths': 629.0, 'splits': 0.0, 'lemmas_conflict': 7678.0, 'lemmas_loop': 12560.0, 'lemmas_other': 34512.0, 'lits_conflict': 749669.0, 'lits_loop': 103324.0, 'lits_other': 3171705.0, 'jumps': {'jumps': 7792.0, 'jumps_bounded': 1202.0, 'levels': 204730.0, 'levels_bounded': 189149.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [50]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(0)]), ('plan_module', [Number(50), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310639s.

[15-11-2021_15-12-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.518097s with result Satisfiable.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [50]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.8287364000000039, Incremental time limit = None
Running cumulative time = 18.251276800000017, Cumulative time limit = 3600
Used memory = (RSS = 558.257812Mb, VMS = 552.816406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 78
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.901179s, Solving = 5.350098s, Total = 18.251277s, Memory = (RSS = 558.257812Mb, VMS = 552.816406Mb)), Calls = 50
Final Model :: Total atoms = 30244, Cost = (59, 0), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=50, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.90117890000002, solving_time=5.350097899999998, total_time=18.251276800000017, memory=Memory(rss=558.2578125, vms=552.81640625), step_range=range(0, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3106393000000054, solving_time=0.5180970999999985, total_time=0.8287364000000039, memory=Memory(rss=558.2578125, vms=552.81640625), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 191856.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 613441.0, 'bodies_tr': 613441.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10110.0, 'count_bodies_tr': 10110.0, 'sccs': 1146.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23654.0, 'rules': 933190.0, 'rules_normal': 922392.0, 'rules_choice': 10098.0, 'rules_minimize': 100.0, 'rules_acyc': 0.0, 'rules_heuristic': 600.0, 'rules_tr': 933040.0, 'rules_tr_normal': 922392.0, 'rules_tr_choice': 10098.0, 'rules_tr_minimize': 100.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 450.0, 'eqs': 461898.0, 'eqs_atom': 88708.0, 'eqs_body': 12391.0, 'eqs_other': 360799.0}, 'lpStep': {'atoms': 3551.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12161.0, 'bodies_tr': 12161.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 23370.0, 'rules_normal': 23161.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23366.0, 'rules_tr_normal': 23161.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10635.0, 'eqs_atom': 1593.0, 'eqs_body': 194.0, 'eqs_other': 8848.0}, 'generator': {'vars': 104368.0, 'vars_eliminated': 0.0, 'vars_frozen': 64254.0, 'constraints': 1947.0, 'constraints_binary': 164936.0, 'constraints_ternary': 8106.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 12102.0, 'conflicts': 115.0, 'conflicts_analyzed': 109.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 126.0, 'models': 4.0, 'models_level': 5156.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 105.0, 'distributed_sum_lbd': 123.0, 'integrated': 663.0, 'lemmas': 895.0, 'lits_learnt': 3630.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 18.0, 'cpu_time': 1.03125, 'integrated_imps': 605.0, 'integrated_jumps': 1840.0, 'guiding_paths_lits': 7320.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 104.0, 'lemmas_loop': 171.0, 'lemmas_other': 620.0, 'lits_conflict': 531.0, 'lits_loop': 1477.0, 'lits_other': 1622.0, 'jumps': {'jumps': 109.0, 'jumps_bounded': 18.0, 'levels': 14462.0, 'levels_bounded': 12382.0, 'max': 1286.0, 'max_executed': 1286.0, 'max_bounded': 916.0}}}}, 'summary': {'call': 50.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [59.0, 0.0], 'lower': [59.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.8371009826660156, 'cpu': 1.390625, 'solve': 0.47905921936035156, 'unsat': 0.02892303466796875, 'sat': 0.008977890014648438}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 18.995271682739258, 'cpu': 28.359375, 'solve': 4.136285781860352, 'unsat': 1.5325336456298828, 'sat': 0.6670150756835938}, 'models': {'enumerated': 78.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 93508.0, 'conflicts': 8383.0, 'conflicts_analyzed': 7901.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9064.0, 'models': 78.0, 'models_level': 47345.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6783.0, 'distributed_sum_lbd': 16335.0, 'integrated': 38378.0, 'lemmas': 55645.0, 'lits_learnt': 4028328.0, 'lemmas_binary': 4780.0, 'lemmas_ternary': 2489.0, 'cpu_time': 13.640625, 'integrated_imps': 12945.0, 'integrated_jumps': 14182.0, 'guiding_paths_lits': 129077.0, 'guiding_paths': 640.0, 'splits': 0.0, 'lemmas_conflict': 7782.0, 'lemmas_loop': 12731.0, 'lemmas_other': 35132.0, 'lits_conflict': 750200.0, 'lits_loop': 104801.0, 'lits_other': 3173327.0, 'jumps': {'jumps': 7901.0, 'jumps_bounded': 1220.0, 'levels': 219192.0, 'levels_bounded': 201531.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50}

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None)

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 50]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 27)

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [51]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(0)]), ('plan_module', [Number(51), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.278534s.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(27,50).

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047166s with result Unsatisfiable.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [51]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3256998999999965, Incremental time limit = None
Running cumulative time = 18.576976700000014, Cumulative time limit = 3600
Used memory = (RSS = 558.074219Mb, VMS = 552.136719Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=51, start_step=50, end_step=51, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.179712600000016, solving_time=5.3972640999999975, total_time=18.576976700000014, memory=Memory(rss=558.2578125, vms=552.81640625), step_range=range(0, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.278533699999997, solving_time=0.04716619999999949, total_time=0.3256998999999965, memory=Memory(rss=558.07421875, vms=552.13671875), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 195424.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 624983.0, 'bodies_tr': 624983.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10311.0, 'count_bodies_tr': 10311.0, 'sccs': 1163.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23908.0, 'rules': 956376.0, 'rules_normal': 945369.0, 'rules_choice': 10293.0, 'rules_minimize': 102.0, 'rules_acyc': 0.0, 'rules_heuristic': 612.0, 'rules_tr': 956218.0, 'rules_tr_normal': 945369.0, 'rules_tr_choice': 10293.0, 'rules_tr_minimize': 102.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 454.0, 'eqs': 471938.0, 'eqs_atom': 90432.0, 'eqs_body': 12778.0, 'eqs_other': 368728.0}, 'lpStep': {'atoms': 3568.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11542.0, 'bodies_tr': 11542.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 23186.0, 'rules_normal': 22977.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23178.0, 'rules_tr_normal': 22977.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 10040.0, 'eqs_atom': 1724.0, 'eqs_body': 387.0, 'eqs_other': 7929.0}, 'generator': {'vars': 105380.0, 'vars_eliminated': 0.0, 'vars_frozen': 64972.0, 'constraints': 1644.0, 'constraints_binary': 165272.0, 'constraints_ternary': 5755.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 18.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6629.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 18.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 51.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3366050720214844, 'cpu': 0.328125, 'solve': 0.007976531982421875, 'unsat': 0.007976531982421875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.331876754760742, 'cpu': 28.6875, 'solve': 4.144262313842773, 'unsat': 1.5405101776123047, 'sat': 0.6670150756835938}, 'models': {'enumerated': 78.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 93508.0, 'conflicts': 8385.0, 'conflicts_analyzed': 7901.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9064.0, 'models': 78.0, 'models_level': 47345.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6783.0, 'distributed_sum_lbd': 16335.0, 'integrated': 38378.0, 'lemmas': 55647.0, 'lits_learnt': 4028346.0, 'lemmas_binary': 4780.0, 'lemmas_ternary': 2489.0, 'cpu_time': 13.640625, 'integrated_imps': 12945.0, 'integrated_jumps': 14182.0, 'guiding_paths_lits': 135706.0, 'guiding_paths': 647.0, 'splits': 0.0, 'lemmas_conflict': 7782.0, 'lemmas_loop': 12733.0, 'lemmas_other': 35132.0, 'lits_conflict': 750200.0, 'lits_loop': 104819.0, 'lits_other': 3173327.0, 'jumps': {'jumps': 7901.0, 'jumps_bounded': 1220.0, 'levels': 219192.0, 'levels_bounded': 201531.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [52]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(0)]), ('plan_module', [Number(52), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263560s.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136765s with result Satisfiable.

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [52]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4003246000000047, Incremental time limit = None
Running cumulative time = 18.97730130000002, Cumulative time limit = 3600
Used memory = (RSS = 571.878906Mb, VMS = 594.371094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 80
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.443272s, Solving = 5.534029s, Total = 18.977301s, Memory = (RSS = 571.878906Mb, VMS = 594.371094Mb)), Calls = 52
Final Model :: Total atoms = 31036, Cost = (61, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=52, start_step=51, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.443272300000018, solving_time=5.534029, total_time=18.97730130000002, memory=Memory(rss=571.87890625, vms=594.37109375), step_range=range(0, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26355970000000184, solving_time=0.13676490000000285, total_time=0.4003246000000047, memory=Memory(rss=571.87890625, vms=594.37109375), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 198626.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 636543.0, 'bodies_tr': 636543.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10512.0, 'count_bodies_tr': 10512.0, 'sccs': 1180.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24166.0, 'rules': 980002.0, 'rules_normal': 968786.0, 'rules_choice': 10488.0, 'rules_minimize': 104.0, 'rules_acyc': 0.0, 'rules_heuristic': 624.0, 'rules_tr': 979836.0, 'rules_tr_normal': 968786.0, 'rules_tr_choice': 10488.0, 'rules_tr_minimize': 104.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 458.0, 'eqs': 485975.0, 'eqs_atom': 92090.0, 'eqs_body': 13176.0, 'eqs_other': 380709.0}, 'lpStep': {'atoms': 3202.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11560.0, 'bodies_tr': 11560.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 23626.0, 'rules_normal': 23417.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23618.0, 'rules_tr_normal': 23417.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 14037.0, 'eqs_atom': 1658.0, 'eqs_body': 398.0, 'eqs_other': 11981.0}, 'generator': {'vars': 106541.0, 'vars_eliminated': 0.0, 'vars_frozen': 65748.0, 'constraints': 1886.0, 'constraints_binary': 179574.0, 'constraints_ternary': 7114.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 5335.0, 'conflicts': 70.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 82.0, 'models': 2.0, 'models_level': 2803.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 138.0, 'integrated': 385.0, 'lemmas': 606.0, 'lits_learnt': 8247.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 67.0, 'cpu_time': 0.359375, 'integrated_imps': 221.0, 'integrated_jumps': 452.0, 'guiding_paths_lits': 6853.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 161.0, 'lemmas_other': 380.0, 'lits_conflict': 1447.0, 'lits_loop': 1451.0, 'lits_other': 5349.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 32.0, 'levels': 18307.0, 'levels_bounded': 18017.0, 'max': 982.0, 'max_executed': 982.0, 'max_bounded': 980.0}}}}, 'summary': {'call': 52.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [61.0, 0.0], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.4079113006591797, 'cpu': 0.671875, 'solve': 0.0857696533203125, 'unsat': 0.03191375732421875, 'sat': 0.018949508666992188}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.739788055419922, 'cpu': 29.359375, 'solve': 4.230031967163086, 'unsat': 1.5724239349365234, 'sat': 0.6859645843505859}, 'models': {'enumerated': 80.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 98843.0, 'conflicts': 8455.0, 'conflicts_analyzed': 7966.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9146.0, 'models': 80.0, 'models_level': 50148.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6848.0, 'distributed_sum_lbd': 16473.0, 'integrated': 38763.0, 'lemmas': 56253.0, 'lits_learnt': 4036593.0, 'lemmas_binary': 4801.0, 'lemmas_ternary': 2556.0, 'cpu_time': 14.0, 'integrated_imps': 13166.0, 'integrated_jumps': 14634.0, 'guiding_paths_lits': 142559.0, 'guiding_paths': 659.0, 'splits': 0.0, 'lemmas_conflict': 7847.0, 'lemmas_loop': 12894.0, 'lemmas_other': 35512.0, 'lits_conflict': 751647.0, 'lits_loop': 106270.0, 'lits_other': 3178676.0, 'jumps': {'jumps': 7966.0, 'jumps_bounded': 1252.0, 'levels': 237499.0, 'levels_bounded': 219548.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52}

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None)

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 52]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28)

[15-11-2021_15-12-04] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [53]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(0)]), ('plan_module', [Number(53), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257206s.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(28,52).

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051271s with result Unsatisfiable.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [53]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30847689999999517, Incremental time limit = None
Running cumulative time = 19.285778200000014, Cumulative time limit = 3600
Used memory = (RSS = 572.597656Mb, VMS = 594.789062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=53, start_step=52, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.700478600000018, solving_time=5.5852995999999955, total_time=19.285778200000014, memory=Memory(rss=572.59765625, vms=594.7890625), step_range=range(0, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2572063, solving_time=0.05127059999999517, total_time=0.30847689999999517, memory=Memory(rss=572.59765625, vms=594.7890625), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 201853.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 648516.0, 'bodies_tr': 648516.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10713.0, 'count_bodies_tr': 10713.0, 'sccs': 1205.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24564.0, 'rules': 1004479.0, 'rules_normal': 993054.0, 'rules_choice': 10683.0, 'rules_minimize': 106.0, 'rules_acyc': 0.0, 'rules_heuristic': 636.0, 'rules_tr': 1004309.0, 'rules_tr_normal': 993054.0, 'rules_tr_choice': 10683.0, 'rules_tr_minimize': 106.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 466.0, 'eqs': 496410.0, 'eqs_atom': 93611.0, 'eqs_body': 13357.0, 'eqs_other': 389442.0}, 'lpStep': {'atoms': 3227.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11973.0, 'bodies_tr': 11973.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 24477.0, 'rules_normal': 24268.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 24473.0, 'rules_tr_normal': 24268.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10435.0, 'eqs_atom': 1521.0, 'eqs_body': 181.0, 'eqs_other': 8733.0}, 'generator': {'vars': 108269.0, 'vars_eliminated': 0.0, 'vars_frozen': 66876.0, 'constraints': 2285.0, 'constraints_binary': 196870.0, 'constraints_ternary': 9077.0, 'acyc_edges': 0.0, 'complexity': 227066.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 9.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 47.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 7077.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 45.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 53.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [56.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.31615638732910156, 'cpu': 0.328125, 'solve': 0.009975433349609375, 'unsat': 0.009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 20.055944442749023, 'cpu': 29.6875, 'solve': 4.240007400512695, 'unsat': 1.5823993682861328, 'sat': 0.6859645843505859}, 'models': {'enumerated': 80.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 98844.0, 'conflicts': 8464.0, 'conflicts_analyzed': 7967.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9147.0, 'models': 80.0, 'models_level': 50148.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6849.0, 'distributed_sum_lbd': 16475.0, 'integrated': 38763.0, 'lemmas': 56259.0, 'lits_learnt': 4036640.0, 'lemmas_binary': 4802.0, 'lemmas_ternary': 2556.0, 'cpu_time': 14.03125, 'integrated_imps': 13166.0, 'integrated_jumps': 14634.0, 'guiding_paths_lits': 149636.0, 'guiding_paths': 667.0, 'splits': 0.0, 'lemmas_conflict': 7848.0, 'lemmas_loop': 12899.0, 'lemmas_other': 35512.0, 'lits_conflict': 751649.0, 'lits_loop': 106315.0, 'lits_other': 3178676.0, 'jumps': {'jumps': 7967.0, 'jumps_bounded': 1253.0, 'levels': 237502.0, 'levels_bounded': 219550.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [54]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(0)]), ('plan_module', [Number(54), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.277246s.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069523s with result Unsatisfiable.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [54]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3467683000000008, Incremental time limit = None
Running cumulative time = 19.632546500000014, Cumulative time limit = 3600
Used memory = (RSS = 576.789062Mb, VMS = 596.867188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=54, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.977724200000019, solving_time=5.654822299999996, total_time=19.632546500000014, memory=Memory(rss=576.7890625, vms=596.8671875), step_range=range(0, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27724560000000054, solving_time=0.06952270000000027, total_time=0.3467683000000008, memory=Memory(rss=576.7890625, vms=596.8671875), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 205331.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 661068.0, 'bodies_tr': 661068.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10914.0, 'count_bodies_tr': 10914.0, 'sccs': 1230.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24968.0, 'rules': 1030147.0, 'rules_normal': 1018513.0, 'rules_choice': 10878.0, 'rules_minimize': 108.0, 'rules_acyc': 0.0, 'rules_heuristic': 648.0, 'rules_tr': 1029973.0, 'rules_tr_normal': 1018513.0, 'rules_tr_choice': 10878.0, 'rules_tr_minimize': 108.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 474.0, 'eqs': 512865.0, 'eqs_atom': 95364.0, 'eqs_body': 13641.0, 'eqs_other': 403860.0}, 'lpStep': {'atoms': 3478.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12552.0, 'bodies_tr': 12552.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 25668.0, 'rules_normal': 25459.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25664.0, 'rules_tr_normal': 25459.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 16455.0, 'eqs_atom': 1753.0, 'eqs_body': 284.0, 'eqs_other': 14418.0}, 'generator': {'vars': 110190.0, 'vars_eliminated': 0.0, 'vars_frozen': 68083.0, 'constraints': 2709.0, 'constraints_binary': 216098.0, 'constraints_ternary': 11462.0, 'acyc_edges': 0.0, 'complexity': 230685.0}}, 'solving': {'solvers': {'choices': 403.0, 'conflicts': 167.0, 'conflicts_analyzed': 154.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 215.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 142.0, 'distributed_sum_lbd': 328.0, 'integrated': 802.0, 'lemmas': 1212.0, 'lits_learnt': 27367.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.125, 'integrated_imps': 493.0, 'integrated_jumps': 119.0, 'guiding_paths_lits': 7301.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 146.0, 'lemmas_loop': 313.0, 'lemmas_other': 753.0, 'lits_conflict': 4228.0, 'lits_loop': 1956.0, 'lits_other': 21183.0, 'jumps': {'jumps': 154.0, 'jumps_bounded': 75.0, 'levels': 3219.0, 'levels_bounded': 2935.0, 'max': 568.0, 'max_executed': 568.0, 'max_bounded': 567.0}}}}, 'summary': {'call': 54.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.35419273376464844, 'cpu': 0.46875, 'solve': 0.01696014404296875, 'unsat': 0.01696014404296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 20.410137176513672, 'cpu': 30.15625, 'solve': 4.256967544555664, 'unsat': 1.5993595123291016, 'sat': 0.6859645843505859}, 'models': {'enumerated': 80.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 99247.0, 'conflicts': 8631.0, 'conflicts_analyzed': 8121.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9362.0, 'models': 80.0, 'models_level': 50148.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6991.0, 'distributed_sum_lbd': 16803.0, 'integrated': 39565.0, 'lemmas': 57471.0, 'lits_learnt': 4064007.0, 'lemmas_binary': 4838.0, 'lemmas_ternary': 2574.0, 'cpu_time': 14.15625, 'integrated_imps': 13659.0, 'integrated_jumps': 14753.0, 'guiding_paths_lits': 156937.0, 'guiding_paths': 681.0, 'splits': 0.0, 'lemmas_conflict': 7994.0, 'lemmas_loop': 13212.0, 'lemmas_other': 36265.0, 'lits_conflict': 755877.0, 'lits_loop': 108271.0, 'lits_other': 3199859.0, 'jumps': {'jumps': 8121.0, 'jumps_bounded': 1328.0, 'levels': 240721.0, 'levels_bounded': 222485.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [55]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(0)]), ('plan_module', [Number(55), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.290148s.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.171092s with result Satisfiable.

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [55]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.46124000000000365, Incremental time limit = None
Running cumulative time = 20.093786500000018, Cumulative time limit = 3600
Used memory = (RSS = 593.277344Mb, VMS = 612.707031Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 83
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.267872s, Solving = 5.825914s, Total = 20.093787s, Memory = (RSS = 593.277344Mb, VMS = 612.707031Mb)), Calls = 55
Final Model :: Total atoms = 32226, Cost = (64, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=55, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.26787220000002, solving_time=5.825914299999997, total_time=20.093786500000018, memory=Memory(rss=593.27734375, vms=612.70703125), step_range=range(0, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29014800000000207, solving_time=0.17109200000000158, total_time=0.46124000000000365, memory=Memory(rss=593.27734375, vms=612.70703125), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 208841.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 674232.0, 'bodies_tr': 674232.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11115.0, 'count_bodies_tr': 11115.0, 'sccs': 1255.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25562.0, 'rules': 1056863.0, 'rules_normal': 1045020.0, 'rules_choice': 11073.0, 'rules_minimize': 110.0, 'rules_acyc': 0.0, 'rules_heuristic': 660.0, 'rules_tr': 1056689.0, 'rules_tr_normal': 1045020.0, 'rules_tr_choice': 11073.0, 'rules_tr_minimize': 110.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 486.0, 'eqs': 522129.0, 'eqs_atom': 97027.0, 'eqs_body': 13717.0, 'eqs_other': 411385.0}, 'lpStep': {'atoms': 3510.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13164.0, 'bodies_tr': 13164.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26716.0, 'rules_normal': 26507.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26716.0, 'rules_tr_normal': 26507.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9264.0, 'eqs_atom': 1663.0, 'eqs_body': 76.0, 'eqs_other': 7525.0}, 'generator': {'vars': 112774.0, 'vars_eliminated': 0.0, 'vars_frozen': 69688.0, 'constraints': 3339.0, 'constraints_binary': 239672.0, 'constraints_ternary': 14940.0, 'acyc_edges': 0.0, 'complexity': 258451.0}}, 'solving': {'solvers': {'choices': 6831.0, 'conflicts': 319.0, 'conflicts_analyzed': 311.0, 'restarts': 0.0, 'restarts_last': 73.0, 'extra': {'domain_choices': 327.0, 'models': 3.0, 'models_level': 4524.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 281.0, 'distributed_sum_lbd': 696.0, 'integrated': 1597.0, 'lemmas': 2256.0, 'lits_learnt': 55701.0, 'lemmas_binary': 125.0, 'lemmas_ternary': 118.0, 'cpu_time': 0.40625, 'integrated_imps': 617.0, 'integrated_jumps': 422.0, 'guiding_paths_lits': 7525.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 304.0, 'lemmas_loop': 437.0, 'lemmas_other': 1515.0, 'lits_conflict': 8857.0, 'lits_loop': 3600.0, 'lits_other': 43244.0, 'jumps': {'jumps': 311.0, 'jumps_bounded': 95.0, 'levels': 6529.0, 'levels_bounded': 6050.0, 'max': 766.0, 'max_executed': 766.0, 'max_bounded': 765.0}}}}, 'summary': {'call': 55.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [64.0, 0.0], 'lower': [64.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.47076988220214844, 'cpu': 0.734375, 'solve': 0.1331329345703125, 'unsat': 0.03490638732910156, 'sat': 0.027414321899414062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.88090705871582, 'cpu': 30.890625, 'solve': 4.390100479125977, 'unsat': 1.6342658996582031, 'sat': 0.71337890625}, 'models': {'enumerated': 83.0, 'optimal': 28.0}, 'solving': {'solvers': {'choices': 106078.0, 'conflicts': 8950.0, 'conflicts_analyzed': 8432.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9689.0, 'models': 83.0, 'models_level': 54672.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7272.0, 'distributed_sum_lbd': 17499.0, 'integrated': 41162.0, 'lemmas': 59727.0, 'lits_learnt': 4119708.0, 'lemmas_binary': 4963.0, 'lemmas_ternary': 2692.0, 'cpu_time': 14.5625, 'integrated_imps': 14276.0, 'integrated_jumps': 15175.0, 'guiding_paths_lits': 164462.0, 'guiding_paths': 695.0, 'splits': 0.0, 'lemmas_conflict': 8298.0, 'lemmas_loop': 13649.0, 'lemmas_other': 37780.0, 'lits_conflict': 764734.0, 'lits_loop': 111871.0, 'lits_other': 3243103.0, 'jumps': {'jumps': 8432.0, 'jumps_bounded': 1423.0, 'levels': 247250.0, 'levels_bounded': 228535.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55}

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None)

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 55]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29)

[15-11-2021_15-12-05] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [56]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(0)]), ('plan_module', [Number(56), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287365s.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(29,55).

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.200444s with result Satisfiable.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [56]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.48780890000000454, Incremental time limit = None
Running cumulative time = 20.581595400000023, Cumulative time limit = 3600
Used memory = (RSS = 613.402344Mb, VMS = 631.187500Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 87
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.555237s, Solving = 6.026358s, Total = 20.581595s, Memory = (RSS = 613.402344Mb, VMS = 631.187500Mb)), Calls = 56
Final Model :: Total atoms = 32629, Cost = (66, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=56, start_step=55, end_step=56, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.555237400000024, solving_time=6.026357999999998, total_time=20.581595400000023, memory=Memory(rss=613.40234375, vms=631.1875), step_range=range(0, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28736520000000354, solving_time=0.200443700000001, total_time=0.48780890000000454, memory=Memory(rss=613.40234375, vms=631.1875), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 212599.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 687885.0, 'bodies_tr': 687885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11316.0, 'count_bodies_tr': 11316.0, 'sccs': 1280.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26156.0, 'rules': 1084677.0, 'rules_normal': 1072625.0, 'rules_choice': 11268.0, 'rules_minimize': 112.0, 'rules_acyc': 0.0, 'rules_heuristic': 672.0, 'rules_tr': 1084503.0, 'rules_tr_normal': 1072625.0, 'rules_tr_choice': 11268.0, 'rules_tr_minimize': 112.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 498.0, 'eqs': 532087.0, 'eqs_atom': 98902.0, 'eqs_body': 13787.0, 'eqs_other': 419398.0}, 'lpStep': {'atoms': 3758.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13653.0, 'bodies_tr': 13653.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 27814.0, 'rules_normal': 27605.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27814.0, 'rules_tr_normal': 27605.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9958.0, 'eqs_atom': 1875.0, 'eqs_body': 70.0, 'eqs_other': 8013.0}, 'generator': {'vars': 115426.0, 'vars_eliminated': 0.0, 'vars_frozen': 71305.0, 'constraints': 3963.0, 'constraints_binary': 262722.0, 'constraints_ternary': 18672.0, 'acyc_edges': 0.0, 'complexity': 285933.0}}, 'solving': {'solvers': {'choices': 8147.0, 'conflicts': 38.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 78.0, 'models': 4.0, 'models_level': 5961.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 50.0, 'integrated': 120.0, 'lemmas': 170.0, 'lits_learnt': 2720.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.34375, 'integrated_imps': 40.0, 'integrated_jumps': 1834.0, 'guiding_paths_lits': 7749.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 104.0, 'lemmas_other': 40.0, 'lits_conflict': 1011.0, 'lits_loop': 914.0, 'lits_other': 795.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 14.0, 'levels': 2266.0, 'levels_bounded': 2230.0, 'max': 522.0, 'max_executed': 522.0, 'max_bounded': 521.0}}}}, 'summary': {'call': 56.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [66.0, 0.0], 'lower': [66.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.4996662139892578, 'cpu': 0.65625, 'solve': 0.16156768798828125, 'unsat': 0.031917572021484375, 'sat': 0.011968612670898438}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 21.380573272705078, 'cpu': 31.546875, 'solve': 4.551668167114258, 'unsat': 1.6661834716796875, 'sat': 0.7253475189208984}, 'models': {'enumerated': 87.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 114225.0, 'conflicts': 8988.0, 'conflicts_analyzed': 8461.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9767.0, 'models': 87.0, 'models_level': 60633.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7292.0, 'distributed_sum_lbd': 17549.0, 'integrated': 41282.0, 'lemmas': 59897.0, 'lits_learnt': 4122428.0, 'lemmas_binary': 4978.0, 'lemmas_ternary': 2692.0, 'cpu_time': 14.90625, 'integrated_imps': 14316.0, 'integrated_jumps': 17009.0, 'guiding_paths_lits': 172211.0, 'guiding_paths': 712.0, 'splits': 0.0, 'lemmas_conflict': 8324.0, 'lemmas_loop': 13753.0, 'lemmas_other': 37820.0, 'lits_conflict': 765745.0, 'lits_loop': 112785.0, 'lits_other': 3243898.0, 'jumps': {'jumps': 8461.0, 'jumps_bounded': 1437.0, 'levels': 249516.0, 'levels_bounded': 230765.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56}

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None)

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 56]:
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30)
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30)

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [57]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(0)]), ('plan_module', [Number(57), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.292532s.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None), conversion = current_last_sgoals(30,56).

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050603s with result Unsatisfiable.

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [57]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3431350999999978, Incremental time limit = None
Running cumulative time = 20.92473050000002, Cumulative time limit = 3600
Used memory = (RSS = 617.406250Mb, VMS = 633.406250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=57, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.847769200000023, solving_time=6.076961299999997, total_time=20.92473050000002, memory=Memory(rss=617.40625, vms=633.40625), step_range=range(0, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.292531799999999, solving_time=0.050603299999998796, total_time=0.3431350999999978, memory=Memory(rss=617.40625, vms=633.40625), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 216365.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 701577.0, 'bodies_tr': 701577.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11517.0, 'count_bodies_tr': 11517.0, 'sccs': 1305.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26750.0, 'rules': 1112965.0, 'rules_normal': 1100704.0, 'rules_choice': 11463.0, 'rules_minimize': 114.0, 'rules_acyc': 0.0, 'rules_heuristic': 684.0, 'rules_tr': 1112791.0, 'rules_tr_normal': 1100704.0, 'rules_tr_choice': 11463.0, 'rules_tr_minimize': 114.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 510.0, 'eqs': 542131.0, 'eqs_atom': 100785.0, 'eqs_body': 13857.0, 'eqs_other': 427489.0}, 'lpStep': {'atoms': 3766.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13692.0, 'bodies_tr': 13692.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28288.0, 'rules_normal': 28079.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28288.0, 'rules_tr_normal': 28079.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10044.0, 'eqs_atom': 1883.0, 'eqs_body': 70.0, 'eqs_other': 8091.0}, 'generator': {'vars': 118078.0, 'vars_eliminated': 0.0, 'vars_frozen': 72922.0, 'constraints': 4615.0, 'constraints_binary': 287318.0, 'constraints_ternary': 22698.0, 'acyc_edges': 0.0, 'complexity': 315291.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 7973.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 57.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3540534973144531, 'cpu': 0.453125, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 21.73462677001953, 'cpu': 32.0, 'solve': 4.562639236450195, 'unsat': 1.677154541015625, 'sat': 0.7253475189208984}, 'models': {'enumerated': 87.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 114225.0, 'conflicts': 8996.0, 'conflicts_analyzed': 8461.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 9767.0, 'models': 87.0, 'models_level': 60633.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7292.0, 'distributed_sum_lbd': 17549.0, 'integrated': 41282.0, 'lemmas': 59897.0, 'lits_learnt': 4122428.0, 'lemmas_binary': 4978.0, 'lemmas_ternary': 2692.0, 'cpu_time': 15.015625, 'integrated_imps': 14316.0, 'integrated_jumps': 17009.0, 'guiding_paths_lits': 180184.0, 'guiding_paths': 719.0, 'splits': 0.0, 'lemmas_conflict': 8324.0, 'lemmas_loop': 13753.0, 'lemmas_other': 37820.0, 'lits_conflict': 765745.0, 'lits_loop': 112785.0, 'lits_other': 3243898.0, 'jumps': {'jumps': 8461.0, 'jumps_bounded': 1437.0, 'levels': 249516.0, 'levels_bounded': 230765.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [58]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_15-12-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(0)]), ('plan_module', [Number(58), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295486s.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.581301s with result Satisfiable.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [58]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.8767870000000002, Incremental time limit = None
Running cumulative time = 21.80151750000002, Cumulative time limit = 3600
Used memory = (RSS = 628.910156Mb, VMS = 643.203125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 89
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.143256s, Solving = 6.658262s, Total = 21.801518s, Memory = (RSS = 628.910156Mb, VMS = 643.203125Mb)), Calls = 58
Final Model :: Total atoms = 33854, Cost = (69, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-12-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=58, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=15.143255500000024, solving_time=6.658261999999997, total_time=21.80151750000002, memory=Memory(rss=628.91015625, vms=643.203125), step_range=range(0, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2954863000000003, solving_time=0.5813006999999999, total_time=0.8767870000000002, memory=Memory(rss=628.91015625, vms=643.203125), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 220139.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 715308.0, 'bodies_tr': 715308.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11718.0, 'count_bodies_tr': 11718.0, 'sccs': 1330.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27344.0, 'rules': 1141727.0, 'rules_normal': 1129257.0, 'rules_choice': 11658.0, 'rules_minimize': 116.0, 'rules_acyc': 0.0, 'rules_heuristic': 696.0, 'rules_tr': 1141553.0, 'rules_tr_normal': 1129257.0, 'rules_tr_choice': 11658.0, 'rules_tr_minimize': 116.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 522.0, 'eqs': 552261.0, 'eqs_atom': 102676.0, 'eqs_body': 13927.0, 'eqs_other': 435658.0}, 'lpStep': {'atoms': 3774.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13731.0, 'bodies_tr': 13731.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28762.0, 'rules_normal': 28553.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28762.0, 'rules_tr_normal': 28553.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10130.0, 'eqs_atom': 1891.0, 'eqs_body': 70.0, 'eqs_other': 8169.0}, 'generator': {'vars': 120730.0, 'vars_eliminated': 0.0, 'vars_frozen': 74539.0, 'constraints': 5267.0, 'constraints_binary': 312380.0, 'constraints_ternary': 26662.0, 'acyc_edges': 0.0, 'complexity': 345053.0}}, 'solving': {'solvers': {'choices': 5851.0, 'conflicts': 261.0, 'conflicts_analyzed': 250.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 491.0, 'models': 2.0, 'models_level': 3141.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 225.0, 'distributed_sum_lbd': 538.0, 'integrated': 1338.0, 'lemmas': 2637.0, 'lits_learnt': 44133.0, 'lemmas_binary': 144.0, 'lemmas_ternary': 56.0, 'cpu_time': 1.25, 'integrated_imps': 567.0, 'integrated_jumps': 319.0, 'guiding_paths_lits': 8197.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 249.0, 'lemmas_loop': 1186.0, 'lemmas_other': 1202.0, 'lits_conflict': 7125.0, 'lits_loop': 9740.0, 'lits_other': 27268.0, 'jumps': {'jumps': 250.0, 'jumps_bounded': 59.0, 'levels': 20109.0, 'levels_bounded': 19730.0, 'max': 893.0, 'max_executed': 893.0, 'max_bounded': 892.0}}}}, 'summary': {'call': 58.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [69.0, 0.0], 'lower': [69.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.8888607025146484, 'cpu': 1.59375, 'solve': 0.5402126312255859, 'unsat': 0.03690147399902344, 'sat': 0.03191566467285156}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 22.62348747253418, 'cpu': 33.59375, 'solve': 5.102851867675781, 'unsat': 1.7140560150146484, 'sat': 0.75726318359375}, 'models': {'enumerated': 89.0, 'optimal': 30.0}, 'solving': {'solvers': {'choices': 120076.0, 'conflicts': 9257.0, 'conflicts_analyzed': 8711.0, 'restarts': 16.0, 'restarts_last': 202.0, 'extra': {'domain_choices': 10258.0, 'models': 89.0, 'models_level': 63774.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7517.0, 'distributed_sum_lbd': 18087.0, 'integrated': 42620.0, 'lemmas': 62534.0, 'lits_learnt': 4166561.0, 'lemmas_binary': 5122.0, 'lemmas_ternary': 2748.0, 'cpu_time': 16.265625, 'integrated_imps': 14883.0, 'integrated_jumps': 17328.0, 'guiding_paths_lits': 188381.0, 'guiding_paths': 737.0, 'splits': 0.0, 'lemmas_conflict': 8573.0, 'lemmas_loop': 14939.0, 'lemmas_other': 39022.0, 'lits_conflict': 772870.0, 'lits_loop': 122525.0, 'lits_other': 3271166.0, 'jumps': {'jumps': 8711.0, 'jumps_bounded': 1496.0, 'levels': 269625.0, 'levels_bounded': 250495.0, 'max': 1664.0, 'max_executed': 1664.0, 'max_bounded': 1663.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_15-12-07] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56, 30: 58}

[15-11-2021_15-12-07] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[15-11-2021_15-12-07] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 30 was achieved successfully.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.284128s, Solving = 0.012072s, Total = 0.296200s, Memory = (RSS = 206.820312Mb, VMS = 198.023438Mb)
2 : Statistics :: Grounding = 0.177001s, Solving = 0.009038s, Total = 0.186039s, Memory = (RSS = 210.468750Mb, VMS = 201.750000Mb)
3 : Statistics :: Grounding = 0.214026s, Solving = 0.056852s, Total = 0.270878s, Memory = (RSS = 212.648438Mb, VMS = 204.187500Mb)
4 : Statistics :: Grounding = 0.217635s, Solving = 0.007007s, Total = 0.224643s, Memory = (RSS = 214.257812Mb, VMS = 205.769531Mb)
5 : Statistics :: Grounding = 0.231906s, Solving = 0.009234s, Total = 0.241140s, Memory = (RSS = 218.136719Mb, VMS = 210.210938Mb)
6 : Statistics :: Grounding = 0.214007s, Solving = 0.013613s, Total = 0.227620s, Memory = (RSS = 222.246094Mb, VMS = 214.910156Mb)
7 : Statistics :: Grounding = 0.232535s, Solving = 0.015558s, Total = 0.248093s, Memory = (RSS = 226.152344Mb, VMS = 218.300781Mb)
8 : Statistics :: Grounding = 0.243459s, Solving = 0.019678s, Total = 0.263137s, Memory = (RSS = 232.339844Mb, VMS = 225.277344Mb)
9 : Statistics :: Grounding = 0.248449s, Solving = 0.027743s, Total = 0.276192s, Memory = (RSS = 236.246094Mb, VMS = 228.507812Mb)
10 : Statistics :: Grounding = 0.266833s, Solving = 0.030000s, Total = 0.296833s, Memory = (RSS = 244.566406Mb, VMS = 238.484375Mb)
11 : Statistics :: Grounding = 0.252803s, Solving = 0.042466s, Total = 0.295269s, Memory = (RSS = 248.804688Mb, VMS = 242.238281Mb)
12 : Statistics :: Grounding = 0.246769s, Solving = 0.065091s, Total = 0.311860s, Memory = (RSS = 258.699219Mb, VMS = 255.296875Mb)
13 : Statistics :: Grounding = 0.262959s, Solving = 0.103116s, Total = 0.366075s, Memory = (RSS = 264.894531Mb, VMS = 260.121094Mb)
14 : Statistics :: Grounding = 0.267125s, Solving = 0.039150s, Total = 0.306275s, Memory = (RSS = 268.644531Mb, VMS = 262.925781Mb)
15 : Statistics :: Grounding = 0.267509s, Solving = 0.269818s, Total = 0.537327s, Memory = (RSS = 283.707031Mb, VMS = 277.468750Mb)
16 : Statistics :: Grounding = 0.268780s, Solving = 0.066745s, Total = 0.335525s, Memory = (RSS = 295.007812Mb, VMS = 296.117188Mb)
17 : Statistics :: Grounding = 0.270245s, Solving = 0.196221s, Total = 0.466466s, Memory = (RSS = 307.492188Mb, VMS = 307.335938Mb)
18 : Statistics :: Grounding = 0.268724s, Solving = 0.082561s, Total = 0.351284s, Memory = (RSS = 316.988281Mb, VMS = 315.171875Mb)
19 : Statistics :: Grounding = 0.270026s, Solving = 0.166364s, Total = 0.436390s, Memory = (RSS = 327.851562Mb, VMS = 324.691406Mb)
20 : Statistics :: Grounding = 0.279604s, Solving = 0.034192s, Total = 0.313796s, Memory = (RSS = 332.535156Mb, VMS = 328.101562Mb)
21 : Statistics :: Grounding = 0.273420s, Solving = 0.261086s, Total = 0.534506s, Memory = (RSS = 340.019531Mb, VMS = 334.746094Mb)
22 : Statistics :: Grounding = 0.283492s, Solving = 0.401929s, Total = 0.685421s, Memory = (RSS = 356.628906Mb, VMS = 362.121094Mb)
23 : Statistics :: Grounding = 0.280093s, Solving = 0.121760s, Total = 0.401853s, Memory = (RSS = 372.664062Mb, VMS = 377.468750Mb)
24 : Statistics :: Grounding = 0.241840s, Solving = 0.025851s, Total = 0.267691s, Memory = (RSS = 374.117188Mb, VMS = 378.449219Mb)
25 : Statistics :: Grounding = 0.236984s, Solving = 0.166035s, Total = 0.403019s, Memory = (RSS = 378.312500Mb, VMS = 381.964844Mb)
26 : Statistics :: Grounding = 0.235320s, Solving = 0.033423s, Total = 0.268744s, Memory = (RSS = 379.691406Mb, VMS = 382.664062Mb)
27 : Statistics :: Grounding = 0.254529s, Solving = 0.032794s, Total = 0.287324s, Memory = (RSS = 382.000000Mb, VMS = 383.320312Mb)
28 : Statistics :: Grounding = 0.264553s, Solving = 0.070678s, Total = 0.335230s, Memory = (RSS = 386.484375Mb, VMS = 386.804688Mb)
29 : Statistics :: Grounding = 0.322345s, Solving = 0.079571s, Total = 0.401917s, Memory = (RSS = 398.839844Mb, VMS = 398.132812Mb)
30 : Statistics :: Grounding = 0.250408s, Solving = 0.039272s, Total = 0.289680s, Memory = (RSS = 402.128906Mb, VMS = 400.132812Mb)
31 : Statistics :: Grounding = 0.250967s, Solving = 0.085792s, Total = 0.336759s, Memory = (RSS = 409.828125Mb, VMS = 405.949219Mb)
32 : Statistics :: Grounding = 0.281112s, Solving = 0.273174s, Total = 0.554286s, Memory = (RSS = 420.789062Mb, VMS = 416.578125Mb)
33 : Statistics :: Grounding = 0.277160s, Solving = 0.047405s, Total = 0.324565s, Memory = (RSS = 428.007812Mb, VMS = 441.359375Mb)
34 : Statistics :: Grounding = 0.300818s, Solving = 0.144155s, Total = 0.444972s, Memory = (RSS = 443.070312Mb, VMS = 454.914062Mb)
35 : Statistics :: Grounding = 0.280591s, Solving = 0.129652s, Total = 0.410243s, Memory = (RSS = 457.222656Mb, VMS = 467.375000Mb)
36 : Statistics :: Grounding = 0.279652s, Solving = 0.053152s, Total = 0.332803s, Memory = (RSS = 434.843750Mb, VMS = 443.144531Mb)
37 : Statistics :: Grounding = 0.182989s, Solving = 0.057822s, Total = 0.240811s, Memory = (RSS = 439.093750Mb, VMS = 446.863281Mb)
38 : Statistics :: Grounding = 0.186121s, Solving = 0.344006s, Total = 0.530127s, Memory = (RSS = 450.503906Mb, VMS = 458.355469Mb)
39 : Statistics :: Grounding = 0.242378s, Solving = 0.089205s, Total = 0.331584s, Memory = (RSS = 459.214844Mb, VMS = 465.335938Mb)
40 : Statistics :: Grounding = 0.259008s, Solving = 0.117983s, Total = 0.376991s, Memory = (RSS = 474.289062Mb, VMS = 479.292969Mb)
41 : Statistics :: Grounding = 0.264137s, Solving = 0.042377s, Total = 0.306513s, Memory = (RSS = 476.152344Mb, VMS = 480.023438Mb)
42 : Statistics :: Grounding = 0.268450s, Solving = 0.335828s, Total = 0.604278s, Memory = (RSS = 485.906250Mb, VMS = 489.214844Mb)
43 : Statistics :: Grounding = 0.268470s, Solving = 0.047887s, Total = 0.316357s, Memory = (RSS = 487.871094Mb, VMS = 489.406250Mb)
44 : Statistics :: Grounding = 0.275407s, Solving = 0.075635s, Total = 0.351041s, Memory = (RSS = 490.609375Mb, VMS = 490.613281Mb)
45 : Statistics :: Grounding = 0.275938s, Solving = 0.157183s, Total = 0.433121s, Memory = (RSS = 501.234375Mb, VMS = 500.355469Mb)
46 : Statistics :: Grounding = 0.283246s, Solving = 0.107447s, Total = 0.390692s, Memory = (RSS = 513.437500Mb, VMS = 510.839844Mb)
47 : Statistics :: Grounding = 0.288187s, Solving = 0.118410s, Total = 0.406596s, Memory = (RSS = 532.207031Mb, VMS = 527.863281Mb)
48 : Statistics :: Grounding = 0.253289s, Solving = 0.059185s, Total = 0.312474s, Memory = (RSS = 536.085938Mb, VMS = 531.257812Mb)
49 : Statistics :: Grounding = 0.245114s, Solving = 0.046784s, Total = 0.291897s, Memory = (RSS = 540.046875Mb, VMS = 535.441406Mb)
50 : Statistics :: Grounding = 0.310639s, Solving = 0.518097s, Total = 0.828736s, Memory = (RSS = 558.257812Mb, VMS = 552.816406Mb)
51 : Statistics :: Grounding = 0.278534s, Solving = 0.047166s, Total = 0.325700s, Memory = (RSS = 558.074219Mb, VMS = 552.136719Mb)
52 : Statistics :: Grounding = 0.263560s, Solving = 0.136765s, Total = 0.400325s, Memory = (RSS = 571.878906Mb, VMS = 594.371094Mb)
53 : Statistics :: Grounding = 0.257206s, Solving = 0.051271s, Total = 0.308477s, Memory = (RSS = 572.597656Mb, VMS = 594.789062Mb)
54 : Statistics :: Grounding = 0.277246s, Solving = 0.069523s, Total = 0.346768s, Memory = (RSS = 576.789062Mb, VMS = 596.867188Mb)
55 : Statistics :: Grounding = 0.290148s, Solving = 0.171092s, Total = 0.461240s, Memory = (RSS = 593.277344Mb, VMS = 612.707031Mb)
56 : Statistics :: Grounding = 0.287365s, Solving = 0.200444s, Total = 0.487809s, Memory = (RSS = 613.402344Mb, VMS = 631.187500Mb)
57 : Statistics :: Grounding = 0.292532s, Solving = 0.050603s, Total = 0.343135s, Memory = (RSS = 617.406250Mb, VMS = 633.406250Mb)
58 : Statistics :: Grounding = 0.295486s, Solving = 0.581301s, Total = 0.876787s, Memory = (RSS = 628.910156Mb, VMS = 643.203125Mb)

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 21.801518s due to: External generator exit.

[15-11-2021_15-12-07] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_15-12-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24, 47: 24, 48: 25, 49: 25, 50: 26, 51: 27, 52: 27, 53: 28, 54: 28, 55: 28, 56: 29, 57: 29, 58: 30}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 47, 25: 49, 26: 50, 27: 52, 28: 55, 29: 57, 30: 58}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.143256s, Solving = 6.658262s, Total = 21.801518s, Memory = (RSS = 628.910156Mb, VMS = 643.203125Mb)), Calls = 58
Model :: Total atoms = 33854, Cost = (69, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : lift(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 47:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 48:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 49:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 50:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 51:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 53:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 55:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 57:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 58:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
        talos : put(manipulator_end_2,(block,4),(block,5))

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 58, Actions = 21

[15-11-2021_15-12-09] INFO :: ASH Planner Main #1 >>           ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 5}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 9}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,store_room_door_handle_outer)', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,store_room_door)', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,store_room_door_handle_outer)', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'S': 21}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,5)))', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'S': 22}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,5))', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 31}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 33}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 35}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,2)))', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 37}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,2))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 38}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,2),(block,3))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'lift(manipulator_end_1,(block,1))', 'S': 39}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,2))', 'S': 39})])
(40, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 40}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 40})])
(41, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 41})])
(42, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 42})])
(43, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 43})])
(44, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 44})])
(45, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 45})])
(46, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 46})])
(47, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 47})])
(48, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 48})])
(49, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 49})])
(50, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 50})])
(51, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 51})])
(52, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 52})])
(53, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 53})])
(54, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 54})])
(55, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 55})])
(56, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 56})])
(57, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 57})])
(58, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 58}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 58})])

Hierarchical planning summary: (Execution latency = 12.288798300000035, Overall total planning time = 29.367179500000038, Average partial plan yield time = 14.510644875000015)

     ====================================================================================================================================================================================     
| Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.792s (Gro =   1.543s, Sea =   0.249s), Expan (L=1.00, A=1.00) (Dev = (L=0.00, A=0.00), Bal = (L=0.00,  
                                                                                          A=0.00)) |                                                                                          
| Level =  2 (com-ref), Length =  30, Actions =  49 (Com = 0.61), Sgs = 49, Time =   5.733s (Gro =   4.441s, Sea =   1.293s), Expan (L=2.14, A=2.33) (Dev = (L=1.61, A=2.89), Bal = (L=0.75,  
                                                                                          A=1.24)) |                                                                                          
 | Level =  1 (com-ref), Length =  58, Actions =  75 (Com = 0.77), Sgs = 0, Time =  21.842s (Gro =  15.176s, Sea =   6.666s), Expan (L=1.93, A=1.53) (Dev = (L=1.51, A=0.99), Bal = (L=0.78,  
                                                                                          A=0.65)) |                                                                                          
     ====================================================================================================================================================================================     

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_15-12-09] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_15-12-09] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2021-11-15_15-11-12.txt

[15-11-2021_15-12-09] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2021-11-15_15-11-12.txt

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[15-11-2021_15-12-09] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

