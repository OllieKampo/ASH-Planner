[15-11-2021_14-29-21] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[15-11-2021_14-29-21] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[15-11-2021_14-29-21] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[15-11-2021_14-29-21] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_3.lp'
'-conc'
'True'
'-ao'
'verbose'
'-strat'
'basic'
'-bound'
'2'
'-op'
'standard'
'-ir'
'0'
'-er'
'10'
'-ll'
'3=50'
'2=100'
'1=150'
'-save'
'True'
'-rblend'
'0.2'

[15-11-2021_14-29-21] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-15_14-29-21.txt')
('log_file', './logs/ASH_Log_2021-11-15_14-29-21.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-15_14-29-21.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 10)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0.2)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[15-11-2021_14-29-22] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[15-11-2021_14-29-22] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'static_state': True, 'entities': True, 'goal_state': True, 'initial_state': True}.

[15-11-2021_14-29-22] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[15-11-2021_14-29-22] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 349 rules

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.007673099999999877s

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.016558s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.004842s with result Satisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.016558s, Solving = 0.004842s, Total = 0.021401s, Memory = (RSS = 102.800781Mb, VMS = 89.859375Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-23] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[15-11-2021_14-29-23] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Generating initial states...

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[15-11-2021_14-29-23] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 349 rules

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0026543999999999457s

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[15-11-2021_14-29-23] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.119250s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.021969s with result Satisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.119250s, Solving = 0.021969s, Total = 0.141219s, Memory = (RSS = 112.421875Mb, VMS = 99.394531Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.119250s, Solving = 0.021969s, Total = 0.141219s, Memory = (RSS = 112.421875Mb, VMS = 99.394531Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Generating final-goals...

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[15-11-2021_14-29-23] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 349 rules

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.002701899999999924s

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[15-11-2021_14-29-23] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.071028s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.013860s with result Satisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.071028s, Solving = 0.013860s, Total = 0.084889s, Memory = (RSS = 111.023438Mb, VMS = 98.062500Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.071028s, Solving = 0.013860s, Total = 0.084889s, Memory = (RSS = 111.023438Mb, VMS = 98.062500Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency enabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_14-29-23] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_14-29-23] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-23] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002947CB1A5E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 563 rules

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007048999999999417s

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.023334s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005391s with result Satisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002947CB10900>

[15-11-2021_14-29-23] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002947CB10900>)

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105816s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005957s with result Unsatisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11177320000000002, Incremental time limit = None
Running cumulative time = 0.11177320000000002, Cumulative time limit = 3600
Used memory = (RSS = 112.441406Mb, VMS = 99.164062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085248s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003072s with result Unsatisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.088319900000001, Incremental time limit = None
Running cumulative time = 0.20009310000000102, Cumulative time limit = 3600
Used memory = (RSS = 113.460938Mb, VMS = 100.402344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100703s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004385s with result Unsatisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1050886000000002, Incremental time limit = None
Running cumulative time = 0.3051817000000012, Cumulative time limit = 3600
Used memory = (RSS = 114.617188Mb, VMS = 101.574219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100692s.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005372s with result Unsatisfiable.

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10606419999999872, Incremental time limit = None
Running cumulative time = 0.41124589999999994, Cumulative time limit = 3600
Used memory = (RSS = 116.257812Mb, VMS = 103.246094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096008s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005825s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10183389999999992, Incremental time limit = None
Running cumulative time = 0.5130797999999999, Cumulative time limit = 3600
Used memory = (RSS = 119.437500Mb, VMS = 106.468750Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110072s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006527s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11659979999999948, Incremental time limit = None
Running cumulative time = 0.6296795999999993, Cumulative time limit = 3600
Used memory = (RSS = 121.796875Mb, VMS = 108.714844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119255s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007588s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12684229999999985, Incremental time limit = None
Running cumulative time = 0.7565218999999992, Cumulative time limit = 3600
Used memory = (RSS = 124.925781Mb, VMS = 112.011719Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118575s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010342s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1289163999999996, Incremental time limit = None
Running cumulative time = 0.8854382999999988, Cumulative time limit = 3600
Used memory = (RSS = 126.839844Mb, VMS = 113.777344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107374s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010256s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11763000000000012, Incremental time limit = None
Running cumulative time = 1.003068299999999, Cumulative time limit = 3600
Used memory = (RSS = 130.019531Mb, VMS = 117.460938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104509s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012003s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11651149999999966, Incremental time limit = None
Running cumulative time = 1.1195797999999986, Cumulative time limit = 3600
Used memory = (RSS = 132.089844Mb, VMS = 119.386719Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106163s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020587s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12674949999999896, Incremental time limit = None
Running cumulative time = 1.2463292999999975, Cumulative time limit = 3600
Used memory = (RSS = 135.058594Mb, VMS = 122.078125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105964s.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031541s with result Unsatisfiable.

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13750459999999975, Incremental time limit = None
Running cumulative time = 1.3838338999999973, Cumulative time limit = 3600
Used memory = (RSS = 139.742188Mb, VMS = 127.722656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122430s.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050435s with result Unsatisfiable.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17286529999999978, Incremental time limit = None
Running cumulative time = 1.556699199999997, Cumulative time limit = 3600
Used memory = (RSS = 141.855469Mb, VMS = 129.781250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114615s.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.101095s with result Satisfiable.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21570999999999962, Incremental time limit = None
Running cumulative time = 1.7724091999999967, Cumulative time limit = 3600
Used memory = (RSS = 150.058594Mb, VMS = 137.652344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.497424s, Solving = 0.274985s, Total = 1.772409s, Memory = (RSS = 150.058594Mb, VMS = 137.652344Mb)), Calls = 14
Final Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.105816s, Solving = 0.005957s, Total = 0.111773s, Memory = (RSS = 112.441406Mb, VMS = 99.164062Mb)
2 : Statistics :: Grounding = 0.085248s, Solving = 0.003072s, Total = 0.088320s, Memory = (RSS = 113.460938Mb, VMS = 100.402344Mb)
3 : Statistics :: Grounding = 0.100703s, Solving = 0.004385s, Total = 0.105089s, Memory = (RSS = 114.617188Mb, VMS = 101.574219Mb)
4 : Statistics :: Grounding = 0.100692s, Solving = 0.005372s, Total = 0.106064s, Memory = (RSS = 116.257812Mb, VMS = 103.246094Mb)
5 : Statistics :: Grounding = 0.096008s, Solving = 0.005825s, Total = 0.101834s, Memory = (RSS = 119.437500Mb, VMS = 106.468750Mb)
6 : Statistics :: Grounding = 0.110072s, Solving = 0.006527s, Total = 0.116600s, Memory = (RSS = 121.796875Mb, VMS = 108.714844Mb)
7 : Statistics :: Grounding = 0.119255s, Solving = 0.007588s, Total = 0.126842s, Memory = (RSS = 124.925781Mb, VMS = 112.011719Mb)
8 : Statistics :: Grounding = 0.118575s, Solving = 0.010342s, Total = 0.128916s, Memory = (RSS = 126.839844Mb, VMS = 113.777344Mb)
9 : Statistics :: Grounding = 0.107374s, Solving = 0.010256s, Total = 0.117630s, Memory = (RSS = 130.019531Mb, VMS = 117.460938Mb)
10 : Statistics :: Grounding = 0.104509s, Solving = 0.012003s, Total = 0.116511s, Memory = (RSS = 132.089844Mb, VMS = 119.386719Mb)
11 : Statistics :: Grounding = 0.106163s, Solving = 0.020587s, Total = 0.126749s, Memory = (RSS = 135.058594Mb, VMS = 122.078125Mb)
12 : Statistics :: Grounding = 0.105964s, Solving = 0.031541s, Total = 0.137505s, Memory = (RSS = 139.742188Mb, VMS = 127.722656Mb)
13 : Statistics :: Grounding = 0.122430s, Solving = 0.050435s, Total = 0.172865s, Memory = (RSS = 141.855469Mb, VMS = 129.781250Mb)
14 : Statistics :: Grounding = 0.114615s, Solving = 0.101095s, Total = 0.215710s, Memory = (RSS = 150.058594Mb, VMS = 137.652344Mb)

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.772409s due to: Stop condition reached.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.497424s, Solving = 0.274985s, Total = 1.772409s, Memory = (RSS = 150.058594Mb, VMS = 137.652344Mb)), Calls = 14
Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 14 :: Actions = 21                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 6:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 7:
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 9:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 10:
    Planned actions:
        talos : lift(manipulator_arm_2,(block,1))
        talos : release(manipulator_arm_1,(block,2))
Step 11:
    Planned actions:
        talos : move(store_room)
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 13:
    Planned actions:
        talos : move(puzzle_room)
Step 14:
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
        talos : put(manipulator_arm_2,(block,1),(block,2))

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.801s (Gro =   1.521s, Sea =   0.280s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[15-11-2021_14-29-25] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=0, blend=Blend(left=0, right=0.2)

[15-11-2021_14-29-25] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[15-11-2021_14-29-25] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=7, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.801s (Gro =   1.521s, Sea =   0.280s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.801s (Gro =   1.521s, Sea =   0.280s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-8], problem number = 1, increment number = 1

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_14-29-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_14-29-25] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 6).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 6).
sub_goal(3, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 8).

[15-11-2021_14-29-25] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002947CB0FD30>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 792 rules

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0065075000000005545s

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026698s.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005844s with result Satisfiable.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002947FC79F90>

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002947FC79F90>)

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152092s.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009376s with result Unsatisfiable.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16146769999999933, Incremental time limit = None
Running cumulative time = 0.16146769999999933, Cumulative time limit = 3600
Used memory = (RSS = 128.015625Mb, VMS = 115.976562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.15209209999999995, solving_time=0.009375599999999373, total_time=0.16146769999999933, memory=Memory(rss=128.015625, vms=115.9765625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15209209999999995, solving_time=0.009375599999999373, total_time=0.16146769999999933, memory=Memory(rss=128.015625, vms=115.9765625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8549.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10282.0, 'bodies_tr': 10282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 18251.0, 'rules_normal': 17906.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18249.0, 'rules_tr_normal': 17906.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 15357.0, 'eqs_atom': 3454.0, 'eqs_body': 1143.0, 'eqs_other': 10760.0}, 'lpStep': {'atoms': 4054.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9106.0, 'bodies_tr': 9106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 13397.0, 'rules_normal': 13052.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13395.0, 'rules_tr_normal': 13052.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9219.0, 'eqs_atom': 1171.0, 'eqs_body': 378.0, 'eqs_other': 7670.0}, 'generator': {'vars': 1841.0, 'vars_eliminated': 0.0, 'vars_frozen': 1255.0, 'constraints': 27.0, 'constraints_binary': 779.0, 'constraints_ternary': 121.0, 'acyc_edges': 0.0, 'complexity': 939.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.16158485412597656, 'cpu': 0.15625, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2014789581298828, 'cpu': 0.1875, 'solve': 0.0059871673583984375, 'unsat': 0.0019969940185546875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 134.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129630s.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004446s with result Unsatisfiable.

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1340760999999997, Incremental time limit = None
Running cumulative time = 0.295543799999999, Cumulative time limit = 3600
Used memory = (RSS = 130.238281Mb, VMS = 119.101562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.2817222999999993, solving_time=0.013821499999999709, total_time=0.295543799999999, memory=Memory(rss=130.23828125, vms=119.1015625), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12963019999999936, solving_time=0.004445900000000336, total_time=0.1340760999999997, memory=Memory(rss=130.23828125, vms=119.1015625), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10233.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16880.0, 'bodies_tr': 16880.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 406.0, 'count_bodies_tr': 406.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 26955.0, 'rules_normal': 26444.0, 'rules_choice': 483.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 26941.0, 'rules_tr_normal': 26444.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 18491.0, 'eqs_atom': 4176.0, 'eqs_body': 1590.0, 'eqs_other': 12725.0}, 'lpStep': {'atoms': 1684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6598.0, 'bodies_tr': 6598.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 8704.0, 'rules_normal': 8538.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 8692.0, 'rules_tr_normal': 8538.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3134.0, 'eqs_atom': 722.0, 'eqs_body': 447.0, 'eqs_other': 1965.0}, 'generator': {'vars': 1982.0, 'vars_eliminated': 0.0, 'vars_frozen': 1386.0, 'constraints': 71.0, 'constraints_binary': 1234.0, 'constraints_ternary': 211.0, 'acyc_edges': 0.0, 'complexity': 1544.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 9.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 9.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.134613037109375, 'cpu': 0.140625, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3360919952392578, 'cpu': 0.328125, 'solve': 0.0069828033447265625, 'unsat': 0.0029926300048828125, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 13.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 320.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 13.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121620s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005010s with result Unsatisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12663009999999986, Incremental time limit = None
Running cumulative time = 0.4221738999999989, Cumulative time limit = 3600
Used memory = (RSS = 131.343750Mb, VMS = 119.800781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.40334239999999877, solving_time=0.018831500000000112, total_time=0.4221738999999989, memory=Memory(rss=131.34375, vms=119.80078125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12162009999999945, solving_time=0.005010000000000403, total_time=0.12663009999999986, memory=Memory(rss=131.34375, vms=119.80078125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 12252.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23743.0, 'bodies_tr': 23743.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 586.0, 'count_bodies_tr': 586.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 36120.0, 'rules_normal': 35443.0, 'rules_choice': 635.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 36094.0, 'rules_tr_normal': 35443.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 22938.0, 'eqs_atom': 5083.0, 'eqs_body': 2048.0, 'eqs_other': 15807.0}, 'lpStep': {'atoms': 2019.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6863.0, 'bodies_tr': 6863.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 9165.0, 'rules_normal': 8999.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9153.0, 'rules_tr_normal': 8999.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4447.0, 'eqs_atom': 907.0, 'eqs_body': 458.0, 'eqs_other': 3082.0}, 'generator': {'vars': 2331.0, 'vars_eliminated': 0.0, 'vars_frozen': 1645.0, 'constraints': 145.0, 'constraints_binary': 2397.0, 'constraints_ternary': 540.0, 'acyc_edges': 0.0, 'complexity': 3142.0}}, 'solving': {'solvers': {'choices': 97.0, 'conflicts': 29.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 3.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 20.0, 'integrated': 75.0, 'lemmas': 84.0, 'lits_learnt': 113.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 63.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 246.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 4.0, 'lemmas_other': 63.0, 'lits_conflict': 26.0, 'lits_loop': 24.0, 'lits_other': 63.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 8.0, 'levels': 415.0, 'levels_bounded': 333.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.12766075134277344, 'cpu': 0.125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.46375274658203125, 'cpu': 0.453125, 'solve': 0.008977890014648438, 'unsat': 0.0049877166748046875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 97.0, 'conflicts': 36.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 3.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 26.0, 'integrated': 75.0, 'lemmas': 90.0, 'lits_learnt': 126.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 63.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 566.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 10.0, 'lemmas_other': 63.0, 'lits_conflict': 26.0, 'lits_loop': 37.0, 'lits_other': 63.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 8.0, 'levels': 415.0, 'levels_bounded': 333.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130833s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007122s with result Unsatisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13795509999999922, Incremental time limit = None
Running cumulative time = 0.5601289999999981, Cumulative time limit = 3600
Used memory = (RSS = 133.687500Mb, VMS = 122.574219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5341750999999979, solving_time=0.025953900000000196, total_time=0.5601289999999981, memory=Memory(rss=133.6875, vms=122.57421875), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13083269999999914, solving_time=0.007122400000000084, total_time=0.13795509999999922, memory=Memory(rss=133.6875, vms=122.57421875), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 14430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30879.0, 'bodies_tr': 30879.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 766.0, 'count_bodies_tr': 766.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 572.0, 'rules': 45588.0, 'rules_normal': 44745.0, 'rules_choice': 787.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 45554.0, 'rules_tr_normal': 44745.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 27384.0, 'eqs_atom': 5977.0, 'eqs_body': 2440.0, 'eqs_other': 18967.0}, 'lpStep': {'atoms': 2178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7136.0, 'bodies_tr': 7136.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9468.0, 'rules_normal': 9302.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9460.0, 'rules_tr_normal': 9302.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4446.0, 'eqs_atom': 894.0, 'eqs_body': 392.0, 'eqs_other': 3160.0}, 'generator': {'vars': 2943.0, 'vars_eliminated': 0.0, 'vars_frozen': 2091.0, 'constraints': 214.0, 'constraints_binary': 4271.0, 'constraints_ternary': 1032.0, 'acyc_edges': 0.0, 'complexity': 5613.0}}, 'solving': {'solvers': {'choices': 93.0, 'conflicts': 30.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 13.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 23.0, 'integrated': 58.0, 'lemmas': 88.0, 'lits_learnt': 217.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 51.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 357.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 11.0, 'lemmas_other': 58.0, 'lits_conflict': 62.0, 'lits_loop': 57.0, 'lits_other': 98.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 17.0, 'levels': 805.0, 'levels_bounded': 727.0, 'max': 62.0, 'max_executed': 53.0, 'max_bounded': 52.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1386280059814453, 'cpu': 0.140625, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6023807525634766, 'cpu': 0.59375, 'solve': 0.0109710693359375, 'unsat': 0.00698089599609375, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 190.0, 'conflicts': 66.0, 'conflicts_analyzed': 40.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 16.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 39.0, 'distributed_sum_lbd': 49.0, 'integrated': 133.0, 'lemmas': 178.0, 'lits_learnt': 343.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 114.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 923.0, 'guiding_paths': 36.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 21.0, 'lemmas_other': 121.0, 'lits_conflict': 88.0, 'lits_loop': 94.0, 'lits_other': 161.0, 'jumps': {'jumps': 40.0, 'jumps_bounded': 25.0, 'levels': 1220.0, 'levels_bounded': 1060.0, 'max': 62.0, 'max_executed': 53.0, 'max_bounded': 52.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153548s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012859s with result Unsatisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16640690000000014, Incremental time limit = None
Running cumulative time = 0.7265358999999982, Cumulative time limit = 3600
Used memory = (RSS = 138.242188Mb, VMS = 127.957031Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6877233999999968, solving_time=0.03881250000000147, total_time=0.7265358999999982, memory=Memory(rss=138.2421875, vms=127.95703125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15354829999999886, solving_time=0.012858600000001275, total_time=0.16640690000000014, memory=Memory(rss=138.2421875, vms=127.95703125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38415.0, 'bodies_tr': 38415.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 946.0, 'count_bodies_tr': 946.0, 'sccs': 64.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 884.0, 'rules': 55580.0, 'rules_normal': 54571.0, 'rules_choice': 939.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 55544.0, 'rules_tr_normal': 54571.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 24.0, 'eqs': 32723.0, 'eqs_atom': 6902.0, 'eqs_body': 2657.0, 'eqs_other': 23164.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7536.0, 'bodies_tr': 7536.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 9992.0, 'rules_normal': 9826.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9990.0, 'rules_tr_normal': 9826.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5339.0, 'eqs_atom': 925.0, 'eqs_body': 217.0, 'eqs_other': 4197.0}, 'generator': {'vars': 4321.0, 'vars_eliminated': 0.0, 'vars_frozen': 3039.0, 'constraints': 511.0, 'constraints_binary': 9647.0, 'constraints_ternary': 2254.0, 'acyc_edges': 0.0, 'complexity': 12548.0}}, 'solving': {'solvers': {'choices': 203.0, 'conflicts': 47.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 31.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 55.0, 'integrated': 126.0, 'lemmas': 126.0, 'lits_learnt': 424.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.0, 'integrated_imps': 59.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 366.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 19.0, 'lemmas_other': 79.0, 'lits_conflict': 102.0, 'lits_loop': 90.0, 'lits_other': 232.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 15.0, 'levels': 421.0, 'levels_bounded': 324.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 62.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.16755104064941406, 'cpu': 0.171875, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7699317932128906, 'cpu': 0.765625, 'solve': 0.013933181762695312, 'unsat': 0.009943008422851562, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 393.0, 'conflicts': 113.0, 'conflicts_analyzed': 78.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 47.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 67.0, 'distributed_sum_lbd': 104.0, 'integrated': 259.0, 'lemmas': 304.0, 'lits_learnt': 767.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.0, 'integrated_imps': 173.0, 'integrated_jumps': 142.0, 'guiding_paths_lits': 1289.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 64.0, 'lemmas_loop': 40.0, 'lemmas_other': 200.0, 'lits_conflict': 190.0, 'lits_loop': 184.0, 'lits_other': 393.0, 'jumps': {'jumps': 78.0, 'jumps_bounded': 40.0, 'levels': 1641.0, 'levels_bounded': 1384.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 62.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129275s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008386s with result Unsatisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13766150000000188, Incremental time limit = None
Running cumulative time = 0.8641974000000001, Cumulative time limit = 3600
Used memory = (RSS = 139.820312Mb, VMS = 128.578125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8169984999999977, solving_time=0.047198900000002375, total_time=0.8641974000000001, memory=Memory(rss=139.8203125, vms=128.578125), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12927510000000098, solving_time=0.008386400000000904, total_time=0.13766150000000188, memory=Memory(rss=139.8203125, vms=128.578125), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 19026.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45767.0, 'bodies_tr': 45767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1126.0, 'count_bodies_tr': 1126.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 971.0, 'rules': 65386.0, 'rules_normal': 64211.0, 'rules_choice': 1091.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 65342.0, 'rules_tr_normal': 64211.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 28.0, 'eqs': 37767.0, 'eqs_atom': 7926.0, 'eqs_body': 3093.0, 'eqs_other': 26748.0}, 'lpStep': {'atoms': 2324.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7352.0, 'bodies_tr': 7352.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 9806.0, 'rules_normal': 9640.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9798.0, 'rules_tr_normal': 9640.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 5044.0, 'eqs_atom': 1024.0, 'eqs_body': 436.0, 'eqs_other': 3584.0}, 'generator': {'vars': 5009.0, 'vars_eliminated': 0.0, 'vars_frozen': 3512.0, 'constraints': 343.0, 'constraints_binary': 7537.0, 'constraints_ternary': 1860.0, 'acyc_edges': 0.0, 'complexity': 12548.0}}, 'solving': {'solvers': {'choices': 376.0, 'conflicts': 75.0, 'conflicts_analyzed': 67.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 34.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 56.0, 'distributed_sum_lbd': 109.0, 'integrated': 278.0, 'lemmas': 276.0, 'lits_learnt': 719.0, 'lemmas_binary': 77.0, 'lemmas_ternary': 19.0, 'cpu_time': 0.0, 'integrated_imps': 160.0, 'integrated_jumps': 239.0, 'guiding_paths_lits': 497.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 14.0, 'lemmas_other': 206.0, 'lits_conflict': 181.0, 'lits_loop': 70.0, 'lits_other': 468.0, 'jumps': {'jumps': 67.0, 'jumps_bounded': 23.0, 'levels': 943.0, 'levels_bounded': 807.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 72.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1397228240966797, 'cpu': 0.140625, 'solve': 0.0030879974365234375, 'unsat': 0.0030879974365234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9096546173095703, 'cpu': 0.90625, 'solve': 0.01702117919921875, 'unsat': 0.013031005859375, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 769.0, 'conflicts': 188.0, 'conflicts_analyzed': 145.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 81.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 123.0, 'distributed_sum_lbd': 213.0, 'integrated': 537.0, 'lemmas': 580.0, 'lits_learnt': 1486.0, 'lemmas_binary': 113.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.0, 'integrated_imps': 333.0, 'integrated_jumps': 381.0, 'guiding_paths_lits': 1786.0, 'guiding_paths': 56.0, 'splits': 0.0, 'lemmas_conflict': 120.0, 'lemmas_loop': 54.0, 'lemmas_other': 406.0, 'lits_conflict': 371.0, 'lits_loop': 254.0, 'lits_other': 861.0, 'jumps': {'jumps': 145.0, 'jumps_bounded': 63.0, 'levels': 2584.0, 'levels_bounded': 2191.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 72.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129191s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047297s with result Satisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17648810000000026, Incremental time limit = None
Running cumulative time = 1.0406855000000004, Cumulative time limit = 3600
Used memory = (RSS = 144.015625Mb, VMS = 131.996094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.946189s, Solving = 0.094496s, Total = 1.040686s, Memory = (RSS = 144.015625Mb, VMS = 131.996094Mb)), Calls = 7
Final Model :: Total atoms = 5611, Cost = (6, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9461891999999983, solving_time=0.09449630000000209, total_time=1.0406855000000004, memory=Memory(rss=144.015625, vms=131.99609375), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12919070000000055, solving_time=0.04729739999999971, total_time=0.17648810000000026, memory=Memory(rss=144.015625, vms=131.99609375), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 21304.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 53086.0, 'bodies_tr': 53086.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1306.0, 'count_bodies_tr': 1306.0, 'sccs': 84.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1058.0, 'rules': 75185.0, 'rules_normal': 73844.0, 'rules_choice': 1243.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 75133.0, 'rules_tr_normal': 73844.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 42692.0, 'eqs_atom': 8917.0, 'eqs_body': 3497.0, 'eqs_other': 30278.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7319.0, 'bodies_tr': 7319.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 9799.0, 'rules_normal': 9633.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9791.0, 'rules_tr_normal': 9633.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4925.0, 'eqs_atom': 991.0, 'eqs_body': 404.0, 'eqs_other': 3530.0}, 'generator': {'vars': 5697.0, 'vars_eliminated': 0.0, 'vars_frozen': 3985.0, 'constraints': 382.0, 'constraints_binary': 8434.0, 'constraints_ternary': 2085.0, 'acyc_edges': 0.0, 'complexity': 12548.0}}, 'solving': {'solvers': {'choices': 2297.0, 'conflicts': 149.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 36.0, 'models': 3.0, 'models_level': 453.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 126.0, 'distributed_sum_lbd': 255.0, 'integrated': 747.0, 'lemmas': 849.0, 'lits_learnt': 3964.0, 'lemmas_binary': 238.0, 'lemmas_ternary': 65.0, 'cpu_time': 0.09375, 'integrated_imps': 342.0, 'integrated_jumps': 782.0, 'guiding_paths_lits': 648.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 140.0, 'lemmas_loop': 33.0, 'lemmas_other': 676.0, 'lits_conflict': 812.0, 'lits_loop': 184.0, 'lits_other': 2968.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 23.0, 'levels': 1910.0, 'levels_bounded': 1319.0, 'max': 83.0, 'max_executed': 83.0, 'max_bounded': 82.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [6.0, 0.0], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.17852401733398438, 'cpu': 0.234375, 'solve': 0.041889190673828125, 'unsat': 0.005985260009765625, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.0881786346435547, 'cpu': 1.140625, 'solve': 0.058910369873046875, 'unsat': 0.019016265869140625, 'sat': 0.00399017333984375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 3066.0, 'conflicts': 337.0, 'conflicts_analyzed': 286.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 117.0, 'models': 4.0, 'models_level': 454.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 249.0, 'distributed_sum_lbd': 468.0, 'integrated': 1284.0, 'lemmas': 1429.0, 'lits_learnt': 5450.0, 'lemmas_binary': 351.0, 'lemmas_ternary': 98.0, 'cpu_time': 0.09375, 'integrated_imps': 675.0, 'integrated_jumps': 1163.0, 'guiding_paths_lits': 2434.0, 'guiding_paths': 71.0, 'splits': 0.0, 'lemmas_conflict': 260.0, 'lemmas_loop': 87.0, 'lemmas_other': 1082.0, 'lits_conflict': 1183.0, 'lits_loop': 438.0, 'lits_other': 3829.0, 'jumps': {'jumps': 286.0, 'jumps_bounded': 86.0, 'levels': 4494.0, 'levels_bounded': 3510.0, 'max': 83.0, 'max_executed': 83.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 2)
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2)

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162731s.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010109s with result Unsatisfiable.

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17284040000000012, Incremental time limit = None
Running cumulative time = 1.2135259000000005, Cumulative time limit = 3600
Used memory = (RSS = 146.691406Mb, VMS = 135.250000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1089205999999985, solving_time=0.10460530000000201, total_time=1.2135259000000005, memory=Memory(rss=146.69140625, vms=135.25), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1627314000000002, solving_time=0.010108999999999924, total_time=0.17284040000000012, memory=Memory(rss=146.69140625, vms=135.25), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 23568.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 60296.0, 'bodies_tr': 60296.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1486.0, 'count_bodies_tr': 1486.0, 'sccs': 94.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1144.0, 'rules': 84839.0, 'rules_normal': 83332.0, 'rules_choice': 1395.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 84779.0, 'rules_tr_normal': 83332.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 36.0, 'eqs': 47318.0, 'eqs_atom': 9818.0, 'eqs_body': 3897.0, 'eqs_other': 33603.0}, 'lpStep': {'atoms': 2264.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7210.0, 'bodies_tr': 7210.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9654.0, 'rules_normal': 9488.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9646.0, 'rules_tr_normal': 9488.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4626.0, 'eqs_atom': 901.0, 'eqs_body': 400.0, 'eqs_other': 3325.0}, 'generator': {'vars': 6308.0, 'vars_eliminated': 0.0, 'vars_frozen': 4430.0, 'constraints': 361.0, 'constraints_binary': 7825.0, 'constraints_ternary': 1707.0, 'acyc_edges': 0.0, 'complexity': 12548.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.17623519897460938, 'cpu': 0.171875, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.264413833618164, 'cpu': 1.3125, 'solve': 0.05990791320800781, 'unsat': 0.020013809204101562, 'sat': 0.00399017333984375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 3066.0, 'conflicts': 344.0, 'conflicts_analyzed': 286.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 117.0, 'models': 4.0, 'models_level': 454.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 249.0, 'distributed_sum_lbd': 468.0, 'integrated': 1284.0, 'lemmas': 1429.0, 'lits_learnt': 5450.0, 'lemmas_binary': 351.0, 'lemmas_ternary': 98.0, 'cpu_time': 0.09375, 'integrated_imps': 675.0, 'integrated_jumps': 1163.0, 'guiding_paths_lits': 3071.0, 'guiding_paths': 78.0, 'splits': 0.0, 'lemmas_conflict': 260.0, 'lemmas_loop': 87.0, 'lemmas_other': 1082.0, 'lits_conflict': 1183.0, 'lits_loop': 438.0, 'lits_other': 3829.0, 'jumps': {'jumps': 286.0, 'jumps_bounded': 86.0, 'levels': 4494.0, 'levels_bounded': 3510.0, 'max': 83.0, 'max_executed': 83.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137332s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024551s with result Satisfiable.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16188300000000133, Incremental time limit = None
Running cumulative time = 1.3754089000000018, Cumulative time limit = 3600
Used memory = (RSS = 149.855469Mb, VMS = 137.851562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.246253s, Solving = 0.129156s, Total = 1.375409s, Memory = (RSS = 149.855469Mb, VMS = 137.851562Mb)), Calls = 9
Final Model :: Total atoms = 6285, Cost = (10, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.246252899999999, solving_time=0.1291560000000027, total_time=1.3754089000000018, memory=Memory(rss=149.85546875, vms=137.8515625), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13733230000000063, solving_time=0.024550700000000703, total_time=0.16188300000000133, memory=Memory(rss=149.85546875, vms=137.8515625), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 25840.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68014.0, 'bodies_tr': 68014.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1666.0, 'count_bodies_tr': 1666.0, 'sccs': 114.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1464.0, 'rules': 95189.0, 'rules_normal': 93516.0, 'rules_choice': 1547.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 95127.0, 'rules_tr_normal': 93516.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 46.0, 'eqs': 53084.0, 'eqs_atom': 10840.0, 'eqs_body': 4114.0, 'eqs_other': 38130.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7718.0, 'bodies_tr': 7718.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 10350.0, 'rules_normal': 10184.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10348.0, 'rules_tr_normal': 10184.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5766.0, 'eqs_atom': 1022.0, 'eqs_body': 217.0, 'eqs_other': 4527.0}, 'generator': {'vars': 7790.0, 'vars_eliminated': 0.0, 'vars_frozen': 5424.0, 'constraints': 705.0, 'constraints_binary': 15044.0, 'constraints_ternary': 3538.0, 'acyc_edges': 0.0, 'complexity': 19507.0}}, 'solving': {'solvers': {'choices': 1542.0, 'conflicts': 115.0, 'conflicts_analyzed': 102.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 88.0, 'models': 2.0, 'models_level': 411.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 87.0, 'distributed_sum_lbd': 141.0, 'integrated': 459.0, 'lemmas': 670.0, 'lits_learnt': 3214.0, 'lemmas_binary': 66.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 381.0, 'integrated_jumps': 611.0, 'guiding_paths_lits': 707.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 90.0, 'lemmas_loop': 166.0, 'lemmas_other': 414.0, 'lits_conflict': 493.0, 'lits_loop': 1015.0, 'lits_other': 1706.0, 'jumps': {'jumps': 102.0, 'jumps_bounded': 55.0, 'levels': 3359.0, 'levels_bounded': 3208.0, 'max': 103.0, 'max_executed': 103.0, 'max_bounded': 102.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1630706787109375, 'cpu': 0.171875, 'solve': 0.016956329345703125, 'unsat': 0.00698089599609375, 'sat': 0.002994537353515625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.4274845123291016, 'cpu': 1.484375, 'solve': 0.07686424255371094, 'unsat': 0.026994705200195312, 'sat': 0.006984710693359375}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4608.0, 'conflicts': 459.0, 'conflicts_analyzed': 388.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 205.0, 'models': 6.0, 'models_level': 865.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 336.0, 'distributed_sum_lbd': 609.0, 'integrated': 1743.0, 'lemmas': 2099.0, 'lits_learnt': 8664.0, 'lemmas_binary': 417.0, 'lemmas_ternary': 98.0, 'cpu_time': 0.125, 'integrated_imps': 1056.0, 'integrated_jumps': 1774.0, 'guiding_paths_lits': 3778.0, 'guiding_paths': 93.0, 'splits': 0.0, 'lemmas_conflict': 350.0, 'lemmas_loop': 253.0, 'lemmas_other': 1496.0, 'lits_conflict': 1676.0, 'lits_loop': 1453.0, 'lits_other': 5535.0, 'jumps': {'jumps': 388.0, 'jumps_bounded': 141.0, 'levels': 7853.0, 'levels_bounded': 6718.0, 'max': 103.0, 'max_executed': 103.0, 'max_bounded': 102.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3)

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154446s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013836s with result Unsatisfiable.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16828170000000142, Incremental time limit = None
Running cumulative time = 1.5436906000000032, Cumulative time limit = 3600
Used memory = (RSS = 154.214844Mb, VMS = 143.257812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.4006984999999998, solving_time=0.1429921000000034, total_time=1.5436906000000032, memory=Memory(rss=154.21484375, vms=143.2578125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15444560000000074, solving_time=0.013836100000000684, total_time=0.16828170000000142, memory=Memory(rss=154.21484375, vms=143.2578125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 28176.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75939.0, 'bodies_tr': 75939.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1846.0, 'count_bodies_tr': 1846.0, 'sccs': 134.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1885.0, 'rules': 105775.0, 'rules_normal': 103936.0, 'rules_choice': 1699.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 105713.0, 'rules_tr_normal': 103936.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 58.0, 'eqs': 58091.0, 'eqs_atom': 11886.0, 'eqs_body': 4320.0, 'eqs_other': 41885.0}, 'lpStep': {'atoms': 2336.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7925.0, 'bodies_tr': 7925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 421.0, 'rules': 10586.0, 'rules_normal': 10420.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10586.0, 'rules_tr_normal': 10420.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5007.0, 'eqs_atom': 1046.0, 'eqs_body': 206.0, 'eqs_other': 3755.0}, 'generator': {'vars': 9548.0, 'vars_eliminated': 0.0, 'vars_frozen': 6606.0, 'constraints': 926.0, 'constraints_binary': 19566.0, 'constraints_ternary': 4637.0, 'acyc_edges': 0.0, 'complexity': 25393.0}}, 'solving': {'solvers': {'choices': 3.0, 'conflicts': 7.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 3.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 2.0, 'lemmas': 3.0, 'lits_learnt': 6.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 666.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 2.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 4.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1705455780029297, 'cpu': 0.25, 'solve': 0.0039920806884765625, 'unsat': 0.0039920806884765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5980300903320312, 'cpu': 1.734375, 'solve': 0.0808563232421875, 'unsat': 0.030986785888671875, 'sat': 0.006984710693359375}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4611.0, 'conflicts': 466.0, 'conflicts_analyzed': 391.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 208.0, 'models': 6.0, 'models_level': 865.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 337.0, 'distributed_sum_lbd': 611.0, 'integrated': 1745.0, 'lemmas': 2102.0, 'lits_learnt': 8670.0, 'lemmas_binary': 420.0, 'lemmas_ternary': 98.0, 'cpu_time': 0.21875, 'integrated_imps': 1058.0, 'integrated_jumps': 1774.0, 'guiding_paths_lits': 4444.0, 'guiding_paths': 99.0, 'splits': 0.0, 'lemmas_conflict': 351.0, 'lemmas_loop': 253.0, 'lemmas_other': 1498.0, 'lits_conflict': 1678.0, 'lits_loop': 1453.0, 'lits_other': 5539.0, 'jumps': {'jumps': 391.0, 'jumps_bounded': 144.0, 'levels': 7861.0, 'levels_bounded': 6723.0, 'max': 103.0, 'max_executed': 103.0, 'max_bounded': 102.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153154s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016243s with result Unsatisfiable.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16939700000000002, Incremental time limit = None
Running cumulative time = 1.7130876000000033, Cumulative time limit = 3600
Used memory = (RSS = 157.468750Mb, VMS = 145.980469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.5538528999999999, solving_time=0.1592347000000034, total_time=1.7130876000000033, memory=Memory(rss=157.46875, vms=145.98046875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15315440000000002, solving_time=0.016242599999999996, total_time=0.16939700000000002, memory=Memory(rss=157.46875, vms=145.98046875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 30577.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84334.0, 'bodies_tr': 84334.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2026.0, 'count_bodies_tr': 2026.0, 'sccs': 154.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2321.0, 'rules': 116892.0, 'rules_normal': 114887.0, 'rules_choice': 1851.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 116830.0, 'rules_tr_normal': 114887.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 70.0, 'eqs': 63224.0, 'eqs_atom': 12930.0, 'eqs_body': 4432.0, 'eqs_other': 45862.0}, 'lpStep': {'atoms': 2401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8395.0, 'bodies_tr': 8395.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11117.0, 'rules_normal': 10951.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11117.0, 'rules_tr_normal': 10951.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5133.0, 'eqs_atom': 1044.0, 'eqs_body': 112.0, 'eqs_other': 3977.0}, 'generator': {'vars': 11437.0, 'vars_eliminated': 0.0, 'vars_frozen': 7840.0, 'constraints': 1407.0, 'constraints_binary': 29101.0, 'constraints_ternary': 7033.0, 'acyc_edges': 0.0, 'complexity': 37873.0}}, 'solving': {'solvers': {'choices': 211.0, 'conflicts': 119.0, 'conflicts_analyzed': 105.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 158.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 101.0, 'distributed_sum_lbd': 229.0, 'integrated': 598.0, 'lemmas': 1101.0, 'lits_learnt': 10740.0, 'lemmas_binary': 93.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.0, 'integrated_imps': 338.0, 'integrated_jumps': 95.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 101.0, 'lemmas_loop': 461.0, 'lemmas_other': 539.0, 'lits_conflict': 1283.0, 'lits_loop': 3576.0, 'lits_other': 5881.0, 'jumps': {'jumps': 105.0, 'jumps_bounded': 53.0, 'levels': 4082.0, 'levels_bounded': 3966.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1705341339111328, 'cpu': 0.15625, 'solve': 0.00698089599609375, 'unsat': 0.00698089599609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.768564224243164, 'cpu': 1.890625, 'solve': 0.08783721923828125, 'unsat': 0.037967681884765625, 'sat': 0.006984710693359375}, 'models': {'enumerated': 6.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4822.0, 'conflicts': 585.0, 'conflicts_analyzed': 496.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 366.0, 'models': 6.0, 'models_level': 865.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 438.0, 'distributed_sum_lbd': 840.0, 'integrated': 2343.0, 'lemmas': 3203.0, 'lits_learnt': 19410.0, 'lemmas_binary': 513.0, 'lemmas_ternary': 105.0, 'cpu_time': 0.21875, 'integrated_imps': 1396.0, 'integrated_jumps': 1869.0, 'guiding_paths_lits': 5291.0, 'guiding_paths': 116.0, 'splits': 0.0, 'lemmas_conflict': 452.0, 'lemmas_loop': 714.0, 'lemmas_other': 2037.0, 'lits_conflict': 2961.0, 'lits_loop': 5029.0, 'lits_other': 11420.0, 'jumps': {'jumps': 496.0, 'jumps_bounded': 197.0, 'levels': 11943.0, 'levels_bounded': 10689.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159390s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033526s with result Satisfiable.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19291649999999905, Incremental time limit = None
Running cumulative time = 1.9060041000000023, Cumulative time limit = 3600
Used memory = (RSS = 162.460938Mb, VMS = 150.191406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.713243s, Solving = 0.192761s, Total = 1.906004s, Memory = (RSS = 162.460938Mb, VMS = 150.191406Mb)), Calls = 12
Final Model :: Total atoms = 7300, Cost = (19, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7132429, solving_time=0.1927612000000023, total_time=1.9060041000000023, memory=Memory(rss=162.4609375, vms=150.19140625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15939000000000014, solving_time=0.033526499999998904, total_time=0.19291649999999905, memory=Memory(rss=162.4609375, vms=150.19140625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 32993.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 92757.0, 'bodies_tr': 92757.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2206.0, 'count_bodies_tr': 2206.0, 'sccs': 174.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2757.0, 'rules': 128068.0, 'rules_normal': 125897.0, 'rules_choice': 2003.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 128006.0, 'rules_tr_normal': 125897.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 82.0, 'eqs': 68412.0, 'eqs_atom': 13984.0, 'eqs_body': 4547.0, 'eqs_other': 49881.0}, 'lpStep': {'atoms': 2416.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8423.0, 'bodies_tr': 8423.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11176.0, 'rules_normal': 11010.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11176.0, 'rules_tr_normal': 11010.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5188.0, 'eqs_atom': 1054.0, 'eqs_body': 115.0, 'eqs_other': 4019.0}, 'generator': {'vars': 13336.0, 'vars_eliminated': 0.0, 'vars_frozen': 9079.0, 'constraints': 1839.0, 'constraints_binary': 38092.0, 'constraints_ternary': 9324.0, 'acyc_edges': 0.0, 'complexity': 49655.0}}, 'solving': {'solvers': {'choices': 2347.0, 'conflicts': 207.0, 'conflicts_analyzed': 186.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 191.0, 'models': 1.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 159.0, 'distributed_sum_lbd': 368.0, 'integrated': 942.0, 'lemmas': 1400.0, 'lits_learnt': 19828.0, 'lemmas_binary': 111.0, 'lemmas_ternary': 98.0, 'cpu_time': 0.171875, 'integrated_imps': 445.0, 'integrated_jumps': 1068.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 179.0, 'lemmas_loop': 427.0, 'lemmas_other': 794.0, 'lits_conflict': 3276.0, 'lits_loop': 3520.0, 'lits_other': 13032.0, 'jumps': {'jumps': 186.0, 'jumps_bounded': 61.0, 'levels': 3149.0, 'levels_bounded': 2510.0, 'max': 303.0, 'max_executed': 303.0, 'max_bounded': 302.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.19448089599609375, 'cpu': 0.34375, 'solve': 0.023937225341796875, 'unsat': 0.011966705322265625, 'sat': 0.01197052001953125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.9630451202392578, 'cpu': 2.234375, 'solve': 0.11177444458007812, 'unsat': 0.04993438720703125, 'sat': 0.018955230712890625}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 7169.0, 'conflicts': 792.0, 'conflicts_analyzed': 682.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 557.0, 'models': 7.0, 'models_level': 1093.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 597.0, 'distributed_sum_lbd': 1208.0, 'integrated': 3285.0, 'lemmas': 4603.0, 'lits_learnt': 39238.0, 'lemmas_binary': 624.0, 'lemmas_ternary': 203.0, 'cpu_time': 0.390625, 'integrated_imps': 1841.0, 'integrated_jumps': 2937.0, 'guiding_paths_lits': 6208.0, 'guiding_paths': 142.0, 'splits': 0.0, 'lemmas_conflict': 631.0, 'lemmas_loop': 1141.0, 'lemmas_other': 2831.0, 'lits_conflict': 6237.0, 'lits_loop': 8549.0, 'lits_other': 24452.0, 'jumps': {'jumps': 682.0, 'jumps_bounded': 258.0, 'levels': 15092.0, 'levels_bounded': 13199.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12}

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None)

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 12]:
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4)

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169884s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(4,12).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019355s with result Unsatisfiable.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18923819999999836, Incremental time limit = None
Running cumulative time = 2.0952423000000007, Cumulative time limit = 3600
Used memory = (RSS = 169.136719Mb, VMS = 158.558594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.8831264999999986, solving_time=0.21211580000000207, total_time=2.0952423000000007, memory=Memory(rss=169.13671875, vms=158.55859375), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16988359999999858, solving_time=0.019354599999999778, total_time=0.18923819999999836, memory=Memory(rss=169.13671875, vms=158.55859375), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 35426.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 101210.0, 'bodies_tr': 101210.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2386.0, 'count_bodies_tr': 2386.0, 'sccs': 194.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3193.0, 'rules': 139306.0, 'rules_normal': 136969.0, 'rules_choice': 2155.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 139244.0, 'rules_tr_normal': 136969.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 94.0, 'eqs': 73656.0, 'eqs_atom': 15048.0, 'eqs_body': 4663.0, 'eqs_other': 53945.0}, 'lpStep': {'atoms': 2433.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8453.0, 'bodies_tr': 8453.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11238.0, 'rules_normal': 11072.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11238.0, 'rules_tr_normal': 11072.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5244.0, 'eqs_atom': 1064.0, 'eqs_body': 116.0, 'eqs_other': 4064.0}, 'generator': {'vars': 15251.0, 'vars_eliminated': 0.0, 'vars_frozen': 10325.0, 'constraints': 2323.0, 'constraints_binary': 47642.0, 'constraints_ternary': 11706.0, 'acyc_edges': 0.0, 'complexity': 62139.0}}, 'solving': {'solvers': {'choices': 2.0, 'conflicts': 9.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 2.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 1.0, 'lemmas': 2.0, 'lits_learnt': 4.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 705.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 1.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 2.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 5.0, 'levels_bounded': 3.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.19149017333984375, 'cpu': 0.203125, 'solve': 0.0039882659912109375, 'unsat': 0.0039882659912109375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1545352935791016, 'cpu': 2.4375, 'solve': 0.11576271057128906, 'unsat': 0.05392265319824219, 'sat': 0.018955230712890625}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 7171.0, 'conflicts': 801.0, 'conflicts_analyzed': 684.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 559.0, 'models': 7.0, 'models_level': 1093.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 598.0, 'distributed_sum_lbd': 1210.0, 'integrated': 3286.0, 'lemmas': 4605.0, 'lits_learnt': 39242.0, 'lemmas_binary': 626.0, 'lemmas_ternary': 203.0, 'cpu_time': 0.40625, 'integrated_imps': 1842.0, 'integrated_jumps': 2937.0, 'guiding_paths_lits': 6913.0, 'guiding_paths': 147.0, 'splits': 0.0, 'lemmas_conflict': 632.0, 'lemmas_loop': 1141.0, 'lemmas_other': 2832.0, 'lits_conflict': 6239.0, 'lits_loop': 8549.0, 'lits_other': 24454.0, 'jumps': {'jumps': 684.0, 'jumps_bounded': 260.0, 'levels': 15097.0, 'levels_bounded': 13202.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158165s.

[15-11-2021_14-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067575s with result Satisfiable.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22574010000000122, Incremental time limit = None
Running cumulative time = 2.320982400000002, Cumulative time limit = 3600
Used memory = (RSS = 177.402344Mb, VMS = 166.640625Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.041291s, Solving = 0.279691s, Total = 2.320982s, Memory = (RSS = 177.402344Mb, VMS = 166.640625Mb)), Calls = 14
Final Model :: Total atoms = 7971, Cost = (21, 0), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0412912999999984, solving_time=0.2796911000000035, total_time=2.320982400000002, memory=Memory(rss=177.40234375, vms=166.640625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15816479999999977, solving_time=0.06757530000000145, total_time=0.22574010000000122, memory=Memory(rss=177.40234375, vms=166.640625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 37878.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 109693.0, 'bodies_tr': 109693.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2566.0, 'count_bodies_tr': 2566.0, 'sccs': 214.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3629.0, 'rules': 150606.0, 'rules_normal': 148103.0, 'rules_choice': 2307.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 150544.0, 'rules_tr_normal': 148103.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 106.0, 'eqs': 78959.0, 'eqs_atom': 16124.0, 'eqs_body': 4777.0, 'eqs_other': 58058.0}, 'lpStep': {'atoms': 2452.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8483.0, 'bodies_tr': 8483.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11300.0, 'rules_normal': 11134.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11300.0, 'rules_tr_normal': 11134.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5303.0, 'eqs_atom': 1076.0, 'eqs_body': 114.0, 'eqs_other': 4113.0}, 'generator': {'vars': 17181.0, 'vars_eliminated': 0.0, 'vars_frozen': 11578.0, 'constraints': 2811.0, 'constraints_binary': 57363.0, 'constraints_ternary': 14119.0, 'acyc_edges': 0.0, 'complexity': 74829.0}}, 'solving': {'solvers': {'choices': 2850.0, 'conflicts': 335.0, 'conflicts_analyzed': 317.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 532.0, 'models': 3.0, 'models_level': 790.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 290.0, 'distributed_sum_lbd': 742.0, 'integrated': 1730.0, 'lemmas': 2773.0, 'lits_learnt': 83534.0, 'lemmas_binary': 283.0, 'lemmas_ternary': 155.0, 'cpu_time': 0.203125, 'integrated_imps': 645.0, 'integrated_jumps': 896.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 304.0, 'lemmas_loop': 798.0, 'lemmas_other': 1671.0, 'lits_conflict': 11937.0, 'lits_loop': 6767.0, 'lits_other': 64830.0, 'jumps': {'jumps': 317.0, 'jumps_bounded': 63.0, 'levels': 6038.0, 'levels_bounded': 5455.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.22739219665527344, 'cpu': 0.375, 'solve': 0.05585289001464844, 'unsat': 0.007976531982421875, 'sat': 0.020948410034179688}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.381927490234375, 'cpu': 2.8125, 'solve': 0.1716156005859375, 'unsat': 0.06189918518066406, 'sat': 0.03990364074707031}, 'models': {'enumerated': 10.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 10021.0, 'conflicts': 1136.0, 'conflicts_analyzed': 1001.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1091.0, 'models': 10.0, 'models_level': 1883.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 888.0, 'distributed_sum_lbd': 1952.0, 'integrated': 5016.0, 'lemmas': 7378.0, 'lits_learnt': 122776.0, 'lemmas_binary': 909.0, 'lemmas_ternary': 358.0, 'cpu_time': 0.609375, 'integrated_imps': 2487.0, 'integrated_jumps': 3833.0, 'guiding_paths_lits': 7970.0, 'guiding_paths': 168.0, 'splits': 0.0, 'lemmas_conflict': 936.0, 'lemmas_loop': 1939.0, 'lemmas_other': 4503.0, 'lits_conflict': 18176.0, 'lits_loop': 15316.0, 'lits_other': 89284.0, 'jumps': {'jumps': 1001.0, 'jumps_bounded': 323.0, 'levels': 21135.0, 'levels_bounded': 18657.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14}

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 14]:
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 5)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150119s.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(5,14).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051813s with result Satisfiable.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20193260000000102, Incremental time limit = None
Running cumulative time = 2.522915000000003, Cumulative time limit = 3600
Used memory = (RSS = 184.714844Mb, VMS = 173.699219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.191411s, Solving = 0.331504s, Total = 2.522915s, Memory = (RSS = 184.714844Mb, VMS = 173.699219Mb)), Calls = 15
Final Model :: Total atoms = 8309, Cost = (22, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1914106999999996, solving_time=0.3315043000000033, total_time=2.522915000000003, memory=Memory(rss=184.71484375, vms=173.69921875), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15011940000000124, solving_time=0.05181319999999978, total_time=0.20193260000000102, memory=Memory(rss=184.71484375, vms=173.69921875), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 40342.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118198.0, 'bodies_tr': 118198.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2746.0, 'count_bodies_tr': 2746.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4065.0, 'rules': 161957.0, 'rules_normal': 159288.0, 'rules_choice': 2459.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 161895.0, 'rules_tr_normal': 159288.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 118.0, 'eqs': 84309.0, 'eqs_atom': 17210.0, 'eqs_body': 4889.0, 'eqs_other': 62210.0}, 'lpStep': {'atoms': 2464.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8505.0, 'bodies_tr': 8505.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11351.0, 'rules_normal': 11185.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11351.0, 'rules_tr_normal': 11185.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5350.0, 'eqs_atom': 1086.0, 'eqs_body': 112.0, 'eqs_other': 4152.0}, 'generator': {'vars': 19118.0, 'vars_eliminated': 0.0, 'vars_frozen': 12833.0, 'constraints': 3300.0, 'constraints_binary': 67054.0, 'constraints_ternary': 16522.0, 'acyc_edges': 0.0, 'complexity': 87480.0}}, 'solving': {'solvers': {'choices': 1395.0, 'conflicts': 36.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 21.0, 'models': 3.0, 'models_level': 856.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 32.0, 'integrated': 30.0, 'lemmas': 106.0, 'lits_learnt': 2580.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 12.0, 'integrated_jumps': 69.0, 'guiding_paths_lits': 1127.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 61.0, 'lemmas_other': 29.0, 'lits_conflict': 1123.0, 'lits_loop': 346.0, 'lits_other': 1111.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 2.0, 'levels': 92.0, 'levels_bounded': 4.0, 'max': 54.0, 'max_executed': 54.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [22.0, 0.0], 'lower': [22.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.20447921752929688, 'cpu': 0.28125, 'solve': 0.038921356201171875, 'unsat': 0.009998321533203125, 'sat': 0.005985260009765625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.586406707763672, 'cpu': 3.09375, 'solve': 0.21053695678710938, 'unsat': 0.07189750671386719, 'sat': 0.04588890075683594}, 'models': {'enumerated': 13.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 11416.0, 'conflicts': 1172.0, 'conflicts_analyzed': 1018.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1112.0, 'models': 13.0, 'models_level': 2739.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 900.0, 'distributed_sum_lbd': 1984.0, 'integrated': 5046.0, 'lemmas': 7484.0, 'lits_learnt': 125356.0, 'lemmas_binary': 915.0, 'lemmas_ternary': 358.0, 'cpu_time': 0.71875, 'integrated_imps': 2499.0, 'integrated_jumps': 3902.0, 'guiding_paths_lits': 9097.0, 'guiding_paths': 190.0, 'splits': 0.0, 'lemmas_conflict': 952.0, 'lemmas_loop': 2000.0, 'lemmas_other': 4532.0, 'lits_conflict': 19299.0, 'lits_loop': 15662.0, 'lits_other': 90395.0, 'jumps': {'jumps': 1018.0, 'jumps_bounded': 325.0, 'levels': 21227.0, 'levels_bounded': 18661.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15}

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 6)
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 6)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168785s.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030430s with result Satisfiable.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19921519999999937, Incremental time limit = None
Running cumulative time = 2.7221302000000023, Cumulative time limit = 3600
Used memory = (RSS = 193.785156Mb, VMS = 186.042969Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.360196s, Solving = 0.361935s, Total = 2.722130s, Memory = (RSS = 193.785156Mb, VMS = 186.042969Mb)), Calls = 16
Final Model :: Total atoms = 8654, Cost = (25, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.3601956, solving_time=0.3619346000000023, total_time=2.7221302000000023, memory=Memory(rss=193.78515625, vms=186.04296875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16878490000000035, solving_time=0.030430299999999022, total_time=0.19921519999999937, memory=Memory(rss=193.78515625, vms=186.04296875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 42818.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 126724.0, 'bodies_tr': 126724.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2926.0, 'count_bodies_tr': 2926.0, 'sccs': 254.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4501.0, 'rules': 173357.0, 'rules_normal': 170522.0, 'rules_choice': 2611.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 173295.0, 'rules_tr_normal': 170522.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 130.0, 'eqs': 89712.0, 'eqs_atom': 18308.0, 'eqs_body': 5000.0, 'eqs_other': 66404.0}, 'lpStep': {'atoms': 2476.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8526.0, 'bodies_tr': 8526.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11400.0, 'rules_normal': 11234.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11400.0, 'rules_tr_normal': 11234.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5403.0, 'eqs_atom': 1098.0, 'eqs_body': 111.0, 'eqs_other': 4194.0}, 'generator': {'vars': 21055.0, 'vars_eliminated': 0.0, 'vars_frozen': 14088.0, 'constraints': 3790.0, 'constraints_binary': 76865.0, 'constraints_ternary': 18939.0, 'acyc_edges': 0.0, 'complexity': 100266.0}}, 'solving': {'solvers': {'choices': 490.0, 'conflicts': 20.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 320.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 9.0, 'integrated': 1.0, 'lemmas': 12.0, 'lits_learnt': 495.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 1.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 1197.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 6.0, 'lemmas_other': 1.0, 'lits_conflict': 422.0, 'lits_loop': 38.0, 'lits_other': 35.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 0.0, 'levels': 5.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [25.0, 0.0], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.20296478271484375, 'cpu': 0.203125, 'solve': 0.01795196533203125, 'unsat': 0.009973526000976562, 'sat': 0.007978439331054688}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.7893714904785156, 'cpu': 3.296875, 'solve': 0.22848892211914062, 'unsat': 0.08187103271484375, 'sat': 0.053867340087890625}, 'models': {'enumerated': 14.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 11906.0, 'conflicts': 1192.0, 'conflicts_analyzed': 1023.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1119.0, 'models': 14.0, 'models_level': 3059.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 903.0, 'distributed_sum_lbd': 1993.0, 'integrated': 5047.0, 'lemmas': 7496.0, 'lits_learnt': 125851.0, 'lemmas_binary': 915.0, 'lemmas_ternary': 358.0, 'cpu_time': 0.75, 'integrated_imps': 2500.0, 'integrated_jumps': 3961.0, 'guiding_paths_lits': 10294.0, 'guiding_paths': 210.0, 'splits': 0.0, 'lemmas_conflict': 957.0, 'lemmas_loop': 2006.0, 'lemmas_other': 4533.0, 'lits_conflict': 19721.0, 'lits_loop': 15700.0, 'lits_other': 90430.0, 'jumps': {'jumps': 1023.0, 'jumps_bounded': 325.0, 'levels': 21232.0, 'levels_bounded': 18661.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 16]:
sub_goal(3, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7)
sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 7)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168742s.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(7,16).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.097158s with result Satisfiable.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2658996000000009, Incremental time limit = None
Running cumulative time = 2.988029800000003, Cumulative time limit = 3600
Used memory = (RSS = 197.882812Mb, VMS = 189.527344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.528937s, Solving = 0.459093s, Total = 2.988030s, Memory = (RSS = 197.882812Mb, VMS = 189.527344Mb)), Calls = 17
Final Model :: Total atoms = 8998, Cost = (27, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.528937100000001, solving_time=0.459092700000002, total_time=2.988029800000003, memory=Memory(rss=197.8828125, vms=189.52734375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1687415000000012, solving_time=0.09715809999999969, total_time=0.2658996000000009, memory=Memory(rss=197.8828125, vms=189.52734375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 45306.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 135271.0, 'bodies_tr': 135271.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3106.0, 'count_bodies_tr': 3106.0, 'sccs': 274.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4937.0, 'rules': 184806.0, 'rules_normal': 181805.0, 'rules_choice': 2763.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 184744.0, 'rules_tr_normal': 181805.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 142.0, 'eqs': 95170.0, 'eqs_atom': 19418.0, 'eqs_body': 5112.0, 'eqs_other': 70640.0}, 'lpStep': {'atoms': 2488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8547.0, 'bodies_tr': 8547.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11449.0, 'rules_normal': 11283.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11449.0, 'rules_tr_normal': 11283.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5458.0, 'eqs_atom': 1110.0, 'eqs_body': 112.0, 'eqs_other': 4236.0}, 'generator': {'vars': 22992.0, 'vars_eliminated': 0.0, 'vars_frozen': 15343.0, 'constraints': 4280.0, 'constraints_binary': 86713.0, 'constraints_ternary': 21356.0, 'acyc_edges': 0.0, 'complexity': 113089.0}}, 'solving': {'solvers': {'choices': 1231.0, 'conflicts': 81.0, 'conflicts_analyzed': 61.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 14.0, 'models': 2.0, 'models_level': 635.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 53.0, 'distributed_sum_lbd': 65.0, 'integrated': 113.0, 'lemmas': 283.0, 'lits_learnt': 2559.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.21875, 'integrated_imps': 107.0, 'integrated_jumps': 18.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 61.0, 'lemmas_loop': 109.0, 'lemmas_other': 113.0, 'lits_conflict': 1514.0, 'lits_loop': 854.0, 'lits_other': 191.0, 'jumps': {'jumps': 61.0, 'jumps_bounded': 1.0, 'levels': 241.0, 'levels_bounded': 150.0, 'max': 151.0, 'max_executed': 16.0, 'max_bounded': 150.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [27.0, 0.0], 'lower': [27.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.26832008361816406, 'cpu': 0.40625, 'solve': 0.08374977111816406, 'unsat': 0.015958786010742188, 'sat': 0.006954193115234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.0576915740966797, 'cpu': 3.703125, 'solve': 0.3122386932373047, 'unsat': 0.09782981872558594, 'sat': 0.060821533203125}, 'models': {'enumerated': 16.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 13137.0, 'conflicts': 1273.0, 'conflicts_analyzed': 1084.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1133.0, 'models': 16.0, 'models_level': 3694.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 956.0, 'distributed_sum_lbd': 2058.0, 'integrated': 5160.0, 'lemmas': 7779.0, 'lits_learnt': 128410.0, 'lemmas_binary': 921.0, 'lemmas_ternary': 358.0, 'cpu_time': 0.96875, 'integrated_imps': 2607.0, 'integrated_jumps': 3979.0, 'guiding_paths_lits': 11561.0, 'guiding_paths': 233.0, 'splits': 0.0, 'lemmas_conflict': 1018.0, 'lemmas_loop': 2115.0, 'lemmas_other': 4646.0, 'lits_conflict': 21235.0, 'lits_loop': 16554.0, 'lits_other': 90621.0, 'jumps': {'jumps': 1084.0, 'jumps_bounded': 326.0, 'levels': 21473.0, 'levels_bounded': 18811.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 8)
sub_goal(3, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 8)

[15-11-2021_14-29-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221169s.

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[15-11-2021_14-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033866s with result Satisfiable.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2550351000000006, Incremental time limit = None
Running cumulative time = 3.243064900000004, Cumulative time limit = 3600
Used memory = (RSS = 202.136719Mb, VMS = 192.781250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.750106s, Solving = 0.492959s, Total = 3.243065s, Memory = (RSS = 202.136719Mb, VMS = 192.781250Mb)), Calls = 18
Final Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.7501060000000015, solving_time=0.4929589000000023, total_time=3.243064900000004, memory=Memory(rss=202.13671875, vms=192.78125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22116890000000033, solving_time=0.03386620000000029, total_time=0.2550351000000006, memory=Memory(rss=202.13671875, vms=192.78125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 47806.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143833.0, 'bodies_tr': 143833.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3286.0, 'count_bodies_tr': 3286.0, 'sccs': 294.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5373.0, 'rules': 196295.0, 'rules_normal': 193128.0, 'rules_choice': 2915.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 196233.0, 'rules_tr_normal': 193128.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 154.0, 'eqs': 100657.0, 'eqs_atom': 20531.0, 'eqs_body': 5223.0, 'eqs_other': 74903.0}, 'lpStep': {'atoms': 2500.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8562.0, 'bodies_tr': 8562.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11489.0, 'rules_normal': 11323.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11489.0, 'rules_tr_normal': 11323.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5487.0, 'eqs_atom': 1113.0, 'eqs_body': 111.0, 'eqs_other': 4263.0}, 'generator': {'vars': 24929.0, 'vars_eliminated': 0.0, 'vars_frozen': 16598.0, 'constraints': 4532.0, 'constraints_binary': 92391.0, 'constraints_ternary': 22891.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 783.0, 'conflicts': 32.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 8.0, 'models': 1.0, 'models_level': 369.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 24.0, 'integrated': 8.0, 'lemmas': 21.0, 'lits_learnt': 1175.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.0625, 'integrated_imps': 4.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 0.0, 'lemmas_other': 8.0, 'lits_conflict': 1139.0, 'lits_loop': 0.0, 'lits_other': 36.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2590656280517578, 'cpu': 0.28125, 'solve': 0.022186279296875, 'unsat': 0.014959335327148438, 'sat': 0.0072269439697265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.3167572021484375, 'cpu': 3.984375, 'solve': 0.3344249725341797, 'unsat': 0.11278915405273438, 'sat': 0.06804847717285156}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 13920.0, 'conflicts': 1305.0, 'conflicts_analyzed': 1097.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1141.0, 'models': 17.0, 'models_level': 4063.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 965.0, 'distributed_sum_lbd': 2082.0, 'integrated': 5168.0, 'lemmas': 7800.0, 'lits_learnt': 129585.0, 'lemmas_binary': 921.0, 'lemmas_ternary': 363.0, 'cpu_time': 1.03125, 'integrated_imps': 2611.0, 'integrated_jumps': 3999.0, 'guiding_paths_lits': 12898.0, 'guiding_paths': 253.0, 'splits': 0.0, 'lemmas_conflict': 1031.0, 'lemmas_loop': 2115.0, 'lemmas_other': 4654.0, 'lits_conflict': 22374.0, 'lits_loop': 16554.0, 'lits_other': 90657.0, 'jumps': {'jumps': 1097.0, 'jumps_bounded': 326.0, 'levels': 21487.0, 'levels_bounded': 18811.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.152092s, Solving = 0.009376s, Total = 0.161468s, Memory = (RSS = 128.015625Mb, VMS = 115.976562Mb)
2 : Statistics :: Grounding = 0.129630s, Solving = 0.004446s, Total = 0.134076s, Memory = (RSS = 130.238281Mb, VMS = 119.101562Mb)
3 : Statistics :: Grounding = 0.121620s, Solving = 0.005010s, Total = 0.126630s, Memory = (RSS = 131.343750Mb, VMS = 119.800781Mb)
4 : Statistics :: Grounding = 0.130833s, Solving = 0.007122s, Total = 0.137955s, Memory = (RSS = 133.687500Mb, VMS = 122.574219Mb)
5 : Statistics :: Grounding = 0.153548s, Solving = 0.012859s, Total = 0.166407s, Memory = (RSS = 138.242188Mb, VMS = 127.957031Mb)
6 : Statistics :: Grounding = 0.129275s, Solving = 0.008386s, Total = 0.137662s, Memory = (RSS = 139.820312Mb, VMS = 128.578125Mb)
7 : Statistics :: Grounding = 0.129191s, Solving = 0.047297s, Total = 0.176488s, Memory = (RSS = 144.015625Mb, VMS = 131.996094Mb)
8 : Statistics :: Grounding = 0.162731s, Solving = 0.010109s, Total = 0.172840s, Memory = (RSS = 146.691406Mb, VMS = 135.250000Mb)
9 : Statistics :: Grounding = 0.137332s, Solving = 0.024551s, Total = 0.161883s, Memory = (RSS = 149.855469Mb, VMS = 137.851562Mb)
10 : Statistics :: Grounding = 0.154446s, Solving = 0.013836s, Total = 0.168282s, Memory = (RSS = 154.214844Mb, VMS = 143.257812Mb)
11 : Statistics :: Grounding = 0.153154s, Solving = 0.016243s, Total = 0.169397s, Memory = (RSS = 157.468750Mb, VMS = 145.980469Mb)
12 : Statistics :: Grounding = 0.159390s, Solving = 0.033526s, Total = 0.192916s, Memory = (RSS = 162.460938Mb, VMS = 150.191406Mb)
13 : Statistics :: Grounding = 0.169884s, Solving = 0.019355s, Total = 0.189238s, Memory = (RSS = 169.136719Mb, VMS = 158.558594Mb)
14 : Statistics :: Grounding = 0.158165s, Solving = 0.067575s, Total = 0.225740s, Memory = (RSS = 177.402344Mb, VMS = 166.640625Mb)
15 : Statistics :: Grounding = 0.150119s, Solving = 0.051813s, Total = 0.201933s, Memory = (RSS = 184.714844Mb, VMS = 173.699219Mb)
16 : Statistics :: Grounding = 0.168785s, Solving = 0.030430s, Total = 0.199215s, Memory = (RSS = 193.785156Mb, VMS = 186.042969Mb)
17 : Statistics :: Grounding = 0.168742s, Solving = 0.097158s, Total = 0.265900s, Memory = (RSS = 197.882812Mb, VMS = 189.527344Mb)
18 : Statistics :: Grounding = 0.221169s, Solving = 0.033866s, Total = 0.255035s, Memory = (RSS = 202.136719Mb, VMS = 192.781250Mb)

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.243065s due to: External generator exit.

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.750106s, Solving = 0.492959s, Total = 3.243065s, Memory = (RSS = 202.136719Mb, VMS = 192.781250Mb)), Calls = 18
Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 18 :: Actions = 30                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=18, step_range=range(0, 18)

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 18, Actions = 30
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.276s (Gro =   2.777s, Sea =   0.499s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))

[15-11-2021_14-29-29] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0.2)

[15-11-2021_14-29-29] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[15-11-2021_14-29-29] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.276s (Gro =   2.777s, Sea =   0.499s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.276s (Gro =   2.777s, Sea =   0.499s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-9], problem number = 1, increment number = 1

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_14-29-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[15-11-2021_14-29-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), false, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 9})

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 9).

[15-11-2021_14-29-29] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002947CB0FE50>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00853090000000023s

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.037353s.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005618s with result Satisfiable.

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000294036258B0>

[15-11-2021_14-29-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000294036258B0>)

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320929s.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015452s with result Unsatisfiable.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3363808000000006, Incremental time limit = None
Running cumulative time = 0.3363808000000006, Cumulative time limit = 3600
Used memory = (RSS = 212.003906Mb, VMS = 202.894531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3209289999999996, solving_time=0.015451800000001015, total_time=0.3363808000000006, memory=Memory(rss=212.00390625, vms=202.89453125), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3209289999999996, solving_time=0.015451800000001015, total_time=0.3363808000000006, memory=Memory(rss=212.00390625, vms=202.89453125), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12427.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16672.0, 'bodies_tr': 16672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 28740.0, 'rules_normal': 28183.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28728.0, 'rules_tr_normal': 28183.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27428.0, 'eqs_atom': 7036.0, 'eqs_body': 1888.0, 'eqs_other': 18504.0}, 'lpStep': {'atoms': 5900.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14069.0, 'bodies_tr': 14069.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 21303.0, 'rules_normal': 20746.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21291.0, 'rules_tr_normal': 20746.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14420.0, 'eqs_atom': 2126.0, 'eqs_body': 379.0, 'eqs_other': 11915.0}, 'generator': {'vars': 2759.0, 'vars_eliminated': 0.0, 'vars_frozen': 1725.0, 'constraints': 29.0, 'constraints_binary': 936.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 1122.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 5.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 46.0, 'guiding_paths': 2.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 5.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3361015319824219, 'cpu': 0.34375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.38796234130859375, 'cpu': 0.390625, 'solve': 0.003963470458984375, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 5.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 54.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 5.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.175614s.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009681s with result Satisfiable.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1852949000000006, Incremental time limit = None
Running cumulative time = 0.5216757000000012, Cumulative time limit = 3600
Used memory = (RSS = 214.246094Mb, VMS = 205.445312Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.496543s, Solving = 0.025133s, Total = 0.521676s, Memory = (RSS = 214.246094Mb, VMS = 205.445312Mb)), Calls = 2
Final Model :: Total atoms = 4541, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4965426999999991, solving_time=0.02513300000000207, total_time=0.5216757000000012, memory=Memory(rss=214.24609375, vms=205.4453125), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17561369999999954, solving_time=0.009681200000001056, total_time=0.1852949000000006, memory=Memory(rss=214.24609375, vms=205.4453125), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14269.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26073.0, 'bodies_tr': 26073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 768.0, 'rules': 41252.0, 'rules_normal': 40486.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 41228.0, 'rules_tr_normal': 40486.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31159.0, 'eqs_atom': 7801.0, 'eqs_body': 2322.0, 'eqs_other': 21036.0}, 'lpStep': {'atoms': 1842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9401.0, 'bodies_tr': 9401.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 12512.0, 'rules_normal': 12303.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12500.0, 'rules_tr_normal': 12303.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3731.0, 'eqs_atom': 765.0, 'eqs_body': 434.0, 'eqs_other': 2532.0}, 'generator': {'vars': 3013.0, 'vars_eliminated': 0.0, 'vars_frozen': 1947.0, 'constraints': 116.0, 'constraints_binary': 2190.0, 'constraints_ternary': 233.0, 'acyc_edges': 0.0, 'complexity': 2577.0}}, 'solving': {'solvers': {'choices': 186.0, 'conflicts': 14.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 54.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 24.0, 'integrated': 109.0, 'lemmas': 101.0, 'lits_learnt': 157.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 60.0, 'integrated_jumps': 56.0, 'guiding_paths_lits': 238.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 80.0, 'lits_conflict': 10.0, 'lits_loop': 47.0, 'lits_other': 100.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 151.0, 'levels_bounded': 137.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.18593597412109375, 'cpu': 0.1875, 'solve': 0.0049839019775390625, 'unsat': 0.0039882659912109375, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5738983154296875, 'cpu': 0.578125, 'solve': 0.008947372436523438, 'unsat': 0.0059566497802734375, 'sat': 0.000995635986328125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 186.0, 'conflicts': 14.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 55.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 26.0, 'integrated': 109.0, 'lemmas': 105.0, 'lits_learnt': 162.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 60.0, 'integrated_jumps': 56.0, 'guiding_paths_lits': 292.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 15.0, 'lemmas_other': 80.0, 'lits_conflict': 10.0, 'lits_loop': 52.0, 'lits_other': 100.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 151.0, 'levels_bounded': 137.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2)

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211929s.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013539s with result Satisfiable.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22546789999999994, Incremental time limit = None
Running cumulative time = 0.7471436000000011, Cumulative time limit = 3600
Used memory = (RSS = 216.425781Mb, VMS = 207.214844Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.708472s, Solving = 0.038672s, Total = 0.747144s, Memory = (RSS = 216.425781Mb, VMS = 207.214844Mb)), Calls = 3
Final Model :: Total atoms = 4918, Cost = (3, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7084718999999993, solving_time=0.03867170000000186, total_time=0.7471436000000011, memory=Memory(rss=216.42578125, vms=207.21484375), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21192920000000015, solving_time=0.013538699999999793, total_time=0.22546789999999994, memory=Memory(rss=216.42578125, vms=207.21484375), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 17057.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 35775.0, 'bodies_tr': 35775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 954.0, 'rules': 54196.0, 'rules_normal': 53221.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 54160.0, 'rules_tr_normal': 53221.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35955.0, 'eqs_atom': 8661.0, 'eqs_body': 2756.0, 'eqs_other': 24538.0}, 'lpStep': {'atoms': 2788.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9702.0, 'bodies_tr': 9702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12944.0, 'rules_normal': 12735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12932.0, 'rules_tr_normal': 12735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4796.0, 'eqs_atom': 860.0, 'eqs_body': 434.0, 'eqs_other': 3502.0}, 'generator': {'vars': 3337.0, 'vars_eliminated': 0.0, 'vars_frozen': 2235.0, 'constraints': 165.0, 'constraints_binary': 2810.0, 'constraints_ternary': 369.0, 'acyc_edges': 0.0, 'complexity': 3402.0}}, 'solving': {'solvers': {'choices': 163.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 76.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 36.0, 'lemmas': 22.0, 'lits_learnt': 156.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 270.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 22.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 156.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.22641944885253906, 'cpu': 0.21875, 'solve': 0.00800323486328125, 'unsat': 0.007007598876953125, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8003177642822266, 'cpu': 0.796875, 'solve': 0.016950607299804688, 'unsat': 0.012964248657226562, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 349.0, 'conflicts': 15.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 38.0, 'integrated': 145.0, 'lemmas': 127.0, 'lits_learnt': 318.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 60.0, 'integrated_jumps': 56.0, 'guiding_paths_lits': 562.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 80.0, 'lits_conflict': 10.0, 'lits_loop': 208.0, 'lits_other': 100.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 151.0, 'levels_bounded': 137.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3)

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.226270s.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007810s with result Unsatisfiable.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2340806999999998, Incremental time limit = None
Running cumulative time = 0.9812243000000009, Cumulative time limit = 3600
Used memory = (RSS = 218.093750Mb, VMS = 208.757812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9347421999999987, solving_time=0.04648210000000219, total_time=0.9812243000000009, memory=Memory(rss=218.09375, vms=208.7578125), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22627029999999948, solving_time=0.007810400000000328, total_time=0.2340806999999998, memory=Memory(rss=218.09375, vms=208.7578125), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19857.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45765.0, 'bodies_tr': 45765.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1188.0, 'rules': 68042.0, 'rules_normal': 66858.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 67994.0, 'rules_tr_normal': 66858.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43351.0, 'eqs_atom': 10123.0, 'eqs_body': 3390.0, 'eqs_other': 29838.0}, 'lpStep': {'atoms': 2800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9990.0, 'bodies_tr': 9990.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13846.0, 'rules_normal': 13637.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13834.0, 'rules_tr_normal': 13637.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7396.0, 'eqs_atom': 1462.0, 'eqs_body': 634.0, 'eqs_other': 5300.0}, 'generator': {'vars': 4025.0, 'vars_eliminated': 0.0, 'vars_frozen': 2730.0, 'constraints': 325.0, 'constraints_binary': 5964.0, 'constraints_ternary': 1046.0, 'acyc_edges': 0.0, 'complexity': 7441.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 392.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.23485374450683594, 'cpu': 0.234375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0351715087890625, 'cpu': 1.03125, 'solve': 0.018945693969726562, 'unsat': 0.014959335327148438, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 349.0, 'conflicts': 21.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 38.0, 'integrated': 145.0, 'lemmas': 127.0, 'lits_learnt': 318.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 60.0, 'integrated_jumps': 56.0, 'guiding_paths_lits': 954.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 80.0, 'lits_conflict': 10.0, 'lits_loop': 208.0, 'lits_other': 100.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 151.0, 'levels_bounded': 137.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287092s.

[15-11-2021_14-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013891s with result Unsatisfiable.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3009831000000016, Incremental time limit = None
Running cumulative time = 1.2822074000000026, Cumulative time limit = 3600
Used memory = (RSS = 223.640625Mb, VMS = 214.406250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2218339, solving_time=0.06037350000000252, total_time=1.2822074000000026, memory=Memory(rss=223.640625, vms=214.40625), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2870917000000013, solving_time=0.013891400000000331, total_time=0.3009831000000016, memory=Memory(rss=223.640625, vms=214.40625), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 23058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57054.0, 'bodies_tr': 57054.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 98.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1674.0, 'rules': 83460.0, 'rules_normal': 82067.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 83410.0, 'rules_tr_normal': 82067.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 51353.0, 'eqs_atom': 11632.0, 'eqs_body': 3541.0, 'eqs_other': 36180.0}, 'lpStep': {'atoms': 3201.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11289.0, 'bodies_tr': 11289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15418.0, 'rules_normal': 15209.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15416.0, 'rules_tr_normal': 15209.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8002.0, 'eqs_atom': 1509.0, 'eqs_body': 151.0, 'eqs_other': 6342.0}, 'generator': {'vars': 6059.0, 'vars_eliminated': 0.0, 'vars_frozen': 4021.0, 'constraints': 788.0, 'constraints_binary': 16105.0, 'constraints_ternary': 3665.0, 'acyc_edges': 0.0, 'complexity': 20740.0}}, 'solving': {'solvers': {'choices': 96.0, 'conflicts': 44.0, 'conflicts_analyzed': 35.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 32.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 35.0, 'distributed_sum_lbd': 37.0, 'integrated': 135.0, 'lemmas': 217.0, 'lits_learnt': 532.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 135.0, 'integrated_jumps': 52.0, 'guiding_paths_lits': 402.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 35.0, 'lemmas_loop': 47.0, 'lemmas_other': 135.0, 'lits_conflict': 39.0, 'lits_loop': 346.0, 'lits_other': 147.0, 'jumps': {'jumps': 35.0, 'jumps_bounded': 34.0, 'levels': 2211.0, 'levels_bounded': 2166.0, 'max': 69.0, 'max_executed': 8.0, 'max_bounded': 68.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.30219078063964844, 'cpu': 0.28125, 'solve': 0.0029659271240234375, 'unsat': 0.0029659271240234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.337362289428711, 'cpu': 1.3125, 'solve': 0.02191162109375, 'unsat': 0.017925262451171875, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 445.0, 'conflicts': 65.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 32.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 75.0, 'integrated': 280.0, 'lemmas': 344.0, 'lits_learnt': 850.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 195.0, 'integrated_jumps': 108.0, 'guiding_paths_lits': 1356.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 45.0, 'lemmas_loop': 84.0, 'lemmas_other': 215.0, 'lits_conflict': 49.0, 'lits_loop': 554.0, 'lits_other': 247.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 38.0, 'levels': 2362.0, 'levels_bounded': 2303.0, 'max': 69.0, 'max_executed': 8.0, 'max_bounded': 68.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.237622s.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015869s with result Unsatisfiable.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25349100000000035, Incremental time limit = None
Running cumulative time = 1.535698400000003, Cumulative time limit = 3600
Used memory = (RSS = 228.234375Mb, VMS = 219.531250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.4594562, solving_time=0.07624220000000292, total_time=1.535698400000003, memory=Memory(rss=228.234375, vms=219.53125), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23762229999999995, solving_time=0.015868700000000402, total_time=0.25349100000000035, memory=Memory(rss=228.234375, vms=219.53125), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 26546.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68643.0, 'bodies_tr': 68643.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 123.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2160.0, 'rules': 99218.0, 'rules_normal': 97616.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 99166.0, 'rules_tr_normal': 97616.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 20.0, 'eqs': 59812.0, 'eqs_atom': 13176.0, 'eqs_body': 3716.0, 'eqs_other': 42920.0}, 'lpStep': {'atoms': 3488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11589.0, 'bodies_tr': 11589.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15758.0, 'rules_normal': 15549.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15756.0, 'rules_tr_normal': 15549.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8459.0, 'eqs_atom': 1544.0, 'eqs_body': 175.0, 'eqs_other': 6740.0}, 'generator': {'vars': 8116.0, 'vars_eliminated': 0.0, 'vars_frozen': 5317.0, 'constraints': 996.0, 'constraints_binary': 20939.0, 'constraints_ternary': 4611.0, 'acyc_edges': 0.0, 'complexity': 26772.0}}, 'solving': {'solvers': {'choices': 127.0, 'conflicts': 107.0, 'conflicts_analyzed': 96.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 53.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 81.0, 'distributed_sum_lbd': 155.0, 'integrated': 411.0, 'lemmas': 530.0, 'lits_learnt': 5210.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 22.0, 'cpu_time': 0.0, 'integrated_imps': 314.0, 'integrated_jumps': 43.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 83.0, 'lemmas_loop': 64.0, 'lemmas_other': 383.0, 'lits_conflict': 923.0, 'lits_loop': 582.0, 'lits_other': 3705.0, 'jumps': {'jumps': 96.0, 'jumps_bounded': 42.0, 'levels': 1252.0, 'levels_bounded': 1149.0, 'max': 358.0, 'max_executed': 358.0, 'max_bounded': 357.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.25531768798828125, 'cpu': 0.25, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5926799774169922, 'cpu': 1.5625, 'solve': 0.026897430419921875, 'unsat': 0.02291107177734375, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 572.0, 'conflicts': 172.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 85.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 140.0, 'distributed_sum_lbd': 230.0, 'integrated': 691.0, 'lemmas': 874.0, 'lits_learnt': 6060.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 30.0, 'cpu_time': 0.0, 'integrated_imps': 509.0, 'integrated_jumps': 151.0, 'guiding_paths_lits': 1902.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 128.0, 'lemmas_loop': 148.0, 'lemmas_other': 598.0, 'lits_conflict': 972.0, 'lits_loop': 1136.0, 'lits_other': 3952.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 80.0, 'levels': 3614.0, 'levels_bounded': 3452.0, 'max': 358.0, 'max_executed': 358.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280150s.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023723s with result Unsatisfiable.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30387300000000295, Incremental time limit = None
Running cumulative time = 1.8395714000000059, Cumulative time limit = 3600
Used memory = (RSS = 233.824219Mb, VMS = 225.972656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.7396061000000014, solving_time=0.09996530000000448, total_time=1.8395714000000059, memory=Memory(rss=233.82421875, vms=225.97265625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2801499000000014, solving_time=0.02372310000000155, total_time=0.30387300000000295, memory=Memory(rss=233.82421875, vms=225.97265625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 30052.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 80714.0, 'bodies_tr': 80714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1467.0, 'count_bodies_tr': 1467.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2650.0, 'rules': 115672.0, 'rules_normal': 113861.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 115618.0, 'rules_tr_normal': 113861.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 30.0, 'eqs': 72433.0, 'eqs_atom': 14913.0, 'eqs_body': 3897.0, 'eqs_other': 53623.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12071.0, 'bodies_tr': 12071.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 16454.0, 'rules_normal': 16245.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16452.0, 'rules_tr_normal': 16245.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 12621.0, 'eqs_atom': 1737.0, 'eqs_body': 181.0, 'eqs_other': 10703.0}, 'generator': {'vars': 10366.0, 'vars_eliminated': 0.0, 'vars_frozen': 6679.0, 'constraints': 1471.0, 'constraints_binary': 30466.0, 'constraints_ternary': 7392.0, 'acyc_edges': 0.0, 'complexity': 39623.0}}, 'solving': {'solvers': {'choices': 115.0, 'conflicts': 95.0, 'conflicts_analyzed': 87.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 66.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 184.0, 'integrated': 472.0, 'lemmas': 587.0, 'lits_learnt': 9592.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 26.0, 'cpu_time': 0.0, 'integrated_imps': 296.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 623.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 85.0, 'lemmas_loop': 92.0, 'lemmas_other': 410.0, 'lits_conflict': 1476.0, 'lits_loop': 626.0, 'lits_other': 7490.0, 'jumps': {'jumps': 87.0, 'jumps_bounded': 54.0, 'levels': 1056.0, 'levels_bounded': 960.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 123.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3051872253417969, 'cpu': 0.3125, 'solve': 0.0079803466796875, 'unsat': 0.0079803466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.897867202758789, 'cpu': 1.875, 'solve': 0.034877777099609375, 'unsat': 0.03089141845703125, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 687.0, 'conflicts': 267.0, 'conflicts_analyzed': 228.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 151.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 225.0, 'distributed_sum_lbd': 414.0, 'integrated': 1163.0, 'lemmas': 1461.0, 'lits_learnt': 15652.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.0, 'integrated_imps': 805.0, 'integrated_jumps': 170.0, 'guiding_paths_lits': 2525.0, 'guiding_paths': 64.0, 'splits': 0.0, 'lemmas_conflict': 213.0, 'lemmas_loop': 240.0, 'lemmas_other': 1008.0, 'lits_conflict': 2448.0, 'lits_loop': 1762.0, 'lits_other': 11442.0, 'jumps': {'jumps': 228.0, 'jumps_bounded': 134.0, 'levels': 4670.0, 'levels_bounded': 4412.0, 'max': 358.0, 'max_executed': 358.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.260435s.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022920s with result Unsatisfiable.

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2833555999999984, Incremental time limit = None
Running cumulative time = 2.1229270000000042, Cumulative time limit = 3600
Used memory = (RSS = 237.730469Mb, VMS = 229.355469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.000041600000001, solving_time=0.12288540000000303, total_time=2.1229270000000042, memory=Memory(rss=237.73046875, vms=229.35546875), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2604354999999998, solving_time=0.022920099999998556, total_time=0.2833555999999984, memory=Memory(rss=237.73046875, vms=229.35546875), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 33589.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93134.0, 'bodies_tr': 93134.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1668.0, 'count_bodies_tr': 1668.0, 'sccs': 173.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3244.0, 'rules': 132513.0, 'rules_normal': 130493.0, 'rules_choice': 1908.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 132459.0, 'rules_tr_normal': 130493.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 42.0, 'eqs': 79972.0, 'eqs_atom': 16619.0, 'eqs_body': 3964.0, 'eqs_other': 59389.0}, 'lpStep': {'atoms': 3537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12420.0, 'bodies_tr': 12420.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16841.0, 'rules_normal': 16632.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16841.0, 'rules_tr_normal': 16632.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7539.0, 'eqs_atom': 1706.0, 'eqs_body': 67.0, 'eqs_other': 5766.0}, 'generator': {'vars': 12968.0, 'vars_eliminated': 0.0, 'vars_frozen': 8256.0, 'constraints': 2094.0, 'constraints_binary': 43654.0, 'constraints_ternary': 11114.0, 'acyc_edges': 0.0, 'complexity': 57240.0}}, 'solving': {'solvers': {'choices': 246.0, 'conflicts': 195.0, 'conflicts_analyzed': 183.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 146.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 168.0, 'distributed_sum_lbd': 340.0, 'integrated': 1013.0, 'lemmas': 1420.0, 'lits_learnt': 20218.0, 'lemmas_binary': 132.0, 'lemmas_ternary': 60.0, 'cpu_time': 0.125, 'integrated_imps': 626.0, 'integrated_jumps': 71.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 159.0, 'lemmas_loop': 319.0, 'lemmas_other': 942.0, 'lits_conflict': 2703.0, 'lits_loop': 2424.0, 'lits_other': 15091.0, 'jumps': {'jumps': 183.0, 'jumps_bounded': 89.0, 'levels': 3033.0, 'levels_bounded': 2841.0, 'max': 455.0, 'max_executed': 455.0, 'max_bounded': 454.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2854175567626953, 'cpu': 0.40625, 'solve': 0.011968612670898438, 'unsat': 0.011968612670898438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1832847595214844, 'cpu': 2.28125, 'solve': 0.04684638977050781, 'unsat': 0.04286003112792969, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 933.0, 'conflicts': 462.0, 'conflicts_analyzed': 411.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 297.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 393.0, 'distributed_sum_lbd': 754.0, 'integrated': 2176.0, 'lemmas': 2881.0, 'lits_learnt': 35870.0, 'lemmas_binary': 180.0, 'lemmas_ternary': 116.0, 'cpu_time': 0.125, 'integrated_imps': 1431.0, 'integrated_jumps': 241.0, 'guiding_paths_lits': 3225.0, 'guiding_paths': 77.0, 'splits': 0.0, 'lemmas_conflict': 372.0, 'lemmas_loop': 559.0, 'lemmas_other': 1950.0, 'lits_conflict': 5151.0, 'lits_loop': 4186.0, 'lits_other': 26533.0, 'jumps': {'jumps': 411.0, 'jumps_bounded': 223.0, 'levels': 7703.0, 'levels_bounded': 7253.0, 'max': 455.0, 'max_executed': 455.0, 'max_bounded': 454.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311650s.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030099s with result Unsatisfiable.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3417482000000014, Incremental time limit = None
Running cumulative time = 2.4646752000000056, Cumulative time limit = 3600
Used memory = (RSS = 246.246094Mb, VMS = 239.625000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.311691200000002, solving_time=0.15298400000000356, total_time=2.4646752000000056, memory=Memory(rss=246.24609375, vms=239.625), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31164960000000086, solving_time=0.03009860000000053, total_time=0.3417482000000014, memory=Memory(rss=246.24609375, vms=239.625), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 37265.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 105814.0, 'bodies_tr': 105814.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1869.0, 'count_bodies_tr': 1869.0, 'sccs': 198.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3838.0, 'rules': 149740.0, 'rules_normal': 147511.0, 'rules_choice': 2103.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 149686.0, 'rules_tr_normal': 147511.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 54.0, 'eqs': 87886.0, 'eqs_atom': 18439.0, 'eqs_body': 4035.0, 'eqs_other': 65412.0}, 'lpStep': {'atoms': 3676.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12680.0, 'bodies_tr': 12680.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17227.0, 'rules_normal': 17018.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17227.0, 'rules_tr_normal': 17018.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7914.0, 'eqs_atom': 1820.0, 'eqs_body': 71.0, 'eqs_other': 6023.0}, 'generator': {'vars': 15616.0, 'vars_eliminated': 0.0, 'vars_frozen': 9846.0, 'constraints': 2680.0, 'constraints_binary': 54062.0, 'constraints_ternary': 14541.0, 'acyc_edges': 0.0, 'complexity': 71745.0}}, 'solving': {'solvers': {'choices': 269.0, 'conflicts': 176.0, 'conflicts_analyzed': 163.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 143.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 155.0, 'distributed_sum_lbd': 341.0, 'integrated': 899.0, 'lemmas': 1267.0, 'lits_learnt': 38021.0, 'lemmas_binary': 80.0, 'lemmas_ternary': 41.0, 'cpu_time': 0.109375, 'integrated_imps': 429.0, 'integrated_jumps': 79.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 156.0, 'lemmas_loop': 311.0, 'lemmas_other': 800.0, 'lits_conflict': 6361.0, 'lits_loop': 2629.0, 'lits_other': 29031.0, 'jumps': {'jumps': 163.0, 'jumps_bounded': 76.0, 'levels': 5284.0, 'levels_bounded': 5101.0, 'max': 540.0, 'max_executed': 540.0, 'max_bounded': 539.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.344085693359375, 'cpu': 0.4375, 'solve': 0.014936447143554688, 'unsat': 0.014936447143554688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5273704528808594, 'cpu': 2.71875, 'solve': 0.0617828369140625, 'unsat': 0.057796478271484375, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1202.0, 'conflicts': 638.0, 'conflicts_analyzed': 574.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 440.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 548.0, 'distributed_sum_lbd': 1095.0, 'integrated': 3075.0, 'lemmas': 4148.0, 'lits_learnt': 73891.0, 'lemmas_binary': 260.0, 'lemmas_ternary': 157.0, 'cpu_time': 0.234375, 'integrated_imps': 1860.0, 'integrated_jumps': 320.0, 'guiding_paths_lits': 4002.0, 'guiding_paths': 91.0, 'splits': 0.0, 'lemmas_conflict': 528.0, 'lemmas_loop': 870.0, 'lemmas_other': 2750.0, 'lits_conflict': 11512.0, 'lits_loop': 6815.0, 'lits_other': 55564.0, 'jumps': {'jumps': 574.0, 'jumps_bounded': 299.0, 'levels': 12987.0, 'levels_bounded': 12354.0, 'max': 540.0, 'max_executed': 540.0, 'max_bounded': 539.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273051s.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041654s with result Unsatisfiable.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3147050999999994, Incremental time limit = None
Running cumulative time = 2.779380300000005, Cumulative time limit = 3600
Used memory = (RSS = 249.527344Mb, VMS = 242.167969Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.5847421000000015, solving_time=0.19463820000000354, total_time=2.779380300000005, memory=Memory(rss=249.52734375, vms=242.16796875), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27305089999999943, solving_time=0.041654199999999975, total_time=0.3147050999999994, memory=Memory(rss=249.52734375, vms=242.16796875), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 40962.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118528.0, 'bodies_tr': 118528.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2070.0, 'count_bodies_tr': 2070.0, 'sccs': 223.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4432.0, 'rules': 167040.0, 'rules_normal': 164602.0, 'rules_choice': 2298.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 166986.0, 'rules_tr_normal': 164602.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 66.0, 'eqs': 95869.0, 'eqs_atom': 20273.0, 'eqs_body': 4105.0, 'eqs_other': 71491.0}, 'lpStep': {'atoms': 3697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12714.0, 'bodies_tr': 12714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17300.0, 'rules_normal': 17091.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17300.0, 'rules_tr_normal': 17091.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7983.0, 'eqs_atom': 1834.0, 'eqs_body': 70.0, 'eqs_other': 6079.0}, 'generator': {'vars': 18279.0, 'vars_eliminated': 0.0, 'vars_frozen': 11443.0, 'constraints': 3011.0, 'constraints_binary': 63149.0, 'constraints_ternary': 16968.0, 'acyc_edges': 0.0, 'complexity': 83650.0}}, 'solving': {'solvers': {'choices': 459.0, 'conflicts': 226.0, 'conflicts_analyzed': 215.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 247.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 211.0, 'distributed_sum_lbd': 472.0, 'integrated': 1076.0, 'lemmas': 1745.0, 'lits_learnt': 42455.0, 'lemmas_binary': 115.0, 'lemmas_ternary': 76.0, 'cpu_time': 0.203125, 'integrated_imps': 513.0, 'integrated_jumps': 227.0, 'guiding_paths_lits': 732.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 213.0, 'lemmas_loop': 553.0, 'lemmas_other': 979.0, 'lits_conflict': 7005.0, 'lits_loop': 4369.0, 'lits_other': 31081.0, 'jumps': {'jumps': 215.0, 'jumps_bounded': 56.0, 'levels': 1849.0, 'levels_bounded': 1592.0, 'max': 502.0, 'max_executed': 502.0, 'max_bounded': 501.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3187370300292969, 'cpu': 0.484375, 'solve': 0.027441024780273438, 'unsat': 0.027441024780273438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.8461074829101562, 'cpu': 3.203125, 'solve': 0.08922386169433594, 'unsat': 0.08523750305175781, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1661.0, 'conflicts': 864.0, 'conflicts_analyzed': 789.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 687.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 759.0, 'distributed_sum_lbd': 1567.0, 'integrated': 4151.0, 'lemmas': 5893.0, 'lits_learnt': 116346.0, 'lemmas_binary': 375.0, 'lemmas_ternary': 233.0, 'cpu_time': 0.4375, 'integrated_imps': 2373.0, 'integrated_jumps': 547.0, 'guiding_paths_lits': 4734.0, 'guiding_paths': 104.0, 'splits': 0.0, 'lemmas_conflict': 741.0, 'lemmas_loop': 1423.0, 'lemmas_other': 3729.0, 'lits_conflict': 18517.0, 'lits_loop': 11184.0, 'lits_other': 86645.0, 'jumps': {'jumps': 789.0, 'jumps_bounded': 355.0, 'levels': 14836.0, 'levels_bounded': 13946.0, 'max': 540.0, 'max_executed': 540.0, 'max_bounded': 539.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.282909s.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039055s with result Unsatisfiable.

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.32196350000000074, Incremental time limit = None
Running cumulative time = 3.1013438000000058, Cumulative time limit = 3600
Used memory = (RSS = 254.644531Mb, VMS = 246.617188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.867651000000002, solving_time=0.2336928000000036, total_time=3.1013438000000058, memory=Memory(rss=254.64453125, vms=246.6171875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2829089000000007, solving_time=0.03905460000000005, total_time=0.32196350000000074, memory=Memory(rss=254.64453125, vms=246.6171875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 44673.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 131267.0, 'bodies_tr': 131267.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2271.0, 'count_bodies_tr': 2271.0, 'sccs': 248.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5026.0, 'rules': 184402.0, 'rules_normal': 181755.0, 'rules_choice': 2493.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 184348.0, 'rules_tr_normal': 181755.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 78.0, 'eqs': 103906.0, 'eqs_atom': 22119.0, 'eqs_body': 4172.0, 'eqs_other': 77615.0}, 'lpStep': {'atoms': 3711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12739.0, 'bodies_tr': 12739.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17362.0, 'rules_normal': 17153.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17362.0, 'rules_tr_normal': 17153.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8037.0, 'eqs_atom': 1846.0, 'eqs_body': 67.0, 'eqs_other': 6124.0}, 'generator': {'vars': 20949.0, 'vars_eliminated': 0.0, 'vars_frozen': 13042.0, 'constraints': 3469.0, 'constraints_binary': 73664.0, 'constraints_ternary': 20113.0, 'acyc_edges': 0.0, 'complexity': 97828.0}}, 'solving': {'solvers': {'choices': 350.0, 'conflicts': 221.0, 'conflicts_analyzed': 202.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 219.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 188.0, 'distributed_sum_lbd': 423.0, 'integrated': 1109.0, 'lemmas': 1402.0, 'lits_learnt': 48973.0, 'lemmas_binary': 67.0, 'lemmas_ternary': 91.0, 'cpu_time': 0.109375, 'integrated_imps': 414.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 335.0, 'lemmas_other': 874.0, 'lits_conflict': 9674.0, 'lits_loop': 2800.0, 'lits_other': 36499.0, 'jumps': {'jumps': 202.0, 'jumps_bounded': 54.0, 'levels': 4137.0, 'levels_bounded': 3904.0, 'max': 661.0, 'max_executed': 661.0, 'max_bounded': 660.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [9.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.32663536071777344, 'cpu': 0.40625, 'solve': 0.023939132690429688, 'unsat': 0.023939132690429688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.1727428436279297, 'cpu': 3.609375, 'solve': 0.11316299438476562, 'unsat': 0.1091766357421875, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2011.0, 'conflicts': 1085.0, 'conflicts_analyzed': 991.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 906.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 947.0, 'distributed_sum_lbd': 1990.0, 'integrated': 5260.0, 'lemmas': 7295.0, 'lits_learnt': 165319.0, 'lemmas_binary': 442.0, 'lemmas_ternary': 324.0, 'cpu_time': 0.546875, 'integrated_imps': 2787.0, 'integrated_jumps': 664.0, 'guiding_paths_lits': 5665.0, 'guiding_paths': 120.0, 'splits': 0.0, 'lemmas_conflict': 934.0, 'lemmas_loop': 1758.0, 'lemmas_other': 4603.0, 'lits_conflict': 28191.0, 'lits_loop': 13984.0, 'lits_other': 123144.0, 'jumps': {'jumps': 991.0, 'jumps_bounded': 409.0, 'levels': 18973.0, 'levels_bounded': 17850.0, 'max': 661.0, 'max_executed': 661.0, 'max_bounded': 660.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.283779s.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061689s with result Unsatisfiable.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.34546860000000024, Incremental time limit = None
Running cumulative time = 3.446812400000006, Cumulative time limit = 3600
Used memory = (RSS = 265.386719Mb, VMS = 259.906250Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.151430500000002, solving_time=0.2953819000000042, total_time=3.446812400000006, memory=Memory(rss=265.38671875, vms=259.90625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28377949999999963, solving_time=0.06168910000000061, total_time=0.34546860000000024, memory=Memory(rss=265.38671875, vms=259.90625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 48398.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 144030.0, 'bodies_tr': 144030.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2472.0, 'count_bodies_tr': 2472.0, 'sccs': 273.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5620.0, 'rules': 201824.0, 'rules_normal': 198968.0, 'rules_choice': 2688.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 201770.0, 'rules_tr_normal': 198968.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 90.0, 'eqs': 112005.0, 'eqs_atom': 23979.0, 'eqs_body': 4239.0, 'eqs_other': 83787.0}, 'lpStep': {'atoms': 3725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12763.0, 'bodies_tr': 12763.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17422.0, 'rules_normal': 17213.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17422.0, 'rules_tr_normal': 17213.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8099.0, 'eqs_atom': 1860.0, 'eqs_body': 67.0, 'eqs_other': 6172.0}, 'generator': {'vars': 23619.0, 'vars_eliminated': 0.0, 'vars_frozen': 14641.0, 'constraints': 3692.0, 'constraints_binary': 78523.0, 'constraints_ternary': 21089.0, 'acyc_edges': 0.0, 'complexity': 103938.0}}, 'solving': {'solvers': {'choices': 983.0, 'conflicts': 391.0, 'conflicts_analyzed': 378.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 409.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 363.0, 'distributed_sum_lbd': 887.0, 'integrated': 2104.0, 'lemmas': 2697.0, 'lits_learnt': 118443.0, 'lemmas_binary': 268.0, 'lemmas_ternary': 93.0, 'cpu_time': 0.21875, 'integrated_imps': 536.0, 'integrated_jumps': 376.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 373.0, 'lemmas_loop': 544.0, 'lemmas_other': 1780.0, 'lits_conflict': 21438.0, 'lits_loop': 4832.0, 'lits_other': 92173.0, 'jumps': {'jumps': 378.0, 'jumps_bounded': 56.0, 'levels': 6182.0, 'levels_bounded': 5583.0, 'max': 355.0, 'max_executed': 355.0, 'max_bounded': 354.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [9.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.35205841064453125, 'cpu': 0.515625, 'solve': 0.045848846435546875, 'unsat': 0.045848846435546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.524801254272461, 'cpu': 4.125, 'solve': 0.1590118408203125, 'unsat': 0.15502548217773438, 'sat': 0.00199127197265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2994.0, 'conflicts': 1476.0, 'conflicts_analyzed': 1369.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1315.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1310.0, 'distributed_sum_lbd': 2877.0, 'integrated': 7364.0, 'lemmas': 9992.0, 'lits_learnt': 283762.0, 'lemmas_binary': 710.0, 'lemmas_ternary': 417.0, 'cpu_time': 0.765625, 'integrated_imps': 3323.0, 'integrated_jumps': 1040.0, 'guiding_paths_lits': 6673.0, 'guiding_paths': 136.0, 'splits': 0.0, 'lemmas_conflict': 1307.0, 'lemmas_loop': 2302.0, 'lemmas_other': 6383.0, 'lits_conflict': 49629.0, 'lits_loop': 18816.0, 'lits_other': 215317.0, 'jumps': {'jumps': 1369.0, 'jumps_bounded': 465.0, 'levels': 25155.0, 'levels_bounded': 23433.0, 'max': 661.0, 'max_executed': 661.0, 'max_bounded': 660.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281234s.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.140028s with result Satisfiable.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4212619999999987, Incremental time limit = None
Running cumulative time = 3.8680744000000047, Cumulative time limit = 3600
Used memory = (RSS = 272.214844Mb, VMS = 265.632812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.432665s, Solving = 0.435410s, Total = 3.868074s, Memory = (RSS = 272.214844Mb, VMS = 265.632812Mb)), Calls = 13
Final Model :: Total atoms = 8653, Cost = (14, 0), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.4326645000000013, solving_time=0.43540990000000335, total_time=3.8680744000000047, memory=Memory(rss=272.21484375, vms=265.6328125), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28123399999999954, solving_time=0.14002799999999915, total_time=0.4212619999999987, memory=Memory(rss=272.21484375, vms=265.6328125), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 52137.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 156817.0, 'bodies_tr': 156817.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2673.0, 'count_bodies_tr': 2673.0, 'sccs': 298.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6214.0, 'rules': 219306.0, 'rules_normal': 216241.0, 'rules_choice': 2883.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 219252.0, 'rules_tr_normal': 216241.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 102.0, 'eqs': 120166.0, 'eqs_atom': 25853.0, 'eqs_body': 4306.0, 'eqs_other': 90007.0}, 'lpStep': {'atoms': 3739.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12787.0, 'bodies_tr': 12787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17482.0, 'rules_normal': 17273.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17482.0, 'rules_tr_normal': 17273.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8161.0, 'eqs_atom': 1874.0, 'eqs_body': 67.0, 'eqs_other': 6220.0}, 'generator': {'vars': 26289.0, 'vars_eliminated': 0.0, 'vars_frozen': 16240.0, 'constraints': 3908.0, 'constraints_binary': 84135.0, 'constraints_ternary': 22410.0, 'acyc_edges': 0.0, 'complexity': 111131.0}}, 'solving': {'solvers': {'choices': 2931.0, 'conflicts': 526.0, 'conflicts_analyzed': 510.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 411.0, 'models': 4.0, 'models_level': 1084.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 482.0, 'distributed_sum_lbd': 1027.0, 'integrated': 2902.0, 'lemmas': 3727.0, 'lits_learnt': 139155.0, 'lemmas_binary': 326.0, 'lemmas_ternary': 334.0, 'cpu_time': 0.625, 'integrated_imps': 1371.0, 'integrated_jumps': 741.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 504.0, 'lemmas_loop': 508.0, 'lemmas_other': 2715.0, 'lits_conflict': 22848.0, 'lits_loop': 4451.0, 'lits_other': 111856.0, 'jumps': {'jumps': 510.0, 'jumps_bounded': 70.0, 'levels': 9712.0, 'levels_bounded': 8696.0, 'max': 642.0, 'max_executed': 642.0, 'max_bounded': 641.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [14.0, 0.0], 'lower': [14.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.42885589599609375, 'cpu': 0.921875, 'solve': 0.12267494201660156, 'unsat': 0.02094268798828125, 'sat': 0.05286216735839844}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.9536571502685547, 'cpu': 5.046875, 'solve': 0.28168678283691406, 'unsat': 0.17596817016601562, 'sat': 0.05485343933105469}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 5925.0, 'conflicts': 2002.0, 'conflicts_analyzed': 1879.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1726.0, 'models': 7.0, 'models_level': 1215.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1792.0, 'distributed_sum_lbd': 3904.0, 'integrated': 10266.0, 'lemmas': 13719.0, 'lits_learnt': 422917.0, 'lemmas_binary': 1036.0, 'lemmas_ternary': 751.0, 'cpu_time': 1.390625, 'integrated_imps': 4694.0, 'integrated_jumps': 1781.0, 'guiding_paths_lits': 7758.0, 'guiding_paths': 155.0, 'splits': 0.0, 'lemmas_conflict': 1811.0, 'lemmas_loop': 2810.0, 'lemmas_other': 9098.0, 'lits_conflict': 72477.0, 'lits_loop': 23267.0, 'lits_other': 327173.0, 'jumps': {'jumps': 1879.0, 'jumps_bounded': 535.0, 'levels': 34867.0, 'levels_bounded': 32129.0, 'max': 661.0, 'max_executed': 661.0, 'max_bounded': 660.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13}

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None)

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 13]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[15-11-2021_14-29-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280103s.

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(4,13).

[15-11-2021_14-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036070s with result Unsatisfiable.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.31617319999999793, Incremental time limit = None
Running cumulative time = 4.184247600000003, Cumulative time limit = 3600
Used memory = (RSS = 275.625000Mb, VMS = 268.222656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.7127674000000006, solving_time=0.471480200000002, total_time=4.184247600000003, memory=Memory(rss=275.625, vms=268.22265625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28010289999999927, solving_time=0.03607029999999867, total_time=0.31617319999999793, memory=Memory(rss=275.625, vms=268.22265625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 55888.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 169614.0, 'bodies_tr': 169614.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2874.0, 'count_bodies_tr': 2874.0, 'sccs': 323.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6808.0, 'rules': 236830.0, 'rules_normal': 233556.0, 'rules_choice': 3078.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 236776.0, 'rules_tr_normal': 233556.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 114.0, 'eqs': 128339.0, 'eqs_atom': 27723.0, 'eqs_body': 4373.0, 'eqs_other': 96243.0}, 'lpStep': {'atoms': 3751.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12797.0, 'bodies_tr': 12797.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17524.0, 'rules_normal': 17315.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17524.0, 'rules_tr_normal': 17315.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8173.0, 'eqs_atom': 1870.0, 'eqs_body': 67.0, 'eqs_other': 6236.0}, 'generator': {'vars': 28959.0, 'vars_eliminated': 0.0, 'vars_frozen': 17839.0, 'constraints': 3339.0, 'constraints_binary': 70229.0, 'constraints_ternary': 17776.0, 'acyc_edges': 0.0, 'complexity': 111131.0}}, 'solving': {'solvers': {'choices': 522.0, 'conflicts': 123.0, 'conflicts_analyzed': 101.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 84.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 95.0, 'distributed_sum_lbd': 190.0, 'integrated': 527.0, 'lemmas': 365.0, 'lits_learnt': 12316.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 38.0, 'cpu_time': 0.109375, 'integrated_imps': 110.0, 'integrated_jumps': 88.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 95.0, 'lemmas_loop': 109.0, 'lemmas_other': 161.0, 'lits_conflict': 4172.0, 'lits_loop': 958.0, 'lits_other': 7186.0, 'jumps': {'jumps': 101.0, 'jumps_bounded': 15.0, 'levels': 709.0, 'levels_bounded': 275.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 198.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [12.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3333168029785156, 'cpu': 0.421875, 'solve': 0.019948959350585938, 'unsat': 0.019948959350585938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.28697395324707, 'cpu': 5.46875, 'solve': 0.3016357421875, 'unsat': 0.19591712951660156, 'sat': 0.05485343933105469}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6447.0, 'conflicts': 2125.0, 'conflicts_analyzed': 1980.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1810.0, 'models': 7.0, 'models_level': 1215.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1887.0, 'distributed_sum_lbd': 4094.0, 'integrated': 10793.0, 'lemmas': 14084.0, 'lits_learnt': 435233.0, 'lemmas_binary': 1066.0, 'lemmas_ternary': 789.0, 'cpu_time': 1.5, 'integrated_imps': 4804.0, 'integrated_jumps': 1869.0, 'guiding_paths_lits': 8920.0, 'guiding_paths': 173.0, 'splits': 0.0, 'lemmas_conflict': 1906.0, 'lemmas_loop': 2919.0, 'lemmas_other': 9259.0, 'lits_conflict': 76649.0, 'lits_loop': 24225.0, 'lits_other': 334359.0, 'jumps': {'jumps': 1980.0, 'jumps_bounded': 550.0, 'levels': 35576.0, 'levels_bounded': 32404.0, 'max': 661.0, 'max_executed': 661.0, 'max_bounded': 660.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280010s.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.223928s with result Satisfiable.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5039385000000003, Incremental time limit = None
Running cumulative time = 4.688186100000003, Cumulative time limit = 3600
Used memory = (RSS = 288.230469Mb, VMS = 287.820312Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.992778s, Solving = 0.695409s, Total = 4.688186s, Memory = (RSS = 288.230469Mb, VMS = 287.820312Mb)), Calls = 15
Final Model :: Total atoms = 9404, Cost = (16, 0), Optimality proven = False, Number = 5, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.9927775000000025, solving_time=0.6954086000000004, total_time=4.688186100000003, memory=Memory(rss=288.23046875, vms=287.8203125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2800101000000019, solving_time=0.22392839999999836, total_time=0.5039385000000003, memory=Memory(rss=288.23046875, vms=287.8203125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 59637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182435.0, 'bodies_tr': 182435.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3075.0, 'count_bodies_tr': 3075.0, 'sccs': 348.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7402.0, 'rules': 254414.0, 'rules_normal': 250931.0, 'rules_choice': 3273.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 254360.0, 'rules_tr_normal': 250931.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 126.0, 'eqs': 136574.0, 'eqs_atom': 29607.0, 'eqs_body': 4440.0, 'eqs_other': 102527.0}, 'lpStep': {'atoms': 3749.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12821.0, 'bodies_tr': 12821.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17584.0, 'rules_normal': 17375.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17584.0, 'rules_tr_normal': 17375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8235.0, 'eqs_atom': 1884.0, 'eqs_body': 67.0, 'eqs_other': 6284.0}, 'generator': {'vars': 31629.0, 'vars_eliminated': 0.0, 'vars_frozen': 19438.0, 'constraints': 3982.0, 'constraints_binary': 84212.0, 'constraints_ternary': 21864.0, 'acyc_edges': 0.0, 'complexity': 111131.0}}, 'solving': {'solvers': {'choices': 5209.0, 'conflicts': 773.0, 'conflicts_analyzed': 754.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 520.0, 'models': 5.0, 'models_level': 1480.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 621.0, 'distributed_sum_lbd': 1471.0, 'integrated': 3718.0, 'lemmas': 5268.0, 'lits_learnt': 301941.0, 'lemmas_binary': 716.0, 'lemmas_ternary': 361.0, 'cpu_time': 0.921875, 'integrated_imps': 1076.0, 'integrated_jumps': 1423.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 745.0, 'lemmas_loop': 1190.0, 'lemmas_other': 3333.0, 'lits_conflict': 61498.0, 'lits_loop': 9907.0, 'lits_other': 230536.0, 'jumps': {'jumps': 754.0, 'jumps_bounded': 99.0, 'levels': 13500.0, 'levels_bounded': 11646.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [16.0, 0.0], 'lower': [16.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.5071563720703125, 'cpu': 1.203125, 'solve': 0.20545005798339844, 'unsat': 0.0139617919921875, 'sat': 0.068817138671875}, 'models': {'enumerated': 5.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.794130325317383, 'cpu': 6.671875, 'solve': 0.5070858001708984, 'unsat': 0.20987892150878906, 'sat': 0.12367057800292969}, 'models': {'enumerated': 12.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 11656.0, 'conflicts': 2898.0, 'conflicts_analyzed': 2734.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2330.0, 'models': 12.0, 'models_level': 2695.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2508.0, 'distributed_sum_lbd': 5565.0, 'integrated': 14511.0, 'lemmas': 19352.0, 'lits_learnt': 737174.0, 'lemmas_binary': 1782.0, 'lemmas_ternary': 1150.0, 'cpu_time': 2.421875, 'integrated_imps': 5880.0, 'integrated_jumps': 3292.0, 'guiding_paths_lits': 10159.0, 'guiding_paths': 196.0, 'splits': 0.0, 'lemmas_conflict': 2651.0, 'lemmas_loop': 4109.0, 'lemmas_other': 12592.0, 'lits_conflict': 138147.0, 'lits_loop': 34132.0, 'lits_other': 564895.0, 'jumps': {'jumps': 2734.0, 'jumps_bounded': 649.0, 'levels': 49076.0, 'levels_bounded': 44050.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15}

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None)

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 15]:
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5)
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5)

[15-11-2021_14-29-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291818s.

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(5,15).

[15-11-2021_14-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.219741s with result Satisfiable.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5115592999999983, Incremental time limit = None
Running cumulative time = 5.199745400000001, Cumulative time limit = 3600
Used memory = (RSS = 300.203125Mb, VMS = 298.757812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.284596s, Solving = 0.915149s, Total = 5.199745s, Memory = (RSS = 300.203125Mb, VMS = 298.757812Mb)), Calls = 16
Final Model :: Total atoms = 9783, Cost = (17, 0), Optimality proven = False, Number = 7, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.2845960000000005, solving_time=0.9151494000000007, total_time=5.199745400000001, memory=Memory(rss=300.203125, vms=298.7578125), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.291818499999998, solving_time=0.2197408000000003, total_time=0.5115592999999983, memory=Memory(rss=300.203125, vms=298.7578125), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 63400.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 195280.0, 'bodies_tr': 195280.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3276.0, 'count_bodies_tr': 3276.0, 'sccs': 373.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7996.0, 'rules': 272058.0, 'rules_normal': 268366.0, 'rules_choice': 3468.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 272004.0, 'rules_tr_normal': 268366.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 138.0, 'eqs': 144871.0, 'eqs_atom': 31505.0, 'eqs_body': 4507.0, 'eqs_other': 108859.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12845.0, 'bodies_tr': 12845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17644.0, 'rules_normal': 17435.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17644.0, 'rules_tr_normal': 17435.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8297.0, 'eqs_atom': 1898.0, 'eqs_body': 67.0, 'eqs_other': 6332.0}, 'generator': {'vars': 34299.0, 'vars_eliminated': 0.0, 'vars_frozen': 21037.0, 'constraints': 3622.0, 'constraints_binary': 76623.0, 'constraints_ternary': 19006.0, 'acyc_edges': 0.0, 'complexity': 111131.0}}, 'solving': {'solvers': {'choices': 4035.0, 'conflicts': 238.0, 'conflicts_analyzed': 220.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 96.0, 'models': 7.0, 'models_level': 2184.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 84.0, 'distributed_sum_lbd': 213.0, 'integrated': 502.0, 'lemmas': 825.0, 'lits_learnt': 39513.0, 'lemmas_binary': 145.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.515625, 'integrated_imps': 92.0, 'integrated_jumps': 247.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 188.0, 'lemmas_loop': 188.0, 'lemmas_other': 449.0, 'lits_conflict': 12456.0, 'lits_loop': 1703.0, 'lits_other': 25354.0, 'jumps': {'jumps': 220.0, 'jumps_bounded': 9.0, 'levels': 561.0, 'levels_bounded': 40.0, 'max': 51.0, 'max_executed': 51.0, 'max_bounded': 24.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [17.0, 0.0], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.5251102447509766, 'cpu': 0.828125, 'solve': 0.19997787475585938, 'unsat': 0.014959335327148438, 'sat': 0.008977890014648438}, 'models': {'enumerated': 7.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.319240570068359, 'cpu': 7.5, 'solve': 0.7070636749267578, 'unsat': 0.2248382568359375, 'sat': 0.13264846801757812}, 'models': {'enumerated': 19.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 15691.0, 'conflicts': 3136.0, 'conflicts_analyzed': 2954.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2426.0, 'models': 19.0, 'models_level': 4879.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2592.0, 'distributed_sum_lbd': 5778.0, 'integrated': 15013.0, 'lemmas': 20177.0, 'lits_learnt': 776687.0, 'lemmas_binary': 1927.0, 'lemmas_ternary': 1178.0, 'cpu_time': 2.9375, 'integrated_imps': 5972.0, 'integrated_jumps': 3539.0, 'guiding_paths_lits': 11475.0, 'guiding_paths': 221.0, 'splits': 0.0, 'lemmas_conflict': 2839.0, 'lemmas_loop': 4297.0, 'lemmas_other': 13041.0, 'lits_conflict': 150603.0, 'lits_loop': 35835.0, 'lits_other': 590249.0, 'jumps': {'jumps': 2954.0, 'jumps_bounded': 658.0, 'levels': 49637.0, 'levels_bounded': 44090.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16}

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.292830s.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(6,16).

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085270s with result Satisfiable.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37809959999999876, Incremental time limit = None
Running cumulative time = 5.577845, Cumulative time limit = 3600
Used memory = (RSS = 310.281250Mb, VMS = 307.460938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 23
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.577426s, Solving = 1.000419s, Total = 5.577845s, Memory = (RSS = 310.281250Mb, VMS = 307.460938Mb)), Calls = 17
Final Model :: Total atoms = 10165, Cost = (18, 0), Optimality proven = False, Number = 4, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.5774258, solving_time=1.0004191999999996, total_time=5.577845, memory=Memory(rss=310.28125, vms=307.4609375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2928297999999998, solving_time=0.08526979999999895, total_time=0.37809959999999876, memory=Memory(rss=310.28125, vms=307.4609375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 67177.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 208142.0, 'bodies_tr': 208142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3477.0, 'count_bodies_tr': 3477.0, 'sccs': 398.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8590.0, 'rules': 289755.0, 'rules_normal': 285854.0, 'rules_choice': 3663.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 289701.0, 'rules_tr_normal': 285854.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 150.0, 'eqs': 153209.0, 'eqs_atom': 33410.0, 'eqs_body': 4574.0, 'eqs_other': 115225.0}, 'lpStep': {'atoms': 3777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12862.0, 'bodies_tr': 12862.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17697.0, 'rules_normal': 17488.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17697.0, 'rules_tr_normal': 17488.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8338.0, 'eqs_atom': 1905.0, 'eqs_body': 67.0, 'eqs_other': 6366.0}, 'generator': {'vars': 36969.0, 'vars_eliminated': 0.0, 'vars_frozen': 22636.0, 'constraints': 4251.0, 'constraints_binary': 90290.0, 'constraints_ternary': 22885.0, 'acyc_edges': 0.0, 'complexity': 118224.0}}, 'solving': {'solvers': {'choices': 2362.0, 'conflicts': 127.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 28.0, 'models': 4.0, 'models_level': 1359.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 42.0, 'distributed_sum_lbd': 131.0, 'integrated': 149.0, 'lemmas': 348.0, 'lits_learnt': 44757.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.203125, 'integrated_imps': 20.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 113.0, 'lemmas_loop': 88.0, 'lemmas_other': 147.0, 'lits_conflict': 18873.0, 'lits_loop': 743.0, 'lits_other': 25141.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 0.0, 'levels': 178.0, 'levels_bounded': 0.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [18.0, 0.0], 'lower': [18.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3829803466796875, 'cpu': 0.515625, 'solve': 0.06482696533203125, 'unsat': 0.021942138671875, 'sat': 0.007978439331054688}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.702220916748047, 'cpu': 8.015625, 'solve': 0.7718906402587891, 'unsat': 0.2467803955078125, 'sat': 0.1406269073486328}, 'models': {'enumerated': 23.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 18053.0, 'conflicts': 3263.0, 'conflicts_analyzed': 3067.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2454.0, 'models': 23.0, 'models_level': 6238.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2634.0, 'distributed_sum_lbd': 5909.0, 'integrated': 15162.0, 'lemmas': 20525.0, 'lits_learnt': 821444.0, 'lemmas_binary': 1939.0, 'lemmas_ternary': 1178.0, 'cpu_time': 3.140625, 'integrated_imps': 5992.0, 'integrated_jumps': 3553.0, 'guiding_paths_lits': 12868.0, 'guiding_paths': 239.0, 'splits': 0.0, 'lemmas_conflict': 2952.0, 'lemmas_loop': 4385.0, 'lemmas_other': 13188.0, 'lits_conflict': 169476.0, 'lits_loop': 36578.0, 'lits_other': 615390.0, 'jumps': {'jumps': 3067.0, 'jumps_bounded': 658.0, 'levels': 49815.0, 'levels_bounded': 44090.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17}

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 7)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280331s.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085265s with result Satisfiable.

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3655968000000023, Incremental time limit = None
Running cumulative time = 5.943441800000002, Cumulative time limit = 3600
Used memory = (RSS = 319.066406Mb, VMS = 315.121094Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 27
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.857757s, Solving = 1.085685s, Total = 5.943442s, Memory = (RSS = 319.066406Mb, VMS = 315.121094Mb)), Calls = 18
Final Model :: Total atoms = 10544, Cost = (19, 0), Optimality proven = False, Number = 4, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.857757200000002, solving_time=1.0856846000000004, total_time=5.943441800000002, memory=Memory(rss=319.06640625, vms=315.12109375), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28033140000000145, solving_time=0.08526540000000082, total_time=0.3655968000000023, memory=Memory(rss=319.06640625, vms=315.12109375), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 70961.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 221028.0, 'bodies_tr': 221028.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3678.0, 'count_bodies_tr': 3678.0, 'sccs': 423.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9184.0, 'rules': 307512.0, 'rules_normal': 303402.0, 'rules_choice': 3858.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 307458.0, 'rules_tr_normal': 303402.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 162.0, 'eqs': 161609.0, 'eqs_atom': 35329.0, 'eqs_body': 4641.0, 'eqs_other': 121639.0}, 'lpStep': {'atoms': 3784.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12886.0, 'bodies_tr': 12886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17757.0, 'rules_normal': 17548.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17757.0, 'rules_tr_normal': 17548.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8400.0, 'eqs_atom': 1919.0, 'eqs_body': 67.0, 'eqs_other': 6414.0}, 'generator': {'vars': 39639.0, 'vars_eliminated': 0.0, 'vars_frozen': 24235.0, 'constraints': 4894.0, 'constraints_binary': 104409.0, 'constraints_ternary': 26897.0, 'acyc_edges': 0.0, 'complexity': 137082.0}}, 'solving': {'solvers': {'choices': 1842.0, 'conflicts': 95.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 49.0, 'models': 4.0, 'models_level': 1417.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 114.0, 'integrated': 131.0, 'lemmas': 207.0, 'lits_learnt': 28762.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.296875, 'integrated_imps': 34.0, 'integrated_jumps': 277.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 77.0, 'lemmas_loop': 21.0, 'lemmas_other': 109.0, 'lits_conflict': 13537.0, 'lits_loop': 192.0, 'lits_other': 15033.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 2.0, 'levels': 110.0, 'levels_bounded': 3.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.36998939514160156, 'cpu': 0.578125, 'solve': 0.06679344177246094, 'unsat': 0.014959335327148438, 'sat': 0.011941909790039062}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.072210311889648, 'cpu': 8.59375, 'solve': 0.83868408203125, 'unsat': 0.26173973083496094, 'sat': 0.15256881713867188}, 'models': {'enumerated': 27.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 19895.0, 'conflicts': 3358.0, 'conflicts_analyzed': 3144.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2503.0, 'models': 27.0, 'models_level': 7655.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2672.0, 'distributed_sum_lbd': 6023.0, 'integrated': 15293.0, 'lemmas': 20732.0, 'lits_learnt': 850206.0, 'lemmas_binary': 1951.0, 'lemmas_ternary': 1190.0, 'cpu_time': 3.4375, 'integrated_imps': 6026.0, 'integrated_jumps': 3830.0, 'guiding_paths_lits': 14338.0, 'guiding_paths': 258.0, 'splits': 0.0, 'lemmas_conflict': 3029.0, 'lemmas_loop': 4406.0, 'lemmas_other': 13297.0, 'lits_conflict': 183013.0, 'lits_loop': 36770.0, 'lits_other': 630423.0, 'jumps': {'jumps': 3144.0, 'jumps_bounded': 660.0, 'levels': 49925.0, 'levels_bounded': 44093.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18}

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8)

[15-11-2021_14-29-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.278129s.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(8,18).

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.222639s with result Satisfiable.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5007683000000007, Incremental time limit = None
Running cumulative time = 6.444210100000003, Cumulative time limit = 3600
Used memory = (RSS = 332.964844Mb, VMS = 328.191406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 33
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.135886s, Solving = 1.308324s, Total = 6.444210s, Memory = (RSS = 332.964844Mb, VMS = 328.191406Mb)), Calls = 19
Final Model :: Total atoms = 10928, Cost = (21, 0), Optimality proven = False, Number = 6, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.135886400000004, solving_time=1.308323699999999, total_time=6.444210100000003, memory=Memory(rss=332.96484375, vms=328.19140625), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2781292000000022, solving_time=0.22263909999999854, total_time=0.5007683000000007, memory=Memory(rss=332.96484375, vms=328.19140625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 74759.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 233938.0, 'bodies_tr': 233938.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3879.0, 'count_bodies_tr': 3879.0, 'sccs': 448.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9778.0, 'rules': 325329.0, 'rules_normal': 321010.0, 'rules_choice': 4053.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 325275.0, 'rules_tr_normal': 321010.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 170071.0, 'eqs_atom': 37262.0, 'eqs_body': 4708.0, 'eqs_other': 128101.0}, 'lpStep': {'atoms': 3798.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12910.0, 'bodies_tr': 12910.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17817.0, 'rules_normal': 17608.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17817.0, 'rules_tr_normal': 17608.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8462.0, 'eqs_atom': 1933.0, 'eqs_body': 67.0, 'eqs_other': 6462.0}, 'generator': {'vars': 42309.0, 'vars_eliminated': 0.0, 'vars_frozen': 25834.0, 'constraints': 5537.0, 'constraints_binary': 118574.0, 'constraints_ternary': 30909.0, 'acyc_edges': 0.0, 'complexity': 155986.0}}, 'solving': {'solvers': {'choices': 3983.0, 'conflicts': 108.0, 'conflicts_analyzed': 96.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 58.0, 'models': 6.0, 'models_level': 2204.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 72.0, 'integrated': 111.0, 'lemmas': 256.0, 'lits_learnt': 27668.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.375, 'integrated_imps': 47.0, 'integrated_jumps': 137.0, 'guiding_paths_lits': 1547.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 96.0, 'lemmas_loop': 69.0, 'lemmas_other': 91.0, 'lits_conflict': 13356.0, 'lits_loop': 659.0, 'lits_other': 13653.0, 'jumps': {'jumps': 96.0, 'jumps_bounded': 2.0, 'levels': 155.0, 'levels_bounded': 3.0, 'max': 13.0, 'max_executed': 13.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.5056495666503906, 'cpu': 0.6875, 'solve': 0.19946670532226562, 'unsat': 0.015956878662109375, 'sat': 0.008977890014648438}, 'models': {'enumerated': 6.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.577859878540039, 'cpu': 9.28125, 'solve': 1.0381507873535156, 'unsat': 0.2776966094970703, 'sat': 0.1615467071533203}, 'models': {'enumerated': 33.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23878.0, 'conflicts': 3466.0, 'conflicts_analyzed': 3240.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2561.0, 'models': 33.0, 'models_level': 9859.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2698.0, 'distributed_sum_lbd': 6095.0, 'integrated': 15404.0, 'lemmas': 20988.0, 'lits_learnt': 877874.0, 'lemmas_binary': 1951.0, 'lemmas_ternary': 1196.0, 'cpu_time': 3.8125, 'integrated_imps': 6073.0, 'integrated_jumps': 3967.0, 'guiding_paths_lits': 15885.0, 'guiding_paths': 275.0, 'splits': 0.0, 'lemmas_conflict': 3125.0, 'lemmas_loop': 4475.0, 'lemmas_other': 13388.0, 'lits_conflict': 196369.0, 'lits_loop': 37429.0, 'lits_other': 644076.0, 'jumps': {'jumps': 3240.0, 'jumps_bounded': 662.0, 'levels': 50080.0, 'levels_bounded': 44096.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19}

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 9)
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 9)

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317462s.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032903s with result Unsatisfiable.

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3503655999999964, Incremental time limit = None
Running cumulative time = 6.794575699999999, Cumulative time limit = 3600
Used memory = (RSS = 337.199219Mb, VMS = 330.933594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.453348900000002, solving_time=1.3412267999999976, total_time=6.794575699999999, memory=Memory(rss=337.19921875, vms=330.93359375), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31746249999999776, solving_time=0.03290309999999863, total_time=0.3503655999999964, memory=Memory(rss=337.19921875, vms=330.93359375), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 78571.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 246872.0, 'bodies_tr': 246872.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4080.0, 'count_bodies_tr': 4080.0, 'sccs': 473.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10372.0, 'rules': 343206.0, 'rules_normal': 338678.0, 'rules_choice': 4248.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 343152.0, 'rules_tr_normal': 338678.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 186.0, 'eqs': 178595.0, 'eqs_atom': 39209.0, 'eqs_body': 4775.0, 'eqs_other': 134611.0}, 'lpStep': {'atoms': 3812.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12934.0, 'bodies_tr': 12934.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17877.0, 'rules_normal': 17668.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17877.0, 'rules_tr_normal': 17668.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8524.0, 'eqs_atom': 1947.0, 'eqs_body': 67.0, 'eqs_other': 6510.0}, 'generator': {'vars': 44979.0, 'vars_eliminated': 0.0, 'vars_frozen': 27433.0, 'constraints': 6180.0, 'constraints_binary': 132706.0, 'constraints_ternary': 34921.0, 'acyc_edges': 0.0, 'complexity': 174857.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 108.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1160.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 108.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3554496765136719, 'cpu': 0.328125, 'solve': 0.011968612670898438, 'unsat': 0.011968612670898438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.933309555053711, 'cpu': 9.609375, 'solve': 1.050119400024414, 'unsat': 0.28966522216796875, 'sat': 0.1615467071533203}, 'models': {'enumerated': 33.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23878.0, 'conflicts': 3472.0, 'conflicts_analyzed': 3240.0, 'restarts': 1.0, 'restarts_last': 106.0, 'extra': {'domain_choices': 2561.0, 'models': 33.0, 'models_level': 9859.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2698.0, 'distributed_sum_lbd': 6095.0, 'integrated': 15404.0, 'lemmas': 21000.0, 'lits_learnt': 877982.0, 'lemmas_binary': 1951.0, 'lemmas_ternary': 1196.0, 'cpu_time': 3.8125, 'integrated_imps': 6073.0, 'integrated_jumps': 3967.0, 'guiding_paths_lits': 17045.0, 'guiding_paths': 281.0, 'splits': 0.0, 'lemmas_conflict': 3125.0, 'lemmas_loop': 4487.0, 'lemmas_other': 13388.0, 'lits_conflict': 196369.0, 'lits_loop': 37537.0, 'lits_other': 644076.0, 'jumps': {'jumps': 3240.0, 'jumps_bounded': 662.0, 'levels': 50080.0, 'levels_bounded': 44096.0, 'max': 719.0, 'max_executed': 719.0, 'max_bounded': 718.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321693s.

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.158161s with result Unsatisfiable.

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.4798538000000008, Incremental time limit = None
Running cumulative time = 7.2744295, Cumulative time limit = 3600
Used memory = (RSS = 349.484375Mb, VMS = 354.128906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.775041700000003, solving_time=1.4993877999999974, total_time=7.2744295, memory=Memory(rss=349.484375, vms=354.12890625), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.321692800000001, solving_time=0.15816099999999977, total_time=0.4798538000000008, memory=Memory(rss=349.484375, vms=354.12890625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 82397.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 259830.0, 'bodies_tr': 259830.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4281.0, 'count_bodies_tr': 4281.0, 'sccs': 498.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10966.0, 'rules': 361143.0, 'rules_normal': 356406.0, 'rules_choice': 4443.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 361089.0, 'rules_tr_normal': 356406.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 198.0, 'eqs': 187181.0, 'eqs_atom': 41170.0, 'eqs_body': 4842.0, 'eqs_other': 141169.0}, 'lpStep': {'atoms': 3826.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12958.0, 'bodies_tr': 12958.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17937.0, 'rules_normal': 17728.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17937.0, 'rules_tr_normal': 17728.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8586.0, 'eqs_atom': 1961.0, 'eqs_body': 67.0, 'eqs_other': 6558.0}, 'generator': {'vars': 47649.0, 'vars_eliminated': 0.0, 'vars_frozen': 29032.0, 'constraints': 6823.0, 'constraints_binary': 146963.0, 'constraints_ternary': 38933.0, 'acyc_edges': 0.0, 'complexity': 193853.0}}, 'solving': {'solvers': {'choices': 1270.0, 'conflicts': 555.0, 'conflicts_analyzed': 535.0, 'restarts': 1.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 629.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 506.0, 'distributed_sum_lbd': 1214.0, 'integrated': 3009.0, 'lemmas': 4976.0, 'lits_learnt': 436710.0, 'lemmas_binary': 405.0, 'lemmas_ternary': 168.0, 'cpu_time': 0.703125, 'integrated_imps': 950.0, 'integrated_jumps': 429.0, 'guiding_paths_lits': 1701.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 533.0, 'lemmas_loop': 1722.0, 'lemmas_other': 2721.0, 'lits_conflict': 71797.0, 'lits_loop': 15424.0, 'lits_other': 349489.0, 'jumps': {'jumps': 535.0, 'jumps_bounded': 127.0, 'levels': 17572.0, 'levels_bounded': 16732.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.4858531951904297, 'cpu': 1.0625, 'solve': 0.13116073608398438, 'unsat': 0.13116073608398438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.419162750244141, 'cpu': 10.671875, 'solve': 1.1812801361083984, 'unsat': 0.4208259582519531, 'sat': 0.1615467071533203}, 'models': {'enumerated': 33.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 25148.0, 'conflicts': 4027.0, 'conflicts_analyzed': 3775.0, 'restarts': 2.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3190.0, 'models': 33.0, 'models_level': 9859.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3204.0, 'distributed_sum_lbd': 7309.0, 'integrated': 18413.0, 'lemmas': 25976.0, 'lits_learnt': 1314692.0, 'lemmas_binary': 2356.0, 'lemmas_ternary': 1364.0, 'cpu_time': 4.515625, 'integrated_imps': 7023.0, 'integrated_jumps': 4396.0, 'guiding_paths_lits': 18746.0, 'guiding_paths': 305.0, 'splits': 0.0, 'lemmas_conflict': 3658.0, 'lemmas_loop': 6209.0, 'lemmas_other': 16109.0, 'lits_conflict': 268166.0, 'lits_loop': 52961.0, 'lits_other': 993565.0, 'jumps': {'jumps': 3775.0, 'jumps_bounded': 789.0, 'levels': 67652.0, 'levels_bounded': 60828.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.360021s.

[15-11-2021_14-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.663608s with result Satisfiable.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 1.0236288999999985, Incremental time limit = None
Running cumulative time = 8.298058399999999, Cumulative time limit = 3600
Used memory = (RSS = 368.781250Mb, VMS = 372.500000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 41
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.135063s, Solving = 2.162996s, Total = 8.298058s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)), Calls = 22
Final Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 8, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.1350628, solving_time=2.1629955999999986, total_time=8.298058399999999, memory=Memory(rss=368.78125, vms=372.5), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3600210999999973, solving_time=0.6636078000000012, total_time=1.0236288999999985, memory=Memory(rss=368.78125, vms=372.5), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 86237.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 272812.0, 'bodies_tr': 272812.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4482.0, 'count_bodies_tr': 4482.0, 'sccs': 523.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11560.0, 'rules': 379140.0, 'rules_normal': 374194.0, 'rules_choice': 4638.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 379086.0, 'rules_tr_normal': 374194.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 210.0, 'eqs': 195829.0, 'eqs_atom': 43145.0, 'eqs_body': 4909.0, 'eqs_other': 147775.0}, 'lpStep': {'atoms': 3840.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12982.0, 'bodies_tr': 12982.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17997.0, 'rules_normal': 17788.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17997.0, 'rules_tr_normal': 17788.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8648.0, 'eqs_atom': 1975.0, 'eqs_body': 67.0, 'eqs_other': 6606.0}, 'generator': {'vars': 50319.0, 'vars_eliminated': 0.0, 'vars_frozen': 30631.0, 'constraints': 7466.0, 'constraints_binary': 161150.0, 'constraints_ternary': 42882.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 10275.0, 'conflicts': 2083.0, 'conflicts_analyzed': 2057.0, 'restarts': 9.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 1523.0, 'models': 8.0, 'models_level': 3389.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1471.0, 'distributed_sum_lbd': 3935.0, 'integrated': 8837.0, 'lemmas': 12933.0, 'lits_learnt': 1508636.0, 'lemmas_binary': 1119.0, 'lemmas_ternary': 598.0, 'cpu_time': 2.765625, 'integrated_imps': 1898.0, 'integrated_jumps': 2251.0, 'guiding_paths_lits': 1778.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 2048.0, 'lemmas_loop': 2424.0, 'lemmas_other': 8461.0, 'lits_conflict': 308399.0, 'lits_loop': 20780.0, 'lits_other': 1179457.0, 'jumps': {'jumps': 2057.0, 'jumps_bounded': 147.0, 'levels': 45626.0, 'levels_bounded': 41935.0, 'max': 1581.0, 'max_executed': 1581.0, 'max_bounded': 1580.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 1.030263900756836, 'cpu': 3.15625, 'solve': 0.6412849426269531, 'unsat': 0.018949508666992188, 'sat': 0.3171520233154297}, 'models': {'enumerated': 8.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.449426651000977, 'cpu': 13.828125, 'solve': 1.8225650787353516, 'unsat': 0.4397754669189453, 'sat': 0.47869873046875}, 'models': {'enumerated': 41.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 35423.0, 'conflicts': 6110.0, 'conflicts_analyzed': 5832.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4713.0, 'models': 41.0, 'models_level': 13248.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4675.0, 'distributed_sum_lbd': 11244.0, 'integrated': 27250.0, 'lemmas': 38909.0, 'lits_learnt': 2823328.0, 'lemmas_binary': 3475.0, 'lemmas_ternary': 1962.0, 'cpu_time': 7.28125, 'integrated_imps': 8921.0, 'integrated_jumps': 6647.0, 'guiding_paths_lits': 20524.0, 'guiding_paths': 335.0, 'splits': 0.0, 'lemmas_conflict': 5706.0, 'lemmas_loop': 8633.0, 'lemmas_other': 24570.0, 'lits_conflict': 576565.0, 'lits_loop': 73741.0, 'lits_other': 2173022.0, 'jumps': {'jumps': 5832.0, 'jumps_bounded': 936.0, 'levels': 113278.0, 'levels_bounded': 102763.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19, 9: 22}

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.320929s, Solving = 0.015452s, Total = 0.336381s, Memory = (RSS = 212.003906Mb, VMS = 202.894531Mb)
2 : Statistics :: Grounding = 0.175614s, Solving = 0.009681s, Total = 0.185295s, Memory = (RSS = 214.246094Mb, VMS = 205.445312Mb)
3 : Statistics :: Grounding = 0.211929s, Solving = 0.013539s, Total = 0.225468s, Memory = (RSS = 216.425781Mb, VMS = 207.214844Mb)
4 : Statistics :: Grounding = 0.226270s, Solving = 0.007810s, Total = 0.234081s, Memory = (RSS = 218.093750Mb, VMS = 208.757812Mb)
5 : Statistics :: Grounding = 0.287092s, Solving = 0.013891s, Total = 0.300983s, Memory = (RSS = 223.640625Mb, VMS = 214.406250Mb)
6 : Statistics :: Grounding = 0.237622s, Solving = 0.015869s, Total = 0.253491s, Memory = (RSS = 228.234375Mb, VMS = 219.531250Mb)
7 : Statistics :: Grounding = 0.280150s, Solving = 0.023723s, Total = 0.303873s, Memory = (RSS = 233.824219Mb, VMS = 225.972656Mb)
8 : Statistics :: Grounding = 0.260435s, Solving = 0.022920s, Total = 0.283356s, Memory = (RSS = 237.730469Mb, VMS = 229.355469Mb)
9 : Statistics :: Grounding = 0.311650s, Solving = 0.030099s, Total = 0.341748s, Memory = (RSS = 246.246094Mb, VMS = 239.625000Mb)
10 : Statistics :: Grounding = 0.273051s, Solving = 0.041654s, Total = 0.314705s, Memory = (RSS = 249.527344Mb, VMS = 242.167969Mb)
11 : Statistics :: Grounding = 0.282909s, Solving = 0.039055s, Total = 0.321964s, Memory = (RSS = 254.644531Mb, VMS = 246.617188Mb)
12 : Statistics :: Grounding = 0.283779s, Solving = 0.061689s, Total = 0.345469s, Memory = (RSS = 265.386719Mb, VMS = 259.906250Mb)
13 : Statistics :: Grounding = 0.281234s, Solving = 0.140028s, Total = 0.421262s, Memory = (RSS = 272.214844Mb, VMS = 265.632812Mb)
14 : Statistics :: Grounding = 0.280103s, Solving = 0.036070s, Total = 0.316173s, Memory = (RSS = 275.625000Mb, VMS = 268.222656Mb)
15 : Statistics :: Grounding = 0.280010s, Solving = 0.223928s, Total = 0.503939s, Memory = (RSS = 288.230469Mb, VMS = 287.820312Mb)
16 : Statistics :: Grounding = 0.291818s, Solving = 0.219741s, Total = 0.511559s, Memory = (RSS = 300.203125Mb, VMS = 298.757812Mb)
17 : Statistics :: Grounding = 0.292830s, Solving = 0.085270s, Total = 0.378100s, Memory = (RSS = 310.281250Mb, VMS = 307.460938Mb)
18 : Statistics :: Grounding = 0.280331s, Solving = 0.085265s, Total = 0.365597s, Memory = (RSS = 319.066406Mb, VMS = 315.121094Mb)
19 : Statistics :: Grounding = 0.278129s, Solving = 0.222639s, Total = 0.500768s, Memory = (RSS = 332.964844Mb, VMS = 328.191406Mb)
20 : Statistics :: Grounding = 0.317462s, Solving = 0.032903s, Total = 0.350366s, Memory = (RSS = 337.199219Mb, VMS = 330.933594Mb)
21 : Statistics :: Grounding = 0.321693s, Solving = 0.158161s, Total = 0.479854s, Memory = (RSS = 349.484375Mb, VMS = 354.128906Mb)
22 : Statistics :: Grounding = 0.360021s, Solving = 0.663608s, Total = 1.023629s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 8.298058s due to: External generator exit.

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.135063s, Solving = 2.162996s, Total = 8.298058s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)), Calls = 22
Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 8, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 22 :: Actions = 27                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 9 : Unachieved sgoals = 8

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.276s (Gro =   2.777s, Sea =   0.499s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 28

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 28

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 17})

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10).
sub_goal(2, talos, move(hallway), in(talos), hallway, 11).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14).
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 16).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 17).

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000294036258B0>

[15-11-2021_14-29-38] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_14-29-38] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000294036258B0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_14-29-38] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000294036258B0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 20)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000294036258B0>)

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None)

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307136s.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(10,21).

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.098233s with result Satisfiable.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4053690000000003, Incremental time limit = None
Running cumulative time = 8.703427399999999, Cumulative time limit = 3600
Used memory = (RSS = 381.292969Mb, VMS = 383.453125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 44
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.442199s, Solving = 2.261228s, Total = 8.703427s, Memory = (RSS = 381.292969Mb, VMS = 383.453125Mb)), Calls = 23
Final Model :: Total atoms = 15764, Cost = (26, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.4421991, solving_time=2.261228299999999, total_time=8.703427399999999, memory=Memory(rss=381.29296875, vms=383.453125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3071362999999998, solving_time=0.0982327000000005, total_time=0.4053690000000003, memory=Memory(rss=381.29296875, vms=383.453125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 94081.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 286488.0, 'bodies_tr': 286488.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4683.0, 'count_bodies_tr': 4683.0, 'sccs': 548.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12154.0, 'rules': 402026.0, 'rules_normal': 396871.0, 'rules_choice': 4833.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 401972.0, 'rules_tr_normal': 396871.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 222.0, 'eqs': 206515.0, 'eqs_atom': 45783.0, 'eqs_body': 5628.0, 'eqs_other': 155104.0}, 'lpStep': {'atoms': 7844.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13676.0, 'bodies_tr': 13676.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22886.0, 'rules_normal': 22677.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22886.0, 'rules_tr_normal': 22677.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10686.0, 'eqs_atom': 2638.0, 'eqs_body': 719.0, 'eqs_other': 7329.0}, 'generator': {'vars': 53016.0, 'vars_eliminated': 0.0, 'vars_frozen': 32252.0, 'constraints': 685.0, 'constraints_binary': 32967.0, 'constraints_ternary': 3704.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 2083.0, 'conflicts': 83.0, 'conflicts_analyzed': 79.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 23.0, 'models': 3.0, 'models_level': 1343.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 77.0, 'distributed_sum_lbd': 97.0, 'integrated': 486.0, 'lemmas': 593.0, 'lits_learnt': 2047.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 433.0, 'integrated_jumps': 154.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 79.0, 'lemmas_loop': 37.0, 'lemmas_other': 477.0, 'lits_conflict': 766.0, 'lits_loop': 258.0, 'lits_other': 1023.0, 'jumps': {'jumps': 79.0, 'jumps_bounded': 4.0, 'levels': 1175.0, 'levels_bounded': 1096.0, 'max': 275.0, 'max_executed': 275.0, 'max_bounded': 274.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.5179767608642578, 'cpu': 0.625, 'solve': 0.05983734130859375, 'unsat': 0.018947601318359375, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.967403411865234, 'cpu': 14.453125, 'solve': 1.8824024200439453, 'unsat': 0.4587230682373047, 'sat': 0.48568153381347656}, 'models': {'enumerated': 44.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 37506.0, 'conflicts': 6193.0, 'conflicts_analyzed': 5911.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4736.0, 'models': 44.0, 'models_level': 14591.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4752.0, 'distributed_sum_lbd': 11341.0, 'integrated': 27736.0, 'lemmas': 39502.0, 'lits_learnt': 2825375.0, 'lemmas_binary': 3518.0, 'lemmas_ternary': 1962.0, 'cpu_time': 7.453125, 'integrated_imps': 9354.0, 'integrated_jumps': 6801.0, 'guiding_paths_lits': 22708.0, 'guiding_paths': 345.0, 'splits': 0.0, 'lemmas_conflict': 5785.0, 'lemmas_loop': 8670.0, 'lemmas_other': 25047.0, 'lits_conflict': 577331.0, 'lits_loop': 73999.0, 'lits_other': 2174045.0, 'jumps': {'jumps': 5911.0, 'jumps_bounded': 940.0, 'levels': 114453.0, 'levels_bounded': 103859.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23}

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None)

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 23]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 11)

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307750s.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(11,23).

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028331s with result Unsatisfiable.

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33608079999999774, Incremental time limit = None
Running cumulative time = 9.039508199999997, Cumulative time limit = 3600
Used memory = (RSS = 383.382812Mb, VMS = 385.437500Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.7499492, solving_time=2.289558999999997, total_time=9.039508199999997, memory=Memory(rss=383.3828125, vms=385.4375), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3077500999999998, solving_time=0.028330699999997933, total_time=0.33608079999999774, memory=Memory(rss=383.3828125, vms=385.4375), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 97495.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 297088.0, 'bodies_tr': 297088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4884.0, 'count_bodies_tr': 4884.0, 'sccs': 561.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12340.0, 'rules': 416848.0, 'rules_normal': 411484.0, 'rules_choice': 5028.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 416786.0, 'rules_tr_normal': 411484.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 213495.0, 'eqs_atom': 46720.0, 'eqs_body': 6028.0, 'eqs_other': 160747.0}, 'lpStep': {'atoms': 3414.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10600.0, 'bodies_tr': 10600.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 14822.0, 'rules_normal': 14613.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14814.0, 'rules_tr_normal': 14613.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6980.0, 'eqs_atom': 937.0, 'eqs_body': 400.0, 'eqs_other': 5643.0}, 'generator': {'vars': 53762.0, 'vars_eliminated': 0.0, 'vars_frozen': 32737.0, 'constraints': 593.0, 'constraints_binary': 31415.0, 'constraints_ternary': 2947.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 5.0, 'lits_learnt': 38.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1752.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 38.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.34108924865722656, 'cpu': 0.296875, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.308492660522461, 'cpu': 14.75, 'solve': 1.8873882293701172, 'unsat': 0.46370887756347656, 'sat': 0.48568153381347656}, 'models': {'enumerated': 44.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 37506.0, 'conflicts': 6195.0, 'conflicts_analyzed': 5911.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4736.0, 'models': 44.0, 'models_level': 14591.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4753.0, 'distributed_sum_lbd': 11343.0, 'integrated': 27736.0, 'lemmas': 39507.0, 'lits_learnt': 2825413.0, 'lemmas_binary': 3519.0, 'lemmas_ternary': 1962.0, 'cpu_time': 7.453125, 'integrated_imps': 9354.0, 'integrated_jumps': 6801.0, 'guiding_paths_lits': 24460.0, 'guiding_paths': 351.0, 'splits': 0.0, 'lemmas_conflict': 5785.0, 'lemmas_loop': 8675.0, 'lemmas_other': 25047.0, 'lits_conflict': 577331.0, 'lits_loop': 74037.0, 'lits_other': 2174045.0, 'jumps': {'jumps': 5911.0, 'jumps_bounded': 940.0, 'levels': 114453.0, 'levels_bounded': 103859.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236020s.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045234s with result Satisfiable.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2812540999999982, Incremental time limit = None
Running cumulative time = 9.320762299999995, Cumulative time limit = 3600
Used memory = (RSS = 386.410156Mb, VMS = 387.585938Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 45
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.985969s, Solving = 2.334793s, Total = 9.320762s, Memory = (RSS = 386.410156Mb, VMS = 387.585938Mb)), Calls = 25
Final Model :: Total atoms = 16530, Cost = (28, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.9859694999999995, solving_time=2.3347927999999953, total_time=9.320762299999995, memory=Memory(rss=386.41015625, vms=387.5859375), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23602029999999985, solving_time=0.045233799999998325, total_time=0.2812540999999982, memory=Memory(rss=386.41015625, vms=387.5859375), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 100710.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 308234.0, 'bodies_tr': 308234.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5085.0, 'count_bodies_tr': 5085.0, 'sccs': 584.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12652.0, 'rules': 433139.0, 'rules_normal': 427566.0, 'rules_choice': 5223.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 433071.0, 'rules_tr_normal': 427566.0, 'rules_tr_choice': 5223.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 232.0, 'eqs': 224529.0, 'eqs_atom': 48398.0, 'eqs_body': 6405.0, 'eqs_other': 169726.0}, 'lpStep': {'atoms': 3215.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11146.0, 'bodies_tr': 11146.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16291.0, 'rules_normal': 16082.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16285.0, 'rules_tr_normal': 16082.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11034.0, 'eqs_atom': 1678.0, 'eqs_body': 377.0, 'eqs_other': 8979.0}, 'generator': {'vars': 55129.0, 'vars_eliminated': 0.0, 'vars_frozen': 33611.0, 'constraints': 883.0, 'constraints_binary': 39027.0, 'constraints_ternary': 4627.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 862.0, 'conflicts': 44.0, 'conflicts_analyzed': 37.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 50.0, 'models': 1.0, 'models_level': 494.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 65.0, 'integrated': 136.0, 'lemmas': 207.0, 'lits_learnt': 1295.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.046875, 'integrated_imps': 70.0, 'integrated_jumps': 33.0, 'guiding_paths_lits': 1555.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 72.0, 'lemmas_other': 108.0, 'lits_conflict': 163.0, 'lits_loop': 514.0, 'lits_other': 618.0, 'jumps': {'jumps': 37.0, 'jumps_bounded': 12.0, 'levels': 1982.0, 'levels_bounded': 1881.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 312.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [28.0, 0.0], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.28475379943847656, 'cpu': 0.296875, 'solve': 0.021457672119140625, 'unsat': 0.01647186279296875, 'sat': 0.004985809326171875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.593246459960938, 'cpu': 15.046875, 'solve': 1.9088459014892578, 'unsat': 0.4801807403564453, 'sat': 0.49066734313964844}, 'models': {'enumerated': 45.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 38368.0, 'conflicts': 6239.0, 'conflicts_analyzed': 5948.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4786.0, 'models': 45.0, 'models_level': 15085.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4787.0, 'distributed_sum_lbd': 11408.0, 'integrated': 27872.0, 'lemmas': 39714.0, 'lits_learnt': 2826708.0, 'lemmas_binary': 3567.0, 'lemmas_ternary': 1972.0, 'cpu_time': 7.5, 'integrated_imps': 9424.0, 'integrated_jumps': 6834.0, 'guiding_paths_lits': 26015.0, 'guiding_paths': 361.0, 'splits': 0.0, 'lemmas_conflict': 5812.0, 'lemmas_loop': 8747.0, 'lemmas_other': 25155.0, 'lits_conflict': 577494.0, 'lits_loop': 74551.0, 'lits_other': 2174663.0, 'jumps': {'jumps': 5948.0, 'jumps_bounded': 952.0, 'levels': 116435.0, 'levels_bounded': 105740.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25}

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None)

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 25]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.248184s.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(12,25).

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030282s with result Unsatisfiable.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2784659000000005, Incremental time limit = None
Running cumulative time = 9.599228199999995, Cumulative time limit = 3600
Used memory = (RSS = 392.734375Mb, VMS = 393.152344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.2341531, solving_time=2.365075099999995, total_time=9.599228199999995, memory=Memory(rss=392.734375, vms=393.15234375), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24818360000000084, solving_time=0.03028229999999965, total_time=0.2784659000000005, memory=Memory(rss=392.734375, vms=393.15234375), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 104003.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 320021.0, 'bodies_tr': 320021.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5286.0, 'count_bodies_tr': 5286.0, 'sccs': 609.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13138.0, 'rules': 450210.0, 'rules_normal': 444428.0, 'rules_choice': 5418.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 450140.0, 'rules_tr_normal': 444428.0, 'rules_tr_choice': 5418.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 242.0, 'eqs': 233522.0, 'eqs_atom': 49940.0, 'eqs_body': 6534.0, 'eqs_other': 177048.0}, 'lpStep': {'atoms': 3293.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11787.0, 'bodies_tr': 11787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17071.0, 'rules_normal': 16862.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17069.0, 'rules_tr_normal': 16862.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8993.0, 'eqs_atom': 1542.0, 'eqs_body': 129.0, 'eqs_other': 7322.0}, 'generator': {'vars': 57233.0, 'vars_eliminated': 0.0, 'vars_frozen': 34931.0, 'constraints': 1377.0, 'constraints_binary': 50711.0, 'constraints_ternary': 7232.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 21.0, 'conflicts': 18.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 16.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 27.0, 'integrated': 39.0, 'lemmas': 59.0, 'lits_learnt': 237.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 30.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2310.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 13.0, 'lemmas_other': 33.0, 'lits_conflict': 99.0, 'lits_loop': 97.0, 'lits_other': 41.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 7.0, 'levels': 1673.0, 'levels_bounded': 1653.0, 'max': 331.0, 'max_executed': 331.0, 'max_bounded': 330.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2822704315185547, 'cpu': 0.28125, 'solve': 0.0059986114501953125, 'unsat': 0.0059986114501953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.875516891479492, 'cpu': 15.328125, 'solve': 1.9148445129394531, 'unsat': 0.4861793518066406, 'sat': 0.49066734313964844}, 'models': {'enumerated': 45.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 38389.0, 'conflicts': 6257.0, 'conflicts_analyzed': 5963.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4802.0, 'models': 45.0, 'models_level': 15085.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4800.0, 'distributed_sum_lbd': 11435.0, 'integrated': 27911.0, 'lemmas': 39773.0, 'lits_learnt': 2826945.0, 'lemmas_binary': 3578.0, 'lemmas_ternary': 1972.0, 'cpu_time': 7.5, 'integrated_imps': 9454.0, 'integrated_jumps': 6834.0, 'guiding_paths_lits': 28325.0, 'guiding_paths': 368.0, 'splits': 0.0, 'lemmas_conflict': 5825.0, 'lemmas_loop': 8760.0, 'lemmas_other': 25188.0, 'lits_conflict': 577593.0, 'lits_loop': 74648.0, 'lits_other': 2174704.0, 'jumps': {'jumps': 5963.0, 'jumps_bounded': 959.0, 'levels': 118108.0, 'levels_bounded': 107393.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.298546s.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050038s with result Unsatisfiable.

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3485843000000024, Incremental time limit = None
Running cumulative time = 9.947812499999998, Cumulative time limit = 3600
Used memory = (RSS = 394.328125Mb, VMS = 393.394531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.532699300000001, solving_time=2.415113199999997, total_time=9.947812499999998, memory=Memory(rss=394.328125, vms=393.39453125), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29854620000000054, solving_time=0.05003810000000186, total_time=0.3485843000000024, memory=Memory(rss=394.328125, vms=393.39453125), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 107548.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 332263.0, 'bodies_tr': 332263.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5487.0, 'count_bodies_tr': 5487.0, 'sccs': 634.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13628.0, 'rules': 467961.0, 'rules_normal': 461970.0, 'rules_choice': 5613.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 467889.0, 'rules_tr_normal': 461970.0, 'rules_tr_choice': 5613.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 252.0, 'eqs': 247164.0, 'eqs_atom': 51606.0, 'eqs_body': 6719.0, 'eqs_other': 188839.0}, 'lpStep': {'atoms': 3545.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12242.0, 'bodies_tr': 12242.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 17751.0, 'rules_normal': 17542.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17749.0, 'rules_tr_normal': 17542.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 13642.0, 'eqs_atom': 1666.0, 'eqs_body': 185.0, 'eqs_other': 11791.0}, 'generator': {'vars': 59455.0, 'vars_eliminated': 0.0, 'vars_frozen': 36300.0, 'constraints': 1808.0, 'constraints_binary': 61880.0, 'constraints_ternary': 9704.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 405.0, 'conflicts': 109.0, 'conflicts_analyzed': 99.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 77.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 87.0, 'distributed_sum_lbd': 181.0, 'integrated': 429.0, 'lemmas': 709.0, 'lits_learnt': 11222.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.109375, 'integrated_imps': 205.0, 'integrated_jumps': 135.0, 'guiding_paths_lits': 2094.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 98.0, 'lemmas_loop': 227.0, 'lemmas_other': 384.0, 'lits_conflict': 2096.0, 'lits_loop': 1685.0, 'lits_other': 7441.0, 'jumps': {'jumps': 99.0, 'jumps_bounded': 39.0, 'levels': 12043.0, 'levels_bounded': 11777.0, 'max': 912.0, 'max_executed': 912.0, 'max_bounded': 911.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3540058135986328, 'cpu': 0.453125, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.229522705078125, 'cpu': 15.78125, 'solve': 1.9248180389404297, 'unsat': 0.4961528778076172, 'sat': 0.49066734313964844}, 'models': {'enumerated': 45.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 38794.0, 'conflicts': 6366.0, 'conflicts_analyzed': 6062.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4879.0, 'models': 45.0, 'models_level': 15085.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4887.0, 'distributed_sum_lbd': 11616.0, 'integrated': 28340.0, 'lemmas': 40482.0, 'lits_learnt': 2838167.0, 'lemmas_binary': 3584.0, 'lemmas_ternary': 1996.0, 'cpu_time': 7.609375, 'integrated_imps': 9659.0, 'integrated_jumps': 6969.0, 'guiding_paths_lits': 30419.0, 'guiding_paths': 378.0, 'splits': 0.0, 'lemmas_conflict': 5923.0, 'lemmas_loop': 8987.0, 'lemmas_other': 25572.0, 'lits_conflict': 579689.0, 'lits_loop': 76333.0, 'lits_other': 2182145.0, 'jumps': {'jumps': 6062.0, 'jumps_bounded': 998.0, 'levels': 130151.0, 'levels_bounded': 119170.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297220s.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080520s with result Satisfiable.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3777392000000006, Incremental time limit = None
Running cumulative time = 10.325551699999998, Cumulative time limit = 3600
Used memory = (RSS = 400.039062Mb, VMS = 397.855469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 47
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.829919s, Solving = 2.495633s, Total = 10.325552s, Memory = (RSS = 400.039062Mb, VMS = 397.855469Mb)), Calls = 28
Final Model :: Total atoms = 17672, Cost = (31, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.829918899999999, solving_time=2.495632799999999, total_time=10.325551699999998, memory=Memory(rss=400.0390625, vms=397.85546875), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29721959999999825, solving_time=0.08051960000000236, total_time=0.3777392000000006, memory=Memory(rss=400.0390625, vms=397.85546875), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 111122.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 344310.0, 'bodies_tr': 344310.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5688.0, 'count_bodies_tr': 5688.0, 'sccs': 659.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14114.0, 'rules': 485567.0, 'rules_normal': 479367.0, 'rules_choice': 5808.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 485493.0, 'rules_tr_normal': 479367.0, 'rules_tr_choice': 5808.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 262.0, 'eqs': 256638.0, 'eqs_atom': 53197.0, 'eqs_body': 6879.0, 'eqs_other': 196562.0}, 'lpStep': {'atoms': 3574.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12047.0, 'bodies_tr': 12047.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17606.0, 'rules_normal': 17397.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17604.0, 'rules_tr_normal': 17397.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9474.0, 'eqs_atom': 1591.0, 'eqs_body': 160.0, 'eqs_other': 7723.0}, 'generator': {'vars': 61571.0, 'vars_eliminated': 0.0, 'vars_frozen': 37627.0, 'constraints': 1803.0, 'constraints_binary': 63737.0, 'constraints_ternary': 10034.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 3164.0, 'conflicts': 164.0, 'conflicts_analyzed': 155.0, 'restarts': 0.0, 'restarts_last': 45.0, 'extra': {'domain_choices': 63.0, 'models': 2.0, 'models_level': 1114.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 131.0, 'distributed_sum_lbd': 315.0, 'integrated': 760.0, 'lemmas': 1121.0, 'lits_learnt': 18318.0, 'lemmas_binary': 97.0, 'lemmas_ternary': 54.0, 'cpu_time': 0.125, 'integrated_imps': 307.0, 'integrated_jumps': 644.0, 'guiding_paths_lits': 2576.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 154.0, 'lemmas_loop': 238.0, 'lemmas_other': 729.0, 'lits_conflict': 3258.0, 'lits_loop': 1841.0, 'lits_other': 13219.0, 'jumps': {'jumps': 155.0, 'jumps_bounded': 30.0, 'levels': 10624.0, 'levels_bounded': 10251.0, 'max': 867.0, 'max_executed': 867.0, 'max_bounded': 866.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.38497161865234375, 'cpu': 0.4375, 'solve': 0.051860809326171875, 'unsat': 0.017953872680664062, 'sat': 0.014963150024414062}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.614494323730469, 'cpu': 16.21875, 'solve': 1.9766788482666016, 'unsat': 0.5141067504882812, 'sat': 0.5056304931640625}, 'models': {'enumerated': 47.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 41958.0, 'conflicts': 6530.0, 'conflicts_analyzed': 6217.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4942.0, 'models': 47.0, 'models_level': 16199.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5018.0, 'distributed_sum_lbd': 11931.0, 'integrated': 29100.0, 'lemmas': 41603.0, 'lits_learnt': 2856485.0, 'lemmas_binary': 3681.0, 'lemmas_ternary': 2050.0, 'cpu_time': 7.734375, 'integrated_imps': 9966.0, 'integrated_jumps': 7613.0, 'guiding_paths_lits': 32995.0, 'guiding_paths': 393.0, 'splits': 0.0, 'lemmas_conflict': 6077.0, 'lemmas_loop': 9225.0, 'lemmas_other': 26301.0, 'lits_conflict': 582947.0, 'lits_loop': 78174.0, 'lits_other': 2195364.0, 'jumps': {'jumps': 6217.0, 'jumps_bounded': 1028.0, 'levels': 140775.0, 'levels_bounded': 129421.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28}

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None)

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 28]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13)

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.326426s.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(13,28).

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.259185s with result Satisfiable.

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5856110000000001, Incremental time limit = None
Running cumulative time = 10.911162699999998, Cumulative time limit = 3600
Used memory = (RSS = 409.566406Mb, VMS = 406.289062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 49
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.156345s, Solving = 2.754818s, Total = 10.911163s, Memory = (RSS = 409.566406Mb, VMS = 406.289062Mb)), Calls = 29
Final Model :: Total atoms = 18059, Cost = (33, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.1563448, solving_time=2.754817899999999, total_time=10.911162699999998, memory=Memory(rss=409.56640625, vms=406.2890625), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32642590000000027, solving_time=0.25918509999999984, total_time=0.5856110000000001, memory=Memory(rss=409.56640625, vms=406.2890625), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 114701.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 356384.0, 'bodies_tr': 356384.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5889.0, 'count_bodies_tr': 5889.0, 'sccs': 684.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14600.0, 'rules': 503339.0, 'rules_normal': 496930.0, 'rules_choice': 6003.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 503263.0, 'rules_tr_normal': 496930.0, 'rules_tr_choice': 6003.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 272.0, 'eqs': 266163.0, 'eqs_atom': 54788.0, 'eqs_body': 7029.0, 'eqs_other': 204346.0}, 'lpStep': {'atoms': 3579.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12074.0, 'bodies_tr': 12074.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17772.0, 'rules_normal': 17563.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17770.0, 'rules_tr_normal': 17563.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9525.0, 'eqs_atom': 1591.0, 'eqs_body': 150.0, 'eqs_other': 7784.0}, 'generator': {'vars': 63697.0, 'vars_eliminated': 0.0, 'vars_frozen': 38959.0, 'constraints': 1983.0, 'constraints_binary': 69388.0, 'constraints_ternary': 11257.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 1789.0, 'conflicts': 174.0, 'conflicts_analyzed': 161.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 43.0, 'models': 2.0, 'models_level': 1193.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 156.0, 'distributed_sum_lbd': 198.0, 'integrated': 1047.0, 'lemmas': 1348.0, 'lits_learnt': 6582.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 48.0, 'cpu_time': 0.515625, 'integrated_imps': 960.0, 'integrated_jumps': 77.0, 'guiding_paths_lits': 3096.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 161.0, 'lemmas_loop': 165.0, 'lemmas_other': 1022.0, 'lits_conflict': 1280.0, 'lits_loop': 1406.0, 'lits_other': 3896.0, 'jumps': {'jumps': 161.0, 'jumps_bounded': 19.0, 'levels': 212.0, 'levels_bounded': 32.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 4.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [33.0, 0.0], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.5934200286865234, 'cpu': 0.875, 'solve': 0.2313861846923828, 'unsat': 0.20246505737304688, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.207914352416992, 'cpu': 17.09375, 'solve': 2.2080650329589844, 'unsat': 0.7165718078613281, 'sat': 0.5126132965087891}, 'models': {'enumerated': 49.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 43747.0, 'conflicts': 6704.0, 'conflicts_analyzed': 6378.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 4985.0, 'models': 49.0, 'models_level': 17392.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5174.0, 'distributed_sum_lbd': 12129.0, 'integrated': 30147.0, 'lemmas': 42951.0, 'lits_learnt': 2863067.0, 'lemmas_binary': 3697.0, 'lemmas_ternary': 2098.0, 'cpu_time': 8.25, 'integrated_imps': 10926.0, 'integrated_jumps': 7690.0, 'guiding_paths_lits': 36091.0, 'guiding_paths': 410.0, 'splits': 0.0, 'lemmas_conflict': 6238.0, 'lemmas_loop': 9390.0, 'lemmas_other': 27323.0, 'lits_conflict': 584227.0, 'lits_loop': 79580.0, 'lits_other': 2199260.0, 'jumps': {'jumps': 6378.0, 'jumps_bounded': 1047.0, 'levels': 140987.0, 'levels_bounded': 129453.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29}

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None)

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 29]:
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14)

[15-11-2021_14-29-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264780s.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(14,29).

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041351s with result Unsatisfiable.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30613149999999933, Incremental time limit = None
Running cumulative time = 11.217294199999998, Cumulative time limit = 3600
Used memory = (RSS = 412.371094Mb, VMS = 408.160156Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=8.421124899999999, solving_time=2.796169299999999, total_time=11.217294199999998, memory=Memory(rss=412.37109375, vms=408.16015625), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2647800999999994, solving_time=0.04135139999999993, total_time=0.30613149999999933, memory=Memory(rss=412.37109375, vms=408.16015625), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 118299.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 368434.0, 'bodies_tr': 368434.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6090.0, 'count_bodies_tr': 6090.0, 'sccs': 709.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15086.0, 'rules': 521223.0, 'rules_normal': 514605.0, 'rules_choice': 6198.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 521145.0, 'rules_tr_normal': 514605.0, 'rules_tr_choice': 6198.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 282.0, 'eqs': 275734.0, 'eqs_atom': 56388.0, 'eqs_body': 7190.0, 'eqs_other': 212156.0}, 'lpStep': {'atoms': 3598.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12050.0, 'bodies_tr': 12050.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17884.0, 'rules_normal': 17675.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17882.0, 'rules_tr_normal': 17675.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9571.0, 'eqs_atom': 1600.0, 'eqs_body': 161.0, 'eqs_other': 7810.0}, 'generator': {'vars': 65802.0, 'vars_eliminated': 0.0, 'vars_frozen': 40282.0, 'constraints': 2048.0, 'constraints_binary': 70698.0, 'constraints_ternary': 10435.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 47.0, 'conflicts': 39.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 59.0, 'integrated': 77.0, 'lemmas': 126.0, 'lits_learnt': 1942.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.09375, 'integrated_imps': 41.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 2436.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 36.0, 'lemmas_other': 62.0, 'lits_conflict': 556.0, 'lits_loop': 263.0, 'lits_other': 1123.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 8.0, 'levels': 61.0, 'levels_bounded': 15.0, 'max': 15.0, 'max_executed': 15.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 30.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3141193389892578, 'cpu': 0.390625, 'solve': 0.007978439331054688, 'unsat': 0.007978439331054688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.52203369140625, 'cpu': 17.484375, 'solve': 2.216043472290039, 'unsat': 0.7245502471923828, 'sat': 0.5126132965087891}, 'models': {'enumerated': 49.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 43794.0, 'conflicts': 6743.0, 'conflicts_analyzed': 6406.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 5010.0, 'models': 49.0, 'models_level': 17392.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5202.0, 'distributed_sum_lbd': 12188.0, 'integrated': 30224.0, 'lemmas': 43077.0, 'lits_learnt': 2865009.0, 'lemmas_binary': 3697.0, 'lemmas_ternary': 2104.0, 'cpu_time': 8.34375, 'integrated_imps': 10967.0, 'integrated_jumps': 7691.0, 'guiding_paths_lits': 38527.0, 'guiding_paths': 419.0, 'splits': 0.0, 'lemmas_conflict': 6266.0, 'lemmas_loop': 9426.0, 'lemmas_other': 27385.0, 'lits_conflict': 584783.0, 'lits_loop': 79843.0, 'lits_other': 2200383.0, 'jumps': {'jumps': 6406.0, 'jumps_bounded': 1055.0, 'levels': 141048.0, 'levels_bounded': 129468.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267309s.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089459s with result Satisfiable.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3567675000000001, Incremental time limit = None
Running cumulative time = 11.574061699999998, Cumulative time limit = 3600
Used memory = (RSS = 418.902344Mb, VMS = 413.523438Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 51
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.688434s, Solving = 2.885628s, Total = 11.574062s, Memory = (RSS = 418.902344Mb, VMS = 413.523438Mb)), Calls = 31
Final Model :: Total atoms = 18825, Cost = (35, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.688433799999999, solving_time=2.8856278999999994, total_time=11.574061699999998, memory=Memory(rss=418.90234375, vms=413.5234375), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26730889999999974, solving_time=0.08945860000000039, total_time=0.3567675000000001, memory=Memory(rss=418.90234375, vms=413.5234375), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 121893.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 380893.0, 'bodies_tr': 380893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6291.0, 'count_bodies_tr': 6291.0, 'sccs': 734.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15576.0, 'rules': 539825.0, 'rules_normal': 532998.0, 'rules_choice': 6393.0, 'rules_minimize': 62.0, 'rules_acyc': 0.0, 'rules_heuristic': 372.0, 'rules_tr': 539745.0, 'rules_tr_normal': 532998.0, 'rules_tr_choice': 6393.0, 'rules_tr_minimize': 62.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 292.0, 'eqs': 290139.0, 'eqs_atom': 58192.0, 'eqs_body': 7375.0, 'eqs_other': 224572.0}, 'lpStep': {'atoms': 3594.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12459.0, 'bodies_tr': 12459.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 18602.0, 'rules_normal': 18393.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18600.0, 'rules_tr_normal': 18393.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 14405.0, 'eqs_atom': 1804.0, 'eqs_body': 185.0, 'eqs_other': 12416.0}, 'generator': {'vars': 68072.0, 'vars_eliminated': 0.0, 'vars_frozen': 41665.0, 'constraints': 2570.0, 'constraints_binary': 84214.0, 'constraints_ternary': 13572.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 2389.0, 'conflicts': 156.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 188.0, 'models': 2.0, 'models_level': 1286.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 107.0, 'distributed_sum_lbd': 281.0, 'integrated': 609.0, 'lemmas': 827.0, 'lits_learnt': 11963.0, 'lemmas_binary': 96.0, 'lemmas_ternary': 61.0, 'cpu_time': 0.21875, 'integrated_imps': 225.0, 'integrated_jumps': 361.0, 'guiding_paths_lits': 2975.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 139.0, 'lemmas_loop': 171.0, 'lemmas_other': 517.0, 'lits_conflict': 3480.0, 'lits_loop': 1315.0, 'lits_other': 7168.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 23.0, 'levels': 771.0, 'levels_bounded': 512.0, 'max': 343.0, 'max_executed': 343.0, 'max_bounded': 342.0}}}}, 'summary': {'call': 31.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [35.0, 0.0], 'lower': [35.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.36304473876953125, 'cpu': 0.515625, 'solve': 0.05285835266113281, 'unsat': 0.018949508666992188, 'sat': 0.013963699340820312}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.885078430175781, 'cpu': 18.0, 'solve': 2.268901824951172, 'unsat': 0.743499755859375, 'sat': 0.5265769958496094}, 'models': {'enumerated': 51.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 46183.0, 'conflicts': 6899.0, 'conflicts_analyzed': 6547.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 5198.0, 'models': 51.0, 'models_level': 18678.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5309.0, 'distributed_sum_lbd': 12469.0, 'integrated': 30833.0, 'lemmas': 43904.0, 'lits_learnt': 2876972.0, 'lemmas_binary': 3793.0, 'lemmas_ternary': 2165.0, 'cpu_time': 8.5625, 'integrated_imps': 11192.0, 'integrated_jumps': 8052.0, 'guiding_paths_lits': 41502.0, 'guiding_paths': 436.0, 'splits': 0.0, 'lemmas_conflict': 6405.0, 'lemmas_loop': 9597.0, 'lemmas_other': 27902.0, 'lits_conflict': 588263.0, 'lits_loop': 81158.0, 'lits_other': 2207551.0, 'jumps': {'jumps': 6547.0, 'jumps_bounded': 1078.0, 'levels': 141819.0, 'levels_bounded': 129980.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31}

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None)

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 31]:
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 15)

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297952s.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(15,31).

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.107168s with result Satisfiable.

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.40512019999999893, Incremental time limit = None
Running cumulative time = 11.979181899999997, Cumulative time limit = 3600
Used memory = (RSS = 427.757812Mb, VMS = 421.433594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 54
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.986386s, Solving = 2.992796s, Total = 11.979182s, Memory = (RSS = 427.757812Mb, VMS = 421.433594Mb)), Calls = 32
Final Model :: Total atoms = 19210, Cost = (36, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.986385999999996, solving_time=2.992795900000001, total_time=11.979181899999997, memory=Memory(rss=427.7578125, vms=421.43359375), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29795219999999745, solving_time=0.10716800000000148, total_time=0.40512019999999893, memory=Memory(rss=427.7578125, vms=421.43359375), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 125522.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 393713.0, 'bodies_tr': 393713.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6492.0, 'count_bodies_tr': 6492.0, 'sccs': 759.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16170.0, 'rules': 558928.0, 'rules_normal': 551892.0, 'rules_choice': 6588.0, 'rules_minimize': 64.0, 'rules_acyc': 0.0, 'rules_heuristic': 384.0, 'rules_tr': 558848.0, 'rules_tr_normal': 551892.0, 'rules_tr_choice': 6588.0, 'rules_tr_minimize': 64.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 304.0, 'eqs': 298543.0, 'eqs_atom': 59968.0, 'eqs_body': 7448.0, 'eqs_other': 231127.0}, 'lpStep': {'atoms': 3629.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12820.0, 'bodies_tr': 12820.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19103.0, 'rules_normal': 18894.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19103.0, 'rules_tr_normal': 18894.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8404.0, 'eqs_atom': 1776.0, 'eqs_body': 73.0, 'eqs_other': 6555.0}, 'generator': {'vars': 70696.0, 'vars_eliminated': 0.0, 'vars_frozen': 43264.0, 'constraints': 3204.0, 'constraints_binary': 99949.0, 'constraints_ternary': 17319.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 4342.0, 'conflicts': 50.0, 'conflicts_analyzed': 33.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 120.0, 'models': 3.0, 'models_level': 2023.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 56.0, 'integrated': 133.0, 'lemmas': 333.0, 'lits_learnt': 5617.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.28125, 'integrated_imps': 83.0, 'integrated_jumps': 340.0, 'guiding_paths_lits': 3108.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 169.0, 'lemmas_other': 133.0, 'lits_conflict': 1172.0, 'lits_loop': 1517.0, 'lits_other': 2928.0, 'jumps': {'jumps': 33.0, 'jumps_bounded': 5.0, 'levels': 174.0, 'levels_bounded': 13.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 8.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4109020233154297, 'cpu': 0.625, 'solve': 0.07277870178222656, 'unsat': 0.022939682006835938, 'sat': 0.008951187133789062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 12.295980453491211, 'cpu': 18.625, 'solve': 2.3416805267333984, 'unsat': 0.7664394378662109, 'sat': 0.5355281829833984}, 'models': {'enumerated': 54.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 50525.0, 'conflicts': 6949.0, 'conflicts_analyzed': 6580.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 5318.0, 'models': 54.0, 'models_level': 20701.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5334.0, 'distributed_sum_lbd': 12525.0, 'integrated': 30966.0, 'lemmas': 44237.0, 'lits_learnt': 2882589.0, 'lemmas_binary': 3828.0, 'lemmas_ternary': 2186.0, 'cpu_time': 8.84375, 'integrated_imps': 11275.0, 'integrated_jumps': 8392.0, 'guiding_paths_lits': 44610.0, 'guiding_paths': 456.0, 'splits': 0.0, 'lemmas_conflict': 6436.0, 'lemmas_loop': 9766.0, 'lemmas_other': 28035.0, 'lits_conflict': 589435.0, 'lits_loop': 82675.0, 'lits_other': 2210479.0, 'jumps': {'jumps': 6580.0, 'jumps_bounded': 1083.0, 'levels': 141993.0, 'levels_bounded': 129993.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32}

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None)

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 32]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 16)
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 16)

[15-11-2021_14-29-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306545s.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(16,32).

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044396s with result Unsatisfiable.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3509409000000012, Incremental time limit = None
Running cumulative time = 12.330122799999998, Cumulative time limit = 3600
Used memory = (RSS = 436.078125Mb, VMS = 447.652344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=9.292930899999998, solving_time=3.0371919, total_time=12.330122799999998, memory=Memory(rss=436.078125, vms=447.65234375), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30654490000000223, solving_time=0.04439599999999899, total_time=0.3509409000000012, memory=Memory(rss=436.078125, vms=447.65234375), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 129285.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 406791.0, 'bodies_tr': 406791.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6693.0, 'count_bodies_tr': 6693.0, 'sccs': 784.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16764.0, 'rules': 578513.0, 'rules_normal': 571268.0, 'rules_choice': 6783.0, 'rules_minimize': 66.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 578433.0, 'rules_tr_normal': 571268.0, 'rules_tr_choice': 6783.0, 'rules_tr_minimize': 66.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 316.0, 'eqs': 307324.0, 'eqs_atom': 61858.0, 'eqs_body': 7518.0, 'eqs_other': 237948.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13078.0, 'bodies_tr': 13078.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19585.0, 'rules_normal': 19376.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19585.0, 'rules_tr_normal': 19376.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8781.0, 'eqs_atom': 1890.0, 'eqs_body': 70.0, 'eqs_other': 6821.0}, 'generator': {'vars': 73361.0, 'vars_eliminated': 0.0, 'vars_frozen': 44871.0, 'constraints': 3847.0, 'constraints_binary': 115689.0, 'constraints_ternary': 21259.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2778.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.35605430603027344, 'cpu': 0.4375, 'solve': 0.013963699340820312, 'unsat': 0.013963699340820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.652034759521484, 'cpu': 19.0625, 'solve': 2.3556442260742188, 'unsat': 0.7804031372070312, 'sat': 0.5355281829833984}, 'models': {'enumerated': 54.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 50525.0, 'conflicts': 6956.0, 'conflicts_analyzed': 6580.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 5318.0, 'models': 54.0, 'models_level': 20701.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5334.0, 'distributed_sum_lbd': 12525.0, 'integrated': 30966.0, 'lemmas': 44237.0, 'lits_learnt': 2882589.0, 'lemmas_binary': 3828.0, 'lemmas_ternary': 2186.0, 'cpu_time': 8.9375, 'integrated_imps': 11275.0, 'integrated_jumps': 8392.0, 'guiding_paths_lits': 47388.0, 'guiding_paths': 462.0, 'splits': 0.0, 'lemmas_conflict': 6436.0, 'lemmas_loop': 9766.0, 'lemmas_other': 28035.0, 'lits_conflict': 589435.0, 'lits_loop': 82675.0, 'lits_other': 2210479.0, 'jumps': {'jumps': 6580.0, 'jumps_bounded': 1083.0, 'levels': 141993.0, 'levels_bounded': 129993.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285735s.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.114871s with result Satisfiable.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.40060600000000335, Incremental time limit = None
Running cumulative time = 12.730728800000001, Cumulative time limit = 3600
Used memory = (RSS = 447.777344Mb, VMS = 457.507812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 56
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.578666s, Solving = 3.152063s, Total = 12.730729s, Memory = (RSS = 447.777344Mb, VMS = 457.507812Mb)), Calls = 34
Final Model :: Total atoms = 19984, Cost = (39, 0), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.5786661, solving_time=3.152062700000002, total_time=12.730728800000001, memory=Memory(rss=447.77734375, vms=457.5078125), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2857352000000013, solving_time=0.11487080000000205, total_time=0.40060600000000335, memory=Memory(rss=447.77734375, vms=457.5078125), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 133062.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 419901.0, 'bodies_tr': 419901.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6894.0, 'count_bodies_tr': 6894.0, 'sccs': 809.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17358.0, 'rules': 598266.0, 'rules_normal': 590812.0, 'rules_choice': 6978.0, 'rules_minimize': 68.0, 'rules_acyc': 0.0, 'rules_heuristic': 408.0, 'rules_tr': 598186.0, 'rules_tr_normal': 590812.0, 'rules_tr_choice': 6978.0, 'rules_tr_minimize': 68.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 328.0, 'eqs': 316183.0, 'eqs_atom': 63762.0, 'eqs_body': 7588.0, 'eqs_other': 244833.0}, 'lpStep': {'atoms': 3777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13110.0, 'bodies_tr': 13110.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19753.0, 'rules_normal': 19544.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19753.0, 'rules_tr_normal': 19544.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8859.0, 'eqs_atom': 1904.0, 'eqs_body': 70.0, 'eqs_other': 6885.0}, 'generator': {'vars': 76026.0, 'vars_eliminated': 0.0, 'vars_frozen': 46478.0, 'constraints': 4494.0, 'constraints_binary': 131791.0, 'constraints_ternary': 25255.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 4978.0, 'conflicts': 189.0, 'conflicts_analyzed': 175.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 461.0, 'models': 2.0, 'models_level': 1452.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 140.0, 'distributed_sum_lbd': 368.0, 'integrated': 633.0, 'lemmas': 1179.0, 'lits_learnt': 63358.0, 'lemmas_binary': 96.0, 'lemmas_ternary': 88.0, 'cpu_time': 0.390625, 'integrated_imps': 222.0, 'integrated_jumps': 1618.0, 'guiding_paths_lits': 3374.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 175.0, 'lemmas_loop': 385.0, 'lemmas_other': 619.0, 'lits_conflict': 16063.0, 'lits_loop': 3373.0, 'lits_other': 43922.0, 'jumps': {'jumps': 175.0, 'jumps_bounded': 31.0, 'levels': 6703.0, 'levels_bounded': 6280.0, 'max': 900.0, 'max_executed': 900.0, 'max_bounded': 899.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [39.0, 0.0], 'lower': [39.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.40692138671875, 'cpu': 0.703125, 'solve': 0.08525276184082031, 'unsat': 0.025926589965820312, 'sat': 0.025903701782226562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.058956146240234, 'cpu': 19.765625, 'solve': 2.440896987915039, 'unsat': 0.8063297271728516, 'sat': 0.561431884765625}, 'models': {'enumerated': 56.0, 'optimal': 16.0}, 'solving': {'solvers': {'choices': 55503.0, 'conflicts': 7145.0, 'conflicts_analyzed': 6755.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 5779.0, 'models': 56.0, 'models_level': 22153.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5474.0, 'distributed_sum_lbd': 12893.0, 'integrated': 31599.0, 'lemmas': 45416.0, 'lits_learnt': 2945947.0, 'lemmas_binary': 3924.0, 'lemmas_ternary': 2274.0, 'cpu_time': 9.328125, 'integrated_imps': 11497.0, 'integrated_jumps': 10010.0, 'guiding_paths_lits': 50762.0, 'guiding_paths': 482.0, 'splits': 0.0, 'lemmas_conflict': 6611.0, 'lemmas_loop': 10151.0, 'lemmas_other': 28654.0, 'lits_conflict': 605498.0, 'lits_loop': 86048.0, 'lits_other': 2254401.0, 'jumps': {'jumps': 6755.0, 'jumps_bounded': 1114.0, 'levels': 148696.0, 'levels_bounded': 136273.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34}

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None)

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 34]:
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17)
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 17)

[15-11-2021_14-29-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325520s.

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(17,34).

[15-11-2021_14-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.346973s with result Satisfiable.

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.672493099999997, Incremental time limit = None
Running cumulative time = 13.403221899999998, Cumulative time limit = 3600
Used memory = (RSS = 462.503906Mb, VMS = 470.527344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 59
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.904186s, Solving = 3.499036s, Total = 13.403222s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)), Calls = 35
Final Model :: Total atoms = 20375, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=35, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.9041863, solving_time=3.499035599999999, total_time=13.403221899999998, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(0, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3255201999999997, solving_time=0.34697289999999725, total_time=0.672493099999997, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 136853.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 433043.0, 'bodies_tr': 433043.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7095.0, 'count_bodies_tr': 7095.0, 'sccs': 834.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17952.0, 'rules': 618187.0, 'rules_normal': 610524.0, 'rules_choice': 7173.0, 'rules_minimize': 70.0, 'rules_acyc': 0.0, 'rules_heuristic': 420.0, 'rules_tr': 618107.0, 'rules_tr_normal': 610524.0, 'rules_tr_choice': 7173.0, 'rules_tr_minimize': 70.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 340.0, 'eqs': 325120.0, 'eqs_atom': 65680.0, 'eqs_body': 7658.0, 'eqs_other': 251782.0}, 'lpStep': {'atoms': 3791.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13142.0, 'bodies_tr': 13142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19921.0, 'rules_normal': 19712.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19921.0, 'rules_tr_normal': 19712.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8937.0, 'eqs_atom': 1918.0, 'eqs_body': 70.0, 'eqs_other': 6949.0}, 'generator': {'vars': 78691.0, 'vars_eliminated': 0.0, 'vars_frozen': 48085.0, 'constraints': 5141.0, 'constraints_binary': 148046.0, 'constraints_ternary': 29250.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 4972.0, 'conflicts': 148.0, 'conflicts_analyzed': 129.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 394.0, 'models': 3.0, 'models_level': 2234.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 196.0, 'integrated': 353.0, 'lemmas': 722.0, 'lits_learnt': 58025.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.640625, 'integrated_imps': 78.0, 'integrated_jumps': 1012.0, 'guiding_paths_lits': 3507.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 129.0, 'lemmas_loop': 248.0, 'lemmas_other': 345.0, 'lits_conflict': 15648.0, 'lits_loop': 2157.0, 'lits_other': 40220.0, 'jumps': {'jumps': 129.0, 'jumps_bounded': 11.0, 'levels': 771.0, 'levels_bounded': 469.0, 'max': 230.0, 'max_executed': 230.0, 'max_bounded': 229.0}}}}, 'summary': {'call': 35.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [41.0, 0.0], 'lower': [41.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.6791858673095703, 'cpu': 1.0, 'solve': 0.3191490173339844, 'unsat': 0.23836326599121094, 'sat': 0.012968063354492188}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.738142013549805, 'cpu': 20.765625, 'solve': 2.7600460052490234, 'unsat': 1.0446929931640625, 'sat': 0.5743999481201172}, 'models': {'enumerated': 59.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 60475.0, 'conflicts': 7293.0, 'conflicts_analyzed': 6884.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6173.0, 'models': 59.0, 'models_level': 24387.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5546.0, 'distributed_sum_lbd': 13089.0, 'integrated': 31952.0, 'lemmas': 46138.0, 'lits_learnt': 3003972.0, 'lemmas_binary': 3980.0, 'lemmas_ternary': 2316.0, 'cpu_time': 9.96875, 'integrated_imps': 11575.0, 'integrated_jumps': 11022.0, 'guiding_paths_lits': 54269.0, 'guiding_paths': 507.0, 'splits': 0.0, 'lemmas_conflict': 6740.0, 'lemmas_loop': 10399.0, 'lemmas_other': 28999.0, 'lits_conflict': 621146.0, 'lits_loop': 88205.0, 'lits_other': 2294621.0, 'jumps': {'jumps': 6884.0, 'jumps_bounded': 1125.0, 'levels': 149467.0, 'levels_bounded': 136742.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-44] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34, 17: 35}

[15-11-2021_14-29-44] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[15-11-2021_14-29-44] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.320929s, Solving = 0.015452s, Total = 0.336381s, Memory = (RSS = 212.003906Mb, VMS = 202.894531Mb)
2 : Statistics :: Grounding = 0.175614s, Solving = 0.009681s, Total = 0.185295s, Memory = (RSS = 214.246094Mb, VMS = 205.445312Mb)
3 : Statistics :: Grounding = 0.211929s, Solving = 0.013539s, Total = 0.225468s, Memory = (RSS = 216.425781Mb, VMS = 207.214844Mb)
4 : Statistics :: Grounding = 0.226270s, Solving = 0.007810s, Total = 0.234081s, Memory = (RSS = 218.093750Mb, VMS = 208.757812Mb)
5 : Statistics :: Grounding = 0.287092s, Solving = 0.013891s, Total = 0.300983s, Memory = (RSS = 223.640625Mb, VMS = 214.406250Mb)
6 : Statistics :: Grounding = 0.237622s, Solving = 0.015869s, Total = 0.253491s, Memory = (RSS = 228.234375Mb, VMS = 219.531250Mb)
7 : Statistics :: Grounding = 0.280150s, Solving = 0.023723s, Total = 0.303873s, Memory = (RSS = 233.824219Mb, VMS = 225.972656Mb)
8 : Statistics :: Grounding = 0.260435s, Solving = 0.022920s, Total = 0.283356s, Memory = (RSS = 237.730469Mb, VMS = 229.355469Mb)
9 : Statistics :: Grounding = 0.311650s, Solving = 0.030099s, Total = 0.341748s, Memory = (RSS = 246.246094Mb, VMS = 239.625000Mb)
10 : Statistics :: Grounding = 0.273051s, Solving = 0.041654s, Total = 0.314705s, Memory = (RSS = 249.527344Mb, VMS = 242.167969Mb)
11 : Statistics :: Grounding = 0.282909s, Solving = 0.039055s, Total = 0.321964s, Memory = (RSS = 254.644531Mb, VMS = 246.617188Mb)
12 : Statistics :: Grounding = 0.283779s, Solving = 0.061689s, Total = 0.345469s, Memory = (RSS = 265.386719Mb, VMS = 259.906250Mb)
13 : Statistics :: Grounding = 0.281234s, Solving = 0.140028s, Total = 0.421262s, Memory = (RSS = 272.214844Mb, VMS = 265.632812Mb)
14 : Statistics :: Grounding = 0.280103s, Solving = 0.036070s, Total = 0.316173s, Memory = (RSS = 275.625000Mb, VMS = 268.222656Mb)
15 : Statistics :: Grounding = 0.280010s, Solving = 0.223928s, Total = 0.503939s, Memory = (RSS = 288.230469Mb, VMS = 287.820312Mb)
16 : Statistics :: Grounding = 0.291818s, Solving = 0.219741s, Total = 0.511559s, Memory = (RSS = 300.203125Mb, VMS = 298.757812Mb)
17 : Statistics :: Grounding = 0.292830s, Solving = 0.085270s, Total = 0.378100s, Memory = (RSS = 310.281250Mb, VMS = 307.460938Mb)
18 : Statistics :: Grounding = 0.280331s, Solving = 0.085265s, Total = 0.365597s, Memory = (RSS = 319.066406Mb, VMS = 315.121094Mb)
19 : Statistics :: Grounding = 0.278129s, Solving = 0.222639s, Total = 0.500768s, Memory = (RSS = 332.964844Mb, VMS = 328.191406Mb)
20 : Statistics :: Grounding = 0.317462s, Solving = 0.032903s, Total = 0.350366s, Memory = (RSS = 337.199219Mb, VMS = 330.933594Mb)
21 : Statistics :: Grounding = 0.321693s, Solving = 0.158161s, Total = 0.479854s, Memory = (RSS = 349.484375Mb, VMS = 354.128906Mb)
22 : Statistics :: Grounding = 0.360021s, Solving = 0.663608s, Total = 1.023629s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)
23 : Statistics :: Grounding = 0.307136s, Solving = 0.098233s, Total = 0.405369s, Memory = (RSS = 381.292969Mb, VMS = 383.453125Mb)
24 : Statistics :: Grounding = 0.307750s, Solving = 0.028331s, Total = 0.336081s, Memory = (RSS = 383.382812Mb, VMS = 385.437500Mb)
25 : Statistics :: Grounding = 0.236020s, Solving = 0.045234s, Total = 0.281254s, Memory = (RSS = 386.410156Mb, VMS = 387.585938Mb)
26 : Statistics :: Grounding = 0.248184s, Solving = 0.030282s, Total = 0.278466s, Memory = (RSS = 392.734375Mb, VMS = 393.152344Mb)
27 : Statistics :: Grounding = 0.298546s, Solving = 0.050038s, Total = 0.348584s, Memory = (RSS = 394.328125Mb, VMS = 393.394531Mb)
28 : Statistics :: Grounding = 0.297220s, Solving = 0.080520s, Total = 0.377739s, Memory = (RSS = 400.039062Mb, VMS = 397.855469Mb)
29 : Statistics :: Grounding = 0.326426s, Solving = 0.259185s, Total = 0.585611s, Memory = (RSS = 409.566406Mb, VMS = 406.289062Mb)
30 : Statistics :: Grounding = 0.264780s, Solving = 0.041351s, Total = 0.306131s, Memory = (RSS = 412.371094Mb, VMS = 408.160156Mb)
31 : Statistics :: Grounding = 0.267309s, Solving = 0.089459s, Total = 0.356768s, Memory = (RSS = 418.902344Mb, VMS = 413.523438Mb)
32 : Statistics :: Grounding = 0.297952s, Solving = 0.107168s, Total = 0.405120s, Memory = (RSS = 427.757812Mb, VMS = 421.433594Mb)
33 : Statistics :: Grounding = 0.306545s, Solving = 0.044396s, Total = 0.350941s, Memory = (RSS = 436.078125Mb, VMS = 447.652344Mb)
34 : Statistics :: Grounding = 0.285735s, Solving = 0.114871s, Total = 0.400606s, Memory = (RSS = 447.777344Mb, VMS = 457.507812Mb)
35 : Statistics :: Grounding = 0.325520s, Solving = 0.346973s, Total = 0.672493s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 13.403222s due to: External generator exit.

[15-11-2021_14-29-44] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_14-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.904186s, Solving = 3.499036s, Total = 13.403222s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)), Calls = 35
Model :: Total atoms = 20375, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 35 :: Actions = 44                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : release(manipulator_end_1,(block,5))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 2 : Total constraining sgoals = 17 : Achieved sgoals = 17 : Unachieved sgoals = 0

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.801s (Gro =   1.521s, Sea =   0.280s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-14]

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [8-14], problem number = 2, increment number = 3

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 14)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 8
last_sgoals = 14
start_step = 18
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 24

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [8-14] : Minimum search length bound = disabled with value = 24

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'lift(manipulator_arm_2,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 8).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 9).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(3, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 10).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 10).
sub_goal(3, talos, move(store_room), in(talos), store_room, 11).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 12).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 14).

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029403625220>

[15-11-2021_14-29-45] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_14-29-45] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000029403625220> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(2, talos, move(hallway), 1)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 2)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 2)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, actuate(manipulator_arm_1,puzzle_room_door), 4)).
fix_action(occurs(2, talos, actuate(manipulator_arm_2,store_room_door), 4)).
fix_action(occurs(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 6)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 6)).
fix_action(occurs(2, talos, move(store_room), 7)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 8)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 8)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,5)), 9)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,6)), 9)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 10)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 10)).
fix_action(occurs(2, talos, move(hallway), 11)).
fix_action(occurs(2, talos, move(puzzle_room), 12)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 13)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 13)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), 14)).
fix_action(occurs(2, talos, release(manipulator_arm_2,(block,6)), 15)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,3)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,5),(block,6)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), 17)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,5)), 17)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,2)), 18)).
fix_action(occurs(2, talos, release(manipulator_arm_2,(block,3)), 18)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_14-29-45] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000029403625220> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(3, complete(blue), false, 0)).
fix_fluent(holds(3, complete(red), false, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,4)), store_room, 0)).
fix_fluent(holds(3, in((block,5)), store_room, 0)).
fix_fluent(holds(3, in((block,6)), store_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(3, in(talos), starting_room, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,3)), (block,1), 0)).
fix_fluent(holds(3, on((block,4)), nothing, 0)).
fix_fluent(holds(3, on((block,5)), nothing, 0)).
fix_fluent(holds(3, on((block,6)), nothing, 0)).
fix_fluent(holds(3, tower_base((block,1)), true, 0)).
fix_fluent(holds(3, tower_base((block,2)), true, 0)).
fix_fluent(holds(3, tower_base((block,3)), false, 0)).
fix_fluent(holds(3, tower_base((block,4)), false, 0)).
fix_fluent(holds(3, tower_base((block,5)), false, 0)).
fix_fluent(holds(3, tower_base((block,6)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), hallway, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(3, complete(blue), false, 1)).
fix_fluent(holds(3, complete(red), false, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,4)), store_room, 1)).
fix_fluent(holds(3, in((block,5)), store_room, 1)).
fix_fluent(holds(3, in((block,6)), store_room, 1)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(3, in(talos), hallway, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,3)), (block,1), 1)).
fix_fluent(holds(3, on((block,4)), nothing, 1)).
fix_fluent(holds(3, on((block,5)), nothing, 1)).
fix_fluent(holds(3, on((block,6)), nothing, 1)).
fix_fluent(holds(3, tower_base((block,1)), true, 1)).
fix_fluent(holds(3, tower_base((block,2)), true, 1)).
fix_fluent(holds(3, tower_base((block,3)), false, 1)).
fix_fluent(holds(3, tower_base((block,4)), false, 1)).
fix_fluent(holds(3, tower_base((block,5)), false, 1)).
fix_fluent(holds(3, tower_base((block,6)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(3, complete(blue), false, 2)).
fix_fluent(holds(3, complete(red), false, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,4)), store_room, 2)).
fix_fluent(holds(3, in((block,5)), store_room, 2)).
fix_fluent(holds(3, in((block,6)), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(3, in(talos), hallway, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,3)), (block,1), 2)).
fix_fluent(holds(3, on((block,4)), nothing, 2)).
fix_fluent(holds(3, on((block,5)), nothing, 2)).
fix_fluent(holds(3, on((block,6)), nothing, 2)).
fix_fluent(holds(3, tower_base((block,1)), true, 2)).
fix_fluent(holds(3, tower_base((block,2)), true, 2)).
fix_fluent(holds(3, tower_base((block,3)), false, 2)).
fix_fluent(holds(3, tower_base((block,4)), false, 2)).
fix_fluent(holds(3, tower_base((block,5)), false, 2)).
fix_fluent(holds(3, tower_base((block,6)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(3, complete(blue), false, 3)).
fix_fluent(holds(3, complete(red), false, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,4)), store_room, 3)).
fix_fluent(holds(3, in((block,5)), store_room, 3)).
fix_fluent(holds(3, in((block,6)), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(3, in(talos), hallway, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,3)), (block,1), 3)).
fix_fluent(holds(3, on((block,4)), nothing, 3)).
fix_fluent(holds(3, on((block,5)), nothing, 3)).
fix_fluent(holds(3, on((block,6)), nothing, 3)).
fix_fluent(holds(3, tower_base((block,1)), true, 3)).
fix_fluent(holds(3, tower_base((block,2)), true, 3)).
fix_fluent(holds(3, tower_base((block,3)), false, 3)).
fix_fluent(holds(3, tower_base((block,4)), false, 3)).
fix_fluent(holds(3, tower_base((block,5)), false, 3)).
fix_fluent(holds(3, tower_base((block,6)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), open, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(3, complete(blue), false, 4)).
fix_fluent(holds(3, complete(red), false, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,4)), store_room, 4)).
fix_fluent(holds(3, in((block,5)), store_room, 4)).
fix_fluent(holds(3, in((block,6)), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(3, in(talos), hallway, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,3)), (block,1), 4)).
fix_fluent(holds(3, on((block,4)), nothing, 4)).
fix_fluent(holds(3, on((block,5)), nothing, 4)).
fix_fluent(holds(3, on((block,6)), nothing, 4)).
fix_fluent(holds(3, tower_base((block,1)), true, 4)).
fix_fluent(holds(3, tower_base((block,2)), true, 4)).
fix_fluent(holds(3, tower_base((block,3)), false, 4)).
fix_fluent(holds(3, tower_base((block,4)), false, 4)).
fix_fluent(holds(3, tower_base((block,5)), false, 4)).
fix_fluent(holds(3, tower_base((block,6)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), open, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(3, complete(blue), false, 5)).
fix_fluent(holds(3, complete(red), false, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,4)), store_room, 5)).
fix_fluent(holds(3, in((block,5)), store_room, 5)).
fix_fluent(holds(3, in((block,6)), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(3, in(talos), hallway, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,3)), (block,1), 5)).
fix_fluent(holds(3, on((block,4)), nothing, 5)).
fix_fluent(holds(3, on((block,5)), nothing, 5)).
fix_fluent(holds(3, on((block,6)), nothing, 5)).
fix_fluent(holds(3, tower_base((block,1)), true, 5)).
fix_fluent(holds(3, tower_base((block,2)), true, 5)).
fix_fluent(holds(3, tower_base((block,3)), false, 5)).
fix_fluent(holds(3, tower_base((block,4)), false, 5)).
fix_fluent(holds(3, tower_base((block,5)), false, 5)).
fix_fluent(holds(3, tower_base((block,6)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), open, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(3, complete(blue), false, 6)).
fix_fluent(holds(3, complete(red), false, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,4)), store_room, 6)).
fix_fluent(holds(3, in((block,5)), store_room, 6)).
fix_fluent(holds(3, in((block,6)), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(3, in(talos), hallway, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,3)), (block,1), 6)).
fix_fluent(holds(3, on((block,4)), nothing, 6)).
fix_fluent(holds(3, on((block,5)), nothing, 6)).
fix_fluent(holds(3, on((block,6)), nothing, 6)).
fix_fluent(holds(3, tower_base((block,1)), true, 6)).
fix_fluent(holds(3, tower_base((block,2)), true, 6)).
fix_fluent(holds(3, tower_base((block,3)), false, 6)).
fix_fluent(holds(3, tower_base((block,4)), false, 6)).
fix_fluent(holds(3, tower_base((block,5)), false, 6)).
fix_fluent(holds(3, tower_base((block,6)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), open, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(3, complete(blue), false, 7)).
fix_fluent(holds(3, complete(red), false, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,4)), store_room, 7)).
fix_fluent(holds(3, in((block,5)), store_room, 7)).
fix_fluent(holds(3, in((block,6)), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(3, in(talos), store_room, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,3)), (block,1), 7)).
fix_fluent(holds(3, on((block,4)), nothing, 7)).
fix_fluent(holds(3, on((block,5)), nothing, 7)).
fix_fluent(holds(3, on((block,6)), nothing, 7)).
fix_fluent(holds(3, tower_base((block,1)), true, 7)).
fix_fluent(holds(3, tower_base((block,2)), true, 7)).
fix_fluent(holds(3, tower_base((block,3)), false, 7)).
fix_fluent(holds(3, tower_base((block,4)), false, 7)).
fix_fluent(holds(3, tower_base((block,5)), false, 7)).
fix_fluent(holds(3, tower_base((block,6)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), open, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(3, complete(blue), false, 8)).
fix_fluent(holds(3, complete(red), false, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,4)), store_room, 8)).
fix_fluent(holds(3, in((block,5)), store_room, 8)).
fix_fluent(holds(3, in((block,6)), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(3, in(talos), store_room, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,3)), (block,1), 8)).
fix_fluent(holds(3, on((block,4)), nothing, 8)).
fix_fluent(holds(3, on((block,5)), nothing, 8)).
fix_fluent(holds(3, on((block,6)), nothing, 8)).
fix_fluent(holds(3, tower_base((block,1)), true, 8)).
fix_fluent(holds(3, tower_base((block,2)), true, 8)).
fix_fluent(holds(3, tower_base((block,3)), false, 8)).
fix_fluent(holds(3, tower_base((block,4)), false, 8)).
fix_fluent(holds(3, tower_base((block,5)), false, 8)).
fix_fluent(holds(3, tower_base((block,6)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), open, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(3, complete(blue), false, 9)).
fix_fluent(holds(3, complete(red), false, 9)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 9)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 9)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,4)), store_room, 9)).
fix_fluent(holds(3, in((block,5)), store_room, 9)).
fix_fluent(holds(3, in((block,6)), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(3, in(talos), store_room, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,3)), (block,1), 9)).
fix_fluent(holds(3, on((block,4)), nothing, 9)).
fix_fluent(holds(3, on((block,5)), nothing, 9)).
fix_fluent(holds(3, on((block,6)), nothing, 9)).
fix_fluent(holds(3, tower_base((block,1)), true, 9)).
fix_fluent(holds(3, tower_base((block,2)), true, 9)).
fix_fluent(holds(3, tower_base((block,3)), false, 9)).
fix_fluent(holds(3, tower_base((block,4)), false, 9)).
fix_fluent(holds(3, tower_base((block,5)), false, 9)).
fix_fluent(holds(3, tower_base((block,6)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), open, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(3, complete(blue), false, 10)).
fix_fluent(holds(3, complete(red), false, 10)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 10)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 10)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,4)), store_room, 10)).
fix_fluent(holds(3, in((block,5)), store_room, 10)).
fix_fluent(holds(3, in((block,6)), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(3, in(talos), store_room, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,3)), (block,1), 10)).
fix_fluent(holds(3, on((block,4)), nothing, 10)).
fix_fluent(holds(3, on((block,5)), nothing, 10)).
fix_fluent(holds(3, on((block,6)), nothing, 10)).
fix_fluent(holds(3, tower_base((block,1)), true, 10)).
fix_fluent(holds(3, tower_base((block,2)), true, 10)).
fix_fluent(holds(3, tower_base((block,3)), false, 10)).
fix_fluent(holds(3, tower_base((block,4)), false, 10)).
fix_fluent(holds(3, tower_base((block,5)), false, 10)).
fix_fluent(holds(3, tower_base((block,6)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), open, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), hallway, 11)).
fix_fluent(holds(2, in((block,6)), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(3, complete(blue), false, 11)).
fix_fluent(holds(3, complete(red), false, 11)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 11)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 11)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,4)), store_room, 11)).
fix_fluent(holds(3, in((block,5)), hallway, 11)).
fix_fluent(holds(3, in((block,6)), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(3, in(talos), hallway, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,3)), (block,1), 11)).
fix_fluent(holds(3, on((block,4)), nothing, 11)).
fix_fluent(holds(3, on((block,5)), nothing, 11)).
fix_fluent(holds(3, on((block,6)), nothing, 11)).
fix_fluent(holds(3, tower_base((block,1)), true, 11)).
fix_fluent(holds(3, tower_base((block,2)), true, 11)).
fix_fluent(holds(3, tower_base((block,3)), false, 11)).
fix_fluent(holds(3, tower_base((block,4)), false, 11)).
fix_fluent(holds(3, tower_base((block,5)), false, 11)).
fix_fluent(holds(3, tower_base((block,6)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), open, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), puzzle_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(3, complete(blue), false, 12)).
fix_fluent(holds(3, complete(red), false, 12)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 12)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 12)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,4)), store_room, 12)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(3, in(talos), puzzle_room, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,3)), (block,1), 12)).
fix_fluent(holds(3, on((block,4)), nothing, 12)).
fix_fluent(holds(3, on((block,5)), nothing, 12)).
fix_fluent(holds(3, on((block,6)), nothing, 12)).
fix_fluent(holds(3, tower_base((block,1)), true, 12)).
fix_fluent(holds(3, tower_base((block,2)), true, 12)).
fix_fluent(holds(3, tower_base((block,3)), false, 12)).
fix_fluent(holds(3, tower_base((block,4)), false, 12)).
fix_fluent(holds(3, tower_base((block,5)), false, 12)).
fix_fluent(holds(3, tower_base((block,6)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), open, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), puzzle_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(3, complete(blue), false, 13)).
fix_fluent(holds(3, complete(red), false, 13)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 13)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 13)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,4)), store_room, 13)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(3, in(talos), puzzle_room, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,3)), (block,1), 13)).
fix_fluent(holds(3, on((block,4)), nothing, 13)).
fix_fluent(holds(3, on((block,5)), nothing, 13)).
fix_fluent(holds(3, on((block,6)), nothing, 13)).
fix_fluent(holds(3, tower_base((block,1)), true, 13)).
fix_fluent(holds(3, tower_base((block,2)), true, 13)).
fix_fluent(holds(3, tower_base((block,3)), false, 13)).
fix_fluent(holds(3, tower_base((block,4)), false, 13)).
fix_fluent(holds(3, tower_base((block,5)), false, 13)).
fix_fluent(holds(3, tower_base((block,6)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), open, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), puzzle_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(3, complete(blue), false, 14)).
fix_fluent(holds(3, complete(red), false, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 14)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,6), 14)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,4)), store_room, 14)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(3, in(talos), puzzle_room, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,3)), (block,1), 14)).
fix_fluent(holds(3, on((block,4)), nothing, 14)).
fix_fluent(holds(3, on((block,5)), nothing, 14)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(3, tower_base((block,1)), true, 14)).
fix_fluent(holds(3, tower_base((block,2)), true, 14)).
fix_fluent(holds(3, tower_base((block,3)), false, 14)).
fix_fluent(holds(3, tower_base((block,4)), false, 14)).
fix_fluent(holds(3, tower_base((block,5)), false, 14)).
fix_fluent(holds(3, tower_base((block,6)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), puzzle_room, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(3, complete(blue), false, 15)).
fix_fluent(holds(3, complete(red), false, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 15)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 15)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,4)), store_room, 15)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(3, in(talos), puzzle_room, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,3)), (block,1), 15)).
fix_fluent(holds(3, on((block,4)), nothing, 15)).
fix_fluent(holds(3, on((block,5)), nothing, 15)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(3, tower_base((block,1)), true, 15)).
fix_fluent(holds(3, tower_base((block,2)), true, 15)).
fix_fluent(holds(3, tower_base((block,3)), false, 15)).
fix_fluent(holds(3, tower_base((block,4)), false, 15)).
fix_fluent(holds(3, tower_base((block,5)), false, 15)).
fix_fluent(holds(3, tower_base((block,6)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), puzzle_room, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), (block,6), 16)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(3, complete(blue), false, 16)).
fix_fluent(holds(3, complete(red), false, 16)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,5), 16)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,3), 16)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,4)), store_room, 16)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(3, in(talos), puzzle_room, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,3)), (block,1), 16)).
fix_fluent(holds(3, on((block,4)), nothing, 16)).
fix_fluent(holds(3, on((block,5)), (block,6), 16)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(3, tower_base((block,1)), true, 16)).
fix_fluent(holds(3, tower_base((block,2)), true, 16)).
fix_fluent(holds(3, tower_base((block,3)), false, 16)).
fix_fluent(holds(3, tower_base((block,4)), false, 16)).
fix_fluent(holds(3, tower_base((block,5)), false, 16)).
fix_fluent(holds(3, tower_base((block,6)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), puzzle_room, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), (block,6), 17)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), true, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(3, complete(blue), false, 17)).
fix_fluent(holds(3, complete(red), false, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,3), 17)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,4)), store_room, 17)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(3, in(talos), puzzle_room, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,4)), nothing, 17)).
fix_fluent(holds(3, on((block,5)), (block,6), 17)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(3, tower_base((block,1)), true, 17)).
fix_fluent(holds(3, tower_base((block,2)), true, 17)).
fix_fluent(holds(3, tower_base((block,3)), true, 17)).
fix_fluent(holds(3, tower_base((block,4)), false, 17)).
fix_fluent(holds(3, tower_base((block,5)), false, 17)).
fix_fluent(holds(3, tower_base((block,6)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,2), 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), puzzle_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), (block,6), 18)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), true, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(3, complete(blue), false, 18)).
fix_fluent(holds(3, complete(red), false, 18)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,2), 18)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,4)), store_room, 18)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(3, in(talos), puzzle_room, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,4)), nothing, 18)).
fix_fluent(holds(3, on((block,5)), (block,6), 18)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(3, tower_base((block,1)), true, 18)).
fix_fluent(holds(3, tower_base((block,2)), true, 18)).
fix_fluent(holds(3, tower_base((block,3)), true, 18)).
fix_fluent(holds(3, tower_base((block,4)), false, 18)).
fix_fluent(holds(3, tower_base((block,5)), false, 18)).
fix_fluent(holds(3, tower_base((block,6)), true, 18)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 18)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 18)
	('last_sgoals', 14)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 8)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029403625220>)

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None)

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183331s.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(8,19).

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060680s with result Satisfiable.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24401080000000164, Incremental time limit = None
Running cumulative time = 3.4870757000000054, Cumulative time limit = 3600
Used memory = (RSS = 468.898438Mb, VMS = 476.242188Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.933437s, Solving = 0.553638s, Total = 3.487076s, Memory = (RSS = 468.898438Mb, VMS = 476.242188Mb)), Calls = 19
Final Model :: Total atoms = 12404, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.9334373000000005, solving_time=0.553638400000005, total_time=3.4870757000000054, memory=Memory(rss=468.8984375, vms=476.2421875), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18333129999999898, solving_time=0.06067950000000266, total_time=0.24401080000000164, memory=Memory(rss=468.8984375, vms=476.2421875), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 53315.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 152231.0, 'bodies_tr': 152231.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3466.0, 'count_bodies_tr': 3466.0, 'sccs': 314.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5807.0, 'rules': 211121.0, 'rules_normal': 207788.0, 'rules_choice': 3067.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 211058.0, 'rules_tr_normal': 207788.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 165.0, 'eqs': 106554.0, 'eqs_atom': 21746.0, 'eqs_body': 5607.0, 'eqs_other': 79201.0}, 'lpStep': {'atoms': 5509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8398.0, 'bodies_tr': 8398.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 14826.0, 'rules_normal': 14660.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14825.0, 'rules_tr_normal': 14660.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 5897.0, 'eqs_atom': 1215.0, 'eqs_body': 384.0, 'eqs_other': 4298.0}, 'generator': {'vars': 26848.0, 'vars_eliminated': 0.0, 'vars_frozen': 17858.0, 'constraints': 278.0, 'constraints_binary': 16609.0, 'constraints_ternary': 1531.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 1201.0, 'conflicts': 17.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 10.0, 'models': 2.0, 'models_level': 722.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 16.0, 'integrated': 16.0, 'lemmas': 32.0, 'lits_learnt': 32.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 16.0, 'integrated_jumps': 31.0, 'guiding_paths_lits': 1656.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 0.0, 'lemmas_other': 16.0, 'lits_conflict': 16.0, 'lits_loop': 0.0, 'lits_other': 16.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.32712745666503906, 'cpu': 0.34375, 'solve': 0.0359039306640625, 'unsat': 0.013963699340820312, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.6438846588134766, 'cpu': 4.328125, 'solve': 0.3703289031982422, 'unsat': 0.1267528533935547, 'sat': 0.0720367431640625}, 'models': {'enumerated': 19.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 15121.0, 'conflicts': 1322.0, 'conflicts_analyzed': 1113.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1151.0, 'models': 19.0, 'models_level': 4785.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 981.0, 'distributed_sum_lbd': 2098.0, 'integrated': 5184.0, 'lemmas': 7832.0, 'lits_learnt': 129617.0, 'lemmas_binary': 921.0, 'lemmas_ternary': 363.0, 'cpu_time': 1.09375, 'integrated_imps': 2627.0, 'integrated_jumps': 4030.0, 'guiding_paths_lits': 14554.0, 'guiding_paths': 261.0, 'splits': 0.0, 'lemmas_conflict': 1047.0, 'lemmas_loop': 2115.0, 'lemmas_other': 4670.0, 'lits_conflict': 22390.0, 'lits_loop': 16554.0, 'lits_other': 90673.0, 'jumps': {'jumps': 1113.0, 'jumps_bounded': 326.0, 'levels': 21503.0, 'levels_bounded': 18811.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19}

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 9)
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 9)

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124100s.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066227s with result Satisfiable.

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19032660000000234, Incremental time limit = None
Running cumulative time = 3.677402300000008, Cumulative time limit = 3600
Used memory = (RSS = 475.378906Mb, VMS = 482.351562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 23
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.057537s, Solving = 0.619865s, Total = 3.677402s, Memory = (RSS = 475.378906Mb, VMS = 482.351562Mb)), Calls = 20
Final Model :: Total atoms = 12747, Cost = (29, 0), Optimality proven = False, Number = 4, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.0575371000000002, solving_time=0.6198652000000076, total_time=3.677402300000008, memory=Memory(rss=475.37890625, vms=482.3515625), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12409979999999976, solving_time=0.06622680000000258, total_time=0.19032660000000234, memory=Memory(rss=475.37890625, vms=482.3515625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 55204.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 159335.0, 'bodies_tr': 159335.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3646.0, 'count_bodies_tr': 3646.0, 'sccs': 327.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5961.0, 'rules': 220896.0, 'rules_normal': 217397.0, 'rules_choice': 3219.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 220826.0, 'rules_tr_normal': 217397.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 170.0, 'eqs': 110341.0, 'eqs_atom': 22218.0, 'eqs_body': 5914.0, 'eqs_other': 82209.0}, 'lpStep': {'atoms': 1889.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7104.0, 'bodies_tr': 7104.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 9775.0, 'rules_normal': 9609.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9768.0, 'rules_tr_normal': 9609.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 3787.0, 'eqs_atom': 472.0, 'eqs_body': 307.0, 'eqs_other': 3008.0}, 'generator': {'vars': 27592.0, 'vars_eliminated': 0.0, 'vars_frozen': 18392.0, 'constraints': 397.0, 'constraints_binary': 18323.0, 'constraints_ternary': 1643.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 1920.0, 'conflicts': 19.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 45.0, 'models': 4.0, 'models_level': 1554.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 24.0, 'integrated': 72.0, 'lemmas': 123.0, 'lits_learnt': 424.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 26.0, 'cpu_time': 0.109375, 'integrated_imps': 40.0, 'integrated_jumps': 195.0, 'guiding_paths_lits': 1784.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 50.0, 'lemmas_other': 60.0, 'lits_conflict': 40.0, 'lits_loop': 232.0, 'lits_other': 152.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 10.0, 'levels': 108.0, 'levels_bounded': 46.0, 'max': 39.0, 'max_executed': 38.0, 'max_bounded': 34.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.19248580932617188, 'cpu': 0.234375, 'solve': 0.05385780334472656, 'unsat': 0.013965606689453125, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.8363704681396484, 'cpu': 4.5625, 'solve': 0.42418670654296875, 'unsat': 0.1407184600830078, 'sat': 0.07502937316894531}, 'models': {'enumerated': 23.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 17041.0, 'conflicts': 1341.0, 'conflicts_analyzed': 1131.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1196.0, 'models': 23.0, 'models_level': 6339.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 995.0, 'distributed_sum_lbd': 2122.0, 'integrated': 5256.0, 'lemmas': 7955.0, 'lits_learnt': 130041.0, 'lemmas_binary': 931.0, 'lemmas_ternary': 389.0, 'cpu_time': 1.203125, 'integrated_imps': 2667.0, 'integrated_jumps': 4225.0, 'guiding_paths_lits': 16338.0, 'guiding_paths': 269.0, 'splits': 0.0, 'lemmas_conflict': 1060.0, 'lemmas_loop': 2165.0, 'lemmas_other': 4730.0, 'lits_conflict': 22430.0, 'lits_loop': 16786.0, 'lits_other': 90825.0, 'jumps': {'jumps': 1131.0, 'jumps_bounded': 336.0, 'levels': 21611.0, 'levels_bounded': 18857.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20}

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None)

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 20]:
sub_goal(3, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 10)
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 10)

[15-11-2021_14-29-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137142s.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(10,20).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.072087s with result Satisfiable.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20922979999999924, Incremental time limit = None
Running cumulative time = 3.886632100000007, Cumulative time limit = 3600
Used memory = (RSS = 482.378906Mb, VMS = 488.722656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 27
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.194680s, Solving = 0.691953s, Total = 3.886632s, Memory = (RSS = 482.378906Mb, VMS = 488.722656Mb)), Calls = 21
Final Model :: Total atoms = 13097, Cost = (29, 0), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.1946795999999997, solving_time=0.6919525000000073, total_time=3.886632100000007, memory=Memory(rss=482.37890625, vms=488.72265625), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1371424999999995, solving_time=0.07208729999999974, total_time=0.20922979999999924, memory=Memory(rss=482.37890625, vms=488.72265625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 57185.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166880.0, 'bodies_tr': 166880.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3826.0, 'count_bodies_tr': 3826.0, 'sccs': 343.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6146.0, 'rules': 231318.0, 'rules_normal': 227653.0, 'rules_choice': 3371.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 231244.0, 'rules_tr_normal': 227653.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 178.0, 'eqs': 115328.0, 'eqs_atom': 22979.0, 'eqs_body': 6202.0, 'eqs_other': 86147.0}, 'lpStep': {'atoms': 1981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7545.0, 'bodies_tr': 7545.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 185.0, 'rules': 10422.0, 'rules_normal': 10256.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10418.0, 'rules_tr_normal': 10256.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4987.0, 'eqs_atom': 761.0, 'eqs_body': 288.0, 'eqs_other': 3938.0}, 'generator': {'vars': 28636.0, 'vars_eliminated': 0.0, 'vars_frozen': 19091.0, 'constraints': 657.0, 'constraints_binary': 23243.0, 'constraints_ternary': 2696.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 2186.0, 'conflicts': 44.0, 'conflicts_analyzed': 43.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 120.0, 'models': 4.0, 'models_level': 1759.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 68.0, 'integrated': 211.0, 'lemmas': 352.0, 'lits_learnt': 1972.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.125, 'integrated_imps': 115.0, 'integrated_jumps': 426.0, 'guiding_paths_lits': 1912.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 117.0, 'lemmas_other': 199.0, 'lits_conflict': 205.0, 'lits_loop': 603.0, 'lits_other': 1164.0, 'jumps': {'jumps': 43.0, 'jumps_bounded': 15.0, 'levels': 1160.0, 'levels_bounded': 1064.0, 'max': 250.0, 'max_executed': 250.0, 'max_bounded': 240.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.21242904663085938, 'cpu': 0.28125, 'solve': 0.058841705322265625, 'unsat': 0.014959335327148438, 'sat': 0.00399017333984375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.048799514770508, 'cpu': 4.84375, 'solve': 0.4830284118652344, 'unsat': 0.15567779541015625, 'sat': 0.07901954650878906}, 'models': {'enumerated': 27.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 19227.0, 'conflicts': 1385.0, 'conflicts_analyzed': 1174.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1316.0, 'models': 27.0, 'models_level': 8098.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1032.0, 'distributed_sum_lbd': 2190.0, 'integrated': 5467.0, 'lemmas': 8307.0, 'lits_learnt': 132013.0, 'lemmas_binary': 984.0, 'lemmas_ternary': 400.0, 'cpu_time': 1.328125, 'integrated_imps': 2782.0, 'integrated_jumps': 4651.0, 'guiding_paths_lits': 18250.0, 'guiding_paths': 277.0, 'splits': 0.0, 'lemmas_conflict': 1096.0, 'lemmas_loop': 2282.0, 'lemmas_other': 4929.0, 'lits_conflict': 22635.0, 'lits_loop': 17389.0, 'lits_other': 91989.0, 'jumps': {'jumps': 1174.0, 'jumps_bounded': 351.0, 'levels': 22771.0, 'levels_bounded': 19921.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21}

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 21]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 11)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145644s.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(11,21).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017465s with result Unsatisfiable.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16310899999999862, Incremental time limit = None
Running cumulative time = 4.049741100000006, Cumulative time limit = 3600
Used memory = (RSS = 483.566406Mb, VMS = 489.265625Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.3403231999999994, solving_time=0.7094179000000063, total_time=4.049741100000006, memory=Memory(rss=483.56640625, vms=489.265625), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14564359999999965, solving_time=0.017465399999998965, total_time=0.16310899999999862, memory=Memory(rss=483.56640625, vms=489.265625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 59486.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 174898.0, 'bodies_tr': 174898.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4006.0, 'count_bodies_tr': 4006.0, 'sccs': 361.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6422.0, 'rules': 242561.0, 'rules_normal': 238730.0, 'rules_choice': 3523.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 242485.0, 'rules_tr_normal': 238730.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 188.0, 'eqs': 120296.0, 'eqs_atom': 24003.0, 'eqs_body': 6424.0, 'eqs_other': 89869.0}, 'lpStep': {'atoms': 2301.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8018.0, 'bodies_tr': 8018.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 276.0, 'rules': 11243.0, 'rules_normal': 11077.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11241.0, 'rules_tr_normal': 11077.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 4968.0, 'eqs_atom': 1024.0, 'eqs_body': 222.0, 'eqs_other': 3722.0}, 'generator': {'vars': 30015.0, 'vars_eliminated': 0.0, 'vars_frozen': 20009.0, 'constraints': 996.0, 'constraints_binary': 29733.0, 'constraints_ternary': 4169.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 96.0, 'conflicts': 54.0, 'conflicts_analyzed': 48.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 96.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 90.0, 'integrated': 195.0, 'lemmas': 174.0, 'lits_learnt': 1325.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.0, 'integrated_imps': 114.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 1785.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 41.0, 'lemmas_loop': 0.0, 'lemmas_other': 133.0, 'lits_conflict': 310.0, 'lits_loop': 0.0, 'lits_other': 1015.0, 'jumps': {'jumps': 48.0, 'jumps_bounded': 14.0, 'levels': 468.0, 'levels_bounded': 420.0, 'max': 254.0, 'max_executed': 3.0, 'max_bounded': 253.0}}}}, 'summary': {'call': 22.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.165557861328125, 'cpu': 0.171875, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.214357376098633, 'cpu': 5.015625, 'solve': 0.4870185852050781, 'unsat': 0.15966796875, 'sat': 0.07901954650878906}, 'models': {'enumerated': 27.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 19323.0, 'conflicts': 1439.0, 'conflicts_analyzed': 1222.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1412.0, 'models': 27.0, 'models_level': 8098.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1073.0, 'distributed_sum_lbd': 2280.0, 'integrated': 5662.0, 'lemmas': 8481.0, 'lits_learnt': 133338.0, 'lemmas_binary': 1027.0, 'lemmas_ternary': 407.0, 'cpu_time': 1.328125, 'integrated_imps': 2896.0, 'integrated_jumps': 4699.0, 'guiding_paths_lits': 20035.0, 'guiding_paths': 285.0, 'splits': 0.0, 'lemmas_conflict': 1137.0, 'lemmas_loop': 2282.0, 'lemmas_other': 5062.0, 'lits_conflict': 22945.0, 'lits_loop': 17389.0, 'lits_other': 93004.0, 'jumps': {'jumps': 1222.0, 'jumps_bounded': 365.0, 'levels': 23239.0, 'levels_bounded': 20341.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160523s.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043353s with result Satisfiable.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20387579999999872, Incremental time limit = None
Running cumulative time = 4.253616900000004, Cumulative time limit = 3600
Used memory = (RSS = 492.378906Mb, VMS = 506.320312Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 28
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.500846s, Solving = 0.752771s, Total = 4.253617s, Memory = (RSS = 492.378906Mb, VMS = 506.320312Mb)), Calls = 23
Final Model :: Total atoms = 13784, Cost = (31, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.5008457999999996, solving_time=0.7527711000000048, total_time=4.253616900000004, memory=Memory(rss=492.37890625, vms=506.3203125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16052260000000018, solving_time=0.04335319999999854, total_time=0.20387579999999872, memory=Memory(rss=492.37890625, vms=506.3203125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 61901.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 183292.0, 'bodies_tr': 183292.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4186.0, 'count_bodies_tr': 4186.0, 'sccs': 381.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6853.0, 'rules': 254331.0, 'rules_normal': 250334.0, 'rules_choice': 3675.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 254255.0, 'rules_tr_normal': 250334.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 200.0, 'eqs': 125710.0, 'eqs_atom': 25077.0, 'eqs_body': 6549.0, 'eqs_other': 94084.0}, 'lpStep': {'atoms': 2415.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8394.0, 'bodies_tr': 8394.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 431.0, 'rules': 11770.0, 'rules_normal': 11604.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11770.0, 'rules_tr_normal': 11604.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5414.0, 'eqs_atom': 1074.0, 'eqs_body': 125.0, 'eqs_other': 4215.0}, 'generator': {'vars': 31886.0, 'vars_eliminated': 0.0, 'vars_frozen': 21243.0, 'constraints': 1473.0, 'constraints_binary': 39835.0, 'constraints_ternary': 6525.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 1362.0, 'conflicts': 120.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 192.0, 'models': 1.0, 'models_level': 657.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 114.0, 'distributed_sum_lbd': 298.0, 'integrated': 618.0, 'lemmas': 941.0, 'lits_learnt': 10818.0, 'lemmas_binary': 77.0, 'lemmas_ternary': 53.0, 'cpu_time': 0.125, 'integrated_imps': 202.0, 'integrated_jumps': 198.0, 'guiding_paths_lits': 1897.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 116.0, 'lemmas_loop': 235.0, 'lemmas_other': 590.0, 'lits_conflict': 1589.0, 'lits_loop': 1723.0, 'lits_other': 7506.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 28.0, 'levels': 1493.0, 'levels_bounded': 1340.0, 'max': 450.0, 'max_executed': 450.0, 'max_bounded': 449.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.20644760131835938, 'cpu': 0.296875, 'solve': 0.0259246826171875, 'unsat': 0.014959335327148438, 'sat': 0.010965347290039062}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.420804977416992, 'cpu': 5.3125, 'solve': 0.5129432678222656, 'unsat': 0.17462730407714844, 'sat': 0.08998489379882812}, 'models': {'enumerated': 28.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 20685.0, 'conflicts': 1559.0, 'conflicts_analyzed': 1338.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1604.0, 'models': 28.0, 'models_level': 8755.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1187.0, 'distributed_sum_lbd': 2578.0, 'integrated': 6280.0, 'lemmas': 9422.0, 'lits_learnt': 144156.0, 'lemmas_binary': 1104.0, 'lemmas_ternary': 460.0, 'cpu_time': 1.453125, 'integrated_imps': 3098.0, 'integrated_jumps': 4897.0, 'guiding_paths_lits': 21932.0, 'guiding_paths': 294.0, 'splits': 0.0, 'lemmas_conflict': 1253.0, 'lemmas_loop': 2517.0, 'lemmas_other': 5652.0, 'lits_conflict': 24534.0, 'lits_loop': 19112.0, 'lits_other': 100510.0, 'jumps': {'jumps': 1338.0, 'jumps_bounded': 393.0, 'levels': 24732.0, 'levels_bounded': 21681.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23}

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 23]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 12)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160269s.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(12,23).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019120s with result Unsatisfiable.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17938979999999916, Incremental time limit = None
Running cumulative time = 4.4330067000000035, Cumulative time limit = 3600
Used memory = (RSS = 494.167969Mb, VMS = 506.875000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.661115299999998, solving_time=0.7718914000000057, total_time=4.4330067000000035, memory=Memory(rss=494.16796875, vms=506.875), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1602694999999983, solving_time=0.019120300000000867, total_time=0.17938979999999916, memory=Memory(rss=494.16796875, vms=506.875), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 64354.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 191883.0, 'bodies_tr': 191883.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4366.0, 'count_bodies_tr': 4366.0, 'sccs': 401.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7289.0, 'rules': 266392.0, 'rules_normal': 262229.0, 'rules_choice': 3827.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 266316.0, 'rules_tr_normal': 262229.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 212.0, 'eqs': 131252.0, 'eqs_atom': 26153.0, 'eqs_body': 6663.0, 'eqs_other': 98436.0}, 'lpStep': {'atoms': 2453.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8591.0, 'bodies_tr': 8591.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12061.0, 'rules_normal': 11895.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12061.0, 'rules_tr_normal': 11895.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5542.0, 'eqs_atom': 1076.0, 'eqs_body': 114.0, 'eqs_other': 4352.0}, 'generator': {'vars': 33804.0, 'vars_eliminated': 0.0, 'vars_frozen': 22497.0, 'constraints': 1963.0, 'constraints_binary': 50282.0, 'constraints_ternary': 8917.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 10.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 12.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 16.0, 'lemmas': 57.0, 'lits_learnt': 457.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 9.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 2009.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 44.0, 'lemmas_other': 9.0, 'lits_conflict': 37.0, 'lits_loop': 346.0, 'lits_other': 74.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 5.0, 'levels': 15.0, 'levels_bounded': 9.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1825695037841797, 'cpu': 0.234375, 'solve': 0.0049839019775390625, 'unsat': 0.0049839019775390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.603374481201172, 'cpu': 5.546875, 'solve': 0.5179271697998047, 'unsat': 0.1796112060546875, 'sat': 0.08998489379882812}, 'models': {'enumerated': 28.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 20697.0, 'conflicts': 1569.0, 'conflicts_analyzed': 1344.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1616.0, 'models': 28.0, 'models_level': 8755.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1191.0, 'distributed_sum_lbd': 2586.0, 'integrated': 6296.0, 'lemmas': 9479.0, 'lits_learnt': 144613.0, 'lemmas_binary': 1108.0, 'lemmas_ternary': 460.0, 'cpu_time': 1.515625, 'integrated_imps': 3107.0, 'integrated_jumps': 4898.0, 'guiding_paths_lits': 23941.0, 'guiding_paths': 302.0, 'splits': 0.0, 'lemmas_conflict': 1257.0, 'lemmas_loop': 2561.0, 'lemmas_other': 5661.0, 'lits_conflict': 24571.0, 'lits_loop': 19458.0, 'lits_other': 100584.0, 'jumps': {'jumps': 1344.0, 'jumps_bounded': 398.0, 'levels': 24747.0, 'levels_bounded': 21690.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162461s.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078447s with result Satisfiable.

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24090890000000087, Incremental time limit = None
Running cumulative time = 4.673915600000004, Cumulative time limit = 3600
Used memory = (RSS = 501.144531Mb, VMS = 512.671875Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.823577s, Solving = 0.850339s, Total = 4.673916s, Memory = (RSS = 501.144531Mb, VMS = 512.671875Mb)), Calls = 25
Final Model :: Total atoms = 14471, Cost = (33, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.8235766999999994, solving_time=0.850338900000005, total_time=4.673915600000004, memory=Memory(rss=501.14453125, vms=512.671875), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16246140000000153, solving_time=0.07844749999999934, total_time=0.24090890000000087, memory=Memory(rss=501.14453125, vms=512.671875), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 66816.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 200499.0, 'bodies_tr': 200499.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4546.0, 'count_bodies_tr': 4546.0, 'sccs': 421.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7725.0, 'rules': 278570.0, 'rules_normal': 274241.0, 'rules_choice': 3979.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 278494.0, 'rules_tr_normal': 274241.0, 'rules_tr_choice': 3979.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 224.0, 'eqs': 136844.0, 'eqs_atom': 27236.0, 'eqs_body': 6775.0, 'eqs_other': 102833.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8616.0, 'bodies_tr': 8616.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12178.0, 'rules_normal': 12012.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12178.0, 'rules_tr_normal': 12012.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5592.0, 'eqs_atom': 1083.0, 'eqs_body': 112.0, 'eqs_other': 4397.0}, 'generator': {'vars': 35729.0, 'vars_eliminated': 0.0, 'vars_frozen': 23753.0, 'constraints': 2455.0, 'constraints_binary': 60851.0, 'constraints_ternary': 11314.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 2703.0, 'conflicts': 232.0, 'conflicts_analyzed': 226.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 360.0, 'models': 3.0, 'models_level': 1648.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 223.0, 'distributed_sum_lbd': 613.0, 'integrated': 1312.0, 'lemmas': 2313.0, 'lits_learnt': 46727.0, 'lemmas_binary': 118.0, 'lemmas_ternary': 52.0, 'cpu_time': 0.171875, 'integrated_imps': 357.0, 'integrated_jumps': 188.0, 'guiding_paths_lits': 2121.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 225.0, 'lemmas_loop': 888.0, 'lemmas_other': 1200.0, 'lits_conflict': 6232.0, 'lits_loop': 6724.0, 'lits_other': 33771.0, 'jumps': {'jumps': 226.0, 'jumps_bounded': 31.0, 'levels': 1713.0, 'levels_bounded': 1440.0, 'max': 494.0, 'max_executed': 494.0, 'max_bounded': 493.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [33.0, 0.0], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.24335098266601562, 'cpu': 0.359375, 'solve': 0.05983924865722656, 'unsat': 0.015928268432617188, 'sat': 0.015956878662109375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.8467254638671875, 'cpu': 5.90625, 'solve': 0.5777664184570312, 'unsat': 0.1955394744873047, 'sat': 0.1059417724609375}, 'models': {'enumerated': 31.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 23400.0, 'conflicts': 1801.0, 'conflicts_analyzed': 1570.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1976.0, 'models': 31.0, 'models_level': 10403.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1414.0, 'distributed_sum_lbd': 3199.0, 'integrated': 7608.0, 'lemmas': 11792.0, 'lits_learnt': 191340.0, 'lemmas_binary': 1226.0, 'lemmas_ternary': 512.0, 'cpu_time': 1.6875, 'integrated_imps': 3464.0, 'integrated_jumps': 5086.0, 'guiding_paths_lits': 26062.0, 'guiding_paths': 313.0, 'splits': 0.0, 'lemmas_conflict': 1482.0, 'lemmas_loop': 3449.0, 'lemmas_other': 6861.0, 'lits_conflict': 30803.0, 'lits_loop': 26182.0, 'lits_other': 134355.0, 'jumps': {'jumps': 1570.0, 'jumps_bounded': 429.0, 'levels': 26460.0, 'levels_bounded': 23130.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25}

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 25]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13)

[15-11-2021_14-29-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162079s.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020797s with result Unsatisfiable.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18287670000000134, Incremental time limit = None
Running cumulative time = 4.856792300000006, Cumulative time limit = 3600
Used memory = (RSS = 502.585938Mb, VMS = 513.175781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.985656099999999, solving_time=0.8711362000000067, total_time=4.856792300000006, memory=Memory(rss=502.5859375, vms=513.17578125), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16207939999999965, solving_time=0.020797300000001684, total_time=0.18287670000000134, memory=Memory(rss=502.5859375, vms=513.17578125), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 69287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 209139.0, 'bodies_tr': 209139.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4726.0, 'count_bodies_tr': 4726.0, 'sccs': 441.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8161.0, 'rules': 290863.0, 'rules_normal': 286368.0, 'rules_choice': 4131.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 290787.0, 'rules_tr_normal': 286368.0, 'rules_tr_choice': 4131.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 236.0, 'eqs': 142492.0, 'eqs_atom': 28328.0, 'eqs_body': 6886.0, 'eqs_other': 107278.0}, 'lpStep': {'atoms': 2471.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8640.0, 'bodies_tr': 8640.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12293.0, 'rules_normal': 12127.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12293.0, 'rules_tr_normal': 12127.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5648.0, 'eqs_atom': 1092.0, 'eqs_body': 111.0, 'eqs_other': 4445.0}, 'generator': {'vars': 37654.0, 'vars_eliminated': 0.0, 'vars_frozen': 25009.0, 'constraints': 2943.0, 'constraints_binary': 71470.0, 'constraints_ternary': 13561.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 7.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 6.0, 'lits_learnt': 12.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 2233.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 10.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.18550491333007812, 'cpu': 0.171875, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.032230377197266, 'cpu': 6.078125, 'solve': 0.5827541351318359, 'unsat': 0.20052719116210938, 'sat': 0.1059417724609375}, 'models': {'enumerated': 31.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 23406.0, 'conflicts': 1808.0, 'conflicts_analyzed': 1573.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 1982.0, 'models': 31.0, 'models_level': 10403.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1415.0, 'distributed_sum_lbd': 3201.0, 'integrated': 7613.0, 'lemmas': 11798.0, 'lits_learnt': 191352.0, 'lemmas_binary': 1232.0, 'lemmas_ternary': 512.0, 'cpu_time': 1.6875, 'integrated_imps': 3469.0, 'integrated_jumps': 5089.0, 'guiding_paths_lits': 28295.0, 'guiding_paths': 320.0, 'splits': 0.0, 'lemmas_conflict': 1483.0, 'lemmas_loop': 3449.0, 'lemmas_other': 6866.0, 'lits_conflict': 30805.0, 'lits_loop': 26182.0, 'lits_other': 134365.0, 'jumps': {'jumps': 1573.0, 'jumps_bounded': 432.0, 'levels': 26468.0, 'levels_bounded': 23135.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193454s.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044796s with result Unsatisfiable.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.23824989999999602, Incremental time limit = None
Running cumulative time = 5.095042200000002, Cumulative time limit = 3600
Used memory = (RSS = 504.855469Mb, VMS = 514.289062Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.179110299999997, solving_time=0.9159319000000048, total_time=5.095042200000002, memory=Memory(rss=504.85546875, vms=514.2890625), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1934541999999979, solving_time=0.044795699999998106, total_time=0.23824989999999602, memory=Memory(rss=504.85546875, vms=514.2890625), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 71767.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 217803.0, 'bodies_tr': 217803.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4906.0, 'count_bodies_tr': 4906.0, 'sccs': 461.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8597.0, 'rules': 303271.0, 'rules_normal': 298610.0, 'rules_choice': 4283.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 303195.0, 'rules_tr_normal': 298610.0, 'rules_tr_choice': 4283.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 248.0, 'eqs': 148198.0, 'eqs_atom': 29429.0, 'eqs_body': 6998.0, 'eqs_other': 111771.0}, 'lpStep': {'atoms': 2480.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8664.0, 'bodies_tr': 8664.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12408.0, 'rules_normal': 12242.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12408.0, 'rules_tr_normal': 12242.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5706.0, 'eqs_atom': 1101.0, 'eqs_body': 112.0, 'eqs_other': 4493.0}, 'generator': {'vars': 39579.0, 'vars_eliminated': 0.0, 'vars_frozen': 26265.0, 'constraints': 3435.0, 'constraints_binary': 82261.0, 'constraints_ternary': 15968.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 629.0, 'conflicts': 297.0, 'conflicts_analyzed': 286.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 596.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 281.0, 'distributed_sum_lbd': 758.0, 'integrated': 1387.0, 'lemmas': 2057.0, 'lits_learnt': 59535.0, 'lemmas_binary': 132.0, 'lemmas_ternary': 36.0, 'cpu_time': 0.203125, 'integrated_imps': 368.0, 'integrated_jumps': 222.0, 'guiding_paths_lits': 2010.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 286.0, 'lemmas_loop': 577.0, 'lemmas_other': 1194.0, 'lits_conflict': 10755.0, 'lits_loop': 4702.0, 'lits_other': 44078.0, 'jumps': {'jumps': 286.0, 'jumps_bounded': 28.0, 'levels': 7112.0, 'levels_bounded': 6708.0, 'max': 740.0, 'max_executed': 740.0, 'max_bounded': 739.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [34.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.24135589599609375, 'cpu': 0.40625, 'solve': 0.027927398681640625, 'unsat': 0.027927398681640625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.273586273193359, 'cpu': 6.484375, 'solve': 0.6106815338134766, 'unsat': 0.22845458984375, 'sat': 0.1059417724609375}, 'models': {'enumerated': 31.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 24035.0, 'conflicts': 2105.0, 'conflicts_analyzed': 1859.0, 'restarts': 0.0, 'restarts_last': 57.0, 'extra': {'domain_choices': 2578.0, 'models': 31.0, 'models_level': 10403.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1696.0, 'distributed_sum_lbd': 3959.0, 'integrated': 9000.0, 'lemmas': 13855.0, 'lits_learnt': 250887.0, 'lemmas_binary': 1364.0, 'lemmas_ternary': 548.0, 'cpu_time': 1.890625, 'integrated_imps': 3837.0, 'integrated_jumps': 5311.0, 'guiding_paths_lits': 30305.0, 'guiding_paths': 331.0, 'splits': 0.0, 'lemmas_conflict': 1769.0, 'lemmas_loop': 4026.0, 'lemmas_other': 8060.0, 'lits_conflict': 41560.0, 'lits_loop': 30884.0, 'lits_other': 178443.0, 'jumps': {'jumps': 1859.0, 'jumps_bounded': 460.0, 'levels': 33580.0, 'levels_bounded': 29843.0, 'max': 740.0, 'max_executed': 740.0, 'max_bounded': 739.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177313s.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.144652s with result Satisfiable.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3219649999999987, Incremental time limit = None
Running cumulative time = 5.4170072000000005, Cumulative time limit = 3600
Used memory = (RSS = 512.242188Mb, VMS = 520.757812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 34
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.356423s, Solving = 1.060584s, Total = 5.417007s, Memory = (RSS = 512.242188Mb, VMS = 520.757812Mb)), Calls = 28
Final Model :: Total atoms = 15508, Cost = (36, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.356423499999997, solving_time=1.0605837000000031, total_time=5.4170072000000005, memory=Memory(rss=512.2421875, vms=520.7578125), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1773132000000004, solving_time=0.14465179999999833, total_time=0.3219649999999987, memory=Memory(rss=512.2421875, vms=520.7578125), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 74256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 226491.0, 'bodies_tr': 226491.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5086.0, 'count_bodies_tr': 5086.0, 'sccs': 481.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9033.0, 'rules': 315794.0, 'rules_normal': 310967.0, 'rules_choice': 4435.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 315718.0, 'rules_tr_normal': 310967.0, 'rules_tr_choice': 4435.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 260.0, 'eqs': 153960.0, 'eqs_atom': 30539.0, 'eqs_body': 7109.0, 'eqs_other': 116312.0}, 'lpStep': {'atoms': 2489.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8688.0, 'bodies_tr': 8688.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12523.0, 'rules_normal': 12357.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12523.0, 'rules_tr_normal': 12357.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5762.0, 'eqs_atom': 1110.0, 'eqs_body': 111.0, 'eqs_other': 4541.0}, 'generator': {'vars': 41504.0, 'vars_eliminated': 0.0, 'vars_frozen': 27521.0, 'constraints': 3927.0, 'constraints_binary': 92661.0, 'constraints_ternary': 18279.0, 'acyc_edges': 0.0, 'complexity': 120610.0}}, 'solving': {'solvers': {'choices': 4825.0, 'conflicts': 1135.0, 'conflicts_analyzed': 1128.0, 'restarts': 6.0, 'restarts_last': 128.0, 'extra': {'domain_choices': 1846.0, 'models': 3.0, 'models_level': 1697.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 982.0, 'distributed_sum_lbd': 3027.0, 'integrated': 5885.0, 'lemmas': 7468.0, 'lits_learnt': 356843.0, 'lemmas_binary': 577.0, 'lemmas_ternary': 155.0, 'cpu_time': 0.71875, 'integrated_imps': 840.0, 'integrated_jumps': 1051.0, 'guiding_paths_lits': 2457.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 1127.0, 'lemmas_loop': 1012.0, 'lemmas_other': 5329.0, 'lits_conflict': 64803.0, 'lits_loop': 8703.0, 'lits_other': 283337.0, 'jumps': {'jumps': 1128.0, 'jumps_bounded': 20.0, 'levels': 2405.0, 'levels_bounded': 812.0, 'max': 353.0, 'max_executed': 353.0, 'max_bounded': 351.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.32513427734375, 'cpu': 0.90625, 'solve': 0.128662109375, 'unsat': 0.014957427978515625, 'sat': 0.0767974853515625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.598720550537109, 'cpu': 7.390625, 'solve': 0.7393436431884766, 'unsat': 0.24341201782226562, 'sat': 0.1827392578125}, 'models': {'enumerated': 34.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 28860.0, 'conflicts': 3240.0, 'conflicts_analyzed': 2987.0, 'restarts': 6.0, 'restarts_last': 128.0, 'extra': {'domain_choices': 4424.0, 'models': 34.0, 'models_level': 12100.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2678.0, 'distributed_sum_lbd': 6986.0, 'integrated': 14885.0, 'lemmas': 21323.0, 'lits_learnt': 607730.0, 'lemmas_binary': 1941.0, 'lemmas_ternary': 703.0, 'cpu_time': 2.609375, 'integrated_imps': 4677.0, 'integrated_jumps': 6362.0, 'guiding_paths_lits': 32762.0, 'guiding_paths': 345.0, 'splits': 0.0, 'lemmas_conflict': 2896.0, 'lemmas_loop': 5038.0, 'lemmas_other': 13389.0, 'lits_conflict': 106363.0, 'lits_loop': 39587.0, 'lits_other': 461780.0, 'jumps': {'jumps': 2987.0, 'jumps_bounded': 480.0, 'levels': 35985.0, 'levels_bounded': 30655.0, 'max': 740.0, 'max_executed': 740.0, 'max_bounded': 739.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28}

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None)

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 28]:
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 14)
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 14)

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[15-11-2021_14-29-47] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214990s.

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(14,28).

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[15-11-2021_14-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027621s with result Unsatisfiable.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2426111000000013, Incremental time limit = None
Running cumulative time = 5.659618300000002, Cumulative time limit = 3600
Used memory = (RSS = 514.988281Mb, VMS = 522.316406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.571413299999999, solving_time=1.088205000000003, total_time=5.659618300000002, memory=Memory(rss=514.98828125, vms=522.31640625), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21498980000000145, solving_time=0.02762129999999985, total_time=0.2426111000000013, memory=Memory(rss=514.98828125, vms=522.31640625), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 76754.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 235203.0, 'bodies_tr': 235203.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5266.0, 'count_bodies_tr': 5266.0, 'sccs': 501.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9469.0, 'rules': 328432.0, 'rules_normal': 323439.0, 'rules_choice': 4587.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 328356.0, 'rules_tr_normal': 323439.0, 'rules_tr_choice': 4587.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 272.0, 'eqs': 159780.0, 'eqs_atom': 31658.0, 'eqs_body': 7221.0, 'eqs_other': 120901.0}, 'lpStep': {'atoms': 2498.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8712.0, 'bodies_tr': 8712.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12638.0, 'rules_normal': 12472.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12638.0, 'rules_tr_normal': 12472.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5820.0, 'eqs_atom': 1119.0, 'eqs_body': 112.0, 'eqs_other': 4589.0}, 'generator': {'vars': 43429.0, 'vars_eliminated': 0.0, 'vars_frozen': 28777.0, 'constraints': 4281.0, 'constraints_binary': 101592.0, 'constraints_ternary': 20259.0, 'acyc_edges': 0.0, 'complexity': 126752.0}}, 'solving': {'solvers': {'choices': 20.0, 'conflicts': 18.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 17.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 13.0, 'integrated': 16.0, 'lemmas': 19.0, 'lits_learnt': 1097.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 8.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 2569.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 1.0, 'lemmas_other': 12.0, 'lits_conflict': 526.0, 'lits_loop': 9.0, 'lits_other': 562.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 2.0, 'levels': 13.0, 'levels_bounded': 2.0, 'max': 4.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2469310760498047, 'cpu': 0.328125, 'solve': 0.008977890014648438, 'unsat': 0.008977890014648438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.845651626586914, 'cpu': 7.71875, 'solve': 0.748321533203125, 'unsat': 0.25238990783691406, 'sat': 0.1827392578125}, 'models': {'enumerated': 34.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 28880.0, 'conflicts': 3258.0, 'conflicts_analyzed': 2995.0, 'restarts': 6.0, 'restarts_last': 128.0, 'extra': {'domain_choices': 4441.0, 'models': 34.0, 'models_level': 12100.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2684.0, 'distributed_sum_lbd': 6999.0, 'integrated': 14901.0, 'lemmas': 21342.0, 'lits_learnt': 608827.0, 'lemmas_binary': 1948.0, 'lemmas_ternary': 703.0, 'cpu_time': 2.703125, 'integrated_imps': 4685.0, 'integrated_jumps': 6371.0, 'guiding_paths_lits': 35331.0, 'guiding_paths': 356.0, 'splits': 0.0, 'lemmas_conflict': 2902.0, 'lemmas_loop': 5039.0, 'lemmas_other': 13401.0, 'lits_conflict': 106889.0, 'lits_loop': 39596.0, 'lits_other': 462342.0, 'jumps': {'jumps': 2995.0, 'jumps_bounded': 482.0, 'levels': 35998.0, 'levels_bounded': 30657.0, 'max': 740.0, 'max_executed': 740.0, 'max_bounded': 739.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.202998s.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.435199s with result Satisfiable.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6381974999999969, Incremental time limit = None
Running cumulative time = 6.297815799999999, Cumulative time limit = 3600
Used memory = (RSS = 520.007812Mb, VMS = 526.324219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 36
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.774411s, Solving = 1.523404s, Total = 6.297816s, Memory = (RSS = 520.007812Mb, VMS = 526.324219Mb)), Calls = 30
Final Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.7744114999999985, solving_time=1.5234043000000002, total_time=6.297815799999999, memory=Memory(rss=520.0078125, vms=526.32421875), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20299819999999968, solving_time=0.4351992999999972, total_time=0.6381974999999969, memory=Memory(rss=520.0078125, vms=526.32421875), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 79261.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 243939.0, 'bodies_tr': 243939.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5446.0, 'count_bodies_tr': 5446.0, 'sccs': 521.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9905.0, 'rules': 341185.0, 'rules_normal': 336026.0, 'rules_choice': 4739.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 341109.0, 'rules_tr_normal': 336026.0, 'rules_tr_choice': 4739.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 284.0, 'eqs': 165656.0, 'eqs_atom': 32786.0, 'eqs_body': 7332.0, 'eqs_other': 125538.0}, 'lpStep': {'atoms': 2507.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8736.0, 'bodies_tr': 8736.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12753.0, 'rules_normal': 12587.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12753.0, 'rules_tr_normal': 12587.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5876.0, 'eqs_atom': 1128.0, 'eqs_body': 111.0, 'eqs_other': 4637.0}, 'generator': {'vars': 45354.0, 'vars_eliminated': 0.0, 'vars_frozen': 30033.0, 'constraints': 4773.0, 'constraints_binary': 112691.0, 'constraints_ternary': 22667.0, 'acyc_edges': 0.0, 'complexity': 140819.0}}, 'solving': {'solvers': {'choices': 5855.0, 'conflicts': 995.0, 'conflicts_analyzed': 984.0, 'restarts': 5.0, 'restarts_last': 144.0, 'extra': {'domain_choices': 2221.0, 'models': 2.0, 'models_level': 1208.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 797.0, 'distributed_sum_lbd': 2389.0, 'integrated': 4793.0, 'lemmas': 7515.0, 'lits_learnt': 274058.0, 'lemmas_binary': 336.0, 'lemmas_ternary': 320.0, 'cpu_time': 1.375, 'integrated_imps': 1155.0, 'integrated_jumps': 1671.0, 'guiding_paths_lits': 2681.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 981.0, 'lemmas_loop': 1992.0, 'lemmas_other': 4542.0, 'lits_conflict': 50262.0, 'lits_loop': 16472.0, 'lits_other': 207324.0, 'jumps': {'jumps': 984.0, 'jumps_bounded': 10.0, 'levels': 2205.0, 'levels_bounded': 510.0, 'max': 201.0, 'max_executed': 201.0, 'max_bounded': 198.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [40.0, 0.0], 'lower': [40.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.6448497772216797, 'cpu': 1.609375, 'solve': 0.4164142608642578, 'unsat': 0.016969680786132812, 'sat': 0.08927536010742188}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.490501403808594, 'cpu': 9.328125, 'solve': 1.1647357940673828, 'unsat': 0.2693595886230469, 'sat': 0.2720146179199219}, 'models': {'enumerated': 36.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 34735.0, 'conflicts': 4253.0, 'conflicts_analyzed': 3979.0, 'restarts': 11.0, 'restarts_last': 144.0, 'extra': {'domain_choices': 6662.0, 'models': 36.0, 'models_level': 13308.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3481.0, 'distributed_sum_lbd': 9388.0, 'integrated': 19694.0, 'lemmas': 28857.0, 'lits_learnt': 882885.0, 'lemmas_binary': 2284.0, 'lemmas_ternary': 1023.0, 'cpu_time': 4.078125, 'integrated_imps': 5840.0, 'integrated_jumps': 8042.0, 'guiding_paths_lits': 38012.0, 'guiding_paths': 372.0, 'splits': 0.0, 'lemmas_conflict': 3883.0, 'lemmas_loop': 7031.0, 'lemmas_other': 17943.0, 'lits_conflict': 157151.0, 'lits_loop': 56068.0, 'lits_other': 669666.0, 'jumps': {'jumps': 3979.0, 'jumps_bounded': 492.0, 'levels': 38203.0, 'levels_bounded': 31167.0, 'max': 740.0, 'max_executed': 740.0, 'max_bounded': 739.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28, 14: 30}

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.152092s, Solving = 0.009376s, Total = 0.161468s, Memory = (RSS = 128.015625Mb, VMS = 115.976562Mb)
2 : Statistics :: Grounding = 0.129630s, Solving = 0.004446s, Total = 0.134076s, Memory = (RSS = 130.238281Mb, VMS = 119.101562Mb)
3 : Statistics :: Grounding = 0.121620s, Solving = 0.005010s, Total = 0.126630s, Memory = (RSS = 131.343750Mb, VMS = 119.800781Mb)
4 : Statistics :: Grounding = 0.130833s, Solving = 0.007122s, Total = 0.137955s, Memory = (RSS = 133.687500Mb, VMS = 122.574219Mb)
5 : Statistics :: Grounding = 0.153548s, Solving = 0.012859s, Total = 0.166407s, Memory = (RSS = 138.242188Mb, VMS = 127.957031Mb)
6 : Statistics :: Grounding = 0.129275s, Solving = 0.008386s, Total = 0.137662s, Memory = (RSS = 139.820312Mb, VMS = 128.578125Mb)
7 : Statistics :: Grounding = 0.129191s, Solving = 0.047297s, Total = 0.176488s, Memory = (RSS = 144.015625Mb, VMS = 131.996094Mb)
8 : Statistics :: Grounding = 0.162731s, Solving = 0.010109s, Total = 0.172840s, Memory = (RSS = 146.691406Mb, VMS = 135.250000Mb)
9 : Statistics :: Grounding = 0.137332s, Solving = 0.024551s, Total = 0.161883s, Memory = (RSS = 149.855469Mb, VMS = 137.851562Mb)
10 : Statistics :: Grounding = 0.154446s, Solving = 0.013836s, Total = 0.168282s, Memory = (RSS = 154.214844Mb, VMS = 143.257812Mb)
11 : Statistics :: Grounding = 0.153154s, Solving = 0.016243s, Total = 0.169397s, Memory = (RSS = 157.468750Mb, VMS = 145.980469Mb)
12 : Statistics :: Grounding = 0.159390s, Solving = 0.033526s, Total = 0.192916s, Memory = (RSS = 162.460938Mb, VMS = 150.191406Mb)
13 : Statistics :: Grounding = 0.169884s, Solving = 0.019355s, Total = 0.189238s, Memory = (RSS = 169.136719Mb, VMS = 158.558594Mb)
14 : Statistics :: Grounding = 0.158165s, Solving = 0.067575s, Total = 0.225740s, Memory = (RSS = 177.402344Mb, VMS = 166.640625Mb)
15 : Statistics :: Grounding = 0.150119s, Solving = 0.051813s, Total = 0.201933s, Memory = (RSS = 184.714844Mb, VMS = 173.699219Mb)
16 : Statistics :: Grounding = 0.168785s, Solving = 0.030430s, Total = 0.199215s, Memory = (RSS = 193.785156Mb, VMS = 186.042969Mb)
17 : Statistics :: Grounding = 0.168742s, Solving = 0.097158s, Total = 0.265900s, Memory = (RSS = 197.882812Mb, VMS = 189.527344Mb)
18 : Statistics :: Grounding = 0.221169s, Solving = 0.033866s, Total = 0.255035s, Memory = (RSS = 202.136719Mb, VMS = 192.781250Mb)
19 : Statistics :: Grounding = 0.183331s, Solving = 0.060680s, Total = 0.244011s, Memory = (RSS = 468.898438Mb, VMS = 476.242188Mb)
20 : Statistics :: Grounding = 0.124100s, Solving = 0.066227s, Total = 0.190327s, Memory = (RSS = 475.378906Mb, VMS = 482.351562Mb)
21 : Statistics :: Grounding = 0.137142s, Solving = 0.072087s, Total = 0.209230s, Memory = (RSS = 482.378906Mb, VMS = 488.722656Mb)
22 : Statistics :: Grounding = 0.145644s, Solving = 0.017465s, Total = 0.163109s, Memory = (RSS = 483.566406Mb, VMS = 489.265625Mb)
23 : Statistics :: Grounding = 0.160523s, Solving = 0.043353s, Total = 0.203876s, Memory = (RSS = 492.378906Mb, VMS = 506.320312Mb)
24 : Statistics :: Grounding = 0.160269s, Solving = 0.019120s, Total = 0.179390s, Memory = (RSS = 494.167969Mb, VMS = 506.875000Mb)
25 : Statistics :: Grounding = 0.162461s, Solving = 0.078447s, Total = 0.240909s, Memory = (RSS = 501.144531Mb, VMS = 512.671875Mb)
26 : Statistics :: Grounding = 0.162079s, Solving = 0.020797s, Total = 0.182877s, Memory = (RSS = 502.585938Mb, VMS = 513.175781Mb)
27 : Statistics :: Grounding = 0.193454s, Solving = 0.044796s, Total = 0.238250s, Memory = (RSS = 504.855469Mb, VMS = 514.289062Mb)
28 : Statistics :: Grounding = 0.177313s, Solving = 0.144652s, Total = 0.321965s, Memory = (RSS = 512.242188Mb, VMS = 520.757812Mb)
29 : Statistics :: Grounding = 0.214990s, Solving = 0.027621s, Total = 0.242611s, Memory = (RSS = 514.988281Mb, VMS = 522.316406Mb)
30 : Statistics :: Grounding = 0.202998s, Solving = 0.435199s, Total = 0.638197s, Memory = (RSS = 520.007812Mb, VMS = 526.324219Mb)

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.297816s due to: External generator exit.

[15-11-2021_14-29-48] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.774411s, Solving = 1.523404s, Total = 6.297816s, Memory = (RSS = 520.007812Mb, VMS = 526.324219Mb)), Calls = 30
Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 30 :: Actions = 49                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,retracted)
        talos : lift(manipulator_arm_2,(block,1))
        talos : release(manipulator_arm_1,(block,2))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : lift(manipulator_arm_2,(block,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 29:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
        talos : put(manipulator_arm_2,(block,1),(block,2))

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, total_plan_length=30, step_range=range(17, 31)

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 35, Actions = 44
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.330s (Gro =   4.801s, Sea =   1.529s), Expan (1.86, 1.91) (Dev = (0.90, 1.07), Bal = (0.48, 0.56))

[15-11-2021_14-29-49] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=17, blend=Blend(left=0, right=0.2)

[15-11-2021_14-29-49] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[15-11-2021_14-29-49] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=23, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.330s (Gro =   4.801s, Sea =   1.529s), Expan (1.86, 1.91) (Dev = (0.90, 1.07), Bal = (0.48, 0.56))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.330s (Gro =   4.801s, Sea =   1.529s), Expan (1.86, 1.91) (Dev = (0.90, 1.07), Bal = (0.48, 0.56))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-24]

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-24], problem number = 3, increment number = 3

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 24)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 24
start_step = 35
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 41

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-24] : Minimum search length bound = disabled with value = 41

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_2,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_2,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 24})

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 18).
sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 18).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 19).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 20).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 20).
sub_goal(2, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 20).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 20).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21).
sub_goal(2, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 21).
sub_goal(2, talos, move(hallway), in(talos), hallway, 22).
sub_goal(2, talos, move(store_room), in(talos), store_room, 23).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 24).

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002940E619630>

[15-11-2021_14-29-49] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_14-29-49] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000002940E619630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 31)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,3)), 34)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,5)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,3),puzzle_room_table_left), 35)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_14-29-49] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000002940E619630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,3), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,3), 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_14-29-49] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 35)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002940E619630>)

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None)

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297837s.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(18,36).

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049025s with result Unsatisfiable.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3468617999999992, Incremental time limit = None
Running cumulative time = 13.750083699999998, Cumulative time limit = 3600
Used memory = (RSS = 436.625000Mb, VMS = 443.324219Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=36, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.202023500000003, solving_time=3.548060199999995, total_time=13.750083699999998, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(0, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2978372000000036, solving_time=0.049024599999995644, total_time=0.3468617999999992, memory=Memory(rss=436.625, vms=443.32421875), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 143527.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 445918.0, 'bodies_tr': 445918.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7296.0, 'count_bodies_tr': 7296.0, 'sccs': 859.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18539.0, 'rules': 641147.0, 'rules_normal': 633275.0, 'rules_choice': 7368.0, 'rules_minimize': 72.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 641066.0, 'rules_tr_normal': 633275.0, 'rules_tr_choice': 7368.0, 'rules_tr_minimize': 72.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 351.0, 'eqs': 335103.0, 'eqs_atom': 67907.0, 'eqs_body': 8204.0, 'eqs_other': 258992.0}, 'lpStep': {'atoms': 6674.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12875.0, 'bodies_tr': 12875.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 22960.0, 'rules_normal': 22751.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22959.0, 'rules_tr_normal': 22751.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 9983.0, 'eqs_atom': 2227.0, 'eqs_body': 546.0, 'eqs_other': 7210.0}, 'generator': {'vars': 81328.0, 'vars_eliminated': 0.0, 'vars_frozen': 49696.0, 'constraints': 708.0, 'constraints_binary': 64379.0, 'constraints_ternary': 3384.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 527.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 36.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.5140743255615234, 'cpu': 0.515625, 'solve': 0.010972976684570312, 'unsat': 0.010972976684570312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.252216339111328, 'cpu': 21.28125, 'solve': 2.7710189819335938, 'unsat': 1.0556659698486328, 'sat': 0.5743999481201172}, 'models': {'enumerated': 59.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 60475.0, 'conflicts': 7293.0, 'conflicts_analyzed': 6884.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6173.0, 'models': 59.0, 'models_level': 24387.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5546.0, 'distributed_sum_lbd': 13089.0, 'integrated': 31952.0, 'lemmas': 46138.0, 'lits_learnt': 3003972.0, 'lemmas_binary': 3980.0, 'lemmas_ternary': 2316.0, 'cpu_time': 9.96875, 'integrated_imps': 11575.0, 'integrated_jumps': 11022.0, 'guiding_paths_lits': 54796.0, 'guiding_paths': 508.0, 'splits': 0.0, 'lemmas_conflict': 6740.0, 'lemmas_loop': 10399.0, 'lemmas_other': 28999.0, 'lits_conflict': 621146.0, 'lits_loop': 88205.0, 'lits_other': 2294621.0, 'jumps': {'jumps': 6884.0, 'jumps_bounded': 1125.0, 'levels': 149467.0, 'levels_bounded': 136742.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193886s.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.094880s with result Satisfiable.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28876590000000135, Incremental time limit = None
Running cumulative time = 14.038849599999999, Cumulative time limit = 3600
Used memory = (RSS = 444.679688Mb, VMS = 451.125000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 61
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.395910s, Solving = 3.642940s, Total = 14.038850s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)), Calls = 37
Final Model :: Total atoms = 23535, Cost = (42, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=37, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.395909800000005, solving_time=3.6429397999999935, total_time=14.038849599999999, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(0, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19388630000000262, solving_time=0.09487959999999873, total_time=0.28876590000000135, memory=Memory(rss=444.6796875, vms=451.125), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 145749.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 456346.0, 'bodies_tr': 456346.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7497.0, 'count_bodies_tr': 7497.0, 'sccs': 861.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18576.0, 'rules': 657642.0, 'rules_normal': 649561.0, 'rules_choice': 7563.0, 'rules_minimize': 74.0, 'rules_acyc': 0.0, 'rules_heuristic': 444.0, 'rules_tr': 657550.0, 'rules_tr_normal': 649561.0, 'rules_tr_choice': 7563.0, 'rules_tr_minimize': 74.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 352.0, 'eqs': 340545.0, 'eqs_atom': 68676.0, 'eqs_body': 8657.0, 'eqs_other': 263212.0}, 'lpStep': {'atoms': 2222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10428.0, 'bodies_tr': 10428.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 16495.0, 'rules_normal': 16286.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16484.0, 'rules_tr_normal': 16286.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5442.0, 'eqs_atom': 769.0, 'eqs_body': 453.0, 'eqs_other': 4220.0}, 'generator': {'vars': 81811.0, 'vars_eliminated': 0.0, 'vars_frozen': 50041.0, 'constraints': 786.0, 'constraints_binary': 69216.0, 'constraints_ternary': 3905.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 6763.0, 'conflicts': 54.0, 'conflicts_analyzed': 53.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 161.0, 'models': 2.0, 'models_level': 1687.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 51.0, 'distributed_sum_lbd': 55.0, 'integrated': 155.0, 'lemmas': 206.0, 'lits_learnt': 263.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.140625, 'integrated_imps': 146.0, 'integrated_jumps': 1788.0, 'guiding_paths_lits': 4424.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 50.0, 'lemmas_loop': 1.0, 'lemmas_other': 155.0, 'lits_conflict': 57.0, 'lits_loop': 2.0, 'lits_other': 204.0, 'jumps': {'jumps': 53.0, 'jumps_bounded': 19.0, 'levels': 9425.0, 'levels_bounded': 7269.0, 'max': 817.0, 'max_executed': 263.0, 'max_bounded': 619.0}}}}, 'summary': {'call': 37.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [42.0, 0.0], 'lower': [42.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.29620933532714844, 'cpu': 0.359375, 'solve': 0.06781959533691406, 'unsat': 0.0329132080078125, 'sat': 0.005985260009765625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.548425674438477, 'cpu': 21.640625, 'solve': 2.838838577270508, 'unsat': 1.0885791778564453, 'sat': 0.5803852081298828}, 'models': {'enumerated': 61.0, 'optimal': 18.0}, 'solving': {'solvers': {'choices': 67238.0, 'conflicts': 7347.0, 'conflicts_analyzed': 6937.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6334.0, 'models': 61.0, 'models_level': 26074.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5597.0, 'distributed_sum_lbd': 13144.0, 'integrated': 32107.0, 'lemmas': 46344.0, 'lits_learnt': 3004235.0, 'lemmas_binary': 3981.0, 'lemmas_ternary': 2332.0, 'cpu_time': 10.109375, 'integrated_imps': 11721.0, 'integrated_jumps': 12810.0, 'guiding_paths_lits': 59220.0, 'guiding_paths': 516.0, 'splits': 0.0, 'lemmas_conflict': 6790.0, 'lemmas_loop': 10400.0, 'lemmas_other': 29154.0, 'lits_conflict': 621203.0, 'lits_loop': 88207.0, 'lits_other': 2294825.0, 'jumps': {'jumps': 6937.0, 'jumps_bounded': 1144.0, 'levels': 158892.0, 'levels_bounded': 144011.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37}

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None)

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 37]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 19)
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 19)

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206858s.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(19,37).

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.097280s with result Satisfiable.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.30413850000000053, Incremental time limit = None
Running cumulative time = 14.3429881, Cumulative time limit = 3600
Used memory = (RSS = 451.183594Mb, VMS = 456.800781Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 63
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.602768s, Solving = 3.740220s, Total = 14.342988s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)), Calls = 38
Final Model :: Total atoms = 23929, Cost = (45, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=38, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.602768200000007, solving_time=3.7402198999999925, total_time=14.3429881, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(0, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20685840000000155, solving_time=0.09728009999999898, total_time=0.30413850000000053, memory=Memory(rss=451.18359375, vms=456.80078125), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 148148.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 466925.0, 'bodies_tr': 466925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7698.0, 'count_bodies_tr': 7698.0, 'sccs': 884.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18882.0, 'rules': 674658.0, 'rules_normal': 666368.0, 'rules_choice': 7758.0, 'rules_minimize': 76.0, 'rules_acyc': 0.0, 'rules_heuristic': 456.0, 'rules_tr': 674559.0, 'rules_tr_normal': 666368.0, 'rules_tr_choice': 7758.0, 'rules_tr_minimize': 76.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 357.0, 'eqs': 346826.0, 'eqs_atom': 69366.0, 'eqs_body': 8986.0, 'eqs_other': 268474.0}, 'lpStep': {'atoms': 2399.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10579.0, 'bodies_tr': 10579.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 306.0, 'rules': 17016.0, 'rules_normal': 16807.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17009.0, 'rules_tr_normal': 16807.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 6281.0, 'eqs_atom': 690.0, 'eqs_body': 329.0, 'eqs_other': 5262.0}, 'generator': {'vars': 83014.0, 'vars_eliminated': 0.0, 'vars_frozen': 50842.0, 'constraints': 951.0, 'constraints_binary': 73728.0, 'constraints_ternary': 3664.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 3162.0, 'conflicts': 26.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 20.0, 'models': 2.0, 'models_level': 1740.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 43.0, 'integrated': 35.0, 'lemmas': 61.0, 'lits_learnt': 178.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4053.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 36.0, 'lemmas_other': 0.0, 'lits_conflict': 25.0, 'lits_loop': 153.0, 'lits_other': 0.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 0.0, 'levels': 25.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 38.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [45.0, 0.0], 'lower': [45.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3101692199707031, 'cpu': 0.375, 'solve': 0.06682205200195312, 'unsat': 0.033908843994140625, 'sat': 0.0049896240234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.85859489440918, 'cpu': 22.015625, 'solve': 2.905660629272461, 'unsat': 1.122488021850586, 'sat': 0.5853748321533203}, 'models': {'enumerated': 63.0, 'optimal': 19.0}, 'solving': {'solvers': {'choices': 70400.0, 'conflicts': 7373.0, 'conflicts_analyzed': 6962.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6354.0, 'models': 63.0, 'models_level': 27814.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5631.0, 'distributed_sum_lbd': 13187.0, 'integrated': 32142.0, 'lemmas': 46405.0, 'lits_learnt': 3004413.0, 'lemmas_binary': 3990.0, 'lemmas_ternary': 2332.0, 'cpu_time': 10.234375, 'integrated_imps': 11721.0, 'integrated_jumps': 12810.0, 'guiding_paths_lits': 63273.0, 'guiding_paths': 523.0, 'splits': 0.0, 'lemmas_conflict': 6815.0, 'lemmas_loop': 10436.0, 'lemmas_other': 29154.0, 'lits_conflict': 621228.0, 'lits_loop': 88360.0, 'lits_other': 2294825.0, 'jumps': {'jumps': 6962.0, 'jumps_bounded': 1144.0, 'levels': 158917.0, 'levels_bounded': 144011.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38}

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None)

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 38]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 20)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 20)
sub_goal(2, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 20)
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 20)

[15-11-2021_14-29-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261666s.

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(20,38).

[15-11-2021_14-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075164s with result Satisfiable.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.33682950000000034, Incremental time limit = None
Running cumulative time = 14.6798176, Cumulative time limit = 3600
Used memory = (RSS = 455.613281Mb, VMS = 460.480469Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 64
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.864434s, Solving = 3.815384s, Total = 14.679818s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)), Calls = 39
Final Model :: Total atoms = 24326, Cost = (48, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=39, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.864433800000008, solving_time=3.815383799999992, total_time=14.6798176, memory=Memory(rss=462.50390625, vms=470.52734375), step_range=range(0, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2616656000000006, solving_time=0.07516389999999973, total_time=0.33682950000000034, memory=Memory(rss=455.61328125, vms=460.48046875), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 151530.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 478593.0, 'bodies_tr': 478593.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7899.0, 'count_bodies_tr': 7899.0, 'sccs': 907.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19201.0, 'rules': 693199.0, 'rules_normal': 684700.0, 'rules_choice': 7953.0, 'rules_minimize': 78.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 693096.0, 'rules_tr_normal': 684700.0, 'rules_tr_choice': 7953.0, 'rules_tr_minimize': 78.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 365.0, 'eqs': 358202.0, 'eqs_atom': 70258.0, 'eqs_body': 9267.0, 'eqs_other': 278677.0}, 'lpStep': {'atoms': 3382.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11668.0, 'bodies_tr': 11668.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 18541.0, 'rules_normal': 18332.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18537.0, 'rules_tr_normal': 18332.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 11376.0, 'eqs_atom': 892.0, 'eqs_body': 281.0, 'eqs_other': 10203.0}, 'generator': {'vars': 84515.0, 'vars_eliminated': 0.0, 'vars_frozen': 51787.0, 'constraints': 1241.0, 'constraints_binary': 82477.0, 'constraints_ternary': 4862.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 1435.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 904.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 24.0, 'lemmas': 16.0, 'lits_learnt': 102.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3025.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 16.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 102.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 39.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [48.0, 0.0], 'lower': [48.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.3425941467285156, 'cpu': 0.34375, 'solve': 0.03191566467285156, 'unsat': 0.024932861328125, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.201189041137695, 'cpu': 22.359375, 'solve': 2.9375762939453125, 'unsat': 1.147420883178711, 'sat': 0.5923576354980469}, 'models': {'enumerated': 64.0, 'optimal': 20.0}, 'solving': {'solvers': {'choices': 71835.0, 'conflicts': 7374.0, 'conflicts_analyzed': 6962.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6354.0, 'models': 64.0, 'models_level': 28718.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5637.0, 'distributed_sum_lbd': 13199.0, 'integrated': 32166.0, 'lemmas': 46421.0, 'lits_learnt': 3004515.0, 'lemmas_binary': 3996.0, 'lemmas_ternary': 2332.0, 'cpu_time': 10.265625, 'integrated_imps': 11721.0, 'integrated_jumps': 12810.0, 'guiding_paths_lits': 66298.0, 'guiding_paths': 528.0, 'splits': 0.0, 'lemmas_conflict': 6815.0, 'lemmas_loop': 10452.0, 'lemmas_other': 29154.0, 'lits_conflict': 621228.0, 'lits_loop': 88462.0, 'lits_other': 2294825.0, 'jumps': {'jumps': 6962.0, 'jumps_bounded': 1144.0, 'levels': 158917.0, 'levels_bounded': 144011.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39}

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None)

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 39]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21)
sub_goal(2, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 21)

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.294284s.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(21,39).

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.087175s with result Satisfiable.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3814588999999913, Incremental time limit = None
Running cumulative time = 15.061276499999991, Cumulative time limit = 3600
Used memory = (RSS = 466.558594Mb, VMS = 471.757812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 66
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.158718s, Solving = 3.902559s, Total = 15.061276s, Memory = (RSS = 466.558594Mb, VMS = 471.757812Mb)), Calls = 40
Final Model :: Total atoms = 24720, Cost = (49, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=40, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.158717800000005, solving_time=3.902558699999986, total_time=15.061276499999991, memory=Memory(rss=466.55859375, vms=471.7578125), step_range=range(0, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29428399999999755, solving_time=0.08717489999999373, total_time=0.3814588999999913, memory=Memory(rss=466.55859375, vms=471.7578125), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 154946.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 490924.0, 'bodies_tr': 490924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8100.0, 'count_bodies_tr': 8100.0, 'sccs': 930.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19635.0, 'rules': 713515.0, 'rules_normal': 704807.0, 'rules_choice': 8148.0, 'rules_minimize': 80.0, 'rules_acyc': 0.0, 'rules_heuristic': 480.0, 'rules_tr': 713410.0, 'rules_tr_normal': 704807.0, 'rules_tr_choice': 8148.0, 'rules_tr_minimize': 80.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 375.0, 'eqs': 366380.0, 'eqs_atom': 71996.0, 'eqs_body': 9508.0, 'eqs_other': 284876.0}, 'lpStep': {'atoms': 3416.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12331.0, 'bodies_tr': 12331.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 20316.0, 'rules_normal': 20107.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 20314.0, 'rules_tr_normal': 20107.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8178.0, 'eqs_atom': 1738.0, 'eqs_body': 241.0, 'eqs_other': 6199.0}, 'generator': {'vars': 86550.0, 'vars_eliminated': 0.0, 'vars_frozen': 53037.0, 'constraints': 1724.0, 'constraints_binary': 96387.0, 'constraints_ternary': 7701.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 2808.0, 'conflicts': 4.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 20.0, 'models': 2.0, 'models_level': 1825.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 134.0, 'lits_learnt': 1012.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4417.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 130.0, 'lemmas_other': 0.0, 'lits_conflict': 4.0, 'lits_loop': 1008.0, 'lits_other': 0.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 0.0, 'levels': 4.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 40.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [49.0, 0.0], 'lower': [49.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3875102996826172, 'cpu': 0.5, 'solve': 0.05784416198730469, 'unsat': 0.027927398681640625, 'sat': 0.00698089599609375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.588699340820312, 'cpu': 22.859375, 'solve': 2.995420455932617, 'unsat': 1.1753482818603516, 'sat': 0.5993385314941406}, 'models': {'enumerated': 66.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 74643.0, 'conflicts': 7378.0, 'conflicts_analyzed': 6966.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6374.0, 'models': 66.0, 'models_level': 30543.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5641.0, 'distributed_sum_lbd': 13203.0, 'integrated': 32166.0, 'lemmas': 46555.0, 'lits_learnt': 3005527.0, 'lemmas_binary': 3996.0, 'lemmas_ternary': 2332.0, 'cpu_time': 10.4375, 'integrated_imps': 11721.0, 'integrated_jumps': 12810.0, 'guiding_paths_lits': 70715.0, 'guiding_paths': 535.0, 'splits': 0.0, 'lemmas_conflict': 6819.0, 'lemmas_loop': 10582.0, 'lemmas_other': 29154.0, 'lits_conflict': 621232.0, 'lits_loop': 89470.0, 'lits_other': 2294825.0, 'jumps': {'jumps': 6966.0, 'jumps_bounded': 1144.0, 'levels': 158921.0, 'levels_bounded': 144011.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40}

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None)

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 40]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 22)

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291197s.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(22,40).

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036719s with result Unsatisfiable.

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.32791549999999603, Incremental time limit = None
Running cumulative time = 15.389191999999987, Cumulative time limit = 3600
Used memory = (RSS = 468.527344Mb, VMS = 472.394531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=41, start_step=40, end_step=41, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=11.449914500000006, solving_time=3.9392774999999816, total_time=15.389191999999987, memory=Memory(rss=468.52734375, vms=472.39453125), step_range=range(0, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2911967000000004, solving_time=0.03671879999999561, total_time=0.32791549999999603, memory=Memory(rss=468.52734375, vms=472.39453125), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 158638.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 503938.0, 'bodies_tr': 503938.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8301.0, 'count_bodies_tr': 8301.0, 'sccs': 955.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20229.0, 'rules': 734965.0, 'rules_normal': 726048.0, 'rules_choice': 8343.0, 'rules_minimize': 82.0, 'rules_acyc': 0.0, 'rules_heuristic': 492.0, 'rules_tr': 734860.0, 'rules_tr_normal': 726048.0, 'rules_tr_choice': 8343.0, 'rules_tr_minimize': 82.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 387.0, 'eqs': 375302.0, 'eqs_atom': 73866.0, 'eqs_body': 9598.0, 'eqs_other': 291838.0}, 'lpStep': {'atoms': 3692.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13014.0, 'bodies_tr': 13014.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 21450.0, 'rules_normal': 21241.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21450.0, 'rules_tr_normal': 21241.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8922.0, 'eqs_atom': 1870.0, 'eqs_body': 90.0, 'eqs_other': 6962.0}, 'generator': {'vars': 89139.0, 'vars_eliminated': 0.0, 'vars_frozen': 54615.0, 'constraints': 2358.0, 'constraints_binary': 113293.0, 'constraints_ternary': 11559.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 108.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4599.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 108.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 41.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3341064453125, 'cpu': 0.296875, 'solve': 0.008975982666015625, 'unsat': 0.008975982666015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.922805786132812, 'cpu': 23.15625, 'solve': 3.004396438598633, 'unsat': 1.1843242645263672, 'sat': 0.5993385314941406}, 'models': {'enumerated': 66.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 74643.0, 'conflicts': 7385.0, 'conflicts_analyzed': 6966.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6374.0, 'models': 66.0, 'models_level': 30543.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5641.0, 'distributed_sum_lbd': 13203.0, 'integrated': 32166.0, 'lemmas': 46567.0, 'lits_learnt': 3005635.0, 'lemmas_binary': 3996.0, 'lemmas_ternary': 2332.0, 'cpu_time': 10.4375, 'integrated_imps': 11721.0, 'integrated_jumps': 12810.0, 'guiding_paths_lits': 75314.0, 'guiding_paths': 542.0, 'splits': 0.0, 'lemmas_conflict': 6819.0, 'lemmas_loop': 10594.0, 'lemmas_other': 29154.0, 'lits_conflict': 621232.0, 'lits_loop': 89578.0, 'lits_other': 2294825.0, 'jumps': {'jumps': 6966.0, 'jumps_bounded': 1144.0, 'levels': 158921.0, 'levels_bounded': 144011.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276583s.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.093981s with result Satisfiable.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37056399999999456, Incremental time limit = None
Running cumulative time = 15.759755999999982, Cumulative time limit = 3600
Used memory = (RSS = 475.859375Mb, VMS = 478.171875Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 67
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.726498s, Solving = 4.033258s, Total = 15.759756s, Memory = (RSS = 475.859375Mb, VMS = 478.171875Mb)), Calls = 42
Final Model :: Total atoms = 25504, Cost = (51, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=42, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.726497600000002, solving_time=4.03325839999998, total_time=15.759755999999982, memory=Memory(rss=475.859375, vms=478.171875), step_range=range(0, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2765830999999963, solving_time=0.09398089999999826, total_time=0.37056399999999456, memory=Memory(rss=475.859375, vms=478.171875), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 162369.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 517177.0, 'bodies_tr': 517177.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8502.0, 'count_bodies_tr': 8502.0, 'sccs': 980.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20823.0, 'rules': 756917.0, 'rules_normal': 747791.0, 'rules_choice': 8538.0, 'rules_minimize': 84.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 756812.0, 'rules_tr_normal': 747791.0, 'rules_tr_choice': 8538.0, 'rules_tr_minimize': 84.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 399.0, 'eqs': 384384.0, 'eqs_atom': 75720.0, 'eqs_body': 9666.0, 'eqs_other': 298998.0}, 'lpStep': {'atoms': 3731.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13239.0, 'bodies_tr': 13239.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 21952.0, 'rules_normal': 21743.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21952.0, 'rules_tr_normal': 21743.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9082.0, 'eqs_atom': 1854.0, 'eqs_body': 68.0, 'eqs_other': 7160.0}, 'generator': {'vars': 91801.0, 'vars_eliminated': 0.0, 'vars_frozen': 56226.0, 'constraints': 3011.0, 'constraints_binary': 131620.0, 'constraints_ternary': 15538.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 2692.0, 'conflicts': 236.0, 'conflicts_analyzed': 227.0, 'restarts': 0.0, 'restarts_last': 35.0, 'extra': {'domain_choices': 369.0, 'models': 1.0, 'models_level': 1007.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 216.0, 'distributed_sum_lbd': 554.0, 'integrated': 1279.0, 'lemmas': 1786.0, 'lits_learnt': 35566.0, 'lemmas_binary': 76.0, 'lemmas_ternary': 46.0, 'cpu_time': 0.265625, 'integrated_imps': 394.0, 'integrated_jumps': 215.0, 'guiding_paths_lits': 4781.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 222.0, 'lemmas_loop': 490.0, 'lemmas_other': 1074.0, 'lits_conflict': 6017.0, 'lits_loop': 3775.0, 'lits_other': 25774.0, 'jumps': {'jumps': 227.0, 'jumps_bounded': 36.0, 'levels': 6155.0, 'levels_bounded': 5895.0, 'max': 1073.0, 'max_executed': 1073.0, 'max_bounded': 1072.0}}}}, 'summary': {'call': 42.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [51.0, 0.0], 'lower': [51.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.37696266174316406, 'cpu': 0.59375, 'solve': 0.05684661865234375, 'unsat': 0.03689765930175781, 'sat': 0.019948959350585938}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.299768447875977, 'cpu': 23.75, 'solve': 3.0612430572509766, 'unsat': 1.221221923828125, 'sat': 0.6192874908447266}, 'models': {'enumerated': 67.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 77335.0, 'conflicts': 7621.0, 'conflicts_analyzed': 7193.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6743.0, 'models': 67.0, 'models_level': 31550.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5857.0, 'distributed_sum_lbd': 13757.0, 'integrated': 33445.0, 'lemmas': 48353.0, 'lits_learnt': 3041201.0, 'lemmas_binary': 4072.0, 'lemmas_ternary': 2378.0, 'cpu_time': 10.703125, 'integrated_imps': 12115.0, 'integrated_jumps': 13025.0, 'guiding_paths_lits': 80095.0, 'guiding_paths': 554.0, 'splits': 0.0, 'lemmas_conflict': 7041.0, 'lemmas_loop': 11084.0, 'lemmas_other': 30228.0, 'lits_conflict': 627249.0, 'lits_loop': 93353.0, 'lits_other': 2320599.0, 'jumps': {'jumps': 7193.0, 'jumps_bounded': 1180.0, 'levels': 165076.0, 'levels_bounded': 149906.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42}

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None)

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 42]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 23)

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [43]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(0)]), ('plan_module', [Number(43), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281816s.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(23,42).

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042744s with result Unsatisfiable.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [43]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3245599999999982, Incremental time limit = None
Running cumulative time = 16.08431599999998, Cumulative time limit = 3600
Used memory = (RSS = 478.949219Mb, VMS = 480.988281Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=43, start_step=42, end_step=43, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.0083141, solving_time=4.07600189999998, total_time=16.08431599999998, memory=Memory(rss=478.94921875, vms=480.98828125), step_range=range(0, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2818164999999979, solving_time=0.04274350000000027, total_time=0.3245599999999982, memory=Memory(rss=478.94921875, vms=480.98828125), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 166116.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 530459.0, 'bodies_tr': 530459.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8703.0, 'count_bodies_tr': 8703.0, 'sccs': 1005.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21417.0, 'rules': 779189.0, 'rules_normal': 769854.0, 'rules_choice': 8733.0, 'rules_minimize': 86.0, 'rules_acyc': 0.0, 'rules_heuristic': 516.0, 'rules_tr': 779084.0, 'rules_tr_normal': 769854.0, 'rules_tr_choice': 8733.0, 'rules_tr_minimize': 86.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 411.0, 'eqs': 393558.0, 'eqs_atom': 77585.0, 'eqs_body': 9735.0, 'eqs_other': 306238.0}, 'lpStep': {'atoms': 3747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13282.0, 'bodies_tr': 13282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22272.0, 'rules_normal': 22063.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22272.0, 'rules_tr_normal': 22063.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9174.0, 'eqs_atom': 1865.0, 'eqs_body': 69.0, 'eqs_other': 7240.0}, 'generator': {'vars': 94470.0, 'vars_eliminated': 0.0, 'vars_frozen': 57842.0, 'constraints': 3523.0, 'constraints_binary': 147455.0, 'constraints_ternary': 18711.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 9.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 79.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4254.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 77.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 43.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [43.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3331108093261719, 'cpu': 0.328125, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 16.63287925720215, 'cpu': 24.078125, 'solve': 3.072214126586914, 'unsat': 1.2321929931640625, 'sat': 0.6192874908447266}, 'models': {'enumerated': 67.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 77336.0, 'conflicts': 7630.0, 'conflicts_analyzed': 7194.0, 'restarts': 11.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 6744.0, 'models': 67.0, 'models_level': 31550.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5858.0, 'distributed_sum_lbd': 13759.0, 'integrated': 33445.0, 'lemmas': 48365.0, 'lits_learnt': 3041280.0, 'lemmas_binary': 4073.0, 'lemmas_ternary': 2378.0, 'cpu_time': 10.71875, 'integrated_imps': 12115.0, 'integrated_jumps': 13025.0, 'guiding_paths_lits': 84349.0, 'guiding_paths': 562.0, 'splits': 0.0, 'lemmas_conflict': 7042.0, 'lemmas_loop': 11095.0, 'lemmas_other': 30228.0, 'lits_conflict': 627251.0, 'lits_loop': 93430.0, 'lits_other': 2320599.0, 'jumps': {'jumps': 7194.0, 'jumps_bounded': 1181.0, 'levels': 165079.0, 'levels_bounded': 149908.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [44]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(0)]), ('plan_module', [Number(44), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276753s.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080923s with result Unsatisfiable.

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [44]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3576762999999943, Incremental time limit = None
Running cumulative time = 16.441992299999974, Cumulative time limit = 3600
Used memory = (RSS = 481.242188Mb, VMS = 481.066406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=44, start_step=43, end_step=44, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.285067599999998, solving_time=4.156924699999976, total_time=16.441992299999974, memory=Memory(rss=481.2421875, vms=481.06640625), step_range=range(0, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2767534999999981, solving_time=0.08092279999999619, total_time=0.3576762999999943, memory=Memory(rss=481.2421875, vms=481.06640625), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 169874.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 543778.0, 'bodies_tr': 543778.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8904.0, 'count_bodies_tr': 8904.0, 'sccs': 1030.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22011.0, 'rules': 801774.0, 'rules_normal': 792230.0, 'rules_choice': 8928.0, 'rules_minimize': 88.0, 'rules_acyc': 0.0, 'rules_heuristic': 528.0, 'rules_tr': 801669.0, 'rules_tr_normal': 792230.0, 'rules_tr_choice': 8928.0, 'rules_tr_minimize': 88.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 423.0, 'eqs': 402813.0, 'eqs_atom': 79461.0, 'eqs_body': 9804.0, 'eqs_other': 313548.0}, 'lpStep': {'atoms': 3758.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13319.0, 'bodies_tr': 13319.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22585.0, 'rules_normal': 22376.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22585.0, 'rules_tr_normal': 22376.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9255.0, 'eqs_atom': 1876.0, 'eqs_body': 69.0, 'eqs_other': 7310.0}, 'generator': {'vars': 97141.0, 'vars_eliminated': 0.0, 'vars_frozen': 59458.0, 'constraints': 4177.0, 'constraints_binary': 166404.0, 'constraints_ternary': 22713.0, 'acyc_edges': 0.0, 'complexity': 212716.0}}, 'solving': {'solvers': {'choices': 783.0, 'conflicts': 412.0, 'conflicts_analyzed': 399.0, 'restarts': 1.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 670.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 346.0, 'distributed_sum_lbd': 981.0, 'integrated': 1950.0, 'lemmas': 3083.0, 'lits_learnt': 164900.0, 'lemmas_binary': 172.0, 'lemmas_ternary': 44.0, 'cpu_time': 0.21875, 'integrated_imps': 554.0, 'integrated_jumps': 273.0, 'guiding_paths_lits': 5145.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 383.0, 'lemmas_loop': 828.0, 'lemmas_other': 1872.0, 'lits_conflict': 26435.0, 'lits_loop': 7018.0, 'lits_other': 131447.0, 'jumps': {'jumps': 399.0, 'jumps_bounded': 43.0, 'levels': 5545.0, 'levels_bounded': 5038.0, 'max': 808.0, 'max_executed': 808.0, 'max_bounded': 804.0}}}}, 'summary': {'call': 44.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [49.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.36446571350097656, 'cpu': 0.53125, 'solve': 0.04886817932128906, 'unsat': 0.04886817932128906, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 16.997344970703125, 'cpu': 24.609375, 'solve': 3.121082305908203, 'unsat': 1.2810611724853516, 'sat': 0.6192874908447266}, 'models': {'enumerated': 67.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 78119.0, 'conflicts': 8042.0, 'conflicts_analyzed': 7593.0, 'restarts': 12.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 7414.0, 'models': 67.0, 'models_level': 31550.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6204.0, 'distributed_sum_lbd': 14740.0, 'integrated': 35395.0, 'lemmas': 51448.0, 'lits_learnt': 3206180.0, 'lemmas_binary': 4245.0, 'lemmas_ternary': 2422.0, 'cpu_time': 10.9375, 'integrated_imps': 12669.0, 'integrated_jumps': 13298.0, 'guiding_paths_lits': 89494.0, 'guiding_paths': 577.0, 'splits': 0.0, 'lemmas_conflict': 7425.0, 'lemmas_loop': 11923.0, 'lemmas_other': 32100.0, 'lits_conflict': 653686.0, 'lits_loop': 100448.0, 'lits_other': 2452046.0, 'jumps': {'jumps': 7593.0, 'jumps_bounded': 1224.0, 'levels': 170624.0, 'levels_bounded': 154946.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [45]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(0)]), ('plan_module', [Number(45), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325561s.

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.167557s with result Satisfiable.

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [45]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.49311819999999784, Incremental time limit = None
Running cumulative time = 16.935110499999972, Cumulative time limit = 3600
Used memory = (RSS = 493.777344Mb, VMS = 490.894531Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 69
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.610629s, Solving = 4.324482s, Total = 16.935110s, Memory = (RSS = 493.777344Mb, VMS = 490.894531Mb)), Calls = 45
Final Model :: Total atoms = 26683, Cost = (54, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=45, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.610628599999998, solving_time=4.324481899999974, total_time=16.935110499999972, memory=Memory(rss=493.77734375, vms=490.89453125), step_range=range(0, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32556100000000043, solving_time=0.1675571999999974, total_time=0.49311819999999784, memory=Memory(rss=493.77734375, vms=490.89453125), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 173643.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 557133.0, 'bodies_tr': 557133.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9105.0, 'count_bodies_tr': 9105.0, 'sccs': 1055.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22605.0, 'rules': 824671.0, 'rules_normal': 814918.0, 'rules_choice': 9123.0, 'rules_minimize': 90.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 824566.0, 'rules_tr_normal': 814918.0, 'rules_tr_choice': 9123.0, 'rules_tr_minimize': 90.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 435.0, 'eqs': 412151.0, 'eqs_atom': 81348.0, 'eqs_body': 9873.0, 'eqs_other': 320930.0}, 'lpStep': {'atoms': 3769.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13355.0, 'bodies_tr': 13355.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22897.0, 'rules_normal': 22688.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22897.0, 'rules_tr_normal': 22688.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9338.0, 'eqs_atom': 1887.0, 'eqs_body': 69.0, 'eqs_other': 7382.0}, 'generator': {'vars': 99812.0, 'vars_eliminated': 0.0, 'vars_frozen': 61074.0, 'constraints': 4805.0, 'constraints_binary': 184691.0, 'constraints_ternary': 26407.0, 'acyc_edges': 0.0, 'complexity': 216559.0}}, 'solving': {'solvers': {'choices': 4566.0, 'conflicts': 645.0, 'conflicts_analyzed': 632.0, 'restarts': 2.0, 'restarts_last': 121.0, 'extra': {'domain_choices': 1068.0, 'models': 2.0, 'models_level': 2263.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 543.0, 'distributed_sum_lbd': 1649.0, 'integrated': 3218.0, 'lemmas': 4399.0, 'lits_learnt': 183799.0, 'lemmas_binary': 411.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.671875, 'integrated_imps': 694.0, 'integrated_jumps': 521.0, 'guiding_paths_lits': 5327.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 629.0, 'lemmas_loop': 611.0, 'lemmas_other': 3159.0, 'lits_conflict': 32562.0, 'lits_loop': 5212.0, 'lits_other': 146025.0, 'jumps': {'jumps': 632.0, 'jumps_bounded': 19.0, 'levels': 2392.0, 'levels_bounded': 1515.0, 'max': 757.0, 'max_executed': 757.0, 'max_bounded': 756.0}}}}, 'summary': {'call': 45.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [54.0, 0.0], 'lower': [54.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.5011711120605469, 'cpu': 1.046875, 'solve': 0.13261795043945312, 'unsat': 0.04787445068359375, 'sat': 0.055820465087890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 17.498516082763672, 'cpu': 25.65625, 'solve': 3.2537002563476562, 'unsat': 1.3289356231689453, 'sat': 0.6751079559326172}, 'models': {'enumerated': 69.0, 'optimal': 23.0}, 'solving': {'solvers': {'choices': 82685.0, 'conflicts': 8687.0, 'conflicts_analyzed': 8225.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8482.0, 'models': 69.0, 'models_level': 33813.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6747.0, 'distributed_sum_lbd': 16389.0, 'integrated': 38613.0, 'lemmas': 55847.0, 'lits_learnt': 3389979.0, 'lemmas_binary': 4656.0, 'lemmas_ternary': 2478.0, 'cpu_time': 11.609375, 'integrated_imps': 13363.0, 'integrated_jumps': 13819.0, 'guiding_paths_lits': 94821.0, 'guiding_paths': 592.0, 'splits': 0.0, 'lemmas_conflict': 8054.0, 'lemmas_loop': 12534.0, 'lemmas_other': 35259.0, 'lits_conflict': 686248.0, 'lits_loop': 105660.0, 'lits_other': 2598071.0, 'jumps': {'jumps': 8225.0, 'jumps_bounded': 1243.0, 'levels': 173016.0, 'levels_bounded': 156461.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45}

[15-11-2021_14-29-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None)

[15-11-2021_14-29-53] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 45]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 24)

[15-11-2021_14-29-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [46]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(0)]), ('plan_module', [Number(46), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.303500s.

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(24,45).

[15-11-2021_14-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.371812s with result Satisfiable.

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [46]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6753126999999992, Incremental time limit = None
Running cumulative time = 17.61042319999997, Cumulative time limit = 3600
Used memory = (RSS = 500.187500Mb, VMS = 495.628906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 70
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.914129s, Solving = 4.696294s, Total = 17.610423s, Memory = (RSS = 500.187500Mb, VMS = 495.628906Mb)), Calls = 46
Final Model :: Total atoms = 27077, Cost = (55, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=46, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.914128999999996, solving_time=4.696294199999976, total_time=17.61042319999997, memory=Memory(rss=500.1875, vms=495.62890625), step_range=range(0, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30350039999999723, solving_time=0.371812300000002, total_time=0.6753126999999992, memory=Memory(rss=500.1875, vms=495.62890625), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 177423.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 570524.0, 'bodies_tr': 570524.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9306.0, 'count_bodies_tr': 9306.0, 'sccs': 1080.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23199.0, 'rules': 847880.0, 'rules_normal': 837918.0, 'rules_choice': 9318.0, 'rules_minimize': 92.0, 'rules_acyc': 0.0, 'rules_heuristic': 552.0, 'rules_tr': 847775.0, 'rules_tr_normal': 837918.0, 'rules_tr_choice': 9318.0, 'rules_tr_minimize': 92.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 447.0, 'eqs': 421572.0, 'eqs_atom': 83246.0, 'eqs_body': 9942.0, 'eqs_other': 328384.0}, 'lpStep': {'atoms': 3780.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13391.0, 'bodies_tr': 13391.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 23209.0, 'rules_normal': 23000.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23209.0, 'rules_tr_normal': 23000.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9421.0, 'eqs_atom': 1898.0, 'eqs_body': 69.0, 'eqs_other': 7454.0}, 'generator': {'vars': 102483.0, 'vars_eliminated': 0.0, 'vars_frozen': 62690.0, 'constraints': 5451.0, 'constraints_binary': 203631.0, 'constraints_ternary': 30268.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 1813.0, 'conflicts': 80.0, 'conflicts_analyzed': 71.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 56.0, 'models': 1.0, 'models_level': 1137.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 98.0, 'integrated': 40.0, 'lemmas': 682.0, 'lits_learnt': 8292.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.71875, 'integrated_imps': 5.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 5509.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 68.0, 'lemmas_loop': 575.0, 'lemmas_other': 39.0, 'lits_conflict': 1743.0, 'lits_loop': 4038.0, 'lits_other': 2511.0, 'jumps': {'jumps': 71.0, 'jumps_bounded': 5.0, 'levels': 305.0, 'levels_bounded': 212.0, 'max': 207.0, 'max_executed': 207.0, 'max_bounded': 206.0}}}}, 'summary': {'call': 46.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.6846828460693359, 'cpu': 1.078125, 'solve': 0.33162689208984375, 'unsat': 0.3176612854003906, 'sat': 0.013965606689453125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 18.183198928833008, 'cpu': 26.734375, 'solve': 3.5853271484375, 'unsat': 1.646596908569336, 'sat': 0.6890735626220703}, 'models': {'enumerated': 70.0, 'optimal': 24.0}, 'solving': {'solvers': {'choices': 84498.0, 'conflicts': 8767.0, 'conflicts_analyzed': 8296.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8538.0, 'models': 70.0, 'models_level': 34950.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6812.0, 'distributed_sum_lbd': 16487.0, 'integrated': 38653.0, 'lemmas': 56529.0, 'lits_learnt': 3398271.0, 'lemmas_binary': 4665.0, 'lemmas_ternary': 2479.0, 'cpu_time': 12.328125, 'integrated_imps': 13368.0, 'integrated_jumps': 13820.0, 'guiding_paths_lits': 100330.0, 'guiding_paths': 605.0, 'splits': 0.0, 'lemmas_conflict': 8122.0, 'lemmas_loop': 13109.0, 'lemmas_other': 35298.0, 'lits_conflict': 687991.0, 'lits_loop': 109698.0, 'lits_other': 2600582.0, 'jumps': {'jumps': 8296.0, 'jumps_bounded': 1248.0, 'levels': 173321.0, 'levels_bounded': 156673.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}

[15-11-2021_14-29-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[15-11-2021_14-29-54] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.320929s, Solving = 0.015452s, Total = 0.336381s, Memory = (RSS = 212.003906Mb, VMS = 202.894531Mb)
2 : Statistics :: Grounding = 0.175614s, Solving = 0.009681s, Total = 0.185295s, Memory = (RSS = 214.246094Mb, VMS = 205.445312Mb)
3 : Statistics :: Grounding = 0.211929s, Solving = 0.013539s, Total = 0.225468s, Memory = (RSS = 216.425781Mb, VMS = 207.214844Mb)
4 : Statistics :: Grounding = 0.226270s, Solving = 0.007810s, Total = 0.234081s, Memory = (RSS = 218.093750Mb, VMS = 208.757812Mb)
5 : Statistics :: Grounding = 0.287092s, Solving = 0.013891s, Total = 0.300983s, Memory = (RSS = 223.640625Mb, VMS = 214.406250Mb)
6 : Statistics :: Grounding = 0.237622s, Solving = 0.015869s, Total = 0.253491s, Memory = (RSS = 228.234375Mb, VMS = 219.531250Mb)
7 : Statistics :: Grounding = 0.280150s, Solving = 0.023723s, Total = 0.303873s, Memory = (RSS = 233.824219Mb, VMS = 225.972656Mb)
8 : Statistics :: Grounding = 0.260435s, Solving = 0.022920s, Total = 0.283356s, Memory = (RSS = 237.730469Mb, VMS = 229.355469Mb)
9 : Statistics :: Grounding = 0.311650s, Solving = 0.030099s, Total = 0.341748s, Memory = (RSS = 246.246094Mb, VMS = 239.625000Mb)
10 : Statistics :: Grounding = 0.273051s, Solving = 0.041654s, Total = 0.314705s, Memory = (RSS = 249.527344Mb, VMS = 242.167969Mb)
11 : Statistics :: Grounding = 0.282909s, Solving = 0.039055s, Total = 0.321964s, Memory = (RSS = 254.644531Mb, VMS = 246.617188Mb)
12 : Statistics :: Grounding = 0.283779s, Solving = 0.061689s, Total = 0.345469s, Memory = (RSS = 265.386719Mb, VMS = 259.906250Mb)
13 : Statistics :: Grounding = 0.281234s, Solving = 0.140028s, Total = 0.421262s, Memory = (RSS = 272.214844Mb, VMS = 265.632812Mb)
14 : Statistics :: Grounding = 0.280103s, Solving = 0.036070s, Total = 0.316173s, Memory = (RSS = 275.625000Mb, VMS = 268.222656Mb)
15 : Statistics :: Grounding = 0.280010s, Solving = 0.223928s, Total = 0.503939s, Memory = (RSS = 288.230469Mb, VMS = 287.820312Mb)
16 : Statistics :: Grounding = 0.291818s, Solving = 0.219741s, Total = 0.511559s, Memory = (RSS = 300.203125Mb, VMS = 298.757812Mb)
17 : Statistics :: Grounding = 0.292830s, Solving = 0.085270s, Total = 0.378100s, Memory = (RSS = 310.281250Mb, VMS = 307.460938Mb)
18 : Statistics :: Grounding = 0.280331s, Solving = 0.085265s, Total = 0.365597s, Memory = (RSS = 319.066406Mb, VMS = 315.121094Mb)
19 : Statistics :: Grounding = 0.278129s, Solving = 0.222639s, Total = 0.500768s, Memory = (RSS = 332.964844Mb, VMS = 328.191406Mb)
20 : Statistics :: Grounding = 0.317462s, Solving = 0.032903s, Total = 0.350366s, Memory = (RSS = 337.199219Mb, VMS = 330.933594Mb)
21 : Statistics :: Grounding = 0.321693s, Solving = 0.158161s, Total = 0.479854s, Memory = (RSS = 349.484375Mb, VMS = 354.128906Mb)
22 : Statistics :: Grounding = 0.360021s, Solving = 0.663608s, Total = 1.023629s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)
23 : Statistics :: Grounding = 0.307136s, Solving = 0.098233s, Total = 0.405369s, Memory = (RSS = 381.292969Mb, VMS = 383.453125Mb)
24 : Statistics :: Grounding = 0.307750s, Solving = 0.028331s, Total = 0.336081s, Memory = (RSS = 383.382812Mb, VMS = 385.437500Mb)
25 : Statistics :: Grounding = 0.236020s, Solving = 0.045234s, Total = 0.281254s, Memory = (RSS = 386.410156Mb, VMS = 387.585938Mb)
26 : Statistics :: Grounding = 0.248184s, Solving = 0.030282s, Total = 0.278466s, Memory = (RSS = 392.734375Mb, VMS = 393.152344Mb)
27 : Statistics :: Grounding = 0.298546s, Solving = 0.050038s, Total = 0.348584s, Memory = (RSS = 394.328125Mb, VMS = 393.394531Mb)
28 : Statistics :: Grounding = 0.297220s, Solving = 0.080520s, Total = 0.377739s, Memory = (RSS = 400.039062Mb, VMS = 397.855469Mb)
29 : Statistics :: Grounding = 0.326426s, Solving = 0.259185s, Total = 0.585611s, Memory = (RSS = 409.566406Mb, VMS = 406.289062Mb)
30 : Statistics :: Grounding = 0.264780s, Solving = 0.041351s, Total = 0.306131s, Memory = (RSS = 412.371094Mb, VMS = 408.160156Mb)
31 : Statistics :: Grounding = 0.267309s, Solving = 0.089459s, Total = 0.356768s, Memory = (RSS = 418.902344Mb, VMS = 413.523438Mb)
32 : Statistics :: Grounding = 0.297952s, Solving = 0.107168s, Total = 0.405120s, Memory = (RSS = 427.757812Mb, VMS = 421.433594Mb)
33 : Statistics :: Grounding = 0.306545s, Solving = 0.044396s, Total = 0.350941s, Memory = (RSS = 436.078125Mb, VMS = 447.652344Mb)
34 : Statistics :: Grounding = 0.285735s, Solving = 0.114871s, Total = 0.400606s, Memory = (RSS = 447.777344Mb, VMS = 457.507812Mb)
35 : Statistics :: Grounding = 0.325520s, Solving = 0.346973s, Total = 0.672493s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)
36 : Statistics :: Grounding = 0.297837s, Solving = 0.049025s, Total = 0.346862s, Memory = (RSS = 436.625000Mb, VMS = 443.324219Mb)
37 : Statistics :: Grounding = 0.193886s, Solving = 0.094880s, Total = 0.288766s, Memory = (RSS = 444.679688Mb, VMS = 451.125000Mb)
38 : Statistics :: Grounding = 0.206858s, Solving = 0.097280s, Total = 0.304139s, Memory = (RSS = 451.183594Mb, VMS = 456.800781Mb)
39 : Statistics :: Grounding = 0.261666s, Solving = 0.075164s, Total = 0.336830s, Memory = (RSS = 455.613281Mb, VMS = 460.480469Mb)
40 : Statistics :: Grounding = 0.294284s, Solving = 0.087175s, Total = 0.381459s, Memory = (RSS = 466.558594Mb, VMS = 471.757812Mb)
41 : Statistics :: Grounding = 0.291197s, Solving = 0.036719s, Total = 0.327915s, Memory = (RSS = 468.527344Mb, VMS = 472.394531Mb)
42 : Statistics :: Grounding = 0.276583s, Solving = 0.093981s, Total = 0.370564s, Memory = (RSS = 475.859375Mb, VMS = 478.171875Mb)
43 : Statistics :: Grounding = 0.281816s, Solving = 0.042744s, Total = 0.324560s, Memory = (RSS = 478.949219Mb, VMS = 480.988281Mb)
44 : Statistics :: Grounding = 0.276753s, Solving = 0.080923s, Total = 0.357676s, Memory = (RSS = 481.242188Mb, VMS = 481.066406Mb)
45 : Statistics :: Grounding = 0.325561s, Solving = 0.167557s, Total = 0.493118s, Memory = (RSS = 493.777344Mb, VMS = 490.894531Mb)
46 : Statistics :: Grounding = 0.303500s, Solving = 0.371812s, Total = 0.675313s, Memory = (RSS = 500.187500Mb, VMS = 495.628906Mb)

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 17.610423s due to: External generator exit.

[15-11-2021_14-29-54] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[15-11-2021_14-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.914129s, Solving = 4.696294s, Total = 17.610423s, Memory = (RSS = 500.187500Mb, VMS = 495.628906Mb)), Calls = 46
Model :: Total atoms = 27077, Cost = (55, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 46 :: Actions = 60                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : release(manipulator_end_1,(block,5))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
        talos : release(manipulator_end_2,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
        talos : grasp(manipulator_end_1,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 19] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 19] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 20] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 20] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 20] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 20] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 14 : Achieved sgoals = 14 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 30 : Achieved sgoals = 24 : Unachieved sgoals = 6

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.330s (Gro =   4.801s, Sea =   1.529s), Expan (1.86, 1.91) (Dev = (0.90, 1.07), Bal = (0.48, 0.56))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [24-30]

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [24-30], problem number = 4, increment number = 4

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 24)
	('last_sgoals', 30)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 24
last_sgoals = 30
start_step = 45
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 51

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [24-30] : Minimum search length bound = disabled with value = 51

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 30})

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 25).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 26).
sub_goal(2, talos, move(hallway), in(talos), hallway, 27).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 30).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 30).

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002940E619630>

[15-11-2021_14-29-55] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[15-11-2021_14-29-55] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000002940E619630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 31)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,3)), 34)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,5)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,2))), 36)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,3)), 36)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,1))), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,2)), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,1)), 38)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,2),(block,3)), 38)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 39)).
fix_action(occurs(1, talos, lift(manipulator_end_2,(block,1)), 39)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,2)), 39)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 40)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 41)).
fix_action(occurs(1, talos, move((hallway,2)), 42)).
fix_action(occurs(1, talos, move((hallway,1)), 43)).
fix_action(occurs(1, talos, move((hallway,0)), 44)).
fix_action(occurs(1, talos, move((store_room,1)), 45)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[15-11-2021_14-29-55] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000002940E619630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,3), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,3), 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,3), 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(1, complete(blue), false, 36)).
fix_fluent(holds(1, complete(red), false, 36)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 36)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 36)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 36)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 36)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(1, configuration(store_room_door), open, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 36)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 36)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 36)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,4)), nothing, 36)).
fix_fluent(holds(1, on((block,5)), (block,6), 36)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, tower_base((block,1)), true, 36)).
fix_fluent(holds(1, tower_base((block,2)), true, 36)).
fix_fluent(holds(1, tower_base((block,3)), true, 36)).
fix_fluent(holds(1, tower_base((block,4)), false, 36)).
fix_fluent(holds(1, tower_base((block,5)), false, 36)).
fix_fluent(holds(1, tower_base((block,6)), true, 36)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(2, complete(blue), false, 36)).
fix_fluent(holds(2, complete(red), false, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 36)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(2, configuration(store_room_door), open, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,4)), store_room, 36)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 36)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 36)).
fix_fluent(holds(2, in(talos), puzzle_room, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,4)), nothing, 36)).
fix_fluent(holds(2, on((block,5)), (block,6), 36)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 36)).
fix_fluent(holds(2, tower_base((block,1)), true, 36)).
fix_fluent(holds(2, tower_base((block,2)), true, 36)).
fix_fluent(holds(2, tower_base((block,3)), true, 36)).
fix_fluent(holds(2, tower_base((block,4)), false, 36)).
fix_fluent(holds(2, tower_base((block,5)), false, 36)).
fix_fluent(holds(2, tower_base((block,6)), true, 36)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(1, complete(blue), false, 37)).
fix_fluent(holds(1, complete(red), false, 37)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 37)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 37)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 37)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 37)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(1, configuration(store_room_door), open, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,2), 37)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,2), 37)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 37)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 37)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 37)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,4)), nothing, 37)).
fix_fluent(holds(1, on((block,5)), (block,6), 37)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, tower_base((block,1)), true, 37)).
fix_fluent(holds(1, tower_base((block,2)), true, 37)).
fix_fluent(holds(1, tower_base((block,3)), true, 37)).
fix_fluent(holds(1, tower_base((block,4)), false, 37)).
fix_fluent(holds(1, tower_base((block,5)), false, 37)).
fix_fluent(holds(1, tower_base((block,6)), true, 37)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(2, complete(blue), false, 37)).
fix_fluent(holds(2, complete(red), false, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 37)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(2, configuration(store_room_door), open, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,2), 37)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 37)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,4)), store_room, 37)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 37)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 37)).
fix_fluent(holds(2, in(talos), puzzle_room, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,4)), nothing, 37)).
fix_fluent(holds(2, on((block,5)), (block,6), 37)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 37)).
fix_fluent(holds(2, tower_base((block,1)), true, 37)).
fix_fluent(holds(2, tower_base((block,2)), true, 37)).
fix_fluent(holds(2, tower_base((block,3)), true, 37)).
fix_fluent(holds(2, tower_base((block,4)), false, 37)).
fix_fluent(holds(2, tower_base((block,5)), false, 37)).
fix_fluent(holds(2, tower_base((block,6)), true, 37)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(1, complete(blue), false, 38)).
fix_fluent(holds(1, complete(red), false, 38)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 38)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 38)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 38)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 38)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(1, configuration(store_room_door), open, 38)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,2), 38)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 38)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,2), 38)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 38)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 38)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 38)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,2)), (block,3), 38)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,4)), nothing, 38)).
fix_fluent(holds(1, on((block,5)), (block,6), 38)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 38)).
fix_fluent(holds(1, tower_base((block,1)), true, 38)).
fix_fluent(holds(1, tower_base((block,2)), false, 38)).
fix_fluent(holds(1, tower_base((block,3)), true, 38)).
fix_fluent(holds(1, tower_base((block,4)), false, 38)).
fix_fluent(holds(1, tower_base((block,5)), false, 38)).
fix_fluent(holds(1, tower_base((block,6)), true, 38)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(2, complete(blue), false, 38)).
fix_fluent(holds(2, complete(red), false, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 38)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(2, configuration(store_room_door), open, 38)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,2), 38)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 38)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,4)), store_room, 38)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 38)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 38)).
fix_fluent(holds(2, in(talos), puzzle_room, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,2)), (block,3), 38)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,4)), nothing, 38)).
fix_fluent(holds(2, on((block,5)), (block,6), 38)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 38)).
fix_fluent(holds(2, tower_base((block,1)), true, 38)).
fix_fluent(holds(2, tower_base((block,2)), false, 38)).
fix_fluent(holds(2, tower_base((block,3)), true, 38)).
fix_fluent(holds(2, tower_base((block,4)), false, 38)).
fix_fluent(holds(2, tower_base((block,5)), false, 38)).
fix_fluent(holds(2, tower_base((block,6)), true, 38)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(1, complete(blue), false, 39)).
fix_fluent(holds(1, complete(red), false, 39)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 39)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 39)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 39)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 39)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(1, configuration(store_room_door), open, 39)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 39)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 39)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 39)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 39)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 39)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(1, on((block,1)), nothing, 39)).
fix_fluent(holds(1, on((block,2)), (block,3), 39)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 39)).
fix_fluent(holds(1, on((block,4)), nothing, 39)).
fix_fluent(holds(1, on((block,5)), (block,6), 39)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 39)).
fix_fluent(holds(1, tower_base((block,1)), false, 39)).
fix_fluent(holds(1, tower_base((block,2)), false, 39)).
fix_fluent(holds(1, tower_base((block,3)), true, 39)).
fix_fluent(holds(1, tower_base((block,4)), false, 39)).
fix_fluent(holds(1, tower_base((block,5)), false, 39)).
fix_fluent(holds(1, tower_base((block,6)), true, 39)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(2, complete(blue), false, 39)).
fix_fluent(holds(2, complete(red), false, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 39)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(2, configuration(store_room_door), open, 39)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 39)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 39)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,4)), store_room, 39)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 39)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 39)).
fix_fluent(holds(2, in(talos), puzzle_room, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(2, on((block,1)), nothing, 39)).
fix_fluent(holds(2, on((block,2)), (block,3), 39)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 39)).
fix_fluent(holds(2, on((block,4)), nothing, 39)).
fix_fluent(holds(2, on((block,5)), (block,6), 39)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 39)).
fix_fluent(holds(2, tower_base((block,1)), false, 39)).
fix_fluent(holds(2, tower_base((block,2)), false, 39)).
fix_fluent(holds(2, tower_base((block,3)), true, 39)).
fix_fluent(holds(2, tower_base((block,4)), false, 39)).
fix_fluent(holds(2, tower_base((block,5)), false, 39)).
fix_fluent(holds(2, tower_base((block,6)), true, 39)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(1, complete(blue), false, 40)).
fix_fluent(holds(1, complete(red), false, 40)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 40)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 40)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 40)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 40)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(1, configuration(store_room_door), open, 40)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 40)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 40)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 40)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 40)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 40)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(1, on((block,1)), nothing, 40)).
fix_fluent(holds(1, on((block,2)), (block,3), 40)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 40)).
fix_fluent(holds(1, on((block,4)), nothing, 40)).
fix_fluent(holds(1, on((block,5)), (block,6), 40)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 40)).
fix_fluent(holds(1, tower_base((block,1)), false, 40)).
fix_fluent(holds(1, tower_base((block,2)), false, 40)).
fix_fluent(holds(1, tower_base((block,3)), true, 40)).
fix_fluent(holds(1, tower_base((block,4)), false, 40)).
fix_fluent(holds(1, tower_base((block,5)), false, 40)).
fix_fluent(holds(1, tower_base((block,6)), true, 40)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(2, complete(blue), false, 40)).
fix_fluent(holds(2, complete(red), false, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 40)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(2, configuration(store_room_door), open, 40)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 40)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 40)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,4)), store_room, 40)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 40)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 40)).
fix_fluent(holds(2, in(talos), puzzle_room, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(2, on((block,1)), nothing, 40)).
fix_fluent(holds(2, on((block,2)), (block,3), 40)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 40)).
fix_fluent(holds(2, on((block,4)), nothing, 40)).
fix_fluent(holds(2, on((block,5)), (block,6), 40)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 40)).
fix_fluent(holds(2, tower_base((block,1)), false, 40)).
fix_fluent(holds(2, tower_base((block,2)), false, 40)).
fix_fluent(holds(2, tower_base((block,3)), true, 40)).
fix_fluent(holds(2, tower_base((block,4)), false, 40)).
fix_fluent(holds(2, tower_base((block,5)), false, 40)).
fix_fluent(holds(2, tower_base((block,6)), true, 40)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(1, complete(blue), false, 41)).
fix_fluent(holds(1, complete(red), false, 41)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 41)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 41)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 41)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 41)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(1, configuration(store_room_door), open, 41)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 41)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 41)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 41)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,0), 41)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 41)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 41)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(1, on((block,1)), nothing, 41)).
fix_fluent(holds(1, on((block,2)), (block,3), 41)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 41)).
fix_fluent(holds(1, on((block,4)), nothing, 41)).
fix_fluent(holds(1, on((block,5)), (block,6), 41)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 41)).
fix_fluent(holds(1, tower_base((block,1)), false, 41)).
fix_fluent(holds(1, tower_base((block,2)), false, 41)).
fix_fluent(holds(1, tower_base((block,3)), true, 41)).
fix_fluent(holds(1, tower_base((block,4)), false, 41)).
fix_fluent(holds(1, tower_base((block,5)), false, 41)).
fix_fluent(holds(1, tower_base((block,6)), true, 41)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(2, complete(blue), false, 41)).
fix_fluent(holds(2, complete(red), false, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 41)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(2, configuration(store_room_door), open, 41)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 41)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 41)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,4)), store_room, 41)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 41)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 41)).
fix_fluent(holds(2, in(talos), puzzle_room, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(2, on((block,1)), nothing, 41)).
fix_fluent(holds(2, on((block,2)), (block,3), 41)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 41)).
fix_fluent(holds(2, on((block,4)), nothing, 41)).
fix_fluent(holds(2, on((block,5)), (block,6), 41)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 41)).
fix_fluent(holds(2, tower_base((block,1)), false, 41)).
fix_fluent(holds(2, tower_base((block,2)), false, 41)).
fix_fluent(holds(2, tower_base((block,3)), true, 41)).
fix_fluent(holds(2, tower_base((block,4)), false, 41)).
fix_fluent(holds(2, tower_base((block,5)), false, 41)).
fix_fluent(holds(2, tower_base((block,6)), true, 41)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(1, complete(blue), false, 42)).
fix_fluent(holds(1, complete(red), false, 42)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 42)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 42)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 42)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 42)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(1, configuration(store_room_door), open, 42)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 42)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 42)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 42)).
fix_fluent(holds(1, in((block,1)), (hallway,2), 42)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 42)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 42)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(talos), (hallway,2), 42)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(1, on((block,1)), nothing, 42)).
fix_fluent(holds(1, on((block,2)), (block,3), 42)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 42)).
fix_fluent(holds(1, on((block,4)), nothing, 42)).
fix_fluent(holds(1, on((block,5)), (block,6), 42)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 42)).
fix_fluent(holds(1, tower_base((block,1)), false, 42)).
fix_fluent(holds(1, tower_base((block,2)), false, 42)).
fix_fluent(holds(1, tower_base((block,3)), true, 42)).
fix_fluent(holds(1, tower_base((block,4)), false, 42)).
fix_fluent(holds(1, tower_base((block,5)), false, 42)).
fix_fluent(holds(1, tower_base((block,6)), true, 42)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(2, complete(blue), false, 42)).
fix_fluent(holds(2, complete(red), false, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 42)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(2, configuration(store_room_door), open, 42)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 42)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 42)).
fix_fluent(holds(2, in((block,1)), hallway, 42)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,4)), store_room, 42)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 42)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 42)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 42)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 42)).
fix_fluent(holds(2, in(talos), hallway, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(2, on((block,1)), nothing, 42)).
fix_fluent(holds(2, on((block,2)), (block,3), 42)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 42)).
fix_fluent(holds(2, on((block,4)), nothing, 42)).
fix_fluent(holds(2, on((block,5)), (block,6), 42)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 42)).
fix_fluent(holds(2, tower_base((block,1)), false, 42)).
fix_fluent(holds(2, tower_base((block,2)), false, 42)).
fix_fluent(holds(2, tower_base((block,3)), true, 42)).
fix_fluent(holds(2, tower_base((block,4)), false, 42)).
fix_fluent(holds(2, tower_base((block,5)), false, 42)).
fix_fluent(holds(2, tower_base((block,6)), true, 42)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(1, complete(blue), false, 43)).
fix_fluent(holds(1, complete(red), false, 43)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 43)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 43)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 43)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 43)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(1, configuration(store_room_door), open, 43)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 43)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 43)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 43)).
fix_fluent(holds(1, in((block,1)), (hallway,1), 43)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 43)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(talos), (hallway,1), 43)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(1, on((block,1)), nothing, 43)).
fix_fluent(holds(1, on((block,2)), (block,3), 43)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 43)).
fix_fluent(holds(1, on((block,4)), nothing, 43)).
fix_fluent(holds(1, on((block,5)), (block,6), 43)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 43)).
fix_fluent(holds(1, tower_base((block,1)), false, 43)).
fix_fluent(holds(1, tower_base((block,2)), false, 43)).
fix_fluent(holds(1, tower_base((block,3)), true, 43)).
fix_fluent(holds(1, tower_base((block,4)), false, 43)).
fix_fluent(holds(1, tower_base((block,5)), false, 43)).
fix_fluent(holds(1, tower_base((block,6)), true, 43)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(2, complete(blue), false, 43)).
fix_fluent(holds(2, complete(red), false, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 43)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(2, configuration(store_room_door), open, 43)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 43)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 43)).
fix_fluent(holds(2, in((block,1)), hallway, 43)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,4)), store_room, 43)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 43)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 43)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 43)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 43)).
fix_fluent(holds(2, in(talos), hallway, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(2, on((block,1)), nothing, 43)).
fix_fluent(holds(2, on((block,2)), (block,3), 43)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 43)).
fix_fluent(holds(2, on((block,4)), nothing, 43)).
fix_fluent(holds(2, on((block,5)), (block,6), 43)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 43)).
fix_fluent(holds(2, tower_base((block,1)), false, 43)).
fix_fluent(holds(2, tower_base((block,2)), false, 43)).
fix_fluent(holds(2, tower_base((block,3)), true, 43)).
fix_fluent(holds(2, tower_base((block,4)), false, 43)).
fix_fluent(holds(2, tower_base((block,5)), false, 43)).
fix_fluent(holds(2, tower_base((block,6)), true, 43)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(1, complete(blue), false, 44)).
fix_fluent(holds(1, complete(red), false, 44)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 44)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 44)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 44)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 44)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(1, configuration(store_room_door), open, 44)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 44)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 44)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 44)).
fix_fluent(holds(1, in((block,1)), (hallway,0), 44)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 44)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 44)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(talos), (hallway,0), 44)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(1, on((block,1)), nothing, 44)).
fix_fluent(holds(1, on((block,2)), (block,3), 44)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 44)).
fix_fluent(holds(1, on((block,4)), nothing, 44)).
fix_fluent(holds(1, on((block,5)), (block,6), 44)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 44)).
fix_fluent(holds(1, tower_base((block,1)), false, 44)).
fix_fluent(holds(1, tower_base((block,2)), false, 44)).
fix_fluent(holds(1, tower_base((block,3)), true, 44)).
fix_fluent(holds(1, tower_base((block,4)), false, 44)).
fix_fluent(holds(1, tower_base((block,5)), false, 44)).
fix_fluent(holds(1, tower_base((block,6)), true, 44)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(2, complete(blue), false, 44)).
fix_fluent(holds(2, complete(red), false, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 44)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(2, configuration(store_room_door), open, 44)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 44)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 44)).
fix_fluent(holds(2, in((block,1)), hallway, 44)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,4)), store_room, 44)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 44)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 44)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 44)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 44)).
fix_fluent(holds(2, in(talos), hallway, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(2, on((block,1)), nothing, 44)).
fix_fluent(holds(2, on((block,2)), (block,3), 44)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 44)).
fix_fluent(holds(2, on((block,4)), nothing, 44)).
fix_fluent(holds(2, on((block,5)), (block,6), 44)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 44)).
fix_fluent(holds(2, tower_base((block,1)), false, 44)).
fix_fluent(holds(2, tower_base((block,2)), false, 44)).
fix_fluent(holds(2, tower_base((block,3)), true, 44)).
fix_fluent(holds(2, tower_base((block,4)), false, 44)).
fix_fluent(holds(2, tower_base((block,5)), false, 44)).
fix_fluent(holds(2, tower_base((block,6)), true, 44)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(1, complete(blue), false, 45)).
fix_fluent(holds(1, complete(red), false, 45)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 45)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 45)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 45)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 45)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(1, configuration(store_room_door), open, 45)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 45)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 45)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,1), 45)).
fix_fluent(holds(1, in((block,1)), (store_room,1), 45)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 45)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(talos), (store_room,1), 45)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(1, on((block,1)), nothing, 45)).
fix_fluent(holds(1, on((block,2)), (block,3), 45)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 45)).
fix_fluent(holds(1, on((block,4)), nothing, 45)).
fix_fluent(holds(1, on((block,5)), (block,6), 45)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 45)).
fix_fluent(holds(1, tower_base((block,1)), false, 45)).
fix_fluent(holds(1, tower_base((block,2)), false, 45)).
fix_fluent(holds(1, tower_base((block,3)), true, 45)).
fix_fluent(holds(1, tower_base((block,4)), false, 45)).
fix_fluent(holds(1, tower_base((block,5)), false, 45)).
fix_fluent(holds(1, tower_base((block,6)), true, 45)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 45)).
fix_fluent(holds(2, complete(blue), false, 45)).
fix_fluent(holds(2, complete(red), false, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 45)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(2, configuration(store_room_door), open, 45)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 45)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,1), 45)).
fix_fluent(holds(2, in((block,1)), store_room, 45)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,4)), store_room, 45)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 45)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 45)).
fix_fluent(holds(2, in(talos), store_room, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(2, on((block,1)), nothing, 45)).
fix_fluent(holds(2, on((block,2)), (block,3), 45)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 45)).
fix_fluent(holds(2, on((block,4)), nothing, 45)).
fix_fluent(holds(2, on((block,5)), (block,6), 45)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 45)).
fix_fluent(holds(2, tower_base((block,1)), false, 45)).
fix_fluent(holds(2, tower_base((block,2)), false, 45)).
fix_fluent(holds(2, tower_base((block,3)), true, 45)).
fix_fluent(holds(2, tower_base((block,4)), false, 45)).
fix_fluent(holds(2, tower_base((block,5)), false, 45)).
fix_fluent(holds(2, tower_base((block,6)), true, 45)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 45)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[15-11-2021_14-29-55] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 45)
	('last_sgoals', 30)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002947DB37DB0>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002940E619630>)

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None)

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [47]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(0)]), ('plan_module', [Number(47), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299895s.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(25,46).

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.160309s with result Satisfiable.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [47]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.46020380000000216, Incremental time limit = None
Running cumulative time = 18.070626999999973, Cumulative time limit = 3600
Used memory = (RSS = 521.820312Mb, VMS = 516.316406Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 73
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.214024s, Solving = 4.856603s, Total = 18.070627s, Memory = (RSS = 521.820312Mb, VMS = 516.316406Mb)), Calls = 47
Final Model :: Total atoms = 29057, Cost = (55, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=47, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.214023599999997, solving_time=4.856603399999976, total_time=18.070626999999973, memory=Memory(rss=521.8203125, vms=516.31640625), step_range=range(0, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2998946000000018, solving_time=0.16030920000000037, total_time=0.46020380000000216, memory=Memory(rss=521.8203125, vms=516.31640625), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 183235.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 584378.0, 'bodies_tr': 584378.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9507.0, 'count_bodies_tr': 9507.0, 'sccs': 1105.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23793.0, 'rules': 874083.0, 'rules_normal': 863912.0, 'rules_choice': 9513.0, 'rules_minimize': 94.0, 'rules_acyc': 0.0, 'rules_heuristic': 564.0, 'rules_tr': 873978.0, 'rules_tr_normal': 863912.0, 'rules_tr_choice': 9513.0, 'rules_tr_minimize': 94.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 459.0, 'eqs': 432334.0, 'eqs_atom': 85568.0, 'eqs_body': 10423.0, 'eqs_other': 336343.0}, 'lpStep': {'atoms': 5812.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13854.0, 'bodies_tr': 13854.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26203.0, 'rules_normal': 25994.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26203.0, 'rules_tr_normal': 25994.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10762.0, 'eqs_atom': 2322.0, 'eqs_body': 481.0, 'eqs_other': 7959.0}, 'generator': {'vars': 105171.0, 'vars_eliminated': 0.0, 'vars_frozen': 64321.0, 'constraints': 1085.0, 'constraints_binary': 126949.0, 'constraints_ternary': 4096.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 5689.0, 'conflicts': 45.0, 'conflicts_analyzed': 42.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 20.0, 'models': 3.0, 'models_level': 3578.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 43.0, 'distributed_sum_lbd': 51.0, 'integrated': 250.0, 'lemmas': 334.0, 'lits_learnt': 1242.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.234375, 'integrated_imps': 208.0, 'integrated_jumps': 490.0, 'guiding_paths_lits': 5733.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 42.0, 'lemmas_loop': 44.0, 'lemmas_other': 248.0, 'lits_conflict': 407.0, 'lits_loop': 320.0, 'lits_other': 515.0, 'jumps': {'jumps': 42.0, 'jumps_bounded': 4.0, 'levels': 3030.0, 'levels_bounded': 2463.0, 'max': 978.0, 'max_executed': 978.0, 'max_bounded': 820.0}}}}, 'summary': {'call': 47.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.6967105865478516, 'cpu': 0.828125, 'solve': 0.11470222473144531, 'unsat': 0.03590583801269531, 'sat': 0.009975433349609375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 18.87990951538086, 'cpu': 27.5625, 'solve': 3.7000293731689453, 'unsat': 1.6825027465820312, 'sat': 0.6990489959716797}, 'models': {'enumerated': 73.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 90187.0, 'conflicts': 8812.0, 'conflicts_analyzed': 8338.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8558.0, 'models': 73.0, 'models_level': 38528.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6855.0, 'distributed_sum_lbd': 16538.0, 'integrated': 38903.0, 'lemmas': 56863.0, 'lits_learnt': 3399513.0, 'lemmas_binary': 4707.0, 'lemmas_ternary': 2479.0, 'cpu_time': 12.5625, 'integrated_imps': 13576.0, 'integrated_jumps': 14310.0, 'guiding_paths_lits': 106063.0, 'guiding_paths': 614.0, 'splits': 0.0, 'lemmas_conflict': 8164.0, 'lemmas_loop': 13153.0, 'lemmas_other': 35546.0, 'lits_conflict': 688398.0, 'lits_loop': 110018.0, 'lits_other': 2601097.0, 'jumps': {'jumps': 8338.0, 'jumps_bounded': 1252.0, 'levels': 176351.0, 'levels_bounded': 159136.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47}

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None)

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 47]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 26)

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [48]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(0)]), ('plan_module', [Number(48), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259715s.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(26,47).

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046607s with result Unsatisfiable.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [48]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30632260000000144, Incremental time limit = None
Running cumulative time = 18.376949599999975, Cumulative time limit = 3600
Used memory = (RSS = 521.332031Mb, VMS = 515.351562Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=48, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.473739099999996, solving_time=4.903210499999979, total_time=18.376949599999975, memory=Memory(rss=521.8203125, vms=516.31640625), step_range=range(0, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25971549999999866, solving_time=0.04660710000000279, total_time=0.30632260000000144, memory=Memory(rss=521.33203125, vms=515.3515625), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 186307.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 595036.0, 'bodies_tr': 595036.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9708.0, 'count_bodies_tr': 9708.0, 'sccs': 1118.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23986.0, 'rules': 894474.0, 'rules_normal': 884094.0, 'rules_choice': 9708.0, 'rules_minimize': 96.0, 'rules_acyc': 0.0, 'rules_heuristic': 576.0, 'rules_tr': 894357.0, 'rules_tr_normal': 884094.0, 'rules_tr_choice': 9708.0, 'rules_tr_minimize': 96.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 459.0, 'eqs': 439587.0, 'eqs_atom': 86650.0, 'eqs_body': 10860.0, 'eqs_other': 342077.0}, 'lpStep': {'atoms': 3072.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10658.0, 'bodies_tr': 10658.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 193.0, 'rules': 20391.0, 'rules_normal': 20182.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 20379.0, 'rules_tr_normal': 20182.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7253.0, 'eqs_atom': 1082.0, 'eqs_body': 437.0, 'eqs_other': 5734.0}, 'generator': {'vars': 105635.0, 'vars_eliminated': 0.0, 'vars_frozen': 64709.0, 'constraints': 1101.0, 'constraints_binary': 132782.0, 'constraints_ternary': 3545.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5106.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 48.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3166828155517578, 'cpu': 0.359375, 'solve': 0.0079803466796875, 'unsat': 0.0079803466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.196592330932617, 'cpu': 27.921875, 'solve': 3.708009719848633, 'unsat': 1.6904830932617188, 'sat': 0.6990489959716797}, 'models': {'enumerated': 73.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 90187.0, 'conflicts': 8819.0, 'conflicts_analyzed': 8338.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8558.0, 'models': 73.0, 'models_level': 38528.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6855.0, 'distributed_sum_lbd': 16538.0, 'integrated': 38903.0, 'lemmas': 56863.0, 'lits_learnt': 3399513.0, 'lemmas_binary': 4707.0, 'lemmas_ternary': 2479.0, 'cpu_time': 12.640625, 'integrated_imps': 13576.0, 'integrated_jumps': 14310.0, 'guiding_paths_lits': 111169.0, 'guiding_paths': 620.0, 'splits': 0.0, 'lemmas_conflict': 8164.0, 'lemmas_loop': 13153.0, 'lemmas_other': 35546.0, 'lits_conflict': 688398.0, 'lits_loop': 110018.0, 'lits_other': 2601097.0, 'jumps': {'jumps': 8338.0, 'jumps_bounded': 1252.0, 'levels': 176351.0, 'levels_bounded': 159136.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [49]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(0)]), ('plan_module', [Number(49), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267725s.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066784s with result Unsatisfiable.

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [49]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33450899999999706, Incremental time limit = None
Running cumulative time = 18.711458599999972, Cumulative time limit = 3600
Used memory = (RSS = 524.175781Mb, VMS = 547.125000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=49, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.741464399999991, solving_time=4.969994199999981, total_time=18.711458599999972, memory=Memory(rss=524.17578125, vms=547.125), step_range=range(0, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26772529999999506, solving_time=0.066783700000002, total_time=0.33450899999999706, memory=Memory(rss=524.17578125, vms=547.125), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 189333.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 606091.0, 'bodies_tr': 606091.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9909.0, 'count_bodies_tr': 9909.0, 'sccs': 1131.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24220.0, 'rules': 916203.0, 'rules_normal': 905614.0, 'rules_choice': 9903.0, 'rules_minimize': 98.0, 'rules_acyc': 0.0, 'rules_heuristic': 588.0, 'rules_tr': 916076.0, 'rules_tr_normal': 905614.0, 'rules_tr_choice': 9903.0, 'rules_tr_minimize': 98.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 461.0, 'eqs': 451729.0, 'eqs_atom': 88304.0, 'eqs_body': 11407.0, 'eqs_other': 352018.0}, 'lpStep': {'atoms': 3026.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11055.0, 'bodies_tr': 11055.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 21729.0, 'rules_normal': 21520.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21719.0, 'rules_tr_normal': 21520.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 12142.0, 'eqs_atom': 1654.0, 'eqs_body': 547.0, 'eqs_other': 9941.0}, 'generator': {'vars': 106454.0, 'vars_eliminated': 0.0, 'vars_frozen': 65291.0, 'constraints': 1292.0, 'constraints_binary': 143986.0, 'constraints_ternary': 4300.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.1875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5298.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 49.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3453388214111328, 'cpu': 0.515625, 'solve': 0.017213821411132812, 'unsat': 0.017213821411132812, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.54193115234375, 'cpu': 28.4375, 'solve': 3.7252235412597656, 'unsat': 1.7076969146728516, 'sat': 0.6990489959716797}, 'models': {'enumerated': 73.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 90187.0, 'conflicts': 8821.0, 'conflicts_analyzed': 8338.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8558.0, 'models': 73.0, 'models_level': 38528.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6855.0, 'distributed_sum_lbd': 16538.0, 'integrated': 38903.0, 'lemmas': 56863.0, 'lits_learnt': 3399513.0, 'lemmas_binary': 4707.0, 'lemmas_ternary': 2479.0, 'cpu_time': 12.828125, 'integrated_imps': 13576.0, 'integrated_jumps': 14310.0, 'guiding_paths_lits': 116467.0, 'guiding_paths': 626.0, 'splits': 0.0, 'lemmas_conflict': 8164.0, 'lemmas_loop': 13153.0, 'lemmas_other': 35546.0, 'lits_conflict': 688398.0, 'lits_loop': 110018.0, 'lits_other': 2601097.0, 'jumps': {'jumps': 8338.0, 'jumps_bounded': 1252.0, 'levels': 176351.0, 'levels_bounded': 159136.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [50]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(0)]), ('plan_module', [Number(50), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.272723s.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.129587s with result Satisfiable.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [50]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.40230940000000714, Incremental time limit = None
Running cumulative time = 19.11376799999998, Cumulative time limit = 3600
Used memory = (RSS = 536.558594Mb, VMS = 557.703125Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 75
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.014187s, Solving = 5.099581s, Total = 19.113768s, Memory = (RSS = 536.558594Mb, VMS = 557.703125Mb)), Calls = 50
Final Model :: Total atoms = 30246, Cost = (59, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=50, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.014187099999994, solving_time=5.099580899999985, total_time=19.11376799999998, memory=Memory(rss=536.55859375, vms=557.703125), step_range=range(0, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27272270000000276, solving_time=0.12958670000000438, total_time=0.40230940000000714, memory=Memory(rss=536.55859375, vms=557.703125), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 192533.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 617879.0, 'bodies_tr': 617879.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10110.0, 'count_bodies_tr': 10110.0, 'sccs': 1156.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24618.0, 'rules': 939188.0, 'rules_normal': 928390.0, 'rules_choice': 10098.0, 'rules_minimize': 100.0, 'rules_acyc': 0.0, 'rules_heuristic': 600.0, 'rules_tr': 939057.0, 'rules_tr_normal': 928390.0, 'rules_tr_choice': 10098.0, 'rules_tr_minimize': 100.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 469.0, 'eqs': 461791.0, 'eqs_atom': 89817.0, 'eqs_body': 11589.0, 'eqs_other': 360385.0}, 'lpStep': {'atoms': 3200.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11788.0, 'bodies_tr': 11788.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 22985.0, 'rules_normal': 22776.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22981.0, 'rules_tr_normal': 22776.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10062.0, 'eqs_atom': 1513.0, 'eqs_body': 182.0, 'eqs_other': 8367.0}, 'generator': {'vars': 108155.0, 'vars_eliminated': 0.0, 'vars_frozen': 66410.0, 'constraints': 1684.0, 'constraints_binary': 159967.0, 'constraints_ternary': 6248.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 4536.0, 'conflicts': 39.0, 'conflicts_analyzed': 35.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 29.0, 'models': 2.0, 'models_level': 2625.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 52.0, 'integrated': 36.0, 'lemmas': 228.0, 'lits_learnt': 1609.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.171875, 'integrated_imps': 23.0, 'integrated_jumps': 22.0, 'guiding_paths_lits': 6405.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 34.0, 'lemmas_loop': 164.0, 'lemmas_other': 30.0, 'lits_conflict': 112.0, 'lits_loop': 1392.0, 'lits_other': 105.0, 'jumps': {'jumps': 35.0, 'jumps_bounded': 3.0, 'levels': 1140.0, 'levels_bounded': 1068.0, 'max': 917.0, 'max_executed': 917.0, 'max_bounded': 916.0}}}}, 'summary': {'call': 50.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [59.0, 0.0], 'lower': [59.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.4089069366455078, 'cpu': 0.5, 'solve': 0.08876419067382812, 'unsat': 0.04488182067871094, 'sat': 0.0079803466796875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.950838088989258, 'cpu': 28.9375, 'solve': 3.8139877319335938, 'unsat': 1.7525787353515625, 'sat': 0.7070293426513672}, 'models': {'enumerated': 75.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 94723.0, 'conflicts': 8860.0, 'conflicts_analyzed': 8373.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8587.0, 'models': 75.0, 'models_level': 41153.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6895.0, 'distributed_sum_lbd': 16590.0, 'integrated': 38939.0, 'lemmas': 57091.0, 'lits_learnt': 3401122.0, 'lemmas_binary': 4716.0, 'lemmas_ternary': 2492.0, 'cpu_time': 13.0, 'integrated_imps': 13599.0, 'integrated_jumps': 14332.0, 'guiding_paths_lits': 122872.0, 'guiding_paths': 636.0, 'splits': 0.0, 'lemmas_conflict': 8198.0, 'lemmas_loop': 13317.0, 'lemmas_other': 35576.0, 'lits_conflict': 688510.0, 'lits_loop': 111410.0, 'lits_other': 2601202.0, 'jumps': {'jumps': 8373.0, 'jumps_bounded': 1255.0, 'levels': 177491.0, 'levels_bounded': 160204.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50}

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None)

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 50]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 27)

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [51]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(0)]), ('plan_module', [Number(51), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286649s.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(27,50).

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051602s with result Unsatisfiable.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [51]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33825130000000314, Incremental time limit = None
Running cumulative time = 19.452019299999982, Cumulative time limit = 3600
Used memory = (RSS = 537.328125Mb, VMS = 557.652344Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=51, start_step=50, end_step=51, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.300836499999996, solving_time=5.151182799999987, total_time=19.452019299999982, memory=Memory(rss=537.328125, vms=557.703125), step_range=range(0, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2866494000000017, solving_time=0.05160190000000142, total_time=0.33825130000000314, memory=Memory(rss=537.328125, vms=557.65234375), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 195993.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 629927.0, 'bodies_tr': 629927.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10311.0, 'count_bodies_tr': 10311.0, 'sccs': 1181.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25016.0, 'rules': 962871.0, 'rules_normal': 951864.0, 'rules_choice': 10293.0, 'rules_minimize': 102.0, 'rules_acyc': 0.0, 'rules_heuristic': 612.0, 'rules_tr': 962736.0, 'rules_tr_normal': 951864.0, 'rules_tr_choice': 10293.0, 'rules_tr_minimize': 102.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 477.0, 'eqs': 472262.0, 'eqs_atom': 91351.0, 'eqs_body': 11790.0, 'eqs_other': 369121.0}, 'lpStep': {'atoms': 3460.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12048.0, 'bodies_tr': 12048.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 23683.0, 'rules_normal': 23474.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23679.0, 'rules_tr_normal': 23474.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10471.0, 'eqs_atom': 1534.0, 'eqs_body': 201.0, 'eqs_other': 8736.0}, 'generator': {'vars': 109872.0, 'vars_eliminated': 0.0, 'vars_frozen': 67534.0, 'constraints': 1842.0, 'constraints_binary': 171176.0, 'constraints_ternary': 6870.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 18.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4735.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 18.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 51.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3466148376464844, 'cpu': 0.328125, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 20.297452926635742, 'cpu': 29.265625, 'solve': 3.8239612579345703, 'unsat': 1.762552261352539, 'sat': 0.7070293426513672}, 'models': {'enumerated': 75.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 94723.0, 'conflicts': 8862.0, 'conflicts_analyzed': 8373.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8587.0, 'models': 75.0, 'models_level': 41153.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6895.0, 'distributed_sum_lbd': 16590.0, 'integrated': 38939.0, 'lemmas': 57093.0, 'lits_learnt': 3401140.0, 'lemmas_binary': 4716.0, 'lemmas_ternary': 2492.0, 'cpu_time': 13.0, 'integrated_imps': 13599.0, 'integrated_jumps': 14332.0, 'guiding_paths_lits': 127607.0, 'guiding_paths': 641.0, 'splits': 0.0, 'lemmas_conflict': 8198.0, 'lemmas_loop': 13319.0, 'lemmas_other': 35576.0, 'lits_conflict': 688510.0, 'lits_loop': 111428.0, 'lits_other': 2601202.0, 'jumps': {'jumps': 8373.0, 'jumps_bounded': 1255.0, 'levels': 177491.0, 'levels_bounded': 160204.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [52]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(0)]), ('plan_module', [Number(52), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.278844s.

[15-11-2021_14-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.147918s with result Satisfiable.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [52]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4267623999999941, Incremental time limit = None
Running cumulative time = 19.878781699999976, Cumulative time limit = 3600
Used memory = (RSS = 549.339844Mb, VMS = 568.472656Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 77
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.579681s, Solving = 5.299101s, Total = 19.878782s, Memory = (RSS = 549.339844Mb, VMS = 568.472656Mb)), Calls = 52
Final Model :: Total atoms = 31038, Cost = (61, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=52, start_step=51, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.57968069999999, solving_time=5.299100999999986, total_time=19.878781699999976, memory=Memory(rss=549.33984375, vms=568.47265625), step_range=range(0, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27884419999999466, solving_time=0.14791819999999944, total_time=0.4267623999999941, memory=Memory(rss=549.33984375, vms=568.47265625), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 199468.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 642413.0, 'bodies_tr': 642413.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10512.0, 'count_bodies_tr': 10512.0, 'sccs': 1206.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25420.0, 'rules': 987604.0, 'rules_normal': 976388.0, 'rules_choice': 10488.0, 'rules_minimize': 104.0, 'rules_acyc': 0.0, 'rules_heuristic': 624.0, 'rules_tr': 987465.0, 'rules_tr_normal': 976388.0, 'rules_tr_choice': 10488.0, 'rules_tr_minimize': 104.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 485.0, 'eqs': 488397.0, 'eqs_atom': 93101.0, 'eqs_body': 12074.0, 'eqs_other': 383222.0}, 'lpStep': {'atoms': 3475.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12486.0, 'bodies_tr': 12486.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 24733.0, 'rules_normal': 24524.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 24729.0, 'rules_tr_normal': 24524.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 16135.0, 'eqs_atom': 1750.0, 'eqs_body': 284.0, 'eqs_other': 14101.0}, 'generator': {'vars': 111793.0, 'vars_eliminated': 0.0, 'vars_frozen': 68741.0, 'constraints': 2266.0, 'constraints_binary': 189526.0, 'constraints_ternary': 9517.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 4561.0, 'conflicts': 106.0, 'conflicts_analyzed': 98.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 92.0, 'models': 2.0, 'models_level': 2825.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 93.0, 'distributed_sum_lbd': 175.0, 'integrated': 495.0, 'lemmas': 761.0, 'lits_learnt': 9927.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.34375, 'integrated_imps': 304.0, 'integrated_jumps': 258.0, 'guiding_paths_lits': 6853.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 98.0, 'lemmas_loop': 235.0, 'lemmas_other': 428.0, 'lits_conflict': 2119.0, 'lits_loop': 1695.0, 'lits_other': 6113.0, 'jumps': {'jumps': 98.0, 'jumps_bounded': 42.0, 'levels': 16758.0, 'levels_bounded': 16521.0, 'max': 1497.0, 'max_executed': 1497.0, 'max_bounded': 1496.0}}}}, 'summary': {'call': 52.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [61.0, 0.0], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.43477439880371094, 'cpu': 0.6875, 'solve': 0.08924484252929688, 'unsat': 0.0359039306640625, 'sat': 0.010944366455078125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.732227325439453, 'cpu': 29.953125, 'solve': 3.913206100463867, 'unsat': 1.7984561920166016, 'sat': 0.7179737091064453}, 'models': {'enumerated': 77.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 99284.0, 'conflicts': 8968.0, 'conflicts_analyzed': 8471.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8679.0, 'models': 77.0, 'models_level': 43978.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6988.0, 'distributed_sum_lbd': 16765.0, 'integrated': 39434.0, 'lemmas': 57854.0, 'lits_learnt': 3411067.0, 'lemmas_binary': 4731.0, 'lemmas_ternary': 2512.0, 'cpu_time': 13.34375, 'integrated_imps': 13903.0, 'integrated_jumps': 14590.0, 'guiding_paths_lits': 134460.0, 'guiding_paths': 652.0, 'splits': 0.0, 'lemmas_conflict': 8296.0, 'lemmas_loop': 13554.0, 'lemmas_other': 36004.0, 'lits_conflict': 690629.0, 'lits_loop': 113123.0, 'lits_other': 2607315.0, 'jumps': {'jumps': 8471.0, 'jumps_bounded': 1297.0, 'levels': 194249.0, 'levels_bounded': 176725.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52}

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None)

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 52]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28)

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [53]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(0)]), ('plan_module', [Number(53), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318380s.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(28,52).

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070946s with result Unsatisfiable.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [53]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.38932629999999335, Incremental time limit = None
Running cumulative time = 20.26810799999997, Cumulative time limit = 3600
Used memory = (RSS = 549.363281Mb, VMS = 567.125000Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=53, start_step=52, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.898060999999984, solving_time=5.370046999999985, total_time=20.26810799999997, memory=Memory(rss=549.36328125, vms=568.47265625), step_range=range(0, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31838029999999407, solving_time=0.07094599999999929, total_time=0.38932629999999335, memory=Memory(rss=549.36328125, vms=567.125), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 202974.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 654956.0, 'bodies_tr': 654956.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10713.0, 'count_bodies_tr': 10713.0, 'sccs': 1231.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25824.0, 'rules': 1012829.0, 'rules_normal': 1001404.0, 'rules_choice': 10683.0, 'rules_minimize': 106.0, 'rules_acyc': 0.0, 'rules_heuristic': 636.0, 'rules_tr': 1012686.0, 'rules_tr_normal': 1001404.0, 'rules_tr_choice': 10683.0, 'rules_tr_minimize': 106.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 493.0, 'eqs': 504843.0, 'eqs_atom': 94867.0, 'eqs_body': 12372.0, 'eqs_other': 397604.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12543.0, 'bodies_tr': 12543.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 25225.0, 'rules_normal': 25016.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25221.0, 'rules_tr_normal': 25016.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 16446.0, 'eqs_atom': 1766.0, 'eqs_body': 298.0, 'eqs_other': 14382.0}, 'generator': {'vars': 113714.0, 'vars_eliminated': 0.0, 'vars_frozen': 69948.0, 'constraints': 2489.0, 'constraints_binary': 202853.0, 'constraints_ternary': 10621.0, 'acyc_edges': 0.0, 'complexity': 240090.0}}, 'solving': {'solvers': {'choices': 8.0, 'conflicts': 16.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 14.0, 'integrated': 12.0, 'lemmas': 33.0, 'lits_learnt': 147.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 9.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6066.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 17.0, 'lemmas_other': 9.0, 'lits_conflict': 32.0, 'lits_loop': 97.0, 'lits_other': 18.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 4.0, 'levels': 14.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 53.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [60.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3995475769042969, 'cpu': 0.4375, 'solve': 0.008975982666015625, 'unsat': 0.008975982666015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 21.13177490234375, 'cpu': 30.390625, 'solve': 3.922182083129883, 'unsat': 1.8074321746826172, 'sat': 0.7179737091064453}, 'models': {'enumerated': 77.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 99292.0, 'conflicts': 8984.0, 'conflicts_analyzed': 8479.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8686.0, 'models': 77.0, 'models_level': 43978.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6995.0, 'distributed_sum_lbd': 16779.0, 'integrated': 39446.0, 'lemmas': 57887.0, 'lits_learnt': 3411214.0, 'lemmas_binary': 4743.0, 'lemmas_ternary': 2512.0, 'cpu_time': 13.390625, 'integrated_imps': 13912.0, 'integrated_jumps': 14590.0, 'guiding_paths_lits': 140526.0, 'guiding_paths': 662.0, 'splits': 0.0, 'lemmas_conflict': 8303.0, 'lemmas_loop': 13571.0, 'lemmas_other': 36013.0, 'lits_conflict': 690661.0, 'lits_loop': 113220.0, 'lits_other': 2607333.0, 'jumps': {'jumps': 8479.0, 'jumps_bounded': 1301.0, 'levels': 194263.0, 'levels_bounded': 176731.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [54]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(0)]), ('plan_module', [Number(54), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.349737s.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065086s with result Unsatisfiable.

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [54]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.4148229000000043, Incremental time limit = None
Running cumulative time = 20.682930899999974, Cumulative time limit = 3600
Used memory = (RSS = 553.191406Mb, VMS = 569.257812Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=54, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=15.247797699999985, solving_time=5.435133199999989, total_time=20.682930899999974, memory=Memory(rss=553.19140625, vms=569.2578125), step_range=range(0, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3497367000000011, solving_time=0.0650862000000032, total_time=0.4148229000000043, memory=Memory(rss=553.19140625, vms=569.2578125), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 206483.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 668087.0, 'bodies_tr': 668087.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10914.0, 'count_bodies_tr': 10914.0, 'sccs': 1256.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26418.0, 'rules': 1039078.0, 'rules_normal': 1027444.0, 'rules_choice': 10878.0, 'rules_minimize': 108.0, 'rules_acyc': 0.0, 'rules_heuristic': 648.0, 'rules_tr': 1038935.0, 'rules_tr_normal': 1027444.0, 'rules_tr_choice': 10878.0, 'rules_tr_minimize': 108.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 505.0, 'eqs': 514041.0, 'eqs_atom': 96529.0, 'eqs_body': 12448.0, 'eqs_other': 405064.0}, 'lpStep': {'atoms': 3509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13131.0, 'bodies_tr': 13131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26249.0, 'rules_normal': 26040.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26249.0, 'rules_tr_normal': 26040.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9198.0, 'eqs_atom': 1662.0, 'eqs_body': 76.0, 'eqs_other': 7460.0}, 'generator': {'vars': 116298.0, 'vars_eliminated': 0.0, 'vars_frozen': 71553.0, 'constraints': 3119.0, 'constraints_binary': 225971.0, 'constraints_ternary': 14127.0, 'acyc_edges': 0.0, 'complexity': 243673.0}}, 'solving': {'solvers': {'choices': 285.0, 'conflicts': 147.0, 'conflicts_analyzed': 137.0, 'restarts': 0.0, 'restarts_last': 28.0, 'extra': {'domain_choices': 123.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 137.0, 'distributed_sum_lbd': 297.0, 'integrated': 809.0, 'lemmas': 1071.0, 'lits_learnt': 23654.0, 'lemmas_binary': 58.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.125, 'integrated_imps': 342.0, 'integrated_jumps': 100.0, 'guiding_paths_lits': 7301.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 137.0, 'lemmas_loop': 316.0, 'lemmas_other': 618.0, 'lits_conflict': 4197.0, 'lits_loop': 2585.0, 'lits_other': 16872.0, 'jumps': {'jumps': 137.0, 'jumps_bounded': 46.0, 'levels': 12362.0, 'levels_bounded': 12184.0, 'max': 1045.0, 'max_executed': 1045.0, 'max_bounded': 1044.0}}}}, 'summary': {'call': 54.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [59.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.42301177978515625, 'cpu': 0.5, 'solve': 0.019090652465820312, 'unsat': 0.019090652465820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 21.554786682128906, 'cpu': 30.890625, 'solve': 3.941272735595703, 'unsat': 1.8265228271484375, 'sat': 0.7179737091064453}, 'models': {'enumerated': 77.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 99577.0, 'conflicts': 9131.0, 'conflicts_analyzed': 8616.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 8809.0, 'models': 77.0, 'models_level': 43978.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7132.0, 'distributed_sum_lbd': 17076.0, 'integrated': 40255.0, 'lemmas': 58958.0, 'lits_learnt': 3434868.0, 'lemmas_binary': 4801.0, 'lemmas_ternary': 2530.0, 'cpu_time': 13.515625, 'integrated_imps': 14254.0, 'integrated_jumps': 14690.0, 'guiding_paths_lits': 147827.0, 'guiding_paths': 674.0, 'splits': 0.0, 'lemmas_conflict': 8440.0, 'lemmas_loop': 13887.0, 'lemmas_other': 36631.0, 'lits_conflict': 694858.0, 'lits_loop': 115805.0, 'lits_other': 2624205.0, 'jumps': {'jumps': 8616.0, 'jumps_bounded': 1347.0, 'levels': 206625.0, 'levels_bounded': 188915.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [55]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(0)]), ('plan_module', [Number(55), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334411s.

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108512s with result Satisfiable.

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [55]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.44292279999999806, Incremental time limit = None
Running cumulative time = 21.125853699999972, Cumulative time limit = 3600
Used memory = (RSS = 559.976562Mb, VMS = 575.253906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 78
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.582208s, Solving = 5.543645s, Total = 21.125854s, Memory = (RSS = 559.976562Mb, VMS = 575.253906Mb)), Calls = 55
Final Model :: Total atoms = 32226, Cost = (64, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[15-11-2021_14-29-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=55, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=15.582208399999985, solving_time=5.543645299999987, total_time=21.125853699999972, memory=Memory(rss=559.9765625, vms=575.25390625), step_range=range(0, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3344106999999994, solving_time=0.10851209999999867, total_time=0.44292279999999806, memory=Memory(rss=559.9765625, vms=575.25390625), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 210240.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 681497.0, 'bodies_tr': 681497.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11115.0, 'count_bodies_tr': 11115.0, 'sccs': 1281.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27012.0, 'rules': 1066041.0, 'rules_normal': 1054198.0, 'rules_choice': 11073.0, 'rules_minimize': 110.0, 'rules_acyc': 0.0, 'rules_heuristic': 660.0, 'rules_tr': 1065898.0, 'rules_tr_normal': 1054198.0, 'rules_tr_choice': 11073.0, 'rules_tr_minimize': 110.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 517.0, 'eqs': 523505.0, 'eqs_atom': 98211.0, 'eqs_body': 12536.0, 'eqs_other': 412758.0}, 'lpStep': {'atoms': 3757.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13410.0, 'bodies_tr': 13410.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26963.0, 'rules_normal': 26754.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26963.0, 'rules_tr_normal': 26754.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9464.0, 'eqs_atom': 1682.0, 'eqs_body': 88.0, 'eqs_other': 7694.0}, 'generator': {'vars': 118882.0, 'vars_eliminated': 0.0, 'vars_frozen': 73158.0, 'constraints': 3366.0, 'constraints_binary': 242158.0, 'constraints_ternary': 15590.0, 'acyc_edges': 0.0, 'complexity': 261622.0}}, 'solving': {'solvers': {'choices': 4165.0, 'conflicts': 323.0, 'conflicts_analyzed': 318.0, 'restarts': 0.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 311.0, 'models': 1.0, 'models_level': 1483.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 293.0, 'distributed_sum_lbd': 738.0, 'integrated': 1758.0, 'lemmas': 2295.0, 'lits_learnt': 50112.0, 'lemmas_binary': 273.0, 'lemmas_ternary': 84.0, 'cpu_time': 0.203125, 'integrated_imps': 494.0, 'integrated_jumps': 583.0, 'guiding_paths_lits': 7525.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 310.0, 'lemmas_loop': 409.0, 'lemmas_other': 1576.0, 'lits_conflict': 8154.0, 'lits_loop': 3315.0, 'lits_other': 38643.0, 'jumps': {'jumps': 318.0, 'jumps_bounded': 56.0, 'levels': 8636.0, 'levels_bounded': 7837.0, 'max': 1077.0, 'max_executed': 1077.0, 'max_bounded': 1076.0}}}}, 'summary': {'call': 55.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [64.0, 0.0], 'lower': [64.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.4557819366455078, 'cpu': 0.59375, 'solve': 0.06580162048339844, 'unsat': 0.03989410400390625, 'sat': 0.025907516479492188}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 22.010568618774414, 'cpu': 31.484375, 'solve': 4.007074356079102, 'unsat': 1.8664169311523438, 'sat': 0.7438812255859375}, 'models': {'enumerated': 78.0, 'optimal': 28.0}, 'solving': {'solvers': {'choices': 103742.0, 'conflicts': 9454.0, 'conflicts_analyzed': 8934.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 9120.0, 'models': 78.0, 'models_level': 45461.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7425.0, 'distributed_sum_lbd': 17814.0, 'integrated': 42013.0, 'lemmas': 61253.0, 'lits_learnt': 3484980.0, 'lemmas_binary': 5074.0, 'lemmas_ternary': 2614.0, 'cpu_time': 13.71875, 'integrated_imps': 14748.0, 'integrated_jumps': 15273.0, 'guiding_paths_lits': 155352.0, 'guiding_paths': 686.0, 'splits': 0.0, 'lemmas_conflict': 8750.0, 'lemmas_loop': 14296.0, 'lemmas_other': 38207.0, 'lits_conflict': 703012.0, 'lits_loop': 119120.0, 'lits_other': 2662848.0, 'jumps': {'jumps': 8934.0, 'jumps_bounded': 1403.0, 'levels': 215261.0, 'levels_bounded': 196752.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-29-59] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55}

[15-11-2021_14-29-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None)

[15-11-2021_14-29-59] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 55]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29)

[15-11-2021_14-29-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [56]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(0)]), ('plan_module', [Number(56), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306952s.

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(29,55).

[15-11-2021_14-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.475988s with result Satisfiable.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [56]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.7829404000000011, Incremental time limit = None
Running cumulative time = 21.908794099999973, Cumulative time limit = 3600
Used memory = (RSS = 572.410156Mb, VMS = 586.058594Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 80
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.889160s, Solving = 6.019634s, Total = 21.908794s, Memory = (RSS = 572.410156Mb, VMS = 586.058594Mb)), Calls = 56
Final Model :: Total atoms = 32629, Cost = (66, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=56, start_step=55, end_step=56, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=15.889160299999986, solving_time=6.019633799999987, total_time=21.908794099999973, memory=Memory(rss=572.41015625, vms=586.05859375), step_range=range(0, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3069519000000014, solving_time=0.4759884999999997, total_time=0.7829404000000011, memory=Memory(rss=572.41015625, vms=586.05859375), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 214005.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 695156.0, 'bodies_tr': 695156.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11316.0, 'count_bodies_tr': 11316.0, 'sccs': 1306.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27606.0, 'rules': 1093862.0, 'rules_normal': 1081810.0, 'rules_choice': 11268.0, 'rules_minimize': 112.0, 'rules_acyc': 0.0, 'rules_heuristic': 672.0, 'rules_tr': 1093719.0, 'rules_tr_normal': 1081810.0, 'rules_tr_choice': 11268.0, 'rules_tr_minimize': 112.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 529.0, 'eqs': 533483.0, 'eqs_atom': 100093.0, 'eqs_body': 12606.0, 'eqs_other': 420784.0}, 'lpStep': {'atoms': 3765.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13659.0, 'bodies_tr': 13659.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 27821.0, 'rules_normal': 27612.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27821.0, 'rules_tr_normal': 27612.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9978.0, 'eqs_atom': 1882.0, 'eqs_body': 70.0, 'eqs_other': 8026.0}, 'generator': {'vars': 121534.0, 'vars_eliminated': 0.0, 'vars_frozen': 74775.0, 'constraints': 4018.0, 'constraints_binary': 266264.0, 'constraints_ternary': 19598.0, 'acyc_edges': 0.0, 'complexity': 290472.0}}, 'solving': {'solvers': {'choices': 2872.0, 'conflicts': 52.0, 'conflicts_analyzed': 52.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 22.0, 'models': 2.0, 'models_level': 3055.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 67.0, 'integrated': 6.0, 'lemmas': 499.0, 'lits_learnt': 3483.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.921875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 7749.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 52.0, 'lemmas_loop': 447.0, 'lemmas_other': 0.0, 'lits_conflict': 53.0, 'lits_loop': 3430.0, 'lits_other': 0.0, 'jumps': {'jumps': 52.0, 'jumps_bounded': 1.0, 'levels': 54.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 56.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [66.0, 0.0], 'lower': [66.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.7933998107910156, 'cpu': 1.28125, 'solve': 0.4343605041503906, 'unsat': 0.03192329406738281, 'sat': 0.01197052001953125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 22.80396842956543, 'cpu': 32.765625, 'solve': 4.441434860229492, 'unsat': 1.8983402252197266, 'sat': 0.7558517456054688}, 'models': {'enumerated': 80.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 106614.0, 'conflicts': 9506.0, 'conflicts_analyzed': 8986.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 9142.0, 'models': 80.0, 'models_level': 48516.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7484.0, 'distributed_sum_lbd': 17881.0, 'integrated': 42019.0, 'lemmas': 61752.0, 'lits_learnt': 3488463.0, 'lemmas_binary': 5082.0, 'lemmas_ternary': 2614.0, 'cpu_time': 14.640625, 'integrated_imps': 14748.0, 'integrated_jumps': 15273.0, 'guiding_paths_lits': 163101.0, 'guiding_paths': 693.0, 'splits': 0.0, 'lemmas_conflict': 8802.0, 'lemmas_loop': 14743.0, 'lemmas_other': 38207.0, 'lits_conflict': 703065.0, 'lits_loop': 122550.0, 'lits_other': 2662848.0, 'jumps': {'jumps': 8986.0, 'jumps_bounded': 1404.0, 'levels': 215315.0, 'levels_bounded': 196754.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56}

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None)

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 56]:
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 30)
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 30)

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [57]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(0)]), ('plan_module', [Number(57), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315086s.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None), conversion = current_last_sgoals(30,56).

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067960s with result Unsatisfiable.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [57]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3830461000000014, Incremental time limit = None
Running cumulative time = 22.291840199999974, Cumulative time limit = 3600
Used memory = (RSS = 576.675781Mb, VMS = 588.378906Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-30-00] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=57, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=16.204246199999986, solving_time=6.087593999999989, total_time=22.291840199999974, memory=Memory(rss=576.67578125, vms=588.37890625), step_range=range(0, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3150858999999997, solving_time=0.06796020000000169, total_time=0.3830461000000014, memory=Memory(rss=576.67578125, vms=588.37890625), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 217778.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 708845.0, 'bodies_tr': 708845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11517.0, 'count_bodies_tr': 11517.0, 'sccs': 1331.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28200.0, 'rules': 1122147.0, 'rules_normal': 1109886.0, 'rules_choice': 11463.0, 'rules_minimize': 114.0, 'rules_acyc': 0.0, 'rules_heuristic': 684.0, 'rules_tr': 1122004.0, 'rules_tr_normal': 1109886.0, 'rules_tr_choice': 11463.0, 'rules_tr_minimize': 114.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 541.0, 'eqs': 543518.0, 'eqs_atom': 101973.0, 'eqs_body': 12676.0, 'eqs_other': 428869.0}, 'lpStep': {'atoms': 3773.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13689.0, 'bodies_tr': 13689.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28285.0, 'rules_normal': 28076.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28285.0, 'rules_tr_normal': 28076.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10035.0, 'eqs_atom': 1880.0, 'eqs_body': 70.0, 'eqs_other': 8085.0}, 'generator': {'vars': 124186.0, 'vars_eliminated': 0.0, 'vars_frozen': 76392.0, 'constraints': 4211.0, 'constraints_binary': 279770.0, 'constraints_ternary': 19656.0, 'acyc_edges': 0.0, 'complexity': 304265.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6834.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 57.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3939208984375, 'cpu': 0.484375, 'solve': 0.01496124267578125, 'unsat': 0.01496124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 23.19788932800293, 'cpu': 33.25, 'solve': 4.456396102905273, 'unsat': 1.9133014678955078, 'sat': 0.7558517456054688}, 'models': {'enumerated': 80.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 106614.0, 'conflicts': 9513.0, 'conflicts_analyzed': 8986.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 9142.0, 'models': 80.0, 'models_level': 48516.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7484.0, 'distributed_sum_lbd': 17881.0, 'integrated': 42019.0, 'lemmas': 61752.0, 'lits_learnt': 3488463.0, 'lemmas_binary': 5082.0, 'lemmas_ternary': 2614.0, 'cpu_time': 14.75, 'integrated_imps': 14748.0, 'integrated_jumps': 15273.0, 'guiding_paths_lits': 169935.0, 'guiding_paths': 699.0, 'splits': 0.0, 'lemmas_conflict': 8802.0, 'lemmas_loop': 14743.0, 'lemmas_other': 38207.0, 'lits_conflict': 703065.0, 'lits_loop': 122550.0, 'lits_other': 2662848.0, 'jumps': {'jumps': 8986.0, 'jumps_bounded': 1404.0, 'levels': 215315.0, 'levels_bounded': 196754.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [58]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(0)]), ('plan_module', [Number(58), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.347471s.

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[15-11-2021_14-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.113275s with result Satisfiable.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [58]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.46074559999999565, Incremental time limit = None
Running cumulative time = 22.75258579999997, Cumulative time limit = 3600
Used memory = (RSS = 583.222656Mb, VMS = 593.562500Mb), Total system virtual memory = 16324.18359375Mb

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 81
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 16.551717s, Solving = 6.200869s, Total = 22.752586s, Memory = (RSS = 583.222656Mb, VMS = 593.562500Mb)), Calls = 58
Final Model :: Total atoms = 33855, Cost = (69, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-30-01] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=58, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=16.551717199999985, solving_time=6.2008685999999855, total_time=22.75258579999997, memory=Memory(rss=583.22265625, vms=593.5625), step_range=range(0, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.34747099999999875, solving_time=0.1132745999999969, total_time=0.46074559999999565, memory=Memory(rss=583.22265625, vms=593.5625), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 221549.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 722573.0, 'bodies_tr': 722573.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11718.0, 'count_bodies_tr': 11718.0, 'sccs': 1356.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28794.0, 'rules': 1150906.0, 'rules_normal': 1138436.0, 'rules_choice': 11658.0, 'rules_minimize': 116.0, 'rules_acyc': 0.0, 'rules_heuristic': 696.0, 'rules_tr': 1150763.0, 'rules_tr_normal': 1138436.0, 'rules_tr_choice': 11658.0, 'rules_tr_minimize': 116.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 553.0, 'eqs': 553639.0, 'eqs_atom': 103861.0, 'eqs_body': 12746.0, 'eqs_other': 437032.0}, 'lpStep': {'atoms': 3771.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13728.0, 'bodies_tr': 13728.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28759.0, 'rules_normal': 28550.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28759.0, 'rules_tr_normal': 28550.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10121.0, 'eqs_atom': 1888.0, 'eqs_body': 70.0, 'eqs_other': 8163.0}, 'generator': {'vars': 126838.0, 'vars_eliminated': 0.0, 'vars_frozen': 78009.0, 'constraints': 4863.0, 'constraints_binary': 304928.0, 'constraints_ternary': 24088.0, 'acyc_edges': 0.0, 'complexity': 334591.0}}, 'solving': {'solvers': {'choices': 3377.0, 'conflicts': 173.0, 'conflicts_analyzed': 164.0, 'restarts': 0.0, 'restarts_last': 36.0, 'extra': {'domain_choices': 236.0, 'models': 1.0, 'models_level': 1606.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 146.0, 'distributed_sum_lbd': 336.0, 'integrated': 876.0, 'lemmas': 1112.0, 'lits_learnt': 20950.0, 'lemmas_binary': 160.0, 'lemmas_ternary': 74.0, 'cpu_time': 0.203125, 'integrated_imps': 353.0, 'integrated_jumps': 186.0, 'guiding_paths_lits': 8197.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 152.0, 'lemmas_loop': 219.0, 'lemmas_other': 741.0, 'lits_conflict': 3293.0, 'lits_loop': 1917.0, 'lits_other': 15740.0, 'jumps': {'jumps': 164.0, 'jumps_bounded': 35.0, 'levels': 11876.0, 'levels_bounded': 11657.0, 'max': 1022.0, 'max_executed': 1022.0, 'max_bounded': 1021.0}}}}, 'summary': {'call': 58.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [69.0, 0.0], 'lower': [69.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.4717731475830078, 'cpu': 0.59375, 'solve': 0.06283378601074219, 'unsat': 0.036899566650390625, 'sat': 0.025934219360351562}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 23.669662475585938, 'cpu': 33.84375, 'solve': 4.519229888916016, 'unsat': 1.9502010345458984, 'sat': 0.7817859649658203}, 'models': {'enumerated': 81.0, 'optimal': 30.0}, 'solving': {'solvers': {'choices': 109991.0, 'conflicts': 9686.0, 'conflicts_analyzed': 9150.0, 'restarts': 14.0, 'restarts_last': 293.0, 'extra': {'domain_choices': 9378.0, 'models': 81.0, 'models_level': 50122.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7630.0, 'distributed_sum_lbd': 18217.0, 'integrated': 42895.0, 'lemmas': 62864.0, 'lits_learnt': 3509413.0, 'lemmas_binary': 5242.0, 'lemmas_ternary': 2688.0, 'cpu_time': 14.953125, 'integrated_imps': 15101.0, 'integrated_jumps': 15459.0, 'guiding_paths_lits': 178132.0, 'guiding_paths': 715.0, 'splits': 0.0, 'lemmas_conflict': 8954.0, 'lemmas_loop': 14962.0, 'lemmas_other': 38948.0, 'lits_conflict': 706358.0, 'lits_loop': 124467.0, 'lits_other': 2678588.0, 'jumps': {'jumps': 9150.0, 'jumps_bounded': 1439.0, 'levels': 227191.0, 'levels_bounded': 208411.0, 'max': 1660.0, 'max_executed': 1660.0, 'max_bounded': 1659.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[15-11-2021_14-30-01] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56, 30: 58}

[15-11-2021_14-30-01] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[15-11-2021_14-30-01] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 30 was achieved successfully.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.320929s, Solving = 0.015452s, Total = 0.336381s, Memory = (RSS = 212.003906Mb, VMS = 202.894531Mb)
2 : Statistics :: Grounding = 0.175614s, Solving = 0.009681s, Total = 0.185295s, Memory = (RSS = 214.246094Mb, VMS = 205.445312Mb)
3 : Statistics :: Grounding = 0.211929s, Solving = 0.013539s, Total = 0.225468s, Memory = (RSS = 216.425781Mb, VMS = 207.214844Mb)
4 : Statistics :: Grounding = 0.226270s, Solving = 0.007810s, Total = 0.234081s, Memory = (RSS = 218.093750Mb, VMS = 208.757812Mb)
5 : Statistics :: Grounding = 0.287092s, Solving = 0.013891s, Total = 0.300983s, Memory = (RSS = 223.640625Mb, VMS = 214.406250Mb)
6 : Statistics :: Grounding = 0.237622s, Solving = 0.015869s, Total = 0.253491s, Memory = (RSS = 228.234375Mb, VMS = 219.531250Mb)
7 : Statistics :: Grounding = 0.280150s, Solving = 0.023723s, Total = 0.303873s, Memory = (RSS = 233.824219Mb, VMS = 225.972656Mb)
8 : Statistics :: Grounding = 0.260435s, Solving = 0.022920s, Total = 0.283356s, Memory = (RSS = 237.730469Mb, VMS = 229.355469Mb)
9 : Statistics :: Grounding = 0.311650s, Solving = 0.030099s, Total = 0.341748s, Memory = (RSS = 246.246094Mb, VMS = 239.625000Mb)
10 : Statistics :: Grounding = 0.273051s, Solving = 0.041654s, Total = 0.314705s, Memory = (RSS = 249.527344Mb, VMS = 242.167969Mb)
11 : Statistics :: Grounding = 0.282909s, Solving = 0.039055s, Total = 0.321964s, Memory = (RSS = 254.644531Mb, VMS = 246.617188Mb)
12 : Statistics :: Grounding = 0.283779s, Solving = 0.061689s, Total = 0.345469s, Memory = (RSS = 265.386719Mb, VMS = 259.906250Mb)
13 : Statistics :: Grounding = 0.281234s, Solving = 0.140028s, Total = 0.421262s, Memory = (RSS = 272.214844Mb, VMS = 265.632812Mb)
14 : Statistics :: Grounding = 0.280103s, Solving = 0.036070s, Total = 0.316173s, Memory = (RSS = 275.625000Mb, VMS = 268.222656Mb)
15 : Statistics :: Grounding = 0.280010s, Solving = 0.223928s, Total = 0.503939s, Memory = (RSS = 288.230469Mb, VMS = 287.820312Mb)
16 : Statistics :: Grounding = 0.291818s, Solving = 0.219741s, Total = 0.511559s, Memory = (RSS = 300.203125Mb, VMS = 298.757812Mb)
17 : Statistics :: Grounding = 0.292830s, Solving = 0.085270s, Total = 0.378100s, Memory = (RSS = 310.281250Mb, VMS = 307.460938Mb)
18 : Statistics :: Grounding = 0.280331s, Solving = 0.085265s, Total = 0.365597s, Memory = (RSS = 319.066406Mb, VMS = 315.121094Mb)
19 : Statistics :: Grounding = 0.278129s, Solving = 0.222639s, Total = 0.500768s, Memory = (RSS = 332.964844Mb, VMS = 328.191406Mb)
20 : Statistics :: Grounding = 0.317462s, Solving = 0.032903s, Total = 0.350366s, Memory = (RSS = 337.199219Mb, VMS = 330.933594Mb)
21 : Statistics :: Grounding = 0.321693s, Solving = 0.158161s, Total = 0.479854s, Memory = (RSS = 349.484375Mb, VMS = 354.128906Mb)
22 : Statistics :: Grounding = 0.360021s, Solving = 0.663608s, Total = 1.023629s, Memory = (RSS = 368.781250Mb, VMS = 372.500000Mb)
23 : Statistics :: Grounding = 0.307136s, Solving = 0.098233s, Total = 0.405369s, Memory = (RSS = 381.292969Mb, VMS = 383.453125Mb)
24 : Statistics :: Grounding = 0.307750s, Solving = 0.028331s, Total = 0.336081s, Memory = (RSS = 383.382812Mb, VMS = 385.437500Mb)
25 : Statistics :: Grounding = 0.236020s, Solving = 0.045234s, Total = 0.281254s, Memory = (RSS = 386.410156Mb, VMS = 387.585938Mb)
26 : Statistics :: Grounding = 0.248184s, Solving = 0.030282s, Total = 0.278466s, Memory = (RSS = 392.734375Mb, VMS = 393.152344Mb)
27 : Statistics :: Grounding = 0.298546s, Solving = 0.050038s, Total = 0.348584s, Memory = (RSS = 394.328125Mb, VMS = 393.394531Mb)
28 : Statistics :: Grounding = 0.297220s, Solving = 0.080520s, Total = 0.377739s, Memory = (RSS = 400.039062Mb, VMS = 397.855469Mb)
29 : Statistics :: Grounding = 0.326426s, Solving = 0.259185s, Total = 0.585611s, Memory = (RSS = 409.566406Mb, VMS = 406.289062Mb)
30 : Statistics :: Grounding = 0.264780s, Solving = 0.041351s, Total = 0.306131s, Memory = (RSS = 412.371094Mb, VMS = 408.160156Mb)
31 : Statistics :: Grounding = 0.267309s, Solving = 0.089459s, Total = 0.356768s, Memory = (RSS = 418.902344Mb, VMS = 413.523438Mb)
32 : Statistics :: Grounding = 0.297952s, Solving = 0.107168s, Total = 0.405120s, Memory = (RSS = 427.757812Mb, VMS = 421.433594Mb)
33 : Statistics :: Grounding = 0.306545s, Solving = 0.044396s, Total = 0.350941s, Memory = (RSS = 436.078125Mb, VMS = 447.652344Mb)
34 : Statistics :: Grounding = 0.285735s, Solving = 0.114871s, Total = 0.400606s, Memory = (RSS = 447.777344Mb, VMS = 457.507812Mb)
35 : Statistics :: Grounding = 0.325520s, Solving = 0.346973s, Total = 0.672493s, Memory = (RSS = 462.503906Mb, VMS = 470.527344Mb)
36 : Statistics :: Grounding = 0.297837s, Solving = 0.049025s, Total = 0.346862s, Memory = (RSS = 436.625000Mb, VMS = 443.324219Mb)
37 : Statistics :: Grounding = 0.193886s, Solving = 0.094880s, Total = 0.288766s, Memory = (RSS = 444.679688Mb, VMS = 451.125000Mb)
38 : Statistics :: Grounding = 0.206858s, Solving = 0.097280s, Total = 0.304139s, Memory = (RSS = 451.183594Mb, VMS = 456.800781Mb)
39 : Statistics :: Grounding = 0.261666s, Solving = 0.075164s, Total = 0.336830s, Memory = (RSS = 455.613281Mb, VMS = 460.480469Mb)
40 : Statistics :: Grounding = 0.294284s, Solving = 0.087175s, Total = 0.381459s, Memory = (RSS = 466.558594Mb, VMS = 471.757812Mb)
41 : Statistics :: Grounding = 0.291197s, Solving = 0.036719s, Total = 0.327915s, Memory = (RSS = 468.527344Mb, VMS = 472.394531Mb)
42 : Statistics :: Grounding = 0.276583s, Solving = 0.093981s, Total = 0.370564s, Memory = (RSS = 475.859375Mb, VMS = 478.171875Mb)
43 : Statistics :: Grounding = 0.281816s, Solving = 0.042744s, Total = 0.324560s, Memory = (RSS = 478.949219Mb, VMS = 480.988281Mb)
44 : Statistics :: Grounding = 0.276753s, Solving = 0.080923s, Total = 0.357676s, Memory = (RSS = 481.242188Mb, VMS = 481.066406Mb)
45 : Statistics :: Grounding = 0.325561s, Solving = 0.167557s, Total = 0.493118s, Memory = (RSS = 493.777344Mb, VMS = 490.894531Mb)
46 : Statistics :: Grounding = 0.303500s, Solving = 0.371812s, Total = 0.675313s, Memory = (RSS = 500.187500Mb, VMS = 495.628906Mb)
47 : Statistics :: Grounding = 0.299895s, Solving = 0.160309s, Total = 0.460204s, Memory = (RSS = 521.820312Mb, VMS = 516.316406Mb)
48 : Statistics :: Grounding = 0.259715s, Solving = 0.046607s, Total = 0.306323s, Memory = (RSS = 521.332031Mb, VMS = 515.351562Mb)
49 : Statistics :: Grounding = 0.267725s, Solving = 0.066784s, Total = 0.334509s, Memory = (RSS = 524.175781Mb, VMS = 547.125000Mb)
50 : Statistics :: Grounding = 0.272723s, Solving = 0.129587s, Total = 0.402309s, Memory = (RSS = 536.558594Mb, VMS = 557.703125Mb)
51 : Statistics :: Grounding = 0.286649s, Solving = 0.051602s, Total = 0.338251s, Memory = (RSS = 537.328125Mb, VMS = 557.652344Mb)
52 : Statistics :: Grounding = 0.278844s, Solving = 0.147918s, Total = 0.426762s, Memory = (RSS = 549.339844Mb, VMS = 568.472656Mb)
53 : Statistics :: Grounding = 0.318380s, Solving = 0.070946s, Total = 0.389326s, Memory = (RSS = 549.363281Mb, VMS = 567.125000Mb)
54 : Statistics :: Grounding = 0.349737s, Solving = 0.065086s, Total = 0.414823s, Memory = (RSS = 553.191406Mb, VMS = 569.257812Mb)
55 : Statistics :: Grounding = 0.334411s, Solving = 0.108512s, Total = 0.442923s, Memory = (RSS = 559.976562Mb, VMS = 575.253906Mb)
56 : Statistics :: Grounding = 0.306952s, Solving = 0.475988s, Total = 0.782940s, Memory = (RSS = 572.410156Mb, VMS = 586.058594Mb)
57 : Statistics :: Grounding = 0.315086s, Solving = 0.067960s, Total = 0.383046s, Memory = (RSS = 576.675781Mb, VMS = 588.378906Mb)
58 : Statistics :: Grounding = 0.347471s, Solving = 0.113275s, Total = 0.460746s, Memory = (RSS = 583.222656Mb, VMS = 593.562500Mb)

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 22.752586s due to: External generator exit.

[15-11-2021_14-30-01] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[15-11-2021_14-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 13, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24, 47: 24, 48: 25, 49: 25, 50: 26, 51: 27, 52: 27, 53: 28, 54: 28, 55: 28, 56: 29, 57: 29, 58: 30}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 31, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 47, 25: 49, 26: 50, 27: 52, 28: 55, 29: 57, 30: 58}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 16.551717s, Solving = 6.200869s, Total = 22.752586s, Memory = (RSS = 583.222656Mb, VMS = 593.562500Mb)), Calls = 58
Model :: Total atoms = 33855, Cost = (69, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 16] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : release(manipulator_end_1,(block,5))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_2,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 18] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
        talos : grasp(manipulator_end_1,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 19] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 19] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 20] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 20] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 20] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 20] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 47:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 48:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 49:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 50:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 51:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 53:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 55:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 57:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 58:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 30] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 30] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
        talos : put(manipulator_end_2,(block,1),(block,2))

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 58, Actions = 21

[15-11-2021_14-30-02] INFO :: ASH Planner Main #1 >>           ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 5}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 8}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,store_room_door_handle_outer)', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,store_room_door)', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,store_room_door_handle_outer)', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 21}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 22}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 31}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,3)))', 'S': 33}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,3))', 'S': 34}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,3),puzzle_room_table_left)', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,3))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,1)))', 'S': 37}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,1))', 'S': 38}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 39}), Action({'L': 1, 'R': 'talos', 'A': 'lift(manipulator_end_2,(block,1))', 'S': 39}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 39})])
(40, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 40})])
(41, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 41})])
(42, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 42})])
(43, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 43})])
(44, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 44})])
(45, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 45})])
(46, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 46})])
(47, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 47})])
(48, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,4)))', 'S': 48})])
(49, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,4))', 'S': 49})])
(50, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 50})])
(51, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 51})])
(52, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 52})])
(53, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 53})])
(54, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 54})])
(55, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 55})])
(56, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 56})])
(57, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 57})])
(58, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,4),(block,5))', 'S': 58}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,1),(block,2))', 'S': 58})])

Hierarchical planning summary: (Execution latency = 13.417770599999995, Overall total planning time = 30.92704889999996, Average partial plan yield time = 15.559043624999983)

     ====================================================================================================================================================================================     
 | Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.801s (Gro =   1.521s, Sea =   0.280s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00)) |  
 | Level =  2 (com-ref), Length =  30, Actions =  49 (Com = 0.61), Sgs = 49, Time =   6.330s (Gro =   4.801s, Sea =   1.529s), Expan (2.14, 2.33) (Dev = (1.61, 2.86), Bal = (0.75, 1.23)) |  
  | Level =  1 (com-ref), Length =  58, Actions =  75 (Com = 0.77), Sgs = 0, Time =  22.796s (Gro =  16.589s, Sea =   6.206s), Expan (1.93, 1.53) (Dev = (1.53, 1.00), Bal = (0.79, 0.65)) |  
     ====================================================================================================================================================================================     

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[15-11-2021_14-30-02] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[15-11-2021_14-30-02] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2021-11-15_14-29-21.txt

[15-11-2021_14-30-03] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2021-11-15_14-29-21.txt

[15-11-2021_14-30-03] ERROR :: __main__ >> Exception during main:

Traceback (most recent call last):
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 914, in <module>
    exit_code = __main()
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 510, in __main
    axes[1, 0].bar(x, concat_expansion, bar_width, label="Total Expansion")
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\site-packages\matplotlib\__init__.py", line 1447, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\site-packages\matplotlib\axes\_axes.py", line 2430, in bar
    x, height, width, y, linewidth = np.broadcast_arrays(
  File "<__array_function__ internals>", line 5, in broadcast_arrays
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\site-packages\numpy\lib\stride_tricks.py", line 538, in broadcast_arrays
    shape = _broadcast_shape(*args)
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\site-packages\numpy\lib\stride_tricks.py", line 420, in _broadcast_shape
    b = np.broadcast(*args[:32])
ValueError: shape mismatch: objects cannot be broadcast to a single shape
[15-11-2021_14-30-03] INFO :: __main__ >> Overall time: Real = 42.017297299999996, Process = 53.796875

[15-11-2021_14-30-03] INFO :: __main__ >> Exiting with code -1

