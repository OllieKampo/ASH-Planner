[06-02-2021_14-53-07] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[06-02-2021_14-53-07] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[06-02-2021_14-53-07] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[06-02-2021_14-53-07] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp', '-sc', '-pm=hierarchical', '-xf', '-df', '-ir', '2', '-er', '20', '-op=False'].

[06-02-2021_14-53-07] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_06-02-2021_14-53-07.xlsx')
('data_file', './results/ASH_Data_06-02-2021_14-53-07.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'hierarchical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 2)
('warranty', False)
('conditions', False)

[06-02-2021_14-53-07] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'].

[06-02-2021_14-53-07] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.006188s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000298s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.006188s, Solving time = 0.000298s, Total time = 0.006486s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-07] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[06-02-2021_14-53-07] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Generating initial state.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Instantiated.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building completed.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding completed in 0.093328s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Model found:
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving completed in 0.013704s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.093328s, Solving time = 0.013704s, Total time = 0.107032s
Final Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.093328s, Solving time = 0.013704s, Total time = 0.107032s
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Generating goal state.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Instantiated.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building completed.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding completed in 0.036515s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Model found:
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving completed in 0.004558s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.036515s, Solving time = 0.004558s, Total time = 0.041073s
Final Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.036515s, Solving time = 0.004558s, Total time = 0.041073s
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[06-02-2021_14-53-07] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 2 : Experimental runs = 20                   
  ################################################################################################  

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-53-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-53-07] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-07] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.012751s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002700s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039869s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005726s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.032645s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.003481s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.031023s.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.004646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-53-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046693s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.011095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.035703s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005608s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038195s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.006590s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038270s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046360s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.046301s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.013484s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044007s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.011807s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.054095s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014747s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.050595s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.020678s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.043197s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.029659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.042307s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.049299s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044666s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.076306s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.080592s.

[06-02-2021_14-53-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.138657s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.084677s.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.265252s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.092311s.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.097994s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 1.733643s because STOP_CON_REACHED.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.904257s, Solving time = 0.774374s, Total time = 1.733643s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039869s, Solving time = 0.005726s, Total time = 0.045595s
2 : Statistics :: Grounding time = 0.032645s, Solving time = 0.003481s, Total time = 0.036126s
3 : Statistics :: Grounding time = 0.031023s, Solving time = 0.004646s, Total time = 0.035669s
4 : Statistics :: Grounding time = 0.046693s, Solving time = 0.011095s, Total time = 0.057788s
5 : Statistics :: Grounding time = 0.035703s, Solving time = 0.005608s, Total time = 0.041310s
6 : Statistics :: Grounding time = 0.038195s, Solving time = 0.006590s, Total time = 0.044785s
7 : Statistics :: Grounding time = 0.038270s, Solving time = 0.007598s, Total time = 0.045869s
8 : Statistics :: Grounding time = 0.046360s, Solving time = 0.009049s, Total time = 0.055409s
9 : Statistics :: Grounding time = 0.046301s, Solving time = 0.013484s, Total time = 0.059785s
10 : Statistics :: Grounding time = 0.044007s, Solving time = 0.011807s, Total time = 0.055814s
11 : Statistics :: Grounding time = 0.054095s, Solving time = 0.014747s, Total time = 0.068842s
12 : Statistics :: Grounding time = 0.050595s, Solving time = 0.020678s, Total time = 0.071273s
13 : Statistics :: Grounding time = 0.043197s, Solving time = 0.029659s, Total time = 0.072857s
14 : Statistics :: Grounding time = 0.042307s, Solving time = 0.049299s, Total time = 0.091606s
15 : Statistics :: Grounding time = 0.044666s, Solving time = 0.076306s, Total time = 0.120971s
16 : Statistics :: Grounding time = 0.080592s, Solving time = 0.138657s, Total time = 0.219249s
17 : Statistics :: Grounding time = 0.084677s, Solving time = 0.265252s, Total time = 0.349929s
18 : Statistics :: Grounding time = 0.092311s, Solving time = 0.097994s, Total time = 0.190305s

[06-02-2021_14-53-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.904257s, Solving time = 0.774374s, Total time = 1.733643s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-53-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.013837s.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.001940s.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.641240s.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.233595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.068323s.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.017160s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.068060s.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016353s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071217s.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.023337s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.073934s.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.027783s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-53-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.073379s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.065076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.083908s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.038157s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.076377s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.048901s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.082635s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.058828s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.077976s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.081285s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 2.001926s because STOP_CON_REACHED.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.330888s, Solving time = 0.612414s, Total time = 2.001926s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.641240s, Solving time = 0.233595s, Total time = 0.874835s
2 : Statistics :: Grounding time = 0.068323s, Solving time = 0.017160s, Total time = 0.085483s
3 : Statistics :: Grounding time = 0.068060s, Solving time = 0.016353s, Total time = 0.084413s
4 : Statistics :: Grounding time = 0.071217s, Solving time = 0.023337s, Total time = 0.094553s
5 : Statistics :: Grounding time = 0.073934s, Solving time = 0.027783s, Total time = 0.101717s
6 : Statistics :: Grounding time = 0.073379s, Solving time = 0.065076s, Total time = 0.138455s
7 : Statistics :: Grounding time = 0.083908s, Solving time = 0.038157s, Total time = 0.122065s
8 : Statistics :: Grounding time = 0.076377s, Solving time = 0.048901s, Total time = 0.125277s
9 : Statistics :: Grounding time = 0.082635s, Solving time = 0.058828s, Total time = 0.141463s
10 : Statistics :: Grounding time = 0.077976s, Solving time = 0.081285s, Total time = 0.159261s

[06-02-2021_14-53-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.330888s, Solving time = 0.612414s, Total time = 2.001926s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_1,retracted),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-53-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.016445s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.002960s.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 2.946240s.

[06-02-2021_14-53-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.563055s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.103654s.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.038397s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.122187s.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.037876s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106721s.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.040026s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.108313s.

[06-02-2021_14-53-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.093672s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.110278s.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.062749s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.110706s.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.097599s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.138799s.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.202472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.112131s.

[06-02-2021_14-53-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.128552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.116034s.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.158189s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.114802s.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.192362s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.115605s.

[06-02-2021_14-53-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.225326s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.118274s.

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.321362s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.359784s.

[06-02-2021_14-53-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.615911s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.379872s.

[06-02-2021_14-53-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.435055s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 8.502292s because STOP_CON_REACHED.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.079846s, Solving time = 3.215562s, Total time = 8.502292s
Final Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.946240s, Solving time = 0.563055s, Total time = 3.509295s
2 : Statistics :: Grounding time = 0.103654s, Solving time = 0.038397s, Total time = 0.142050s
3 : Statistics :: Grounding time = 0.122187s, Solving time = 0.037876s, Total time = 0.160063s
4 : Statistics :: Grounding time = 0.106721s, Solving time = 0.040026s, Total time = 0.146746s
5 : Statistics :: Grounding time = 0.108313s, Solving time = 0.093672s, Total time = 0.201986s
6 : Statistics :: Grounding time = 0.110278s, Solving time = 0.062749s, Total time = 0.173027s
7 : Statistics :: Grounding time = 0.110706s, Solving time = 0.097599s, Total time = 0.208305s
8 : Statistics :: Grounding time = 0.138799s, Solving time = 0.202472s, Total time = 0.341271s
9 : Statistics :: Grounding time = 0.112131s, Solving time = 0.128552s, Total time = 0.240683s
10 : Statistics :: Grounding time = 0.116034s, Solving time = 0.158189s, Total time = 0.274223s
11 : Statistics :: Grounding time = 0.114802s, Solving time = 0.192362s, Total time = 0.307165s
12 : Statistics :: Grounding time = 0.115605s, Solving time = 0.225326s, Total time = 0.340931s
13 : Statistics :: Grounding time = 0.118274s, Solving time = 0.321362s, Total time = 0.439636s
14 : Statistics :: Grounding time = 0.359784s, Solving time = 0.615911s, Total time = 0.975695s
15 : Statistics :: Grounding time = 0.379872s, Solving time = 0.435055s, Total time = 0.814927s

[06-02-2021_14-53-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.079846s, Solving time = 3.215562s, Total time = 8.502292s
Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-53-20] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.733643s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.001926s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.502292s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-53-20] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 12.687610s               
      ================================================      

[06-02-2021_14-53-20] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-53-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-53-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.013792s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.002017s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.039658s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005147s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.034835s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.002911s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.032064s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.004012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.035043s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005566s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.035018s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.036638s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.006345s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.038033s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.006734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.037524s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.008815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.038467s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011143s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040398s.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011144s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-53-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.039582s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.012345s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.043890s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017082s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040064s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.028871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.042476s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.043466s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.042538s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.055789s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.077116s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.101748s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.083514s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.148769s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082960s.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.083232s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 1.436076s because STOP_CON_REACHED.

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833610s, Solving time = 0.560733s, Total time = 1.436076s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039658s, Solving time = 0.005147s, Total time = 0.044805s
2 : Statistics :: Grounding time = 0.034835s, Solving time = 0.002911s, Total time = 0.037746s
3 : Statistics :: Grounding time = 0.032064s, Solving time = 0.004012s, Total time = 0.036076s
4 : Statistics :: Grounding time = 0.035043s, Solving time = 0.005566s, Total time = 0.040609s
5 : Statistics :: Grounding time = 0.035018s, Solving time = 0.005598s, Total time = 0.040616s
6 : Statistics :: Grounding time = 0.036638s, Solving time = 0.006345s, Total time = 0.042983s
7 : Statistics :: Grounding time = 0.038033s, Solving time = 0.006734s, Total time = 0.044767s
8 : Statistics :: Grounding time = 0.037524s, Solving time = 0.008815s, Total time = 0.046339s
9 : Statistics :: Grounding time = 0.038467s, Solving time = 0.011143s, Total time = 0.049610s
10 : Statistics :: Grounding time = 0.040398s, Solving time = 0.011144s, Total time = 0.051543s
11 : Statistics :: Grounding time = 0.039582s, Solving time = 0.012345s, Total time = 0.051927s
12 : Statistics :: Grounding time = 0.043890s, Solving time = 0.017082s, Total time = 0.060972s
13 : Statistics :: Grounding time = 0.040064s, Solving time = 0.028871s, Total time = 0.068935s
14 : Statistics :: Grounding time = 0.042476s, Solving time = 0.043466s, Total time = 0.085941s
15 : Statistics :: Grounding time = 0.042538s, Solving time = 0.055789s, Total time = 0.098327s
16 : Statistics :: Grounding time = 0.077116s, Solving time = 0.101748s, Total time = 0.178864s
17 : Statistics :: Grounding time = 0.083514s, Solving time = 0.148769s, Total time = 0.232283s
18 : Statistics :: Grounding time = 0.082960s, Solving time = 0.083232s, Total time = 0.166191s

[06-02-2021_14-53-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833610s, Solving time = 0.560733s, Total time = 1.436076s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-53-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.014627s.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002296s.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.651184s.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.229218s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.070381s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.017756s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.068861s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.016523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.070099s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.069984s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.028687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072361s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.095595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.086592s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.047917s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078526s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.037469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076203s.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.080540s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078324s.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.082285s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 2.054263s because STOP_CON_REACHED.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.337140s, Solving time = 0.660799s, Total time = 2.054263s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.651184s, Solving time = 0.229218s, Total time = 0.880402s
2 : Statistics :: Grounding time = 0.070381s, Solving time = 0.017756s, Total time = 0.088137s
3 : Statistics :: Grounding time = 0.068861s, Solving time = 0.016523s, Total time = 0.085383s
4 : Statistics :: Grounding time = 0.070099s, Solving time = 0.022514s, Total time = 0.092613s
5 : Statistics :: Grounding time = 0.069984s, Solving time = 0.028687s, Total time = 0.098670s
6 : Statistics :: Grounding time = 0.072361s, Solving time = 0.095595s, Total time = 0.167956s
7 : Statistics :: Grounding time = 0.086592s, Solving time = 0.047917s, Total time = 0.134509s
8 : Statistics :: Grounding time = 0.078526s, Solving time = 0.037469s, Total time = 0.115995s
9 : Statistics :: Grounding time = 0.076203s, Solving time = 0.080540s, Total time = 0.156743s
10 : Statistics :: Grounding time = 0.078324s, Solving time = 0.082285s, Total time = 0.160609s

[06-02-2021_14-53-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.337140s, Solving time = 0.660799s, Total time = 2.054263s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-53-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.016702s.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.002689s.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 2.917533s.

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.568025s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.104848s.

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.035062s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-53-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.105432s.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.039067s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.108030s.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.044957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.106725s.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.102916s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.119103s.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.115982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.112561s.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.148421s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-53-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.109285s.

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.246142s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.113212s.

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.310611s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.114090s.

[06-02-2021_14-53-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.337744s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.117293s.

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.326870s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.121134s.

[06-02-2021_14-53-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.424309s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.121492s.

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.369735s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-53-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.355152s.

[06-02-2021_14-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.777072s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-53-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.367408s.

[06-02-2021_14-53-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.733460s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 9.808900s because STOP_CON_REACHED.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.009999s, Solving time = 4.583062s, Total time = 9.808900s
Final Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.917533s, Solving time = 0.568025s, Total time = 3.485558s
2 : Statistics :: Grounding time = 0.104848s, Solving time = 0.035062s, Total time = 0.139910s
3 : Statistics :: Grounding time = 0.105432s, Solving time = 0.039067s, Total time = 0.144499s
4 : Statistics :: Grounding time = 0.108030s, Solving time = 0.044957s, Total time = 0.152987s
5 : Statistics :: Grounding time = 0.106725s, Solving time = 0.102916s, Total time = 0.209640s
6 : Statistics :: Grounding time = 0.119103s, Solving time = 0.115982s, Total time = 0.235085s
7 : Statistics :: Grounding time = 0.112561s, Solving time = 0.148421s, Total time = 0.260982s
8 : Statistics :: Grounding time = 0.109285s, Solving time = 0.246142s, Total time = 0.355427s
9 : Statistics :: Grounding time = 0.113212s, Solving time = 0.310611s, Total time = 0.423824s
10 : Statistics :: Grounding time = 0.114090s, Solving time = 0.337744s, Total time = 0.451833s
11 : Statistics :: Grounding time = 0.117293s, Solving time = 0.326870s, Total time = 0.444163s
12 : Statistics :: Grounding time = 0.121134s, Solving time = 0.424309s, Total time = 0.545442s
13 : Statistics :: Grounding time = 0.121492s, Solving time = 0.369735s, Total time = 0.491227s
14 : Statistics :: Grounding time = 0.355152s, Solving time = 0.777072s, Total time = 1.132224s
15 : Statistics :: Grounding time = 0.367408s, Solving time = 0.733460s, Total time = 1.100868s

[06-02-2021_14-53-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.009999s, Solving time = 4.583062s, Total time = 9.808900s
Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-53-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-53-34] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.436076s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.054263s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.808900s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-53-34] INFO :: Experiment >> 

      ================================================      
              Initial run 2 : Time 13.732639s               
      ================================================      

[06-02-2021_14-53-34] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-53-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-53-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.013821s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.002359s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039943s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.006012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.031161s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003661s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.033632s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.004480s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.035507s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005512s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.034760s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005696s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.035799s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.006816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.038447s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.037664s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.008988s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039279s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009990s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.044212s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.012307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039592s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.014340s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040788s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.021692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.044579s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.031448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.042583s.

[06-02-2021_14-53-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.046823s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.042683s.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.092220s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.077154s.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.132300s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.080576s.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.207275s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.085387s.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.142446s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 1.644466s because STOP_CON_REACHED.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.837568s, Solving time = 0.761879s, Total time = 1.644466s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039943s, Solving time = 0.006012s, Total time = 0.045955s
2 : Statistics :: Grounding time = 0.031161s, Solving time = 0.003661s, Total time = 0.034822s
3 : Statistics :: Grounding time = 0.033632s, Solving time = 0.004480s, Total time = 0.038112s
4 : Statistics :: Grounding time = 0.035507s, Solving time = 0.005512s, Total time = 0.041018s
5 : Statistics :: Grounding time = 0.034760s, Solving time = 0.005696s, Total time = 0.040456s
6 : Statistics :: Grounding time = 0.035799s, Solving time = 0.006816s, Total time = 0.042615s
7 : Statistics :: Grounding time = 0.038447s, Solving time = 0.007514s, Total time = 0.045961s
8 : Statistics :: Grounding time = 0.037664s, Solving time = 0.008988s, Total time = 0.046652s
9 : Statistics :: Grounding time = 0.039279s, Solving time = 0.009990s, Total time = 0.049270s
10 : Statistics :: Grounding time = 0.044212s, Solving time = 0.012307s, Total time = 0.056519s
11 : Statistics :: Grounding time = 0.039592s, Solving time = 0.014340s, Total time = 0.053932s
12 : Statistics :: Grounding time = 0.040788s, Solving time = 0.021692s, Total time = 0.062480s
13 : Statistics :: Grounding time = 0.044579s, Solving time = 0.031448s, Total time = 0.076027s
14 : Statistics :: Grounding time = 0.042583s, Solving time = 0.046823s, Total time = 0.089406s
15 : Statistics :: Grounding time = 0.042683s, Solving time = 0.092220s, Total time = 0.134904s
16 : Statistics :: Grounding time = 0.077154s, Solving time = 0.132300s, Total time = 0.209454s
17 : Statistics :: Grounding time = 0.080576s, Solving time = 0.207275s, Total time = 0.287851s
18 : Statistics :: Grounding time = 0.085387s, Solving time = 0.142446s, Total time = 0.227833s

[06-02-2021_14-53-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.837568s, Solving time = 0.761879s, Total time = 1.644466s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-53-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,release(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-53-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[06-02-2021_14-53-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.015046s.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.001989s.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.641540s.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.228410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.071873s.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017148s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-53-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.069719s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.015971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.071437s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.023112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.073371s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.032473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076074s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.070547s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.074519s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.031980s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076510s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.062165s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077400s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.090579s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079841s.

[06-02-2021_14-53-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.067764s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 2.027584s because STOP_CON_REACHED.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.327330s, Solving time = 0.642139s, Total time = 2.027584s
Final Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.641540s, Solving time = 0.228410s, Total time = 0.869950s
2 : Statistics :: Grounding time = 0.071873s, Solving time = 0.017148s, Total time = 0.089021s
3 : Statistics :: Grounding time = 0.069719s, Solving time = 0.015971s, Total time = 0.085690s
4 : Statistics :: Grounding time = 0.071437s, Solving time = 0.023112s, Total time = 0.094549s
5 : Statistics :: Grounding time = 0.073371s, Solving time = 0.032473s, Total time = 0.105844s
6 : Statistics :: Grounding time = 0.076074s, Solving time = 0.070547s, Total time = 0.146621s
7 : Statistics :: Grounding time = 0.074519s, Solving time = 0.031980s, Total time = 0.106499s
8 : Statistics :: Grounding time = 0.076510s, Solving time = 0.062165s, Total time = 0.138676s
9 : Statistics :: Grounding time = 0.077400s, Solving time = 0.090579s, Total time = 0.167979s
10 : Statistics :: Grounding time = 0.079841s, Solving time = 0.067764s, Total time = 0.147605s

[06-02-2021_14-53-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.327330s, Solving time = 0.642139s, Total time = 2.027584s
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-53-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_2,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,release(manipulator_arm_1,(block,3)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-53-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.016702s.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003576s.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 2.944731s.

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.558630s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.113287s.

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.035415s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.102816s.

[06-02-2021_14-53-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.042744s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.107394s.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.098473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.113958s.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.091762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.114956s.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.094135s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.108133s.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.074752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-53-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.110331s.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.085732s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112302s.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.116999s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112289s.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.160041s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.115556s.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.240083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-53-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.120422s.

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.236442s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.118896s.

[06-02-2021_14-53-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.510901s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.365120s.

[06-02-2021_14-53-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.840806s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.355268s.

[06-02-2021_14-53-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.667899s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 9.109723s because STOP_CON_REACHED.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.032159s, Solving time = 3.858391s, Total time = 9.109723s
Final Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.944731s, Solving time = 0.558630s, Total time = 3.503360s
2 : Statistics :: Grounding time = 0.113287s, Solving time = 0.035415s, Total time = 0.148702s
3 : Statistics :: Grounding time = 0.102816s, Solving time = 0.042744s, Total time = 0.145560s
4 : Statistics :: Grounding time = 0.107394s, Solving time = 0.098473s, Total time = 0.205867s
5 : Statistics :: Grounding time = 0.113958s, Solving time = 0.091762s, Total time = 0.205720s
6 : Statistics :: Grounding time = 0.114956s, Solving time = 0.094135s, Total time = 0.209091s
7 : Statistics :: Grounding time = 0.108133s, Solving time = 0.074752s, Total time = 0.182885s
8 : Statistics :: Grounding time = 0.110331s, Solving time = 0.085732s, Total time = 0.196063s
9 : Statistics :: Grounding time = 0.112302s, Solving time = 0.116999s, Total time = 0.229301s
10 : Statistics :: Grounding time = 0.112289s, Solving time = 0.160041s, Total time = 0.272330s
11 : Statistics :: Grounding time = 0.115556s, Solving time = 0.240083s, Total time = 0.355639s
12 : Statistics :: Grounding time = 0.120422s, Solving time = 0.236442s, Total time = 0.356864s
13 : Statistics :: Grounding time = 0.118896s, Solving time = 0.510901s, Total time = 0.629798s
14 : Statistics :: Grounding time = 0.365120s, Solving time = 0.840806s, Total time = 1.205926s
15 : Statistics :: Grounding time = 0.355268s, Solving time = 0.667899s, Total time = 1.023167s

[06-02-2021_14-53-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.032159s, Solving time = 3.858391s, Total time = 9.109723s
Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-53-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,release(manipulator_end_1,(block,3)),31)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-53-47] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.644466s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.027584s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.109723s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-53-47] INFO :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 13.226743s            
      ================================================      

[06-02-2021_14-53-47] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-53-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-53-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.013921s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002076s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.039789s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005270s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.030939s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.002856s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.031223s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.003734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037780s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.034457s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005015s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.036174s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037782s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006751s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.038098s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.008234s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.038710s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.043619s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.010492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.043295s.

[06-02-2021_14-53-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.013884s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040599s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015349s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.043371s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.026412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041762s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.046048s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041441s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.063216s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.076928s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.099129s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.079863s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.163446s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.083973s.

[06-02-2021_14-53-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.190501s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 1.559638s because STOP_CON_REACHED.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833725s, Solving time = 0.683840s, Total time = 1.559638s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039789s, Solving time = 0.005270s, Total time = 0.045059s
2 : Statistics :: Grounding time = 0.030939s, Solving time = 0.002856s, Total time = 0.033796s
3 : Statistics :: Grounding time = 0.031223s, Solving time = 0.003734s, Total time = 0.034958s
4 : Statistics :: Grounding time = 0.037780s, Solving time = 0.005130s, Total time = 0.042910s
5 : Statistics :: Grounding time = 0.034457s, Solving time = 0.005015s, Total time = 0.039472s
6 : Statistics :: Grounding time = 0.036174s, Solving time = 0.006420s, Total time = 0.042594s
7 : Statistics :: Grounding time = 0.037782s, Solving time = 0.006751s, Total time = 0.044533s
8 : Statistics :: Grounding time = 0.038098s, Solving time = 0.008234s, Total time = 0.046332s
9 : Statistics :: Grounding time = 0.038710s, Solving time = 0.009875s, Total time = 0.048585s
10 : Statistics :: Grounding time = 0.043619s, Solving time = 0.010492s, Total time = 0.054111s
11 : Statistics :: Grounding time = 0.043295s, Solving time = 0.013884s, Total time = 0.057180s
12 : Statistics :: Grounding time = 0.040599s, Solving time = 0.015349s, Total time = 0.055948s
13 : Statistics :: Grounding time = 0.043371s, Solving time = 0.026412s, Total time = 0.069783s
14 : Statistics :: Grounding time = 0.041762s, Solving time = 0.046048s, Total time = 0.087810s
15 : Statistics :: Grounding time = 0.041441s, Solving time = 0.063216s, Total time = 0.104657s
16 : Statistics :: Grounding time = 0.076928s, Solving time = 0.099129s, Total time = 0.176057s
17 : Statistics :: Grounding time = 0.079863s, Solving time = 0.163446s, Total time = 0.243309s
18 : Statistics :: Grounding time = 0.083973s, Solving time = 0.190501s, Total time = 0.274474s

[06-02-2021_14-53-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833725s, Solving time = 0.683840s, Total time = 1.559638s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,release(manipulator_arm_2,(block,5)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-53-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.015009s.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.001972s.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.642226s.

[06-02-2021_14-53-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.227285s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.068840s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.068854s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.016676s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.069761s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022702s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.072114s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.026852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073144s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.035664s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.074768s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.034208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.076232s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.052610s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.077215s.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.076823s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078941s.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.084183s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 1.973730s because STOP_CON_REACHED.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.317106s, Solving time = 0.598658s, Total time = 1.973730s
Final Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.642226s, Solving time = 0.227285s, Total time = 0.869511s
2 : Statistics :: Grounding time = 0.068840s, Solving time = 0.019683s, Total time = 0.088523s
3 : Statistics :: Grounding time = 0.068854s, Solving time = 0.016676s, Total time = 0.085530s
4 : Statistics :: Grounding time = 0.069761s, Solving time = 0.022702s, Total time = 0.092463s
5 : Statistics :: Grounding time = 0.072114s, Solving time = 0.026852s, Total time = 0.098967s
6 : Statistics :: Grounding time = 0.073144s, Solving time = 0.035664s, Total time = 0.108808s
7 : Statistics :: Grounding time = 0.074768s, Solving time = 0.034208s, Total time = 0.108976s
8 : Statistics :: Grounding time = 0.076232s, Solving time = 0.052610s, Total time = 0.128842s
9 : Statistics :: Grounding time = 0.077215s, Solving time = 0.076823s, Total time = 0.154039s
10 : Statistics :: Grounding time = 0.078941s, Solving time = 0.084183s, Total time = 0.163124s

[06-02-2021_14-53-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.317106s, Solving time = 0.598658s, Total time = 1.973730s
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-53-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,release(manipulator_arm_1,(block,3)),17)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,release(manipulator_arm_2,(block,5)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-53-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-53-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.017360s.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.002886s.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-53-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 2.960115s.

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.558255s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.103668s.

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.035117s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-53-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.105201s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.039814s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.112620s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.082199s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.109366s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.074483s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.108382s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.072253s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.107178s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.081572s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.110301s.

[06-02-2021_14-53-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.085926s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.116223s.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.185648s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.111185s.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.120440s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.112623s.

[06-02-2021_14-53-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.251600s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.125997s.

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.553468s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.117170s.

[06-02-2021_14-53-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.451531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.133418s.

[06-02-2021_14-53-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.647945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.364688s.

[06-02-2021_14-53-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.934525s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 9.211382s because STOP_CON_REACHED.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.815496s, Solving time = 4.177662s, Total time = 9.211382s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.960115s, Solving time = 0.558255s, Total time = 3.518370s
2 : Statistics :: Grounding time = 0.103668s, Solving time = 0.035117s, Total time = 0.138785s
3 : Statistics :: Grounding time = 0.105201s, Solving time = 0.039814s, Total time = 0.145015s
4 : Statistics :: Grounding time = 0.112620s, Solving time = 0.082199s, Total time = 0.194818s
5 : Statistics :: Grounding time = 0.109366s, Solving time = 0.074483s, Total time = 0.183849s
6 : Statistics :: Grounding time = 0.108382s, Solving time = 0.072253s, Total time = 0.180634s
7 : Statistics :: Grounding time = 0.107178s, Solving time = 0.081572s, Total time = 0.188751s
8 : Statistics :: Grounding time = 0.110301s, Solving time = 0.085926s, Total time = 0.196228s
9 : Statistics :: Grounding time = 0.116223s, Solving time = 0.185648s, Total time = 0.301871s
10 : Statistics :: Grounding time = 0.111185s, Solving time = 0.120440s, Total time = 0.231625s
11 : Statistics :: Grounding time = 0.112623s, Solving time = 0.251600s, Total time = 0.364223s
12 : Statistics :: Grounding time = 0.125997s, Solving time = 0.553468s, Total time = 0.679465s
13 : Statistics :: Grounding time = 0.117170s, Solving time = 0.451531s, Total time = 0.568701s
14 : Statistics :: Grounding time = 0.133418s, Solving time = 0.647945s, Total time = 0.781363s
15 : Statistics :: Grounding time = 0.364688s, Solving time = 0.934525s, Total time = 1.299214s

[06-02-2021_14-54-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.815496s, Solving time = 4.177662s, Total time = 9.211382s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_1,extended),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_1,(block,3)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-54-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.559638s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.973730s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.211382s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-54-00] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 13.173435s            
      ================================================      

[06-02-2021_14-54-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-54-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-54-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.014218s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.002837s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.039318s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005644s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.031024s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.031310s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.004748s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.034360s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005526s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.034653s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005838s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.036875s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006513s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.037828s.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-54-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.037517s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.008231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038803s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.011073s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040365s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.012195s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.039722s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.014488s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.041088s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020010s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.043492s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.028835s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.042060s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.041473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.042682s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.064697s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077363s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.097446s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.081774s.

[06-02-2021_14-54-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.229007s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.083654s.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.066619s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 1.505903s because STOP_CON_REACHED.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828107s, Solving time = 0.635121s, Total time = 1.505903s
Final Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039318s, Solving time = 0.005644s, Total time = 0.044963s
2 : Statistics :: Grounding time = 0.031024s, Solving time = 0.003528s, Total time = 0.034552s
3 : Statistics :: Grounding time = 0.031310s, Solving time = 0.004748s, Total time = 0.036058s
4 : Statistics :: Grounding time = 0.034360s, Solving time = 0.005526s, Total time = 0.039886s
5 : Statistics :: Grounding time = 0.034653s, Solving time = 0.005838s, Total time = 0.040491s
6 : Statistics :: Grounding time = 0.036875s, Solving time = 0.006513s, Total time = 0.043388s
7 : Statistics :: Grounding time = 0.037828s, Solving time = 0.006410s, Total time = 0.044239s
8 : Statistics :: Grounding time = 0.037517s, Solving time = 0.008231s, Total time = 0.045749s
9 : Statistics :: Grounding time = 0.038803s, Solving time = 0.011073s, Total time = 0.049876s
10 : Statistics :: Grounding time = 0.040365s, Solving time = 0.012195s, Total time = 0.052560s
11 : Statistics :: Grounding time = 0.039722s, Solving time = 0.014488s, Total time = 0.054210s
12 : Statistics :: Grounding time = 0.041088s, Solving time = 0.020010s, Total time = 0.061098s
13 : Statistics :: Grounding time = 0.043492s, Solving time = 0.028835s, Total time = 0.072328s
14 : Statistics :: Grounding time = 0.042060s, Solving time = 0.041473s, Total time = 0.083534s
15 : Statistics :: Grounding time = 0.042682s, Solving time = 0.064697s, Total time = 0.107379s
16 : Statistics :: Grounding time = 0.077363s, Solving time = 0.097446s, Total time = 0.174810s
17 : Statistics :: Grounding time = 0.081774s, Solving time = 0.229007s, Total time = 0.310781s
18 : Statistics :: Grounding time = 0.083654s, Solving time = 0.066619s, Total time = 0.150273s

[06-02-2021_14-54-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828107s, Solving time = 0.635121s, Total time = 1.505903s
Model :: Total atoms = 3523, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-54-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,3)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,release(manipulator_arm_1,(block,5)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-54-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.014835s.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003174s.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.622108s.

[06-02-2021_14-54-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.228049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073720s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.074479s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.021591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073591s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022826s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072334s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.029055s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073076s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.073437s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.075299s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.057006s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.076771s.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.041428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.077246s.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.056194s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.079317s.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.097122s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 2.016504s because STOP_CON_REACHED.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.312776s, Solving time = 0.646976s, Total time = 2.016504s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.622108s, Solving time = 0.228049s, Total time = 0.850157s
2 : Statistics :: Grounding time = 0.073720s, Solving time = 0.017095s, Total time = 0.090814s
3 : Statistics :: Grounding time = 0.074479s, Solving time = 0.021591s, Total time = 0.096070s
4 : Statistics :: Grounding time = 0.073591s, Solving time = 0.022826s, Total time = 0.096417s
5 : Statistics :: Grounding time = 0.072334s, Solving time = 0.029055s, Total time = 0.101388s
6 : Statistics :: Grounding time = 0.073076s, Solving time = 0.073437s, Total time = 0.146513s
7 : Statistics :: Grounding time = 0.075299s, Solving time = 0.057006s, Total time = 0.132305s
8 : Statistics :: Grounding time = 0.076771s, Solving time = 0.041428s, Total time = 0.118200s
9 : Statistics :: Grounding time = 0.077246s, Solving time = 0.056194s, Total time = 0.133440s
10 : Statistics :: Grounding time = 0.079317s, Solving time = 0.097122s, Total time = 0.176439s

[06-02-2021_14-54-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.312776s, Solving time = 0.646976s, Total time = 2.016504s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),17)
occurs(2,talos,release(manipulator_arm_2,(block,3)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,release(manipulator_arm_1,(block,5)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-54-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.018062s.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.003853s.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 2.916226s.

[06-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.551043s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.104113s.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.035939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.107194s.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.040750s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.108201s.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.058460s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.109355s.

[06-02-2021_14-54-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.553453s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.113660s.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.098448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.115104s.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.054146s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.110539s.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.066520s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.111327s.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.130308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-54-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.113214s.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.156279s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.115443s.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.174969s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.115254s.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.291374s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-54-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.117547s.

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.305480s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.362369s.

[06-02-2021_14-54-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.631306s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.379124s.

[06-02-2021_14-54-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.308817s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 8.700749s because STOP_CON_REACHED.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.016732s, Solving time = 3.461144s, Total time = 8.700749s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.916226s, Solving time = 0.551043s, Total time = 3.467270s
2 : Statistics :: Grounding time = 0.104113s, Solving time = 0.035939s, Total time = 0.140052s
3 : Statistics :: Grounding time = 0.107194s, Solving time = 0.040750s, Total time = 0.147944s
4 : Statistics :: Grounding time = 0.108201s, Solving time = 0.058460s, Total time = 0.166662s
5 : Statistics :: Grounding time = 0.109355s, Solving time = 0.553453s, Total time = 0.662809s
6 : Statistics :: Grounding time = 0.113660s, Solving time = 0.098448s, Total time = 0.212108s
7 : Statistics :: Grounding time = 0.115104s, Solving time = 0.054146s, Total time = 0.169249s
8 : Statistics :: Grounding time = 0.110539s, Solving time = 0.066520s, Total time = 0.177059s
9 : Statistics :: Grounding time = 0.111327s, Solving time = 0.130308s, Total time = 0.241635s
10 : Statistics :: Grounding time = 0.113214s, Solving time = 0.156279s, Total time = 0.269493s
11 : Statistics :: Grounding time = 0.115443s, Solving time = 0.174969s, Total time = 0.290413s
12 : Statistics :: Grounding time = 0.115254s, Solving time = 0.291374s, Total time = 0.406629s
13 : Statistics :: Grounding time = 0.117547s, Solving time = 0.305480s, Total time = 0.423027s
14 : Statistics :: Grounding time = 0.362369s, Solving time = 0.631306s, Total time = 0.993674s
15 : Statistics :: Grounding time = 0.379124s, Solving time = 0.308817s, Total time = 0.687940s

[06-02-2021_14-54-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.016732s, Solving time = 3.461144s, Total time = 8.700749s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-54-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.505903s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.016504s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.700749s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-54-13] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 12.643766s            
      ================================================      

[06-02-2021_14-54-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-54-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-54-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.014849s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.002262s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038859s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005773s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.031924s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003485s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.031252s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.004539s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.034624s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005488s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.037601s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005612s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.037132s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007108s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.037843s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007006s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038555s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008117s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038160s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040132s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010807s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039746s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.015369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040950s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.020162s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.041009s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.026177s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.042323s.

[06-02-2021_14-54-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.048406s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.042598s.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.068785s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077147s.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.130794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079122s.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.214994s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.083817s.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.095270s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 1.560702s because STOP_CON_REACHED.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.827643s, Solving time = 0.689541s, Total time = 1.560702s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038859s, Solving time = 0.005773s, Total time = 0.044632s
2 : Statistics :: Grounding time = 0.031924s, Solving time = 0.003485s, Total time = 0.035409s
3 : Statistics :: Grounding time = 0.031252s, Solving time = 0.004539s, Total time = 0.035791s
4 : Statistics :: Grounding time = 0.034624s, Solving time = 0.005488s, Total time = 0.040112s
5 : Statistics :: Grounding time = 0.037601s, Solving time = 0.005612s, Total time = 0.043213s
6 : Statistics :: Grounding time = 0.037132s, Solving time = 0.007108s, Total time = 0.044240s
7 : Statistics :: Grounding time = 0.037843s, Solving time = 0.007006s, Total time = 0.044849s
8 : Statistics :: Grounding time = 0.038555s, Solving time = 0.008117s, Total time = 0.046673s
9 : Statistics :: Grounding time = 0.038160s, Solving time = 0.009386s, Total time = 0.047546s
10 : Statistics :: Grounding time = 0.040132s, Solving time = 0.010807s, Total time = 0.050939s
11 : Statistics :: Grounding time = 0.039746s, Solving time = 0.015369s, Total time = 0.055115s
12 : Statistics :: Grounding time = 0.040950s, Solving time = 0.020162s, Total time = 0.061113s
13 : Statistics :: Grounding time = 0.041009s, Solving time = 0.026177s, Total time = 0.067186s
14 : Statistics :: Grounding time = 0.042323s, Solving time = 0.048406s, Total time = 0.090729s
15 : Statistics :: Grounding time = 0.042598s, Solving time = 0.068785s, Total time = 0.111383s
16 : Statistics :: Grounding time = 0.077147s, Solving time = 0.130794s, Total time = 0.207941s
17 : Statistics :: Grounding time = 0.079122s, Solving time = 0.214994s, Total time = 0.294116s
18 : Statistics :: Grounding time = 0.083817s, Solving time = 0.095270s, Total time = 0.179087s

[06-02-2021_14-54-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.827643s, Solving time = 0.689541s, Total time = 1.560702s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-54-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.014538s.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.003328s.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.651823s.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.229514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.067744s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.069363s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.015997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.071014s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.022361s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.072457s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.026841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.073434s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.074816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.085472s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.037466s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.075990s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.050705s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078775s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.067651s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079552s.

[06-02-2021_14-54-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.041433s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 1.984415s because STOP_CON_REACHED.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.340161s, Solving time = 0.587564s, Total time = 1.984415s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.651823s, Solving time = 0.229514s, Total time = 0.881337s
2 : Statistics :: Grounding time = 0.067744s, Solving time = 0.017452s, Total time = 0.085196s
3 : Statistics :: Grounding time = 0.069363s, Solving time = 0.015997s, Total time = 0.085360s
4 : Statistics :: Grounding time = 0.071014s, Solving time = 0.022361s, Total time = 0.093375s
5 : Statistics :: Grounding time = 0.072457s, Solving time = 0.026841s, Total time = 0.099298s
6 : Statistics :: Grounding time = 0.073434s, Solving time = 0.074816s, Total time = 0.148250s
7 : Statistics :: Grounding time = 0.085472s, Solving time = 0.037466s, Total time = 0.122938s
8 : Statistics :: Grounding time = 0.075990s, Solving time = 0.050705s, Total time = 0.126695s
9 : Statistics :: Grounding time = 0.078775s, Solving time = 0.067651s, Total time = 0.146426s
10 : Statistics :: Grounding time = 0.079552s, Solving time = 0.041433s, Total time = 0.120985s

[06-02-2021_14-54-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.340161s, Solving time = 0.587564s, Total time = 1.984415s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,configure(manipulator_arm_1,extended),4)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-54-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.016727s.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.002952s.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 2.932750s.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.559760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.104526s.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.035566s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103177s.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.037235s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-54-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.113658s.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.039736s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.106974s.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.094568s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.107787s.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.053626s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.114296s.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.064513s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.110643s.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.123161s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-54-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.113828s.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.136065s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.112006s.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.156072s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.116192s.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.253634s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-54-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.117466s.

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.255698s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.117302s.

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.367641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-54-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.356929s.

[06-02-2021_14-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.480268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-54-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.364345s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.387173s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 8.268077s because STOP_CON_REACHED.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.008608s, Solving time = 3.047667s, Total time = 8.268077s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.932750s, Solving time = 0.559760s, Total time = 3.492511s
2 : Statistics :: Grounding time = 0.104526s, Solving time = 0.035566s, Total time = 0.140092s
3 : Statistics :: Grounding time = 0.103177s, Solving time = 0.037235s, Total time = 0.140412s
4 : Statistics :: Grounding time = 0.113658s, Solving time = 0.039736s, Total time = 0.153394s
5 : Statistics :: Grounding time = 0.106974s, Solving time = 0.094568s, Total time = 0.201542s
6 : Statistics :: Grounding time = 0.107787s, Solving time = 0.053626s, Total time = 0.161413s
7 : Statistics :: Grounding time = 0.114296s, Solving time = 0.064513s, Total time = 0.178809s
8 : Statistics :: Grounding time = 0.110643s, Solving time = 0.123161s, Total time = 0.233804s
9 : Statistics :: Grounding time = 0.113828s, Solving time = 0.136065s, Total time = 0.249893s
10 : Statistics :: Grounding time = 0.112006s, Solving time = 0.156072s, Total time = 0.268078s
11 : Statistics :: Grounding time = 0.116192s, Solving time = 0.253634s, Total time = 0.369826s
12 : Statistics :: Grounding time = 0.117466s, Solving time = 0.255698s, Total time = 0.373163s
13 : Statistics :: Grounding time = 0.117302s, Solving time = 0.367641s, Total time = 0.484943s
14 : Statistics :: Grounding time = 0.356929s, Solving time = 0.480268s, Total time = 0.837197s
15 : Statistics :: Grounding time = 0.364345s, Solving time = 0.387173s, Total time = 0.751518s

[06-02-2021_14-54-25] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.008608s, Solving time = 3.047667s, Total time = 8.268077s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_2,(block,5)),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-54-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.560702s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.984415s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.268077s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-54-25] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 12.321231s            
      ================================================      

[06-02-2021_14-54-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-54-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-54-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-25] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.014705s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.002272s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.041983s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.031878s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.031465s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.004762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.034401s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.034335s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.004944s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.036579s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040495s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006656s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.037536s.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-54-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038118s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010388s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040060s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010416s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040439s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.014692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.041620s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.022940s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040292s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.030320s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.045539s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.047132s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.042262s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.072224s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077233s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.110670s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.081000s.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.209727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084351s.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.040148s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 1.493094s because STOP_CON_REACHED.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.834292s, Solving time = 0.615749s, Total time = 1.493094s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041983s, Solving time = 0.005881s, Total time = 0.047863s
2 : Statistics :: Grounding time = 0.031878s, Solving time = 0.003360s, Total time = 0.035238s
3 : Statistics :: Grounding time = 0.031465s, Solving time = 0.004762s, Total time = 0.036227s
4 : Statistics :: Grounding time = 0.034401s, Solving time = 0.005360s, Total time = 0.039761s
5 : Statistics :: Grounding time = 0.034335s, Solving time = 0.004944s, Total time = 0.039279s
6 : Statistics :: Grounding time = 0.036579s, Solving time = 0.005923s, Total time = 0.042502s
7 : Statistics :: Grounding time = 0.040495s, Solving time = 0.006656s, Total time = 0.047151s
8 : Statistics :: Grounding time = 0.037536s, Solving time = 0.007935s, Total time = 0.045471s
9 : Statistics :: Grounding time = 0.038118s, Solving time = 0.010388s, Total time = 0.048507s
10 : Statistics :: Grounding time = 0.040060s, Solving time = 0.010416s, Total time = 0.050476s
11 : Statistics :: Grounding time = 0.040439s, Solving time = 0.014692s, Total time = 0.055131s
12 : Statistics :: Grounding time = 0.041620s, Solving time = 0.022940s, Total time = 0.064559s
13 : Statistics :: Grounding time = 0.040292s, Solving time = 0.030320s, Total time = 0.070613s
14 : Statistics :: Grounding time = 0.045539s, Solving time = 0.047132s, Total time = 0.092671s
15 : Statistics :: Grounding time = 0.042262s, Solving time = 0.072224s, Total time = 0.114487s
16 : Statistics :: Grounding time = 0.077233s, Solving time = 0.110670s, Total time = 0.187903s
17 : Statistics :: Grounding time = 0.081000s, Solving time = 0.209727s, Total time = 0.290727s
18 : Statistics :: Grounding time = 0.084351s, Solving time = 0.040148s, Total time = 0.124499s

[06-02-2021_14-54-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.834292s, Solving time = 0.615749s, Total time = 1.493094s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,3)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-54-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.015210s.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.002060s.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.639934s.

[06-02-2021_14-54-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.225785s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.067434s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016359s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.068970s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015755s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.090330s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.024010s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.073385s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.028090s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.075685s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.041101s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.075885s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.035527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.076761s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.054743s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.076512s.

[06-02-2021_14-54-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.074249s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077784s.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.078390s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 1.991859s because STOP_CON_REACHED.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.337891s, Solving time = 0.596069s, Total time = 1.991859s
Final Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.639934s, Solving time = 0.225785s, Total time = 0.865719s
2 : Statistics :: Grounding time = 0.067434s, Solving time = 0.016359s, Total time = 0.083793s
3 : Statistics :: Grounding time = 0.068970s, Solving time = 0.015755s, Total time = 0.084726s
4 : Statistics :: Grounding time = 0.090330s, Solving time = 0.024010s, Total time = 0.114340s
5 : Statistics :: Grounding time = 0.073385s, Solving time = 0.028090s, Total time = 0.101475s
6 : Statistics :: Grounding time = 0.075685s, Solving time = 0.041101s, Total time = 0.116786s
7 : Statistics :: Grounding time = 0.075885s, Solving time = 0.035527s, Total time = 0.111412s
8 : Statistics :: Grounding time = 0.076761s, Solving time = 0.054743s, Total time = 0.131504s
9 : Statistics :: Grounding time = 0.076512s, Solving time = 0.074249s, Total time = 0.150761s
10 : Statistics :: Grounding time = 0.077784s, Solving time = 0.078390s, Total time = 0.156173s

[06-02-2021_14-54-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.337891s, Solving time = 0.596069s, Total time = 1.991859s
Model :: Total atoms = 6732, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-54-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_2,(block,3)),18)
occurs(2,talos,release(manipulator_arm_1,(block,5)),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-54-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.017922s.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003026s.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 2.901798s.

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.553706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.105036s.

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.035980s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-54-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.104825s.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.041000s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.106104s.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.079902s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.107492s.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.104622s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.107191s.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.074278s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.111504s.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.111169s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-54-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.111859s.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.084584s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.111734s.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.224448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.113407s.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.187244s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116136s.

[06-02-2021_14-54-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.314609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.128010s.

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.322793s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.121535s.

[06-02-2021_14-54-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.348289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.368577s.

[06-02-2021_14-54-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.586119s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.368059s.

[06-02-2021_14-54-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.728472s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 9.014109s because STOP_CON_REACHED.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.001186s, Solving time = 3.800240s, Total time = 9.014109s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.901798s, Solving time = 0.553706s, Total time = 3.455503s
2 : Statistics :: Grounding time = 0.105036s, Solving time = 0.035980s, Total time = 0.141016s
3 : Statistics :: Grounding time = 0.104825s, Solving time = 0.041000s, Total time = 0.145825s
4 : Statistics :: Grounding time = 0.106104s, Solving time = 0.079902s, Total time = 0.186005s
5 : Statistics :: Grounding time = 0.107492s, Solving time = 0.104622s, Total time = 0.212114s
6 : Statistics :: Grounding time = 0.107191s, Solving time = 0.074278s, Total time = 0.181468s
7 : Statistics :: Grounding time = 0.111504s, Solving time = 0.111169s, Total time = 0.222673s
8 : Statistics :: Grounding time = 0.111859s, Solving time = 0.084584s, Total time = 0.196442s
9 : Statistics :: Grounding time = 0.111734s, Solving time = 0.224448s, Total time = 0.336182s
10 : Statistics :: Grounding time = 0.113407s, Solving time = 0.187244s, Total time = 0.300651s
11 : Statistics :: Grounding time = 0.116136s, Solving time = 0.314609s, Total time = 0.430745s
12 : Statistics :: Grounding time = 0.128010s, Solving time = 0.322793s, Total time = 0.450803s
13 : Statistics :: Grounding time = 0.121535s, Solving time = 0.348289s, Total time = 0.469824s
14 : Statistics :: Grounding time = 0.368577s, Solving time = 0.586119s, Total time = 0.954696s
15 : Statistics :: Grounding time = 0.368059s, Solving time = 0.728472s, Total time = 1.096531s

[06-02-2021_14-54-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.001186s, Solving time = 3.800240s, Total time = 9.014109s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-54-38] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.493094s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.991859s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.014109s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-54-38] INFO :: Experiment >> 

      ================================================      
            Experimental run 5 : Time 12.917146s            
      ================================================      

[06-02-2021_14-54-38] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-54-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-54-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Instantiated.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building completed.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding base program parts.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.013906s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving base program parts.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.001701s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039962s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004983s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031146s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.003586s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031328s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034517s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.035895s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005568s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036027s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.038379s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.007152s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.056530s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.008762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041009s.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.010205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-54-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.042256s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.010712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040902s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.012510s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039517s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.016703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041665s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.032783s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040974s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.041769s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.043025s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.069070s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.076372s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.126329s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.080324s.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.239448s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.083791s.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.034500s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving completed in 1.534494s because STOP_CON_REACHED.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.847526s, Solving time = 0.642289s, Total time = 1.534494s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039962s, Solving time = 0.004983s, Total time = 0.044944s
2 : Statistics :: Grounding time = 0.031146s, Solving time = 0.003586s, Total time = 0.034732s
3 : Statistics :: Grounding time = 0.031328s, Solving time = 0.004709s, Total time = 0.036037s
4 : Statistics :: Grounding time = 0.034517s, Solving time = 0.005327s, Total time = 0.039845s
5 : Statistics :: Grounding time = 0.035895s, Solving time = 0.005568s, Total time = 0.041463s
6 : Statistics :: Grounding time = 0.036027s, Solving time = 0.006472s, Total time = 0.042498s
7 : Statistics :: Grounding time = 0.038379s, Solving time = 0.007152s, Total time = 0.045531s
8 : Statistics :: Grounding time = 0.056530s, Solving time = 0.008762s, Total time = 0.065291s
9 : Statistics :: Grounding time = 0.041009s, Solving time = 0.010205s, Total time = 0.051214s
10 : Statistics :: Grounding time = 0.042256s, Solving time = 0.010712s, Total time = 0.052968s
11 : Statistics :: Grounding time = 0.040902s, Solving time = 0.012510s, Total time = 0.053412s
12 : Statistics :: Grounding time = 0.039517s, Solving time = 0.016703s, Total time = 0.056220s
13 : Statistics :: Grounding time = 0.041665s, Solving time = 0.032783s, Total time = 0.074448s
14 : Statistics :: Grounding time = 0.040974s, Solving time = 0.041769s, Total time = 0.082744s
15 : Statistics :: Grounding time = 0.043025s, Solving time = 0.069070s, Total time = 0.112095s
16 : Statistics :: Grounding time = 0.076372s, Solving time = 0.126329s, Total time = 0.202702s
17 : Statistics :: Grounding time = 0.080324s, Solving time = 0.239448s, Total time = 0.319772s
18 : Statistics :: Grounding time = 0.083791s, Solving time = 0.034500s, Total time = 0.118291s

[06-02-2021_14-54-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.847526s, Solving time = 0.642289s, Total time = 1.534494s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-54-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-54-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Instantiated.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building started.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building completed.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding base program parts.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.014748s.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving base program parts.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.002449s.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving started.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.637724s.

[06-02-2021_14-54-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.234616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.068675s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.016997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.069494s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.016269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.077752s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.023597s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076910s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.028921s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.073159s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.043684s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.074969s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.075139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076646s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.041734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.083855s.

[06-02-2021_14-54-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.069662s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.077986s.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Model found:
Model :: Total atoms = 6736, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.068147s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving completed in 2.009318s because STOP_CON_REACHED.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.331918s, Solving time = 0.621215s, Total time = 2.009318s
Final Model :: Total atoms = 6736, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.637724s, Solving time = 0.234616s, Total time = 0.872340s
2 : Statistics :: Grounding time = 0.068675s, Solving time = 0.016997s, Total time = 0.085672s
3 : Statistics :: Grounding time = 0.069494s, Solving time = 0.016269s, Total time = 0.085763s
4 : Statistics :: Grounding time = 0.077752s, Solving time = 0.023597s, Total time = 0.101349s
5 : Statistics :: Grounding time = 0.076910s, Solving time = 0.028921s, Total time = 0.105831s
6 : Statistics :: Grounding time = 0.073159s, Solving time = 0.043684s, Total time = 0.116843s
7 : Statistics :: Grounding time = 0.074969s, Solving time = 0.075139s, Total time = 0.150107s
8 : Statistics :: Grounding time = 0.076646s, Solving time = 0.041734s, Total time = 0.118380s
9 : Statistics :: Grounding time = 0.083855s, Solving time = 0.069662s, Total time = 0.153517s
10 : Statistics :: Grounding time = 0.077986s, Solving time = 0.068147s, Total time = 0.146133s

[06-02-2021_14-54-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.331918s, Solving time = 0.621215s, Total time = 2.009318s
Model :: Total atoms = 6736, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-54-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-54-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Instantiated.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building started.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building completed.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding base program parts.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.016805s.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving base program parts.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.003116s.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving started.

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 2.937414s.

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.559386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.105063s.

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.036487s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-54-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.109387s.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.041077s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.107296s.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.056455s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.110137s.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.089764s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.116396s.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.078173s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.111417s.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.081566s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-54-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.116378s.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.078604s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.111055s.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.119089s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.113375s.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.119939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.116785s.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.156923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-54-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.120831s.

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.286315s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.118544s.

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.323910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-54-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.365123s.

[06-02-2021_14-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.535402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-54-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.373488s.

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Model found:
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.751096s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving completed in 8.575666s because STOP_CON_REACHED.

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.049495s, Solving time = 3.317304s, Total time = 8.575666s
Final Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.937414s, Solving time = 0.559386s, Total time = 3.496801s
2 : Statistics :: Grounding time = 0.105063s, Solving time = 0.036487s, Total time = 0.141550s
3 : Statistics :: Grounding time = 0.109387s, Solving time = 0.041077s, Total time = 0.150464s
4 : Statistics :: Grounding time = 0.107296s, Solving time = 0.056455s, Total time = 0.163751s
5 : Statistics :: Grounding time = 0.110137s, Solving time = 0.089764s, Total time = 0.199901s
6 : Statistics :: Grounding time = 0.116396s, Solving time = 0.078173s, Total time = 0.194569s
7 : Statistics :: Grounding time = 0.111417s, Solving time = 0.081566s, Total time = 0.192983s
8 : Statistics :: Grounding time = 0.116378s, Solving time = 0.078604s, Total time = 0.194982s
9 : Statistics :: Grounding time = 0.111055s, Solving time = 0.119089s, Total time = 0.230144s
10 : Statistics :: Grounding time = 0.113375s, Solving time = 0.119939s, Total time = 0.233314s
11 : Statistics :: Grounding time = 0.116785s, Solving time = 0.156923s, Total time = 0.273708s
12 : Statistics :: Grounding time = 0.120831s, Solving time = 0.286315s, Total time = 0.407147s
13 : Statistics :: Grounding time = 0.118544s, Solving time = 0.323910s, Total time = 0.442454s
14 : Statistics :: Grounding time = 0.365123s, Solving time = 0.535402s, Total time = 0.900525s
15 : Statistics :: Grounding time = 0.373488s, Solving time = 0.751096s, Total time = 1.124584s

[06-02-2021_14-54-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.049495s, Solving time = 3.317304s, Total time = 8.575666s
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_2,extended),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),28)
occurs(1,talos,release(manipulator_end_2,(block,3)),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-54-51] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.534494s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.009318s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.575666s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-54-51] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 12.545193s            
      ================================================      

[06-02-2021_14-54-51] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-54-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-54-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Instantiated.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building completed.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding base program parts.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.013759s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving base program parts.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.002741s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039545s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005730s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031096s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.003593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031048s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.004465s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.034250s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005493s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.038587s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005303s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.036092s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006570s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.037684s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.037547s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.009967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.038256s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.009205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039710s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.011765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039723s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.013806s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040863s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.017594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040498s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.028654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041640s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.042348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.042589s.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.070412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-54-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.078788s.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.102679s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.083147s.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.168503s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.083101s.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.052087s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving completed in 1.437705s because STOP_CON_REACHED.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.827924s, Solving time = 0.567597s, Total time = 1.437705s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039545s, Solving time = 0.005730s, Total time = 0.045275s
2 : Statistics :: Grounding time = 0.031096s, Solving time = 0.003593s, Total time = 0.034688s
3 : Statistics :: Grounding time = 0.031048s, Solving time = 0.004465s, Total time = 0.035513s
4 : Statistics :: Grounding time = 0.034250s, Solving time = 0.005493s, Total time = 0.039743s
5 : Statistics :: Grounding time = 0.038587s, Solving time = 0.005303s, Total time = 0.043891s
6 : Statistics :: Grounding time = 0.036092s, Solving time = 0.006570s, Total time = 0.042662s
7 : Statistics :: Grounding time = 0.037684s, Solving time = 0.006683s, Total time = 0.044367s
8 : Statistics :: Grounding time = 0.037547s, Solving time = 0.009967s, Total time = 0.047514s
9 : Statistics :: Grounding time = 0.038256s, Solving time = 0.009205s, Total time = 0.047461s
10 : Statistics :: Grounding time = 0.039710s, Solving time = 0.011765s, Total time = 0.051475s
11 : Statistics :: Grounding time = 0.039723s, Solving time = 0.013806s, Total time = 0.053528s
12 : Statistics :: Grounding time = 0.040863s, Solving time = 0.017594s, Total time = 0.058458s
13 : Statistics :: Grounding time = 0.040498s, Solving time = 0.028654s, Total time = 0.069153s
14 : Statistics :: Grounding time = 0.041640s, Solving time = 0.042348s, Total time = 0.083988s
15 : Statistics :: Grounding time = 0.042589s, Solving time = 0.070412s, Total time = 0.113001s
16 : Statistics :: Grounding time = 0.078788s, Solving time = 0.102679s, Total time = 0.181467s
17 : Statistics :: Grounding time = 0.083147s, Solving time = 0.168503s, Total time = 0.251650s
18 : Statistics :: Grounding time = 0.083101s, Solving time = 0.052087s, Total time = 0.135189s

[06-02-2021_14-54-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.827924s, Solving time = 0.567597s, Total time = 1.437705s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-54-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-54-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Instantiated.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building started.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building completed.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding base program parts.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.014515s.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving base program parts.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.002965s.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving started.

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-54-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.641224s.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.229526s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.069433s.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.016771s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.070410s.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.016320s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.071036s.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.025041s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.072373s.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.031010s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-54-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.073073s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.046171s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.079138s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.039096s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.075755s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.049231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.077695s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.081820s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.079174s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.072236s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving completed in 1.992750s because STOP_CON_REACHED.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.323827s, Solving time = 0.610188s, Total time = 1.992750s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.641224s, Solving time = 0.229526s, Total time = 0.870749s
2 : Statistics :: Grounding time = 0.069433s, Solving time = 0.016771s, Total time = 0.086205s
3 : Statistics :: Grounding time = 0.070410s, Solving time = 0.016320s, Total time = 0.086731s
4 : Statistics :: Grounding time = 0.071036s, Solving time = 0.025041s, Total time = 0.096077s
5 : Statistics :: Grounding time = 0.072373s, Solving time = 0.031010s, Total time = 0.103383s
6 : Statistics :: Grounding time = 0.073073s, Solving time = 0.046171s, Total time = 0.119244s
7 : Statistics :: Grounding time = 0.079138s, Solving time = 0.039096s, Total time = 0.118235s
8 : Statistics :: Grounding time = 0.075755s, Solving time = 0.049231s, Total time = 0.124987s
9 : Statistics :: Grounding time = 0.077695s, Solving time = 0.081820s, Total time = 0.159515s
10 : Statistics :: Grounding time = 0.079174s, Solving time = 0.072236s, Total time = 0.151410s

[06-02-2021_14-54-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.323827s, Solving time = 0.610188s, Total time = 1.992750s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-54-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),18)
occurs(2,talos,release(manipulator_arm_2,(block,3)),19)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-54-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-54-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Instantiated.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building completed.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding base program parts.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.017221s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving base program parts.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.002630s.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving started.

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-54-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 2.961031s.

[06-02-2021_14-54-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.550790s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.103443s.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.035935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.110849s.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.039910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.106044s.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.077744s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.114586s.

[06-02-2021_14-54-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.075103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.106807s.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.095378s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.109681s.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.089439s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.110060s.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.155975s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.110734s.

[06-02-2021_14-54-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.217957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.113074s.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.209607s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.115985s.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.284739s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.115177s.

[06-02-2021_14-55-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.350301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.122178s.

[06-02-2021_14-55-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.584620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.360269s.

[06-02-2021_14-55-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.902713s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.361547s.

[06-02-2021_14-55-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Model found:
Model :: Total atoms = 9888, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.771356s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving completed in 9.704578s because STOP_CON_REACHED.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.038685s, Solving time = 4.444197s, Total time = 9.704578s
Final Model :: Total atoms = 9888, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.961031s, Solving time = 0.550790s, Total time = 3.511822s
2 : Statistics :: Grounding time = 0.103443s, Solving time = 0.035935s, Total time = 0.139378s
3 : Statistics :: Grounding time = 0.110849s, Solving time = 0.039910s, Total time = 0.150759s
4 : Statistics :: Grounding time = 0.106044s, Solving time = 0.077744s, Total time = 0.183788s
5 : Statistics :: Grounding time = 0.114586s, Solving time = 0.075103s, Total time = 0.189689s
6 : Statistics :: Grounding time = 0.106807s, Solving time = 0.095378s, Total time = 0.202185s
7 : Statistics :: Grounding time = 0.109681s, Solving time = 0.089439s, Total time = 0.199119s
8 : Statistics :: Grounding time = 0.110060s, Solving time = 0.155975s, Total time = 0.266035s
9 : Statistics :: Grounding time = 0.110734s, Solving time = 0.217957s, Total time = 0.328691s
10 : Statistics :: Grounding time = 0.113074s, Solving time = 0.209607s, Total time = 0.322681s
11 : Statistics :: Grounding time = 0.115985s, Solving time = 0.284739s, Total time = 0.400724s
12 : Statistics :: Grounding time = 0.115177s, Solving time = 0.350301s, Total time = 0.465478s
13 : Statistics :: Grounding time = 0.122178s, Solving time = 0.584620s, Total time = 0.706798s
14 : Statistics :: Grounding time = 0.360269s, Solving time = 0.902713s, Total time = 1.262982s
15 : Statistics :: Grounding time = 0.361547s, Solving time = 0.771356s, Total time = 1.132903s

[06-02-2021_14-55-04] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.038685s, Solving time = 4.444197s, Total time = 9.704578s
Model :: Total atoms = 9888, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-04] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),26)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_2,(block,3)),28)
occurs(1,talos,release(manipulator_end_1,(block,5)),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-55-04] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.437705s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.992750s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.704578s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-55-04] INFO :: Experiment >> 

      ================================================      
            Experimental run 7 : Time 13.587644s            
      ================================================      

[06-02-2021_14-55-04] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-55-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-55-04] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-04] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Instantiated.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building completed.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding base program parts.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.014810s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving base program parts.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.002327s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.039875s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005845s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031015s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.003517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031292s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.004433s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.034210s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005470s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.035415s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005211s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.036118s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005919s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.038084s.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.006276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-55-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037862s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.008232s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037855s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.010624s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040272s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.011570s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.038820s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.016078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040607s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.019327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.041190s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.023855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.042327s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.035452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.041767s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.053507s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.076588s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.133964s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.079250s.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.186956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.083149s.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.164138s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving completed in 1.567759s because STOP_CON_REACHED.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.820505s, Solving time = 0.702700s, Total time = 1.567759s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039875s, Solving time = 0.005845s, Total time = 0.045720s
2 : Statistics :: Grounding time = 0.031015s, Solving time = 0.003517s, Total time = 0.034532s
3 : Statistics :: Grounding time = 0.031292s, Solving time = 0.004433s, Total time = 0.035725s
4 : Statistics :: Grounding time = 0.034210s, Solving time = 0.005470s, Total time = 0.039680s
5 : Statistics :: Grounding time = 0.035415s, Solving time = 0.005211s, Total time = 0.040626s
6 : Statistics :: Grounding time = 0.036118s, Solving time = 0.005919s, Total time = 0.042037s
7 : Statistics :: Grounding time = 0.038084s, Solving time = 0.006276s, Total time = 0.044359s
8 : Statistics :: Grounding time = 0.037862s, Solving time = 0.008232s, Total time = 0.046094s
9 : Statistics :: Grounding time = 0.037855s, Solving time = 0.010624s, Total time = 0.048479s
10 : Statistics :: Grounding time = 0.040272s, Solving time = 0.011570s, Total time = 0.051842s
11 : Statistics :: Grounding time = 0.038820s, Solving time = 0.016078s, Total time = 0.054898s
12 : Statistics :: Grounding time = 0.040607s, Solving time = 0.019327s, Total time = 0.059934s
13 : Statistics :: Grounding time = 0.041190s, Solving time = 0.023855s, Total time = 0.065045s
14 : Statistics :: Grounding time = 0.042327s, Solving time = 0.035452s, Total time = 0.077779s
15 : Statistics :: Grounding time = 0.041767s, Solving time = 0.053507s, Total time = 0.095274s
16 : Statistics :: Grounding time = 0.076588s, Solving time = 0.133964s, Total time = 0.210552s
17 : Statistics :: Grounding time = 0.079250s, Solving time = 0.186956s, Total time = 0.266206s
18 : Statistics :: Grounding time = 0.083149s, Solving time = 0.164138s, Total time = 0.247286s

[06-02-2021_14-55-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.820505s, Solving time = 0.702700s, Total time = 1.567759s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-55-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Instantiated.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building started.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building completed.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding base program parts.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.020503s.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving base program parts.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.001953s.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving started.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.627021s.

[06-02-2021_14-55-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.227413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.068487s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.017113s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.075414s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.016356s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.071484s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.022549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.076392s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.027632s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.073953s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.060294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.075440s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.038494s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.076048s.

[06-02-2021_14-55-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.056789s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.077118s.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.065200s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.080245s.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.099350s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving completed in 2.010501s because STOP_CON_REACHED.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.322105s, Solving time = 0.633143s, Total time = 2.010501s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.627021s, Solving time = 0.227413s, Total time = 0.854435s
2 : Statistics :: Grounding time = 0.068487s, Solving time = 0.017113s, Total time = 0.085600s
3 : Statistics :: Grounding time = 0.075414s, Solving time = 0.016356s, Total time = 0.091771s
4 : Statistics :: Grounding time = 0.071484s, Solving time = 0.022549s, Total time = 0.094033s
5 : Statistics :: Grounding time = 0.076392s, Solving time = 0.027632s, Total time = 0.104024s
6 : Statistics :: Grounding time = 0.073953s, Solving time = 0.060294s, Total time = 0.134247s
7 : Statistics :: Grounding time = 0.075440s, Solving time = 0.038494s, Total time = 0.113934s
8 : Statistics :: Grounding time = 0.076048s, Solving time = 0.056789s, Total time = 0.132837s
9 : Statistics :: Grounding time = 0.077118s, Solving time = 0.065200s, Total time = 0.142317s
10 : Statistics :: Grounding time = 0.080245s, Solving time = 0.099350s, Total time = 0.179595s

[06-02-2021_14-55-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.322105s, Solving time = 0.633143s, Total time = 2.010501s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,configure(manipulator_arm_1,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-55-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Instantiated.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building started.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building completed.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding base program parts.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.016711s.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving base program parts.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.003647s.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving started.

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 2.899226s.

[06-02-2021_14-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.557023s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.113045s.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.034510s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.107183s.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.038986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.106696s.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.043502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.108887s.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.094919s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.110873s.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.084572s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-55-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.110035s.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.085523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.109541s.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.189805s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.119574s.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.245599s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.113414s.

[06-02-2021_14-55-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.448011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.119083s.

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.352410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.127949s.

[06-02-2021_14-55-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.515737s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.117905s.

[06-02-2021_14-55-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.415532s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.360814s.

[06-02-2021_14-55-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.804176s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.368541s.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Model found:
Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.174684s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving completed in 9.314364s because STOP_CON_REACHED.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.009477s, Solving time = 4.088637s, Total time = 9.314364s
Final Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.899226s, Solving time = 0.557023s, Total time = 3.456249s
2 : Statistics :: Grounding time = 0.113045s, Solving time = 0.034510s, Total time = 0.147555s
3 : Statistics :: Grounding time = 0.107183s, Solving time = 0.038986s, Total time = 0.146169s
4 : Statistics :: Grounding time = 0.106696s, Solving time = 0.043502s, Total time = 0.150198s
5 : Statistics :: Grounding time = 0.108887s, Solving time = 0.094919s, Total time = 0.203806s
6 : Statistics :: Grounding time = 0.110873s, Solving time = 0.084572s, Total time = 0.195444s
7 : Statistics :: Grounding time = 0.110035s, Solving time = 0.085523s, Total time = 0.195559s
8 : Statistics :: Grounding time = 0.109541s, Solving time = 0.189805s, Total time = 0.299347s
9 : Statistics :: Grounding time = 0.119574s, Solving time = 0.245599s, Total time = 0.365173s
10 : Statistics :: Grounding time = 0.113414s, Solving time = 0.448011s, Total time = 0.561425s
11 : Statistics :: Grounding time = 0.119083s, Solving time = 0.352410s, Total time = 0.471492s
12 : Statistics :: Grounding time = 0.127949s, Solving time = 0.515737s, Total time = 0.643686s
13 : Statistics :: Grounding time = 0.117905s, Solving time = 0.415532s, Total time = 0.533437s
14 : Statistics :: Grounding time = 0.360814s, Solving time = 0.804176s, Total time = 1.164990s
15 : Statistics :: Grounding time = 0.368541s, Solving time = 0.174684s, Total time = 0.543226s

[06-02-2021_14-55-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.009477s, Solving time = 4.088637s, Total time = 9.314364s
Model :: Total atoms = 9885, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,3)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-55-17] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.567759s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.010501s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.314364s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-55-17] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 13.332393s            
      ================================================      

[06-02-2021_14-55-17] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-55-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-55-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Instantiated.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building completed.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding base program parts.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.013881s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving base program parts.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.002019s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041764s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009341s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.048775s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.004058s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.032346s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.004131s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.033435s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005303s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.034956s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005720s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.037743s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006728s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.037178s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.007210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.037100s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.008573s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040013s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.010049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038722s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.010567s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.044216s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.012123s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041009s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.018616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041865s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.025368s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.042158s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.043046s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.042902s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.070875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.075918s.

[06-02-2021_14-55-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.111561s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.080780s.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.288967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.087833s.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.144091s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving completed in 1.684159s because STOP_CON_REACHED.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.852594s, Solving time = 0.788345s, Total time = 1.684159s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041764s, Solving time = 0.009341s, Total time = 0.051105s
2 : Statistics :: Grounding time = 0.048775s, Solving time = 0.004058s, Total time = 0.052833s
3 : Statistics :: Grounding time = 0.032346s, Solving time = 0.004131s, Total time = 0.036478s
4 : Statistics :: Grounding time = 0.033435s, Solving time = 0.005303s, Total time = 0.038738s
5 : Statistics :: Grounding time = 0.034956s, Solving time = 0.005720s, Total time = 0.040676s
6 : Statistics :: Grounding time = 0.037743s, Solving time = 0.006728s, Total time = 0.044472s
7 : Statistics :: Grounding time = 0.037178s, Solving time = 0.007210s, Total time = 0.044387s
8 : Statistics :: Grounding time = 0.037100s, Solving time = 0.008573s, Total time = 0.045673s
9 : Statistics :: Grounding time = 0.040013s, Solving time = 0.010049s, Total time = 0.050062s
10 : Statistics :: Grounding time = 0.038722s, Solving time = 0.010567s, Total time = 0.049289s
11 : Statistics :: Grounding time = 0.044216s, Solving time = 0.012123s, Total time = 0.056339s
12 : Statistics :: Grounding time = 0.041009s, Solving time = 0.018616s, Total time = 0.059625s
13 : Statistics :: Grounding time = 0.041865s, Solving time = 0.025368s, Total time = 0.067233s
14 : Statistics :: Grounding time = 0.042158s, Solving time = 0.043046s, Total time = 0.085204s
15 : Statistics :: Grounding time = 0.042902s, Solving time = 0.070875s, Total time = 0.113777s
16 : Statistics :: Grounding time = 0.075918s, Solving time = 0.111561s, Total time = 0.187479s
17 : Statistics :: Grounding time = 0.080780s, Solving time = 0.288967s, Total time = 0.369746s
18 : Statistics :: Grounding time = 0.087833s, Solving time = 0.144091s, Total time = 0.231923s

[06-02-2021_14-55-19] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.852594s, Solving time = 0.788345s, Total time = 1.684159s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),10)
occurs(3,talos,release(manipulator_arm_1,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-55-19] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-19] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Instantiated.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building started.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building completed.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding base program parts.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.015170s.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving base program parts.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.002064s.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving started.

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.624988s.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.225546s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.070994s.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.017117s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.068704s.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.016633s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.070786s.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.022513s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-55-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.071008s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.028489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.073607s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.061643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.075891s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.052404s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.076638s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.053065s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.076587s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.071537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.079930s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.053398s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving completed in 1.966139s because STOP_CON_REACHED.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.304302s, Solving time = 0.604408s, Total time = 1.966139s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.624988s, Solving time = 0.225546s, Total time = 0.850534s
2 : Statistics :: Grounding time = 0.070994s, Solving time = 0.017117s, Total time = 0.088111s
3 : Statistics :: Grounding time = 0.068704s, Solving time = 0.016633s, Total time = 0.085337s
4 : Statistics :: Grounding time = 0.070786s, Solving time = 0.022513s, Total time = 0.093298s
5 : Statistics :: Grounding time = 0.071008s, Solving time = 0.028489s, Total time = 0.099497s
6 : Statistics :: Grounding time = 0.073607s, Solving time = 0.061643s, Total time = 0.135250s
7 : Statistics :: Grounding time = 0.075891s, Solving time = 0.052404s, Total time = 0.128294s
8 : Statistics :: Grounding time = 0.076638s, Solving time = 0.053065s, Total time = 0.129703s
9 : Statistics :: Grounding time = 0.076587s, Solving time = 0.071537s, Total time = 0.148124s
10 : Statistics :: Grounding time = 0.079930s, Solving time = 0.053398s, Total time = 0.133328s

[06-02-2021_14-55-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.304302s, Solving time = 0.604408s, Total time = 1.966139s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-55-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,extended),5)
occurs(2,talos,configure(manipulator_arm_1,retracted),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,release(manipulator_arm_1,(block,5)),16)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),17)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),18)
occurs(2,talos,release(manipulator_arm_1,(block,3)),19)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),20)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-55-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Instantiated.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building completed.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding base program parts.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.016997s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving base program parts.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.002791s.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving started.

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 2.946778s.

[06-02-2021_14-55-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.552598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.104733s.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.034942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.106319s.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.041912s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.107067s.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.074746s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-55-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.112893s.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.056614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.108236s.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.056913s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.108085s.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.067619s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.112782s.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.101778s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.112987s.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.106971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-55-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.114351s.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.207761s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.114588s.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.159908s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.120856s.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.257943s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-55-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.133374s.

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.404537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.378120s.

[06-02-2021_14-55-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.813441s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-55-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.375972s.

[06-02-2021_14-55-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.137913s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving completed in 9.370459s because STOP_CON_REACHED.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.074139s, Solving time = 4.078388s, Total time = 9.370459s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.946778s, Solving time = 0.552598s, Total time = 3.499376s
2 : Statistics :: Grounding time = 0.104733s, Solving time = 0.034942s, Total time = 0.139676s
3 : Statistics :: Grounding time = 0.106319s, Solving time = 0.041912s, Total time = 0.148231s
4 : Statistics :: Grounding time = 0.107067s, Solving time = 0.074746s, Total time = 0.181812s
5 : Statistics :: Grounding time = 0.112893s, Solving time = 0.056614s, Total time = 0.169507s
6 : Statistics :: Grounding time = 0.108236s, Solving time = 0.056913s, Total time = 0.165149s
7 : Statistics :: Grounding time = 0.108085s, Solving time = 0.067619s, Total time = 0.175704s
8 : Statistics :: Grounding time = 0.112782s, Solving time = 0.101778s, Total time = 0.214559s
9 : Statistics :: Grounding time = 0.112987s, Solving time = 0.106971s, Total time = 0.219959s
10 : Statistics :: Grounding time = 0.114351s, Solving time = 0.207761s, Total time = 0.322112s
11 : Statistics :: Grounding time = 0.114588s, Solving time = 0.159908s, Total time = 0.274496s
12 : Statistics :: Grounding time = 0.120856s, Solving time = 0.257943s, Total time = 0.378800s
13 : Statistics :: Grounding time = 0.133374s, Solving time = 0.404537s, Total time = 0.537911s
14 : Statistics :: Grounding time = 0.378120s, Solving time = 0.813441s, Total time = 1.191560s
15 : Statistics :: Grounding time = 0.375972s, Solving time = 1.137913s, Total time = 1.513886s

[06-02-2021_14-55-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.074139s, Solving time = 4.078388s, Total time = 9.370459s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_1,(block,3)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-55-31] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.684159s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.966139s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.370459s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-55-31] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 13.417991s            
      ================================================      

[06-02-2021_14-55-31] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-55-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-55-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Instantiated.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building completed.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding base program parts.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.014102s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving base program parts.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.001644s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.039169s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005734s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.031016s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.003382s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.031372s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.003919s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.034093s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.004807s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.034242s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005005s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.037128s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.006355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.038296s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.006298s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.046672s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.008290s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040268s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.009830s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.038694s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.010441s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040526s.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.016769s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-55-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040068s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.020906s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.041842s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.026748s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040306s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.042065s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.043624s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.071212s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.076546s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.104153s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.080206s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.164119s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.088229s.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.052181s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving completed in 1.442780s because STOP_CON_REACHED.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.836400s, Solving time = 0.563858s, Total time = 1.442780s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039169s, Solving time = 0.005734s, Total time = 0.044904s
2 : Statistics :: Grounding time = 0.031016s, Solving time = 0.003382s, Total time = 0.034398s
3 : Statistics :: Grounding time = 0.031372s, Solving time = 0.003919s, Total time = 0.035291s
4 : Statistics :: Grounding time = 0.034093s, Solving time = 0.004807s, Total time = 0.038900s
5 : Statistics :: Grounding time = 0.034242s, Solving time = 0.005005s, Total time = 0.039247s
6 : Statistics :: Grounding time = 0.037128s, Solving time = 0.006355s, Total time = 0.043483s
7 : Statistics :: Grounding time = 0.038296s, Solving time = 0.006298s, Total time = 0.044594s
8 : Statistics :: Grounding time = 0.046672s, Solving time = 0.008290s, Total time = 0.054962s
9 : Statistics :: Grounding time = 0.040268s, Solving time = 0.009830s, Total time = 0.050098s
10 : Statistics :: Grounding time = 0.038694s, Solving time = 0.010441s, Total time = 0.049134s
11 : Statistics :: Grounding time = 0.040526s, Solving time = 0.016769s, Total time = 0.057295s
12 : Statistics :: Grounding time = 0.040068s, Solving time = 0.020906s, Total time = 0.060974s
13 : Statistics :: Grounding time = 0.041842s, Solving time = 0.026748s, Total time = 0.068590s
14 : Statistics :: Grounding time = 0.040306s, Solving time = 0.042065s, Total time = 0.082371s
15 : Statistics :: Grounding time = 0.043624s, Solving time = 0.071212s, Total time = 0.114835s
16 : Statistics :: Grounding time = 0.076546s, Solving time = 0.104153s, Total time = 0.180699s
17 : Statistics :: Grounding time = 0.080206s, Solving time = 0.164119s, Total time = 0.244325s
18 : Statistics :: Grounding time = 0.088229s, Solving time = 0.052181s, Total time = 0.140411s

[06-02-2021_14-55-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.836400s, Solving time = 0.563858s, Total time = 1.442780s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-55-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-55-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Instantiated.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building started.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building completed.

[06-02-2021_14-55-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding base program parts.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.014912s.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving base program parts.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.001955s.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving started.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.628553s.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.228881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.068637s.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.016660s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-55-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.076437s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.016112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.071463s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.022641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.071751s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.027554s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.073808s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.045013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.074998s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.048156s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.076430s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.048511s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.085814s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.073327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.083414s.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Model found:
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.096286s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving completed in 2.005902s because STOP_CON_REACHED.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.326219s, Solving time = 0.625097s, Total time = 2.005902s
Final Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.628553s, Solving time = 0.228881s, Total time = 0.857433s
2 : Statistics :: Grounding time = 0.068637s, Solving time = 0.016660s, Total time = 0.085298s
3 : Statistics :: Grounding time = 0.076437s, Solving time = 0.016112s, Total time = 0.092549s
4 : Statistics :: Grounding time = 0.071463s, Solving time = 0.022641s, Total time = 0.094104s
5 : Statistics :: Grounding time = 0.071751s, Solving time = 0.027554s, Total time = 0.099305s
6 : Statistics :: Grounding time = 0.073808s, Solving time = 0.045013s, Total time = 0.118821s
7 : Statistics :: Grounding time = 0.074998s, Solving time = 0.048156s, Total time = 0.123155s
8 : Statistics :: Grounding time = 0.076430s, Solving time = 0.048511s, Total time = 0.124942s
9 : Statistics :: Grounding time = 0.085814s, Solving time = 0.073327s, Total time = 0.159141s
10 : Statistics :: Grounding time = 0.083414s, Solving time = 0.096286s, Total time = 0.179699s

[06-02-2021_14-55-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.326219s, Solving time = 0.625097s, Total time = 2.005902s
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,release(manipulator_arm_1,(block,3)),17)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),18)
occurs(2,talos,release(manipulator_arm_2,(block,5)),19)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-55-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Instantiated.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building started.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building completed.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding base program parts.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.018015s.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving base program parts.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.003885s.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving started.

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 2.963728s.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.552987s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.104265s.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.035575s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.115490s.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.040348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-55-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.107294s.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.077679s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.115807s.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.058997s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.107865s.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.064753s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.109008s.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.077079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.113364s.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.089450s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-55-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.113196s.

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.218040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.114830s.

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.276002s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.116189s.

[06-02-2021_14-55-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.162489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.124518s.

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.431841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.120056s.

[06-02-2021_14-55-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.834673s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.373268s.

[06-02-2021_14-55-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 1.286041s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.362118s.

[06-02-2021_14-55-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Model found:
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 1.527209s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving completed in 11.040781s because STOP_CON_REACHED.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.079012s, Solving time = 5.737050s, Total time = 11.040781s
Final Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.963728s, Solving time = 0.552987s, Total time = 3.516715s
2 : Statistics :: Grounding time = 0.104265s, Solving time = 0.035575s, Total time = 0.139840s
3 : Statistics :: Grounding time = 0.115490s, Solving time = 0.040348s, Total time = 0.155838s
4 : Statistics :: Grounding time = 0.107294s, Solving time = 0.077679s, Total time = 0.184974s
5 : Statistics :: Grounding time = 0.115807s, Solving time = 0.058997s, Total time = 0.174804s
6 : Statistics :: Grounding time = 0.107865s, Solving time = 0.064753s, Total time = 0.172619s
7 : Statistics :: Grounding time = 0.109008s, Solving time = 0.077079s, Total time = 0.186087s
8 : Statistics :: Grounding time = 0.113364s, Solving time = 0.089450s, Total time = 0.202814s
9 : Statistics :: Grounding time = 0.113196s, Solving time = 0.218040s, Total time = 0.331236s
10 : Statistics :: Grounding time = 0.114830s, Solving time = 0.276002s, Total time = 0.390832s
11 : Statistics :: Grounding time = 0.116189s, Solving time = 0.162489s, Total time = 0.278679s
12 : Statistics :: Grounding time = 0.124518s, Solving time = 0.431841s, Total time = 0.556358s
13 : Statistics :: Grounding time = 0.120056s, Solving time = 0.834673s, Total time = 0.954729s
14 : Statistics :: Grounding time = 0.373268s, Solving time = 1.286041s, Total time = 1.659310s
15 : Statistics :: Grounding time = 0.362118s, Solving time = 1.527209s, Total time = 1.889326s

[06-02-2021_14-55-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.079012s, Solving time = 5.737050s, Total time = 11.040781s
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-55-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_2,extended),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_2,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),28)
occurs(1,talos,release(manipulator_end_1,(block,3)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-55-46] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.442780s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.005902s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =    11.040781s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-55-46] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 14.932137s            
      ================================================      

[06-02-2021_14-55-46] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-55-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-55-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Instantiated.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building completed.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding base program parts.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.013675s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving base program parts.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.002290s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039784s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005950s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.031090s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.003627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.030899s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.034313s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005375s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.034221s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005510s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.035745s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006634s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.038140s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.007308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039066s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008262s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.041612s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010736s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.040896s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.011643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039300s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.014057s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042287s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.018560s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.040015s.

[06-02-2021_14-55-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.025676s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042150s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.040008s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042150s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.072559s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.084150s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.091862s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.081257s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.141919s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.083096s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.060490s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving completed in 1.415036s because STOP_CON_REACHED.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833847s, Solving time = 0.536851s, Total time = 1.415036s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039784s, Solving time = 0.005950s, Total time = 0.045734s
2 : Statistics :: Grounding time = 0.031090s, Solving time = 0.003627s, Total time = 0.034717s
3 : Statistics :: Grounding time = 0.030899s, Solving time = 0.004385s, Total time = 0.035285s
4 : Statistics :: Grounding time = 0.034313s, Solving time = 0.005375s, Total time = 0.039689s
5 : Statistics :: Grounding time = 0.034221s, Solving time = 0.005510s, Total time = 0.039730s
6 : Statistics :: Grounding time = 0.035745s, Solving time = 0.006634s, Total time = 0.042379s
7 : Statistics :: Grounding time = 0.038140s, Solving time = 0.007308s, Total time = 0.045449s
8 : Statistics :: Grounding time = 0.039066s, Solving time = 0.008262s, Total time = 0.047328s
9 : Statistics :: Grounding time = 0.041612s, Solving time = 0.010736s, Total time = 0.052348s
10 : Statistics :: Grounding time = 0.040896s, Solving time = 0.011643s, Total time = 0.052539s
11 : Statistics :: Grounding time = 0.039300s, Solving time = 0.014057s, Total time = 0.053357s
12 : Statistics :: Grounding time = 0.042287s, Solving time = 0.018560s, Total time = 0.060847s
13 : Statistics :: Grounding time = 0.040015s, Solving time = 0.025676s, Total time = 0.065690s
14 : Statistics :: Grounding time = 0.042150s, Solving time = 0.040008s, Total time = 0.082158s
15 : Statistics :: Grounding time = 0.042150s, Solving time = 0.072559s, Total time = 0.114709s
16 : Statistics :: Grounding time = 0.084150s, Solving time = 0.091862s, Total time = 0.176012s
17 : Statistics :: Grounding time = 0.081257s, Solving time = 0.141919s, Total time = 0.223176s
18 : Statistics :: Grounding time = 0.083096s, Solving time = 0.060490s, Total time = 0.143586s

[06-02-2021_14-55-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833847s, Solving time = 0.536851s, Total time = 1.415036s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-55-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-55-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Instantiated.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building completed.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding base program parts.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.014664s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving base program parts.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.002369s.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving started.

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.636151s.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.227185s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.069146s.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.016654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.068168s.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.015640s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-55-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.070634s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.022956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074146s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.028775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074215s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.082485s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.076999s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.031681s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.075464s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.035514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.077386s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.075060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.078337s.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.082407s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving completed in 1.993778s because STOP_CON_REACHED.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.315311s, Solving time = 0.620726s, Total time = 1.993778s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.636151s, Solving time = 0.227185s, Total time = 0.863336s
2 : Statistics :: Grounding time = 0.069146s, Solving time = 0.016654s, Total time = 0.085801s
3 : Statistics :: Grounding time = 0.068168s, Solving time = 0.015640s, Total time = 0.083808s
4 : Statistics :: Grounding time = 0.070634s, Solving time = 0.022956s, Total time = 0.093590s
5 : Statistics :: Grounding time = 0.074146s, Solving time = 0.028775s, Total time = 0.102922s
6 : Statistics :: Grounding time = 0.074215s, Solving time = 0.082485s, Total time = 0.156700s
7 : Statistics :: Grounding time = 0.076999s, Solving time = 0.031681s, Total time = 0.108679s
8 : Statistics :: Grounding time = 0.075464s, Solving time = 0.035514s, Total time = 0.110978s
9 : Statistics :: Grounding time = 0.077386s, Solving time = 0.075060s, Total time = 0.152446s
10 : Statistics :: Grounding time = 0.078337s, Solving time = 0.082407s, Total time = 0.160744s

[06-02-2021_14-55-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.315311s, Solving time = 0.620726s, Total time = 1.993778s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-55-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-55-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Instantiated.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building started.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building completed.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding base program parts.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.016958s.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving base program parts.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.002879s.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving started.

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-55-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 2.939401s.

[06-02-2021_14-55-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.569041s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.105539s.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.035608s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.105135s.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.038060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.108421s.

[06-02-2021_14-55-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.041481s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.113044s.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.059797s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.108946s.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.076768s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.109514s.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.052245s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.110994s.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.065695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.112106s.

[06-02-2021_14-55-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.115637s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.118325s.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.155819s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.115938s.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.146085s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.118047s.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.234309s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-55-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.117708s.

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.299249s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.359347s.

[06-02-2021_14-55-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.592911s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.368497s.

[06-02-2021_14-55-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Model found:
Model :: Total atoms = 9881, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.488474s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving completed in 8.209749s because STOP_CON_REACHED.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.027919s, Solving time = 2.974060s, Total time = 8.209749s
Final Model :: Total atoms = 9881, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.939401s, Solving time = 0.569041s, Total time = 3.508442s
2 : Statistics :: Grounding time = 0.105539s, Solving time = 0.035608s, Total time = 0.141147s
3 : Statistics :: Grounding time = 0.105135s, Solving time = 0.038060s, Total time = 0.143194s
4 : Statistics :: Grounding time = 0.108421s, Solving time = 0.041481s, Total time = 0.149901s
5 : Statistics :: Grounding time = 0.113044s, Solving time = 0.059797s, Total time = 0.172841s
6 : Statistics :: Grounding time = 0.108946s, Solving time = 0.076768s, Total time = 0.185714s
7 : Statistics :: Grounding time = 0.109514s, Solving time = 0.052245s, Total time = 0.161759s
8 : Statistics :: Grounding time = 0.110994s, Solving time = 0.065695s, Total time = 0.176689s
9 : Statistics :: Grounding time = 0.112106s, Solving time = 0.115637s, Total time = 0.227742s
10 : Statistics :: Grounding time = 0.118325s, Solving time = 0.155819s, Total time = 0.274144s
11 : Statistics :: Grounding time = 0.115938s, Solving time = 0.146085s, Total time = 0.262024s
12 : Statistics :: Grounding time = 0.118047s, Solving time = 0.234309s, Total time = 0.352356s
13 : Statistics :: Grounding time = 0.117708s, Solving time = 0.299249s, Total time = 0.416957s
14 : Statistics :: Grounding time = 0.359347s, Solving time = 0.592911s, Total time = 0.952258s
15 : Statistics :: Grounding time = 0.368497s, Solving time = 0.488474s, Total time = 0.856972s

[06-02-2021_14-55-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.027919s, Solving time = 2.974060s, Total time = 8.209749s
Model :: Total atoms = 9881, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-55-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),25)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-55-58] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.415036s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.993778s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.209749s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-55-58] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 12.135297s            
      ================================================      

[06-02-2021_14-55-58] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-55-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-55-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-55-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Instantiated.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building completed.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding base program parts.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.013873s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving base program parts.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.002077s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.039626s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005764s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.031356s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.002982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.034889s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.004293s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038135s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.035219s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005694s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.036441s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038625s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.007169s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038675s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.009110s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038512s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.009149s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040645s.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011038s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-55-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.043158s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.014949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.042047s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.020588s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040530s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.033417s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.044174s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.051260s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041187s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.072622s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.079973s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.133875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.081068s.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.240482s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-55-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.083996s.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.191528s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving completed in 1.715512s because STOP_CON_REACHED.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.842128s, Solving time = 0.827976s, Total time = 1.715512s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039626s, Solving time = 0.005764s, Total time = 0.045390s
2 : Statistics :: Grounding time = 0.031356s, Solving time = 0.002982s, Total time = 0.034338s
3 : Statistics :: Grounding time = 0.034889s, Solving time = 0.004293s, Total time = 0.039181s
4 : Statistics :: Grounding time = 0.038135s, Solving time = 0.005360s, Total time = 0.043494s
5 : Statistics :: Grounding time = 0.035219s, Solving time = 0.005694s, Total time = 0.040912s
6 : Statistics :: Grounding time = 0.036441s, Solving time = 0.006620s, Total time = 0.043061s
7 : Statistics :: Grounding time = 0.038625s, Solving time = 0.007169s, Total time = 0.045794s
8 : Statistics :: Grounding time = 0.038675s, Solving time = 0.009110s, Total time = 0.047784s
9 : Statistics :: Grounding time = 0.038512s, Solving time = 0.009149s, Total time = 0.047661s
10 : Statistics :: Grounding time = 0.040645s, Solving time = 0.011038s, Total time = 0.051683s
11 : Statistics :: Grounding time = 0.043158s, Solving time = 0.014949s, Total time = 0.058107s
12 : Statistics :: Grounding time = 0.042047s, Solving time = 0.020588s, Total time = 0.062635s
13 : Statistics :: Grounding time = 0.040530s, Solving time = 0.033417s, Total time = 0.073947s
14 : Statistics :: Grounding time = 0.044174s, Solving time = 0.051260s, Total time = 0.095434s
15 : Statistics :: Grounding time = 0.041187s, Solving time = 0.072622s, Total time = 0.113809s
16 : Statistics :: Grounding time = 0.079973s, Solving time = 0.133875s, Total time = 0.213847s
17 : Statistics :: Grounding time = 0.081068s, Solving time = 0.240482s, Total time = 0.321551s
18 : Statistics :: Grounding time = 0.083996s, Solving time = 0.191528s, Total time = 0.275525s

[06-02-2021_14-56-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.842128s, Solving time = 0.827976s, Total time = 1.715512s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-56-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Instantiated.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building started.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building completed.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding base program parts.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.015025s.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving base program parts.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.001773s.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving started.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.634427s.

[06-02-2021_14-56-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.227160s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.072005s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.017077s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.069132s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.016279s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.071086s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.022743s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.072131s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.027112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.073902s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.050980s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.075973s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.040655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077064s.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.046355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077510s.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.063955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.079107s.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.078678s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving completed in 1.966088s because STOP_CON_REACHED.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.317362s, Solving time = 0.592766s, Total time = 1.966088s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.634427s, Solving time = 0.227160s, Total time = 0.861587s
2 : Statistics :: Grounding time = 0.072005s, Solving time = 0.017077s, Total time = 0.089081s
3 : Statistics :: Grounding time = 0.069132s, Solving time = 0.016279s, Total time = 0.085411s
4 : Statistics :: Grounding time = 0.071086s, Solving time = 0.022743s, Total time = 0.093829s
5 : Statistics :: Grounding time = 0.072131s, Solving time = 0.027112s, Total time = 0.099243s
6 : Statistics :: Grounding time = 0.073902s, Solving time = 0.050980s, Total time = 0.124882s
7 : Statistics :: Grounding time = 0.075973s, Solving time = 0.040655s, Total time = 0.116628s
8 : Statistics :: Grounding time = 0.077064s, Solving time = 0.046355s, Total time = 0.123419s
9 : Statistics :: Grounding time = 0.077510s, Solving time = 0.063955s, Total time = 0.141465s
10 : Statistics :: Grounding time = 0.079107s, Solving time = 0.078678s, Total time = 0.157785s

[06-02-2021_14-56-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.317362s, Solving time = 0.592766s, Total time = 1.966088s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-56-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-56-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Instantiated.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building started.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building completed.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding base program parts.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.017141s.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving base program parts.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.003469s.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving started.

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 2.971265s.

[06-02-2021_14-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.550847s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.103789s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.035877s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.105875s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.040987s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.108125s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.056666s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.109672s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.068153s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.109946s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.061630s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.109124s.

[06-02-2021_14-56-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.100295s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.111723s.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.102586s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.113159s.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.101134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.112470s.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.107424s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.113281s.

[06-02-2021_14-56-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.170287s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.129266s.

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.377500s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.119665s.

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.269548s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-56-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.357160s.

[06-02-2021_14-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.555121s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-56-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.370402s.

[06-02-2021_14-56-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Model found:
Model :: Total atoms = 9882, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.848472s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving completed in 8.721135s because STOP_CON_REACHED.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.062062s, Solving time = 3.449995s, Total time = 8.721135s
Final Model :: Total atoms = 9882, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.971265s, Solving time = 0.550847s, Total time = 3.522112s
2 : Statistics :: Grounding time = 0.103789s, Solving time = 0.035877s, Total time = 0.139666s
3 : Statistics :: Grounding time = 0.105875s, Solving time = 0.040987s, Total time = 0.146861s
4 : Statistics :: Grounding time = 0.108125s, Solving time = 0.056666s, Total time = 0.164790s
5 : Statistics :: Grounding time = 0.109672s, Solving time = 0.068153s, Total time = 0.177826s
6 : Statistics :: Grounding time = 0.109946s, Solving time = 0.061630s, Total time = 0.171576s
7 : Statistics :: Grounding time = 0.109124s, Solving time = 0.100295s, Total time = 0.209419s
8 : Statistics :: Grounding time = 0.111723s, Solving time = 0.102586s, Total time = 0.214309s
9 : Statistics :: Grounding time = 0.113159s, Solving time = 0.101134s, Total time = 0.214293s
10 : Statistics :: Grounding time = 0.112470s, Solving time = 0.107424s, Total time = 0.219894s
11 : Statistics :: Grounding time = 0.113281s, Solving time = 0.170287s, Total time = 0.283568s
12 : Statistics :: Grounding time = 0.129266s, Solving time = 0.377500s, Total time = 0.506765s
13 : Statistics :: Grounding time = 0.119665s, Solving time = 0.269548s, Total time = 0.389212s
14 : Statistics :: Grounding time = 0.357160s, Solving time = 0.555121s, Total time = 0.912280s
15 : Statistics :: Grounding time = 0.370402s, Solving time = 0.848472s, Total time = 1.218873s

[06-02-2021_14-56-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.062062s, Solving time = 3.449995s, Total time = 8.721135s
Model :: Total atoms = 9882, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_1,extended),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-56-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.715512s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.966088s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.721135s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-56-11] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 12.829368s            
      ================================================      

[06-02-2021_14-56-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-56-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-56-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Instantiated.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building completed.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding base program parts.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.016898s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving base program parts.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.001779s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039589s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004989s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031606s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.002808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031474s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.034233s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004749s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035175s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037205s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006642s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037729s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037677s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.008914s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038447s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010098s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039684s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.044534s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.014307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.040781s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.019211s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.040817s.

[06-02-2021_14-56-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.028042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041598s.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.042334s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.042791s.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.061855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.076959s.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.131643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.080371s.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.210130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.083273s.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Model found:
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.107339s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving completed in 1.556427s because STOP_CON_REACHED.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.830841s, Solving time = 0.682013s, Total time = 1.556427s
Final Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039589s, Solving time = 0.004989s, Total time = 0.044578s
2 : Statistics :: Grounding time = 0.031606s, Solving time = 0.002808s, Total time = 0.034414s
3 : Statistics :: Grounding time = 0.031474s, Solving time = 0.004627s, Total time = 0.036102s
4 : Statistics :: Grounding time = 0.034233s, Solving time = 0.004749s, Total time = 0.038981s
5 : Statistics :: Grounding time = 0.035175s, Solving time = 0.005139s, Total time = 0.040314s
6 : Statistics :: Grounding time = 0.037205s, Solving time = 0.006642s, Total time = 0.043847s
7 : Statistics :: Grounding time = 0.037729s, Solving time = 0.006538s, Total time = 0.044267s
8 : Statistics :: Grounding time = 0.037677s, Solving time = 0.008914s, Total time = 0.046591s
9 : Statistics :: Grounding time = 0.038447s, Solving time = 0.010098s, Total time = 0.048545s
10 : Statistics :: Grounding time = 0.039684s, Solving time = 0.010869s, Total time = 0.050553s
11 : Statistics :: Grounding time = 0.044534s, Solving time = 0.014307s, Total time = 0.058841s
12 : Statistics :: Grounding time = 0.040781s, Solving time = 0.019211s, Total time = 0.059992s
13 : Statistics :: Grounding time = 0.040817s, Solving time = 0.028042s, Total time = 0.068859s
14 : Statistics :: Grounding time = 0.041598s, Solving time = 0.042334s, Total time = 0.083932s
15 : Statistics :: Grounding time = 0.042791s, Solving time = 0.061855s, Total time = 0.104646s
16 : Statistics :: Grounding time = 0.076959s, Solving time = 0.131643s, Total time = 0.208602s
17 : Statistics :: Grounding time = 0.080371s, Solving time = 0.210130s, Total time = 0.290501s
18 : Statistics :: Grounding time = 0.083273s, Solving time = 0.107339s, Total time = 0.190612s

[06-02-2021_14-56-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.830841s, Solving time = 0.682013s, Total time = 1.556427s
Model :: Total atoms = 3525, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_14-56-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,3)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,release(manipulator_arm_1,(block,5)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-56-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Instantiated.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building started.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building completed.

[06-02-2021_14-56-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding base program parts.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.016363s.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving base program parts.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.002366s.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving started.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.623579s.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.228006s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.069058s.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.017111s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-56-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.068696s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.016592s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.069829s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.025946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.079503s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.043174s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.071764s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.040540s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.076618s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.031920s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.075511s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.041949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.077634s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.071782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.079244s.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Model found:
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.096832s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving completed in 1.982170s because STOP_CON_REACHED.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.307798s, Solving time = 0.616218s, Total time = 1.982170s
Final Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.623579s, Solving time = 0.228006s, Total time = 0.851585s
2 : Statistics :: Grounding time = 0.069058s, Solving time = 0.017111s, Total time = 0.086170s
3 : Statistics :: Grounding time = 0.068696s, Solving time = 0.016592s, Total time = 0.085288s
4 : Statistics :: Grounding time = 0.069829s, Solving time = 0.025946s, Total time = 0.095775s
5 : Statistics :: Grounding time = 0.079503s, Solving time = 0.043174s, Total time = 0.122677s
6 : Statistics :: Grounding time = 0.071764s, Solving time = 0.040540s, Total time = 0.112304s
7 : Statistics :: Grounding time = 0.076618s, Solving time = 0.031920s, Total time = 0.108538s
8 : Statistics :: Grounding time = 0.075511s, Solving time = 0.041949s, Total time = 0.117459s
9 : Statistics :: Grounding time = 0.077634s, Solving time = 0.071782s, Total time = 0.149416s
10 : Statistics :: Grounding time = 0.079244s, Solving time = 0.096832s, Total time = 0.176075s

[06-02-2021_14-56-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.307798s, Solving time = 0.616218s, Total time = 1.982170s
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,configure(manipulator_arm_2,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_2,(block,3)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,release(manipulator_arm_1,(block,5)),20)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-56-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Instantiated.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building started.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building completed.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding base program parts.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.017302s.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving base program parts.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.002712s.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving started.

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 2.918908s.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.553420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.102906s.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.035708s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.104806s.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.040397s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-56-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.115584s.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.080667s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.115458s.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.095828s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.118411s.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.131455s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.110635s.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.077352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.110437s.

[06-02-2021_14-56-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.127203s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.120421s.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.125478s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.112231s.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.149667s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.122915s.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.217533s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-56-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.117178s.

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.324621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.117679s.

[06-02-2021_14-56-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.570747s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-56-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-56-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.353191s.

[06-02-2021_14-56-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.605657s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.361086s.

[06-02-2021_14-56-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Model found:
Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 1.064626s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving completed in 9.439370s because STOP_CON_REACHED.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.019148s, Solving time = 4.203069s, Total time = 9.439370s
Final Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.918908s, Solving time = 0.553420s, Total time = 3.472328s
2 : Statistics :: Grounding time = 0.102906s, Solving time = 0.035708s, Total time = 0.138614s
3 : Statistics :: Grounding time = 0.104806s, Solving time = 0.040397s, Total time = 0.145203s
4 : Statistics :: Grounding time = 0.115584s, Solving time = 0.080667s, Total time = 0.196250s
5 : Statistics :: Grounding time = 0.115458s, Solving time = 0.095828s, Total time = 0.211286s
6 : Statistics :: Grounding time = 0.118411s, Solving time = 0.131455s, Total time = 0.249866s
7 : Statistics :: Grounding time = 0.110635s, Solving time = 0.077352s, Total time = 0.187987s
8 : Statistics :: Grounding time = 0.110437s, Solving time = 0.127203s, Total time = 0.237640s
9 : Statistics :: Grounding time = 0.120421s, Solving time = 0.125478s, Total time = 0.245899s
10 : Statistics :: Grounding time = 0.112231s, Solving time = 0.149667s, Total time = 0.261899s
11 : Statistics :: Grounding time = 0.122915s, Solving time = 0.217533s, Total time = 0.340448s
12 : Statistics :: Grounding time = 0.117178s, Solving time = 0.324621s, Total time = 0.441799s
13 : Statistics :: Grounding time = 0.117679s, Solving time = 0.570747s, Total time = 0.688425s
14 : Statistics :: Grounding time = 0.353191s, Solving time = 0.605657s, Total time = 0.958847s
15 : Statistics :: Grounding time = 0.361086s, Solving time = 1.064626s, Total time = 1.425711s

[06-02-2021_14-56-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.019148s, Solving time = 4.203069s, Total time = 9.439370s
Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),28)
occurs(1,talos,release(manipulator_end_2,(block,3)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-56-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.556427s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.982170s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.439370s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-56-24] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 13.362992s            
      ================================================      

[06-02-2021_14-56-24] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-56-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-56-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Instantiated.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building completed.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding base program parts.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.014095s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving base program parts.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.002687s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039812s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005791s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.031379s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.003629s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.031028s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.004457s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.034489s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.034645s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.036565s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006691s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.038423s.

[06-02-2021_14-56-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.007382s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.037712s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.008613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.038958s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.010649s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040686s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.011268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040392s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.015424s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040752s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.021312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039628s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.026563s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.041644s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.047002s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.042236s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.067427s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.079053s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.132268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.080678s.

[06-02-2021_14-56-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.286109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.083370s.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.064415s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving completed in 1.601461s because STOP_CON_REACHED.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.825546s, Solving time = 0.732604s, Total time = 1.601461s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039812s, Solving time = 0.005791s, Total time = 0.045603s
2 : Statistics :: Grounding time = 0.031379s, Solving time = 0.003629s, Total time = 0.035008s
3 : Statistics :: Grounding time = 0.031028s, Solving time = 0.004457s, Total time = 0.035485s
4 : Statistics :: Grounding time = 0.034489s, Solving time = 0.005323s, Total time = 0.039812s
5 : Statistics :: Grounding time = 0.034645s, Solving time = 0.005594s, Total time = 0.040240s
6 : Statistics :: Grounding time = 0.036565s, Solving time = 0.006691s, Total time = 0.043256s
7 : Statistics :: Grounding time = 0.038423s, Solving time = 0.007382s, Total time = 0.045805s
8 : Statistics :: Grounding time = 0.037712s, Solving time = 0.008613s, Total time = 0.046325s
9 : Statistics :: Grounding time = 0.038958s, Solving time = 0.010649s, Total time = 0.049607s
10 : Statistics :: Grounding time = 0.040686s, Solving time = 0.011268s, Total time = 0.051953s
11 : Statistics :: Grounding time = 0.040392s, Solving time = 0.015424s, Total time = 0.055816s
12 : Statistics :: Grounding time = 0.040752s, Solving time = 0.021312s, Total time = 0.062065s
13 : Statistics :: Grounding time = 0.039628s, Solving time = 0.026563s, Total time = 0.066191s
14 : Statistics :: Grounding time = 0.041644s, Solving time = 0.047002s, Total time = 0.088646s
15 : Statistics :: Grounding time = 0.042236s, Solving time = 0.067427s, Total time = 0.109663s
16 : Statistics :: Grounding time = 0.079053s, Solving time = 0.132268s, Total time = 0.211321s
17 : Statistics :: Grounding time = 0.080678s, Solving time = 0.286109s, Total time = 0.366788s
18 : Statistics :: Grounding time = 0.083370s, Solving time = 0.064415s, Total time = 0.147785s

[06-02-2021_14-56-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.825546s, Solving time = 0.732604s, Total time = 1.601461s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-56-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Instantiated.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building started.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building completed.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding base program parts.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.014586s.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving base program parts.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.002027s.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving started.

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.633294s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.227700s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.068384s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.016897s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.069076s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.016269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.070952s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.025123s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075493s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.035294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075309s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.035492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.074549s.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.033983s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-56-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.076001s.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.037738s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.078094s.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.059908s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.086177s.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.087070s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving completed in 1.956868s because STOP_CON_REACHED.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.321916s, Solving time = 0.577501s, Total time = 1.956868s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.633294s, Solving time = 0.227700s, Total time = 0.860994s
2 : Statistics :: Grounding time = 0.068384s, Solving time = 0.016897s, Total time = 0.085282s
3 : Statistics :: Grounding time = 0.069076s, Solving time = 0.016269s, Total time = 0.085345s
4 : Statistics :: Grounding time = 0.070952s, Solving time = 0.025123s, Total time = 0.096075s
5 : Statistics :: Grounding time = 0.075493s, Solving time = 0.035294s, Total time = 0.110787s
6 : Statistics :: Grounding time = 0.075309s, Solving time = 0.035492s, Total time = 0.110800s
7 : Statistics :: Grounding time = 0.074549s, Solving time = 0.033983s, Total time = 0.108532s
8 : Statistics :: Grounding time = 0.076001s, Solving time = 0.037738s, Total time = 0.113739s
9 : Statistics :: Grounding time = 0.078094s, Solving time = 0.059908s, Total time = 0.138002s
10 : Statistics :: Grounding time = 0.086177s, Solving time = 0.087070s, Total time = 0.173248s

[06-02-2021_14-56-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.321916s, Solving time = 0.577501s, Total time = 1.956868s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-56-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Instantiated.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building started.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building completed.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding base program parts.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.016701s.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving base program parts.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.002971s.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving started.

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 2.905350s.

[06-02-2021_14-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.555795s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.121289s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.035000s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.106222s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.039127s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.108723s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.041080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.109027s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.071323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.113279s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.072479s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.109854s.

[06-02-2021_14-56-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.078918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.111064s.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.135420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.113414s.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.137084s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.113287s.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.273195s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-56-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.115042s.

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.207942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.116417s.

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.146735s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.115539s.

[06-02-2021_14-56-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.349688s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.355218s.

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.357853s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-56-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.366136s.

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Model found:
Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.629518s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving completed in 8.341633s because STOP_CON_REACHED.

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.996560s, Solving time = 3.134129s, Total time = 8.341633s
Final Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.905350s, Solving time = 0.555795s, Total time = 3.461145s
2 : Statistics :: Grounding time = 0.121289s, Solving time = 0.035000s, Total time = 0.156289s
3 : Statistics :: Grounding time = 0.106222s, Solving time = 0.039127s, Total time = 0.145350s
4 : Statistics :: Grounding time = 0.108723s, Solving time = 0.041080s, Total time = 0.149803s
5 : Statistics :: Grounding time = 0.109027s, Solving time = 0.071323s, Total time = 0.180350s
6 : Statistics :: Grounding time = 0.113279s, Solving time = 0.072479s, Total time = 0.185758s
7 : Statistics :: Grounding time = 0.109854s, Solving time = 0.078918s, Total time = 0.188772s
8 : Statistics :: Grounding time = 0.111064s, Solving time = 0.135420s, Total time = 0.246484s
9 : Statistics :: Grounding time = 0.113414s, Solving time = 0.137084s, Total time = 0.250498s
10 : Statistics :: Grounding time = 0.113287s, Solving time = 0.273195s, Total time = 0.386482s
11 : Statistics :: Grounding time = 0.115042s, Solving time = 0.207942s, Total time = 0.322984s
12 : Statistics :: Grounding time = 0.116417s, Solving time = 0.146735s, Total time = 0.263152s
13 : Statistics :: Grounding time = 0.115539s, Solving time = 0.349688s, Total time = 0.465227s
14 : Statistics :: Grounding time = 0.355218s, Solving time = 0.357853s, Total time = 0.713071s
15 : Statistics :: Grounding time = 0.366136s, Solving time = 0.629518s, Total time = 0.995654s

[06-02-2021_14-56-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.996560s, Solving time = 3.134129s, Total time = 8.341633s
Model :: Total atoms = 9886, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_1,extended),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-56-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.601461s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.956868s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.341633s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-56-37] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 12.375686s            
      ================================================      

[06-02-2021_14-56-37] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-56-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-56-37] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-37] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Instantiated.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building completed.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding base program parts.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.013769s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving base program parts.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.002241s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040039s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.031511s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.002865s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.031542s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004637s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.034449s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.035014s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004992s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037020s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006154s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037752s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006421s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038240s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.008731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.036862s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.010627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.039941s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.010957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.039834s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.015140s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.041574s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.018963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040742s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.030973s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.041678s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.040864s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.045179s.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.065446s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-56-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.077937s.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.094727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.081303s.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.187293s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.083711s.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.096051s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving completed in 1.487082s because STOP_CON_REACHED.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828097s, Solving time = 0.616725s, Total time = 1.487082s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040039s, Solving time = 0.004963s, Total time = 0.045002s
2 : Statistics :: Grounding time = 0.031511s, Solving time = 0.002865s, Total time = 0.034377s
3 : Statistics :: Grounding time = 0.031542s, Solving time = 0.004637s, Total time = 0.036179s
4 : Statistics :: Grounding time = 0.034449s, Solving time = 0.004680s, Total time = 0.039129s
5 : Statistics :: Grounding time = 0.035014s, Solving time = 0.004992s, Total time = 0.040006s
6 : Statistics :: Grounding time = 0.037020s, Solving time = 0.006154s, Total time = 0.043174s
7 : Statistics :: Grounding time = 0.037752s, Solving time = 0.006421s, Total time = 0.044172s
8 : Statistics :: Grounding time = 0.038240s, Solving time = 0.008731s, Total time = 0.046971s
9 : Statistics :: Grounding time = 0.036862s, Solving time = 0.010627s, Total time = 0.047489s
10 : Statistics :: Grounding time = 0.039941s, Solving time = 0.010957s, Total time = 0.050898s
11 : Statistics :: Grounding time = 0.039834s, Solving time = 0.015140s, Total time = 0.054974s
12 : Statistics :: Grounding time = 0.041574s, Solving time = 0.018963s, Total time = 0.060538s
13 : Statistics :: Grounding time = 0.040742s, Solving time = 0.030973s, Total time = 0.071715s
14 : Statistics :: Grounding time = 0.041678s, Solving time = 0.040864s, Total time = 0.082542s
15 : Statistics :: Grounding time = 0.045179s, Solving time = 0.065446s, Total time = 0.110624s
16 : Statistics :: Grounding time = 0.077937s, Solving time = 0.094727s, Total time = 0.172664s
17 : Statistics :: Grounding time = 0.081303s, Solving time = 0.187293s, Total time = 0.268596s
18 : Statistics :: Grounding time = 0.083711s, Solving time = 0.096051s, Total time = 0.179763s

[06-02-2021_14-56-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828097s, Solving time = 0.616725s, Total time = 1.487082s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_14-56-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-56-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Instantiated.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building started.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building completed.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding base program parts.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.014778s.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving base program parts.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.002128s.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving started.

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.635997s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.226411s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.074131s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.016884s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.067340s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.016506s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.070718s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.022525s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.074138s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.029279s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.074112s.

[06-02-2021_14-56-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.038299s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.076050s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.039391s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.080392s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.044274s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.077945s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.073427s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.078916s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.079099s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving completed in 1.968867s because STOP_CON_REACHED.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.324518s, Solving time = 0.588223s, Total time = 1.968867s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635997s, Solving time = 0.226411s, Total time = 0.862408s
2 : Statistics :: Grounding time = 0.074131s, Solving time = 0.016884s, Total time = 0.091016s
3 : Statistics :: Grounding time = 0.067340s, Solving time = 0.016506s, Total time = 0.083846s
4 : Statistics :: Grounding time = 0.070718s, Solving time = 0.022525s, Total time = 0.093243s
5 : Statistics :: Grounding time = 0.074138s, Solving time = 0.029279s, Total time = 0.103417s
6 : Statistics :: Grounding time = 0.074112s, Solving time = 0.038299s, Total time = 0.112410s
7 : Statistics :: Grounding time = 0.076050s, Solving time = 0.039391s, Total time = 0.115441s
8 : Statistics :: Grounding time = 0.080392s, Solving time = 0.044274s, Total time = 0.124666s
9 : Statistics :: Grounding time = 0.077945s, Solving time = 0.073427s, Total time = 0.151372s
10 : Statistics :: Grounding time = 0.078916s, Solving time = 0.079099s, Total time = 0.158015s

[06-02-2021_14-56-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.324518s, Solving time = 0.588223s, Total time = 1.968867s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-56-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),18)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-56-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Instantiated.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building completed.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding base program parts.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.016111s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving base program parts.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.002932s.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving started.

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 2.969504s.

[06-02-2021_14-56-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.542269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.103349s.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.034420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.105858s.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.041328s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.105821s.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.056386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.108350s.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.076103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-56-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.108553s.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.061227s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.109659s.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.056367s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.112308s.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.092061s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.112706s.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.089823s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.114048s.

[06-02-2021_14-56-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.150431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.115157s.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.157401s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.117534s.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.289840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.117998s.

[06-02-2021_14-56-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.337900s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.385114s.

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.328892s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-56-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.377402s.

[06-02-2021_14-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_14-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Model found:
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.647907s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving completed in 8.256106s because STOP_CON_REACHED.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.079472s, Solving time = 2.965288s, Total time = 8.256106s
Final Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.969504s, Solving time = 0.542269s, Total time = 3.511774s
2 : Statistics :: Grounding time = 0.103349s, Solving time = 0.034420s, Total time = 0.137768s
3 : Statistics :: Grounding time = 0.105858s, Solving time = 0.041328s, Total time = 0.147186s
4 : Statistics :: Grounding time = 0.105821s, Solving time = 0.056386s, Total time = 0.162206s
5 : Statistics :: Grounding time = 0.108350s, Solving time = 0.076103s, Total time = 0.184453s
6 : Statistics :: Grounding time = 0.108553s, Solving time = 0.061227s, Total time = 0.169780s
7 : Statistics :: Grounding time = 0.109659s, Solving time = 0.056367s, Total time = 0.166026s
8 : Statistics :: Grounding time = 0.112308s, Solving time = 0.092061s, Total time = 0.204369s
9 : Statistics :: Grounding time = 0.112706s, Solving time = 0.089823s, Total time = 0.202528s
10 : Statistics :: Grounding time = 0.114048s, Solving time = 0.150431s, Total time = 0.264479s
11 : Statistics :: Grounding time = 0.115157s, Solving time = 0.157401s, Total time = 0.272558s
12 : Statistics :: Grounding time = 0.117534s, Solving time = 0.289840s, Total time = 0.407374s
13 : Statistics :: Grounding time = 0.117998s, Solving time = 0.337900s, Total time = 0.455898s
14 : Statistics :: Grounding time = 0.385114s, Solving time = 0.328892s, Total time = 0.714006s
15 : Statistics :: Grounding time = 0.377402s, Solving time = 0.647907s, Total time = 1.025309s

[06-02-2021_14-56-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.079472s, Solving time = 2.965288s, Total time = 8.256106s
Model :: Total atoms = 9890, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),29)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-56-49] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.487082s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.968867s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.256106s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-56-49] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 12.127180s            
      ================================================      

[06-02-2021_14-56-49] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-56-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-56-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Instantiated.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building completed.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding base program parts.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.014100s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving base program parts.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.003029s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039381s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005582s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.030730s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.003449s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.031433s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.004093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.034215s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005120s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.034514s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005844s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.036572s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.006543s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038043s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.007721s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.037977s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.008256s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038067s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.009814s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.040145s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.011463s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039306s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.012440s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.041487s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.015885s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.042620s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.025082s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.041927s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.039312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.042255s.

[06-02-2021_14-56-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.060473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.077500s.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.131389s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.080361s.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.219605s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.082201s.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.099879s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving completed in 1.540854s because STOP_CON_REACHED.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.822831s, Solving time = 0.674980s, Total time = 1.540854s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039381s, Solving time = 0.005582s, Total time = 0.044963s
2 : Statistics :: Grounding time = 0.030730s, Solving time = 0.003449s, Total time = 0.034179s
3 : Statistics :: Grounding time = 0.031433s, Solving time = 0.004093s, Total time = 0.035526s
4 : Statistics :: Grounding time = 0.034215s, Solving time = 0.005120s, Total time = 0.039334s
5 : Statistics :: Grounding time = 0.034514s, Solving time = 0.005844s, Total time = 0.040357s
6 : Statistics :: Grounding time = 0.036572s, Solving time = 0.006543s, Total time = 0.043115s
7 : Statistics :: Grounding time = 0.038043s, Solving time = 0.007721s, Total time = 0.045764s
8 : Statistics :: Grounding time = 0.037977s, Solving time = 0.008256s, Total time = 0.046233s
9 : Statistics :: Grounding time = 0.038067s, Solving time = 0.009814s, Total time = 0.047881s
10 : Statistics :: Grounding time = 0.040145s, Solving time = 0.011463s, Total time = 0.051608s
11 : Statistics :: Grounding time = 0.039306s, Solving time = 0.012440s, Total time = 0.051747s
12 : Statistics :: Grounding time = 0.041487s, Solving time = 0.015885s, Total time = 0.057372s
13 : Statistics :: Grounding time = 0.042620s, Solving time = 0.025082s, Total time = 0.067702s
14 : Statistics :: Grounding time = 0.041927s, Solving time = 0.039312s, Total time = 0.081238s
15 : Statistics :: Grounding time = 0.042255s, Solving time = 0.060473s, Total time = 0.102728s
16 : Statistics :: Grounding time = 0.077500s, Solving time = 0.131389s, Total time = 0.208889s
17 : Statistics :: Grounding time = 0.080361s, Solving time = 0.219605s, Total time = 0.299966s
18 : Statistics :: Grounding time = 0.082201s, Solving time = 0.099879s, Total time = 0.182079s

[06-02-2021_14-56-50] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.822831s, Solving time = 0.674980s, Total time = 1.540854s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-56-50] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-56-50] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-50] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Instantiated.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building completed.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding base program parts.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.015116s.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving base program parts.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.001962s.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving started.

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-56-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.635740s.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.227518s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.068211s.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.016306s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.069413s.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.016509s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071309s.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.022319s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-56-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071088s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.030788s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.074086s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.073333s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.075512s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.033210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077554s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.043183s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.076929s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.062571s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.079181s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Model found:
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.082989s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving completed in 1.981016s because STOP_CON_REACHED.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.314139s, Solving time = 0.610687s, Total time = 1.981016s
Final Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635740s, Solving time = 0.227518s, Total time = 0.863258s
2 : Statistics :: Grounding time = 0.068211s, Solving time = 0.016306s, Total time = 0.084517s
3 : Statistics :: Grounding time = 0.069413s, Solving time = 0.016509s, Total time = 0.085921s
4 : Statistics :: Grounding time = 0.071309s, Solving time = 0.022319s, Total time = 0.093629s
5 : Statistics :: Grounding time = 0.071088s, Solving time = 0.030788s, Total time = 0.101877s
6 : Statistics :: Grounding time = 0.074086s, Solving time = 0.073333s, Total time = 0.147419s
7 : Statistics :: Grounding time = 0.075512s, Solving time = 0.033210s, Total time = 0.108722s
8 : Statistics :: Grounding time = 0.077554s, Solving time = 0.043183s, Total time = 0.120737s
9 : Statistics :: Grounding time = 0.076929s, Solving time = 0.062571s, Total time = 0.139499s
10 : Statistics :: Grounding time = 0.079181s, Solving time = 0.082989s, Total time = 0.162170s

[06-02-2021_14-56-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.314139s, Solving time = 0.610687s, Total time = 1.981016s
Model :: Total atoms = 6730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-56-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,configure(manipulator_arm_1,extended),4)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-56-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-56-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Instantiated.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building completed.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding base program parts.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.016696s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving base program parts.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.002628s.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving started.

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-56-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 2.918616s.

[06-02-2021_14-56-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.555026s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.103929s.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.034537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.102831s.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.036846s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.109969s.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.039326s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.106912s.

[06-02-2021_14-56-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.074910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.112841s.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.065095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.109356s.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.068188s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.109840s.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.132865s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.113192s.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.124616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-56-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.123243s.

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.114807s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.117224s.

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.176142s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.117686s.

[06-02-2021_14-56-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.341865s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.123183s.

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.345133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.354818s.

[06-02-2021_14-56-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-57-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.677529s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-57-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-57-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.363541s.

[06-02-2021_14-57-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Model found:
Model :: Total atoms = 9884, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.740951s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving completed in 8.749527s because STOP_CON_REACHED.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.003876s, Solving time = 3.530465s, Total time = 8.749527s
Final Model :: Total atoms = 9884, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.918616s, Solving time = 0.555026s, Total time = 3.473642s
2 : Statistics :: Grounding time = 0.103929s, Solving time = 0.034537s, Total time = 0.138466s
3 : Statistics :: Grounding time = 0.102831s, Solving time = 0.036846s, Total time = 0.139677s
4 : Statistics :: Grounding time = 0.109969s, Solving time = 0.039326s, Total time = 0.149294s
5 : Statistics :: Grounding time = 0.106912s, Solving time = 0.074910s, Total time = 0.181822s
6 : Statistics :: Grounding time = 0.112841s, Solving time = 0.065095s, Total time = 0.177936s
7 : Statistics :: Grounding time = 0.109356s, Solving time = 0.068188s, Total time = 0.177543s
8 : Statistics :: Grounding time = 0.109840s, Solving time = 0.132865s, Total time = 0.242705s
9 : Statistics :: Grounding time = 0.113192s, Solving time = 0.124616s, Total time = 0.237807s
10 : Statistics :: Grounding time = 0.123243s, Solving time = 0.114807s, Total time = 0.238050s
11 : Statistics :: Grounding time = 0.117224s, Solving time = 0.176142s, Total time = 0.293367s
12 : Statistics :: Grounding time = 0.117686s, Solving time = 0.341865s, Total time = 0.459551s
13 : Statistics :: Grounding time = 0.123183s, Solving time = 0.345133s, Total time = 0.468316s
14 : Statistics :: Grounding time = 0.354818s, Solving time = 0.677529s, Total time = 1.032347s
15 : Statistics :: Grounding time = 0.363541s, Solving time = 0.740951s, Total time = 1.104492s

[06-02-2021_14-57-01] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.003876s, Solving time = 3.530465s, Total time = 8.749527s
Model :: Total atoms = 9884, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-01] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-57-01] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.540854s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.981016s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.749527s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-57-01] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 12.677132s            
      ================================================      

[06-02-2021_14-57-01] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-57-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-57-01] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-01] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Instantiated.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building started.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building completed.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding base program parts.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.013924s.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving base program parts.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.001660s.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving started.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.042537s.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005250s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.031552s.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.002823s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-57-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.031077s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.003784s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.034317s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.004567s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.034738s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005276s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.036055s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005930s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040347s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.007021s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038691s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.007825s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038265s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.009898s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040123s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.011083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040236s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.014356s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.041129s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.018395s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.041320s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.029870s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.042528s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.043075s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.042379s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.065343s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.076058s.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.104683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.079650s.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.143301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.085779s.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.093120s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving completed in 1.450775s because STOP_CON_REACHED.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.830701s, Solving time = 0.577260s, Total time = 1.450775s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.042537s, Solving time = 0.005250s, Total time = 0.047787s
2 : Statistics :: Grounding time = 0.031552s, Solving time = 0.002823s, Total time = 0.034375s
3 : Statistics :: Grounding time = 0.031077s, Solving time = 0.003784s, Total time = 0.034861s
4 : Statistics :: Grounding time = 0.034317s, Solving time = 0.004567s, Total time = 0.038884s
5 : Statistics :: Grounding time = 0.034738s, Solving time = 0.005276s, Total time = 0.040013s
6 : Statistics :: Grounding time = 0.036055s, Solving time = 0.005930s, Total time = 0.041985s
7 : Statistics :: Grounding time = 0.040347s, Solving time = 0.007021s, Total time = 0.047368s
8 : Statistics :: Grounding time = 0.038691s, Solving time = 0.007825s, Total time = 0.046516s
9 : Statistics :: Grounding time = 0.038265s, Solving time = 0.009898s, Total time = 0.048163s
10 : Statistics :: Grounding time = 0.040123s, Solving time = 0.011083s, Total time = 0.051205s
11 : Statistics :: Grounding time = 0.040236s, Solving time = 0.014356s, Total time = 0.054591s
12 : Statistics :: Grounding time = 0.041129s, Solving time = 0.018395s, Total time = 0.059524s
13 : Statistics :: Grounding time = 0.041320s, Solving time = 0.029870s, Total time = 0.071190s
14 : Statistics :: Grounding time = 0.042528s, Solving time = 0.043075s, Total time = 0.085603s
15 : Statistics :: Grounding time = 0.042379s, Solving time = 0.065343s, Total time = 0.107722s
16 : Statistics :: Grounding time = 0.076058s, Solving time = 0.104683s, Total time = 0.180741s
17 : Statistics :: Grounding time = 0.079650s, Solving time = 0.143301s, Total time = 0.222950s
18 : Statistics :: Grounding time = 0.085779s, Solving time = 0.093120s, Total time = 0.178899s

[06-02-2021_14-57-03] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.830701s, Solving time = 0.577260s, Total time = 1.450775s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-03] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-57-03] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-03] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Instantiated.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building started.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building completed.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding base program parts.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.014747s.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving base program parts.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.002013s.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving started.

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.630736s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.232776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.068080s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016491s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.066712s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016173s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.071965s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.023351s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.071137s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.028316s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.084745s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.062502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.075837s.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.051324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-57-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.075651s.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.062714s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.079209s.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.074083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.080327s.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.099511s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving completed in 2.044312s because STOP_CON_REACHED.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.319145s, Solving time = 0.669254s, Total time = 2.044312s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.630736s, Solving time = 0.232776s, Total time = 0.863513s
2 : Statistics :: Grounding time = 0.068080s, Solving time = 0.016491s, Total time = 0.084571s
3 : Statistics :: Grounding time = 0.066712s, Solving time = 0.016173s, Total time = 0.082885s
4 : Statistics :: Grounding time = 0.071965s, Solving time = 0.023351s, Total time = 0.095316s
5 : Statistics :: Grounding time = 0.071137s, Solving time = 0.028316s, Total time = 0.099452s
6 : Statistics :: Grounding time = 0.084745s, Solving time = 0.062502s, Total time = 0.147247s
7 : Statistics :: Grounding time = 0.075837s, Solving time = 0.051324s, Total time = 0.127162s
8 : Statistics :: Grounding time = 0.075651s, Solving time = 0.062714s, Total time = 0.138364s
9 : Statistics :: Grounding time = 0.079209s, Solving time = 0.074083s, Total time = 0.153292s
10 : Statistics :: Grounding time = 0.080327s, Solving time = 0.099511s, Total time = 0.179838s

[06-02-2021_14-57-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.319145s, Solving time = 0.669254s, Total time = 2.044312s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,configure(manipulator_arm_2,retracted),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),15)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),16)
occurs(2,talos,release(manipulator_arm_2,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),18)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-57-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Instantiated.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building started.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building completed.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding base program parts.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.016535s.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving base program parts.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.003870s.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving started.

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 2.957081s.

[06-02-2021_14-57-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.548496s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.103788s.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.034527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.113515s.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.040776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.106470s.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.056234s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.115985s.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.082504s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.109071s.

[06-02-2021_14-57-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.099950s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.108547s.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.051901s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.112195s.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.050984s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.111736s.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.058742s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.113379s.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.219988s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-57-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.125159s.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.191449s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.121226s.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.170888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.119247s.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.253594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-57-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.354438s.

[06-02-2021_14-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.596096s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-57-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.364782s.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Model found:
Model :: Total atoms = 9887, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.448100s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving completed in 8.173207s because STOP_CON_REACHED.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.053154s, Solving time = 2.908100s, Total time = 8.173207s
Final Model :: Total atoms = 9887, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.957081s, Solving time = 0.548496s, Total time = 3.505577s
2 : Statistics :: Grounding time = 0.103788s, Solving time = 0.034527s, Total time = 0.138315s
3 : Statistics :: Grounding time = 0.113515s, Solving time = 0.040776s, Total time = 0.154290s
4 : Statistics :: Grounding time = 0.106470s, Solving time = 0.056234s, Total time = 0.162705s
5 : Statistics :: Grounding time = 0.115985s, Solving time = 0.082504s, Total time = 0.198489s
6 : Statistics :: Grounding time = 0.109071s, Solving time = 0.099950s, Total time = 0.209022s
7 : Statistics :: Grounding time = 0.108547s, Solving time = 0.051901s, Total time = 0.160448s
8 : Statistics :: Grounding time = 0.112195s, Solving time = 0.050984s, Total time = 0.163179s
9 : Statistics :: Grounding time = 0.111736s, Solving time = 0.058742s, Total time = 0.170478s
10 : Statistics :: Grounding time = 0.113379s, Solving time = 0.219988s, Total time = 0.333367s
11 : Statistics :: Grounding time = 0.125159s, Solving time = 0.191449s, Total time = 0.316609s
12 : Statistics :: Grounding time = 0.121226s, Solving time = 0.170888s, Total time = 0.292114s
13 : Statistics :: Grounding time = 0.119247s, Solving time = 0.253594s, Total time = 0.372841s
14 : Statistics :: Grounding time = 0.354438s, Solving time = 0.596096s, Total time = 0.950534s
15 : Statistics :: Grounding time = 0.364782s, Solving time = 0.448100s, Total time = 0.812882s

[06-02-2021_14-57-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.053154s, Solving time = 2.908100s, Total time = 8.173207s
Model :: Total atoms = 9887, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_2,extended),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_2,retracted),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),29)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-57-13] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.450775s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.044312s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.173207s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-57-13] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 12.105911s            
      ================================================      

[06-02-2021_14-57-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-57-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-57-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Instantiated.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building started.

[06-02-2021_14-57-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building completed.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding base program parts.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.014296s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving base program parts.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.001611s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040260s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005372s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.034624s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.003582s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.031574s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.004490s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.034351s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005119s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.034470s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005833s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.036360s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038510s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006337s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.037478s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.008542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.037952s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010668s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.044685s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.011333s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040204s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.013587s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.044530s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.019954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040828s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.026538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.042010s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.045335s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040697s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.062128s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.076977s.

[06-02-2021_14-57-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.107637s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.080707s.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.195776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.082592s.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Model found:
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.093677s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving completed in 1.510699s because STOP_CON_REACHED.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.833105s, Solving time = 0.633888s, Total time = 1.510699s
Final Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040260s, Solving time = 0.005372s, Total time = 0.045632s
2 : Statistics :: Grounding time = 0.034624s, Solving time = 0.003582s, Total time = 0.038205s
3 : Statistics :: Grounding time = 0.031574s, Solving time = 0.004490s, Total time = 0.036064s
4 : Statistics :: Grounding time = 0.034351s, Solving time = 0.005119s, Total time = 0.039471s
5 : Statistics :: Grounding time = 0.034470s, Solving time = 0.005833s, Total time = 0.040303s
6 : Statistics :: Grounding time = 0.036360s, Solving time = 0.006369s, Total time = 0.042729s
7 : Statistics :: Grounding time = 0.038510s, Solving time = 0.006337s, Total time = 0.044847s
8 : Statistics :: Grounding time = 0.037478s, Solving time = 0.008542s, Total time = 0.046020s
9 : Statistics :: Grounding time = 0.037952s, Solving time = 0.010668s, Total time = 0.048620s
10 : Statistics :: Grounding time = 0.044685s, Solving time = 0.011333s, Total time = 0.056018s
11 : Statistics :: Grounding time = 0.040204s, Solving time = 0.013587s, Total time = 0.053791s
12 : Statistics :: Grounding time = 0.044530s, Solving time = 0.019954s, Total time = 0.064483s
13 : Statistics :: Grounding time = 0.040828s, Solving time = 0.026538s, Total time = 0.067366s
14 : Statistics :: Grounding time = 0.042010s, Solving time = 0.045335s, Total time = 0.087345s
15 : Statistics :: Grounding time = 0.040697s, Solving time = 0.062128s, Total time = 0.102825s
16 : Statistics :: Grounding time = 0.076977s, Solving time = 0.107637s, Total time = 0.184613s
17 : Statistics :: Grounding time = 0.080707s, Solving time = 0.195776s, Total time = 0.276483s
18 : Statistics :: Grounding time = 0.082592s, Solving time = 0.093677s, Total time = 0.176269s

[06-02-2021_14-57-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.833105s, Solving time = 0.633888s, Total time = 1.510699s
Model :: Total atoms = 3521, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-57-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Instantiated.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building started.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building completed.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding base program parts.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.015592s.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving base program parts.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.002397s.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving started.

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.642003s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.233013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.069210s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017605s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.069019s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.016292s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.071578s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.023169s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.070624s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.026956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.073545s.

[06-02-2021_14-57-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.043967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.074758s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.035935s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.075165s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.044080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.077188s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.064585s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.082192s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Model found:
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.095609s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving completed in 1.982110s because STOP_CON_REACHED.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.320877s, Solving time = 0.603607s, Total time = 1.982110s
Final Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.642003s, Solving time = 0.233013s, Total time = 0.875016s
2 : Statistics :: Grounding time = 0.069210s, Solving time = 0.017605s, Total time = 0.086815s
3 : Statistics :: Grounding time = 0.069019s, Solving time = 0.016292s, Total time = 0.085311s
4 : Statistics :: Grounding time = 0.071578s, Solving time = 0.023169s, Total time = 0.094747s
5 : Statistics :: Grounding time = 0.070624s, Solving time = 0.026956s, Total time = 0.097580s
6 : Statistics :: Grounding time = 0.073545s, Solving time = 0.043967s, Total time = 0.117512s
7 : Statistics :: Grounding time = 0.074758s, Solving time = 0.035935s, Total time = 0.110693s
8 : Statistics :: Grounding time = 0.075165s, Solving time = 0.044080s, Total time = 0.119245s
9 : Statistics :: Grounding time = 0.077188s, Solving time = 0.064585s, Total time = 0.141773s
10 : Statistics :: Grounding time = 0.082192s, Solving time = 0.095609s, Total time = 0.177801s

[06-02-2021_14-57-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.320877s, Solving time = 0.603607s, Total time = 1.982110s
Model :: Total atoms = 6728, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_1,extended),3)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_1,retracted),5)
occurs(2,talos,configure(manipulator_arm_2,extended),6)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_2,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),15)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),16)
occurs(2,talos,release(manipulator_arm_1,(block,5)),17)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),18)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),19)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-57-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Instantiated.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building completed.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding base program parts.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.017832s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving base program parts.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.003611s.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving started.

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 2.897000s.

[06-02-2021_14-57-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.553872s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.103158s.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.035412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.103999s.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.038538s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.111284s.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.040711s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.109249s.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.102202s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-57-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.109180s.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.054794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.106892s.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.083219s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.110504s.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.167312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.116358s.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.107313s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.113685s.

[06-02-2021_14-57-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.152107s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.114669s.

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.423542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.125458s.

[06-02-2021_14-57-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.565077s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.118466s.

[06-02-2021_14-57-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.537328s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.357991s.

[06-02-2021_14-57-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.784093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.362660s.

[06-02-2021_14-57-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Model found:
Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.645818s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving completed in 9.486097s because STOP_CON_REACHED.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.978385s, Solving time = 4.294949s, Total time = 9.486097s
Final Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.897000s, Solving time = 0.553872s, Total time = 3.450872s
2 : Statistics :: Grounding time = 0.103158s, Solving time = 0.035412s, Total time = 0.138570s
3 : Statistics :: Grounding time = 0.103999s, Solving time = 0.038538s, Total time = 0.142537s
4 : Statistics :: Grounding time = 0.111284s, Solving time = 0.040711s, Total time = 0.151995s
5 : Statistics :: Grounding time = 0.109249s, Solving time = 0.102202s, Total time = 0.211452s
6 : Statistics :: Grounding time = 0.109180s, Solving time = 0.054794s, Total time = 0.163974s
7 : Statistics :: Grounding time = 0.106892s, Solving time = 0.083219s, Total time = 0.190112s
8 : Statistics :: Grounding time = 0.110504s, Solving time = 0.167312s, Total time = 0.277816s
9 : Statistics :: Grounding time = 0.116358s, Solving time = 0.107313s, Total time = 0.223671s
10 : Statistics :: Grounding time = 0.113685s, Solving time = 0.152107s, Total time = 0.265792s
11 : Statistics :: Grounding time = 0.114669s, Solving time = 0.423542s, Total time = 0.538211s
12 : Statistics :: Grounding time = 0.125458s, Solving time = 0.565077s, Total time = 0.690536s
13 : Statistics :: Grounding time = 0.118466s, Solving time = 0.537328s, Total time = 0.655794s
14 : Statistics :: Grounding time = 0.357991s, Solving time = 0.784093s, Total time = 1.142084s
15 : Statistics :: Grounding time = 0.362660s, Solving time = 0.645818s, Total time = 1.008477s

[06-02-2021_14-57-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.978385s, Solving time = 4.294949s, Total time = 9.486097s
Model :: Total atoms = 9892, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_14-57-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),28)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),29)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-57-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.510699s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.982110s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     9.486097s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-57-27] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 13.409227s            
      ================================================      

[06-02-2021_14-57-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-57-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-57-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Instantiated.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building completed.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding base program parts.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.014867s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving base program parts.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.002924s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.039685s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005670s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.030947s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.003910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.049286s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.004284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.034151s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005346s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037918s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.036567s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006588s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.038447s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.007060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037992s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.042182s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.009808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.041390s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.010872s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040090s.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.015221s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-57-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040792s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.019967s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040130s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.030371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.042309s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.048668s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.042147s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.066043s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.077909s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.122296s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.081008s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.209509s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.083990s.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.108259s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving completed in 1.585095s because STOP_CON_REACHED.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.851809s, Solving time = 0.690472s, Total time = 1.585095s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039685s, Solving time = 0.005670s, Total time = 0.045355s
2 : Statistics :: Grounding time = 0.030947s, Solving time = 0.003910s, Total time = 0.034857s
3 : Statistics :: Grounding time = 0.049286s, Solving time = 0.004284s, Total time = 0.053570s
4 : Statistics :: Grounding time = 0.034151s, Solving time = 0.005346s, Total time = 0.039497s
5 : Statistics :: Grounding time = 0.037918s, Solving time = 0.005581s, Total time = 0.043499s
6 : Statistics :: Grounding time = 0.036567s, Solving time = 0.006588s, Total time = 0.043155s
7 : Statistics :: Grounding time = 0.038447s, Solving time = 0.007060s, Total time = 0.045507s
8 : Statistics :: Grounding time = 0.037992s, Solving time = 0.008093s, Total time = 0.046086s
9 : Statistics :: Grounding time = 0.042182s, Solving time = 0.009808s, Total time = 0.051990s
10 : Statistics :: Grounding time = 0.041390s, Solving time = 0.010872s, Total time = 0.052262s
11 : Statistics :: Grounding time = 0.040090s, Solving time = 0.015221s, Total time = 0.055312s
12 : Statistics :: Grounding time = 0.040792s, Solving time = 0.019967s, Total time = 0.060759s
13 : Statistics :: Grounding time = 0.040130s, Solving time = 0.030371s, Total time = 0.070502s
14 : Statistics :: Grounding time = 0.042309s, Solving time = 0.048668s, Total time = 0.090978s
15 : Statistics :: Grounding time = 0.042147s, Solving time = 0.066043s, Total time = 0.108190s
16 : Statistics :: Grounding time = 0.077909s, Solving time = 0.122296s, Total time = 0.200205s
17 : Statistics :: Grounding time = 0.081008s, Solving time = 0.209509s, Total time = 0.290517s
18 : Statistics :: Grounding time = 0.083990s, Solving time = 0.108259s, Total time = 0.192249s

[06-02-2021_14-57-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.851809s, Solving time = 0.690472s, Total time = 1.585095s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_14-57-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_14-57-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Instantiated.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building started.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building completed.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding base program parts.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.014411s.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving base program parts.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.002354s.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving started.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.640019s.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.221726s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.069248s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.017360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072719s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.016285s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072120s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.023162s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.076026s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.027079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.081901s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.077934s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.076379s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.057805s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.081674s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.053011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.077257s.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.080387s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.086028s.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Model found:
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.093045s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving completed in 2.075532s because STOP_CON_REACHED.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.347783s, Solving time = 0.670147s, Total time = 2.075532s
Final Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.640019s, Solving time = 0.221726s, Total time = 0.861745s
2 : Statistics :: Grounding time = 0.069248s, Solving time = 0.017360s, Total time = 0.086608s
3 : Statistics :: Grounding time = 0.072719s, Solving time = 0.016285s, Total time = 0.089004s
4 : Statistics :: Grounding time = 0.072120s, Solving time = 0.023162s, Total time = 0.095281s
5 : Statistics :: Grounding time = 0.076026s, Solving time = 0.027079s, Total time = 0.103105s
6 : Statistics :: Grounding time = 0.081901s, Solving time = 0.077934s, Total time = 0.159835s
7 : Statistics :: Grounding time = 0.076379s, Solving time = 0.057805s, Total time = 0.134185s
8 : Statistics :: Grounding time = 0.081674s, Solving time = 0.053011s, Total time = 0.134685s
9 : Statistics :: Grounding time = 0.077257s, Solving time = 0.080387s, Total time = 0.157644s
10 : Statistics :: Grounding time = 0.086028s, Solving time = 0.093045s, Total time = 0.179073s

[06-02-2021_14-57-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.347783s, Solving time = 0.670147s, Total time = 2.075532s
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),4)
occurs(2,talos,configure(manipulator_arm_2,retracted),5)
occurs(2,talos,configure(manipulator_arm_1,extended),6)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_1,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),15)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_2,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),19)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_1,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),22)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_1,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),25)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),26)

[06-02-2021_14-57-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Instantiated.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building started.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building completed.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding base program parts.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.016684s.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving base program parts.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.002686s.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving started.

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 2.974921s.

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.555103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.104400s.

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.035410s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-57-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.105118s.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.040923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.108055s.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.055068s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.107281s.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.060596s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.108772s.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.072340s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.113907s.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.102994s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-57-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.110204s.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.098187s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.111382s.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.085691s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.110769s.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.157229s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.117493s.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.156357s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-57-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.114529s.

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.347880s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.126431s.

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.217954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-57-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.363986s.

[06-02-2021_14-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.511028s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-57-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.377817s.

[06-02-2021_14-57-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Model found:
Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.085245s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving completed in 8.867871s because STOP_CON_REACHED.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 5.071750s, Solving time = 3.584690s, Total time = 8.867871s
Final Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.974921s, Solving time = 0.555103s, Total time = 3.530024s
2 : Statistics :: Grounding time = 0.104400s, Solving time = 0.035410s, Total time = 0.139810s
3 : Statistics :: Grounding time = 0.105118s, Solving time = 0.040923s, Total time = 0.146041s
4 : Statistics :: Grounding time = 0.108055s, Solving time = 0.055068s, Total time = 0.163123s
5 : Statistics :: Grounding time = 0.107281s, Solving time = 0.060596s, Total time = 0.167877s
6 : Statistics :: Grounding time = 0.108772s, Solving time = 0.072340s, Total time = 0.181112s
7 : Statistics :: Grounding time = 0.113907s, Solving time = 0.102994s, Total time = 0.216901s
8 : Statistics :: Grounding time = 0.110204s, Solving time = 0.098187s, Total time = 0.208391s
9 : Statistics :: Grounding time = 0.111382s, Solving time = 0.085691s, Total time = 0.197073s
10 : Statistics :: Grounding time = 0.110769s, Solving time = 0.157229s, Total time = 0.267998s
11 : Statistics :: Grounding time = 0.117493s, Solving time = 0.156357s, Total time = 0.273850s
12 : Statistics :: Grounding time = 0.114529s, Solving time = 0.347880s, Total time = 0.462409s
13 : Statistics :: Grounding time = 0.126431s, Solving time = 0.217954s, Total time = 0.344385s
14 : Statistics :: Grounding time = 0.363986s, Solving time = 0.511028s, Total time = 0.875013s
15 : Statistics :: Grounding time = 0.377817s, Solving time = 1.085245s, Total time = 1.463062s

[06-02-2021_14-57-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 5.071750s, Solving time = 3.584690s, Total time = 8.867871s
Model :: Total atoms = 9893, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,release(manipulator_end_1,(block,3)),27)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),28)
occurs(1,talos,release(manipulator_end_2,(block,5)),29)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),31)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[06-02-2021_14-57-40] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.585095s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     2.075532s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.867871s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-57-40] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 12.957159s            
      ================================================      

[06-02-2021_14-57-40] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_14-57-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_14-57-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Instantiated.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building completed.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding base program parts.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.013918s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving base program parts.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002957s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039650s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005710s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.031887s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.003021s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.030404s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.004033s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.034473s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.004751s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.035092s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005403s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.036531s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038062s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006697s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.037490s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.007793s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038745s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.008755s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040013s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.011003s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.043688s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.012794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.044717s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.017514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041104s.

[06-02-2021_14-57-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.021853s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041851s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.035595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.042380s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.066960s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.075943s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.133044s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.080250s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.187555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.082725s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.105431s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving completed in 1.520142s because STOP_CON_REACHED.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.828923s, Solving time = 0.646999s, Total time = 1.520142s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039650s, Solving time = 0.005710s, Total time = 0.045360s
2 : Statistics :: Grounding time = 0.031887s, Solving time = 0.003021s, Total time = 0.034908s
3 : Statistics :: Grounding time = 0.030404s, Solving time = 0.004033s, Total time = 0.034436s
4 : Statistics :: Grounding time = 0.034473s, Solving time = 0.004751s, Total time = 0.039223s
5 : Statistics :: Grounding time = 0.035092s, Solving time = 0.005403s, Total time = 0.040495s
6 : Statistics :: Grounding time = 0.036531s, Solving time = 0.006130s, Total time = 0.042662s
7 : Statistics :: Grounding time = 0.038062s, Solving time = 0.006697s, Total time = 0.044759s
8 : Statistics :: Grounding time = 0.037490s, Solving time = 0.007793s, Total time = 0.045283s
9 : Statistics :: Grounding time = 0.038745s, Solving time = 0.008755s, Total time = 0.047500s
10 : Statistics :: Grounding time = 0.040013s, Solving time = 0.011003s, Total time = 0.051015s
11 : Statistics :: Grounding time = 0.043688s, Solving time = 0.012794s, Total time = 0.056482s
12 : Statistics :: Grounding time = 0.044717s, Solving time = 0.017514s, Total time = 0.062231s
13 : Statistics :: Grounding time = 0.041104s, Solving time = 0.021853s, Total time = 0.062957s
14 : Statistics :: Grounding time = 0.041851s, Solving time = 0.035595s, Total time = 0.077446s
15 : Statistics :: Grounding time = 0.042380s, Solving time = 0.066960s, Total time = 0.109340s
16 : Statistics :: Grounding time = 0.075943s, Solving time = 0.133044s, Total time = 0.208987s
17 : Statistics :: Grounding time = 0.080250s, Solving time = 0.187555s, Total time = 0.267805s
18 : Statistics :: Grounding time = 0.082725s, Solving time = 0.105431s, Total time = 0.188156s

[06-02-2021_14-57-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.828923s, Solving time = 0.646999s, Total time = 1.520142s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_14-57-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_14-57-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Instantiated.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building completed.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding base program parts.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.014769s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving base program parts.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.002146s.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving started.

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_14-57-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.625222s.

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.226840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.072352s.

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.017489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_14-57-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.068400s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.015817s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.070999s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.025385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.072247s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.037546s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.073147s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.027855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074670s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.032849s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.076307s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.043921s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.078269s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.070301s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.080506s.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Model found:
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.085501s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving completed in 1.947655s because STOP_CON_REACHED.

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.306888s, Solving time = 0.585649s, Total time = 1.947655s
Final Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.625222s, Solving time = 0.226840s, Total time = 0.852063s
2 : Statistics :: Grounding time = 0.072352s, Solving time = 0.017489s, Total time = 0.089841s
3 : Statistics :: Grounding time = 0.068400s, Solving time = 0.015817s, Total time = 0.084216s
4 : Statistics :: Grounding time = 0.070999s, Solving time = 0.025385s, Total time = 0.096383s
5 : Statistics :: Grounding time = 0.072247s, Solving time = 0.037546s, Total time = 0.109793s
6 : Statistics :: Grounding time = 0.073147s, Solving time = 0.027855s, Total time = 0.101002s
7 : Statistics :: Grounding time = 0.074670s, Solving time = 0.032849s, Total time = 0.107519s
8 : Statistics :: Grounding time = 0.076307s, Solving time = 0.043921s, Total time = 0.120227s
9 : Statistics :: Grounding time = 0.078269s, Solving time = 0.070301s, Total time = 0.148570s
10 : Statistics :: Grounding time = 0.080506s, Solving time = 0.085501s, Total time = 0.166007s

[06-02-2021_14-57-43] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.306888s, Solving time = 0.585649s, Total time = 1.947655s
Model :: Total atoms = 6734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_14-57-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,move(store_room),2)
occurs(2,talos,configure(manipulator_arm_2,extended),3)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),4)
occurs(2,talos,configure(manipulator_arm_1,extended),5)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),6)
occurs(2,talos,configure(manipulator_arm_2,retracted),7)
occurs(2,talos,configure(manipulator_arm_1,retracted),8)
occurs(2,talos,move(hallway),9)
occurs(2,talos,move(puzzle_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),13)
occurs(2,talos,release(manipulator_arm_2,(block,6)),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),15)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),16)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),17)
occurs(2,talos,release(manipulator_arm_1,(block,5)),18)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),19)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),20)
occurs(2,talos,release(manipulator_arm_2,(block,3)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),22)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),23)
occurs(2,talos,release(manipulator_arm_2,(block,2)),24)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),25)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),26)

[06-02-2021_14-57-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_14-57-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Instantiated.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 26 rules into program part conformance_module(step).

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 26, Stop con = StopCondition.Satisfiable

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building started.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building completed.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding base program parts.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.017866s.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving base program parts.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.002796s.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving started.

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [1]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_14-57-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [25]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_14-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 2.913974s.

[06-02-2021_14-57-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.552175s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [2]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.103827s.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.035073s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [3]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.105216s.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.040896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [4]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.108664s.

[06-02-2021_14-57-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.056398s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [5]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.106799s.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.055274s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [6]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.108112s.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.079918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [7]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.111577s.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.070687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [8]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.111151s.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.086112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [9]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.110116s.

[06-02-2021_14-57-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.102572s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [10]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.114245s.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.100598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [11]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.114545s.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.141945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [12]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.116954s.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.234458s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [13]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_14-57-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.122018s.

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.219840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [14]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.347764s.

[06-02-2021_14-57-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.423209s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_14-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [15]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_14-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_14-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.366127s.

[06-02-2021_14-57-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_14-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Model found:
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.623934s:
Result = SAT, Stop condition = SAT

[06-02-2021_14-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving completed in 8.012187s because STOP_CON_REACHED.

[06-02-2021_14-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.978955s, Solving time = 2.825885s, Total time = 8.012187s
Final Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental statistics:
1 : Statistics :: Grounding time = 2.913974s, Solving time = 0.552175s, Total time = 3.466149s
2 : Statistics :: Grounding time = 0.103827s, Solving time = 0.035073s, Total time = 0.138900s
3 : Statistics :: Grounding time = 0.105216s, Solving time = 0.040896s, Total time = 0.146112s
4 : Statistics :: Grounding time = 0.108664s, Solving time = 0.056398s, Total time = 0.165063s
5 : Statistics :: Grounding time = 0.106799s, Solving time = 0.055274s, Total time = 0.162073s
6 : Statistics :: Grounding time = 0.108112s, Solving time = 0.079918s, Total time = 0.188029s
7 : Statistics :: Grounding time = 0.111577s, Solving time = 0.070687s, Total time = 0.182264s
8 : Statistics :: Grounding time = 0.111151s, Solving time = 0.086112s, Total time = 0.197264s
9 : Statistics :: Grounding time = 0.110116s, Solving time = 0.102572s, Total time = 0.212688s
10 : Statistics :: Grounding time = 0.114245s, Solving time = 0.100598s, Total time = 0.214843s
11 : Statistics :: Grounding time = 0.114545s, Solving time = 0.141945s, Total time = 0.256490s
12 : Statistics :: Grounding time = 0.116954s, Solving time = 0.234458s, Total time = 0.351412s
13 : Statistics :: Grounding time = 0.122018s, Solving time = 0.219840s, Total time = 0.341858s
14 : Statistics :: Grounding time = 0.347764s, Solving time = 0.423209s, Total time = 0.770973s
15 : Statistics :: Grounding time = 0.366127s, Solving time = 0.623934s, Total time = 0.990060s

[06-02-2021_14-57-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.978955s, Solving time = 2.825885s, Total time = 8.012187s
Model :: Total atoms = 9889, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_14-57-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),25)
occurs(1,talos,release(manipulator_end_1,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),27)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[06-02-2021_14-57-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.520142s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     1.947655s : Steps =    26 : Actions =    26 |  
  | Level 1 : Time =     8.012187s : Steps =    39 : Actions =    39 |  
  ====================================================================  

[06-02-2021_14-57-52] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 11.996322s            
      ================================================      

[06-02-2021_14-57-52] INFO :: Experiment >> 

  ################################################################################################  
      All 20 experimental runs complete : Real time 258.097328s, Proccessing time 727.390625s       
  ################################################################################################  

[06-02-2021_14-57-52] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL        GT        ST         TT   S   A
  0   1   3  0.837568  0.761879   1.644466  18  18
  0   1   2  1.327330  0.642139   2.027584  26  26
  0   1   1  5.032159  3.858391   9.109723  39  39
  1   1   3  0.833725  0.683840   1.559638  18  18
  1   1   2  1.317106  0.598658   1.973730  26  26
  1   1   1  4.815496  4.177662   9.211382  39  39
  2   1   3  0.828107  0.635121   1.505903  18  18
  2   1   2  1.312776  0.646976   2.016504  26  26
  2   1   1  5.016732  3.461144   8.700749  39  39
  3   1   3  0.827643  0.689541   1.560702  18  18
  3   1   2  1.340161  0.587564   1.984415  26  26
  3   1   1  5.008608  3.047667   8.268077  39  39
  4   1   3  0.834292  0.615749   1.493094  18  18
  4   1   2  1.337891  0.596069   1.991859  26  26
  4   1   1  5.001186  3.800240   9.014109  39  39
  5   1   3  0.847526  0.642289   1.534494  18  18
  5   1   2  1.331918  0.621215   2.009318  26  26
  5   1   1  5.049495  3.317304   8.575666  39  39
  6   1   3  0.827924  0.567597   1.437705  18  18
  6   1   2  1.323827  0.610188   1.992750  26  26
  6   1   1  5.038685  4.444197   9.704578  39  39
  7   1   3  0.820505  0.702700   1.567759  18  18
  7   1   2  1.322105  0.633143   2.010501  26  26
  7   1   1  5.009477  4.088637   9.314364  39  39
  8   1   3  0.852594  0.788345   1.684159  18  18
  8   1   2  1.304302  0.604408   1.966139  26  26
  8   1   1  5.074139  4.078388   9.370459  39  39
  9   1   3  0.836400  0.563858   1.442780  18  18
  9   1   2  1.326219  0.625097   2.005902  26  26
  9   1   1  5.079012  5.737050  11.040781  39  39
 10   1   3  0.833847  0.536851   1.415036  18  18
 10   1   2  1.315311  0.620726   1.993778  26  26
 10   1   1  5.027919  2.974060   8.209749  39  39
 11   1   3  0.842128  0.827976   1.715512  18  18
 11   1   2  1.317362  0.592766   1.966088  26  26
 11   1   1  5.062062  3.449995   8.721135  39  39
 12   1   3  0.830841  0.682013   1.556427  18  18
 12   1   2  1.307798  0.616218   1.982170  26  26
 12   1   1  5.019148  4.203069   9.439370  39  39
 13   1   3  0.825546  0.732604   1.601461  18  18
 13   1   2  1.321916  0.577501   1.956868  26  26
 13   1   1  4.996560  3.134129   8.341633  39  39
 14   1   3  0.828097  0.616725   1.487082  18  18
 14   1   2  1.324518  0.588223   1.968867  26  26
 14   1   1  5.079472  2.965288   8.256106  39  39
 15   1   3  0.822831  0.674980   1.540854  18  18
 15   1   2  1.314139  0.610687   1.981016  26  26
 15   1   1  5.003876  3.530465   8.749527  39  39
 16   1   3  0.830701  0.577260   1.450775  18  18
 16   1   2  1.319145  0.669254   2.044312  26  26
 16   1   1  5.053154  2.908100   8.173207  39  39
 17   1   3  0.833105  0.633888   1.510699  18  18
 17   1   2  1.320877  0.603607   1.982110  26  26
 17   1   1  4.978385  4.294949   9.486097  39  39
 18   1   3  0.851809  0.690472   1.585095  18  18
 18   1   2  1.347783  0.670147   2.075532  26  26
 18   1   1  5.071750  3.584690   8.867871  39  39
 19   1   3  0.828923  0.646999   1.520142  18  18
 19   1   2  1.306888  0.585649   1.947655  26  26
 19   1   1  4.978955  2.825885   8.012187  39  39

[06-02-2021_14-57-52] INFO :: __main__ >> Exiting with code 0

