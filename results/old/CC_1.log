[05-02-2021_18-03-43] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[05-02-2021_18-03-43] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[05-02-2021_18-03-43] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[05-02-2021_18-03-43] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp', '-sc', '-pm=classical', '-xf', '-df', '-ir', '1', '-er', '20', '-op=False'].

[05-02-2021_18-03-43] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_05-02-2021_18-03-43.xlsx')
('data_file', './results/ASH_Data_05-02-2021_18-03-43.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'classical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 1)
('warranty', False)
('conditions', False)

[05-02-2021_18-03-43] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'].

[05-02-2021_18-03-43] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.005946s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000214s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.005946s, Solving time = 0.000214s, Total time = 0.006160s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[05-02-2021_18-03-43] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[05-02-2021_18-03-43] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> Generating initial state.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Instantiated.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building completed.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding completed in 0.097761s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Model found:
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving completed in 0.014849s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.097761s, Solving time = 0.014849s, Total time = 0.112610s
Final Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.097761s, Solving time = 0.014849s, Total time = 0.112610s
Model :: Total atoms = 2722, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> Generating goal state.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Instantiated.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building completed.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding completed in 0.052927s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Model found:
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving completed in 0.004692s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.052927s, Solving time = 0.004692s, Total time = 0.057619s
Final Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.052927s, Solving time = 0.004692s, Total time = 0.057619s
Model :: Total atoms = 2590, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[05-02-2021_18-03-43] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 1 : Experimental runs = 20                   
  ################################################################################################  

[05-02-2021_18-03-43] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-03-43] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.015959s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002937s.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-03-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.200800s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009455s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.081411s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009180s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079242s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079989s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.015572s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082670s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014152s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079725s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.014317s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.083324s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.015170s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079771s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.016641s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.080649s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.018041s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.087750s.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.019629s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-03-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.079861s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.020645s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082781s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.024830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.082849s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.023230s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.085730s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.032237s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.085359s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.039628s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.091701s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.037768s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.097967s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.064765s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.092274s.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.063264s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-03-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.100445s.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.079884s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.096964s.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.084980s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.093503s.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.123449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.096858s.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.146241s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.106739s.

[05-02-2021_18-03-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.219021s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.099127s.

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.331001s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.105657s.

[05-02-2021_18-03-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.470891s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.101142s.

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.345515s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.112650s.

[05-02-2021_18-03-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.458113s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.104159s.

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.614566s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-03-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.114932s.

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.727665s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.112163s.

[05-02-2021_18-03-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.266789s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-03-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-03-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.109135s.

[05-02-2021_18-03-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.367175s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-03-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-03-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.110257s.

[05-02-2021_18-03-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 1.709792s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.113873s.

[05-02-2021_18-03-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-03-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 2.986059s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-03-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-03-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-03-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.113382s.

[05-02-2021_18-03-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 3.137374s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-04-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-04-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.115265s.

[05-02-2021_18-04-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 3.806184s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-04-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-04-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.117610s.

[05-02-2021_18-04-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 4.106316s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-04-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-04-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.117095s.

[05-02-2021_18-04-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 6.452992s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.126912s.

[05-02-2021_18-04-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 8.002686s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-04-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-04-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.395065s.

[05-02-2021_18-04-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 4.078433s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 45.665945s because STOP_CON_REACHED.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.212740s, Solving time = 40.966101s, Total time = 45.665945s
Final Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.200800s, Solving time = 0.009455s, Total time = 0.210254s
2 : Statistics :: Grounding time = 0.081411s, Solving time = 0.009180s, Total time = 0.090590s
3 : Statistics :: Grounding time = 0.079242s, Solving time = 0.009511s, Total time = 0.088753s
4 : Statistics :: Grounding time = 0.079989s, Solving time = 0.015572s, Total time = 0.095561s
5 : Statistics :: Grounding time = 0.082670s, Solving time = 0.014152s, Total time = 0.096822s
6 : Statistics :: Grounding time = 0.079725s, Solving time = 0.014317s, Total time = 0.094042s
7 : Statistics :: Grounding time = 0.083324s, Solving time = 0.015170s, Total time = 0.098494s
8 : Statistics :: Grounding time = 0.079771s, Solving time = 0.016641s, Total time = 0.096412s
9 : Statistics :: Grounding time = 0.080649s, Solving time = 0.018041s, Total time = 0.098690s
10 : Statistics :: Grounding time = 0.087750s, Solving time = 0.019629s, Total time = 0.107379s
11 : Statistics :: Grounding time = 0.079861s, Solving time = 0.020645s, Total time = 0.100506s
12 : Statistics :: Grounding time = 0.082781s, Solving time = 0.024830s, Total time = 0.107611s
13 : Statistics :: Grounding time = 0.082849s, Solving time = 0.023230s, Total time = 0.106079s
14 : Statistics :: Grounding time = 0.085730s, Solving time = 0.032237s, Total time = 0.117967s
15 : Statistics :: Grounding time = 0.085359s, Solving time = 0.039628s, Total time = 0.124986s
16 : Statistics :: Grounding time = 0.091701s, Solving time = 0.037768s, Total time = 0.129469s
17 : Statistics :: Grounding time = 0.097967s, Solving time = 0.064765s, Total time = 0.162732s
18 : Statistics :: Grounding time = 0.092274s, Solving time = 0.063264s, Total time = 0.155539s
19 : Statistics :: Grounding time = 0.100445s, Solving time = 0.079884s, Total time = 0.180329s
20 : Statistics :: Grounding time = 0.096964s, Solving time = 0.084980s, Total time = 0.181945s
21 : Statistics :: Grounding time = 0.093503s, Solving time = 0.123449s, Total time = 0.216952s
22 : Statistics :: Grounding time = 0.096858s, Solving time = 0.146241s, Total time = 0.243099s
23 : Statistics :: Grounding time = 0.106739s, Solving time = 0.219021s, Total time = 0.325761s
24 : Statistics :: Grounding time = 0.099127s, Solving time = 0.331001s, Total time = 0.430129s
25 : Statistics :: Grounding time = 0.105657s, Solving time = 0.470891s, Total time = 0.576548s
26 : Statistics :: Grounding time = 0.101142s, Solving time = 0.345515s, Total time = 0.446657s
27 : Statistics :: Grounding time = 0.112650s, Solving time = 0.458113s, Total time = 0.570763s
28 : Statistics :: Grounding time = 0.104159s, Solving time = 0.614566s, Total time = 0.718725s
29 : Statistics :: Grounding time = 0.114932s, Solving time = 0.727665s, Total time = 0.842597s
30 : Statistics :: Grounding time = 0.112163s, Solving time = 1.266789s, Total time = 1.378952s
31 : Statistics :: Grounding time = 0.109135s, Solving time = 1.367175s, Total time = 1.476310s
32 : Statistics :: Grounding time = 0.110257s, Solving time = 1.709792s, Total time = 1.820049s
33 : Statistics :: Grounding time = 0.113873s, Solving time = 2.986059s, Total time = 3.099932s
34 : Statistics :: Grounding time = 0.113382s, Solving time = 3.137374s, Total time = 3.250756s
35 : Statistics :: Grounding time = 0.115265s, Solving time = 3.806184s, Total time = 3.921448s
36 : Statistics :: Grounding time = 0.117610s, Solving time = 4.106316s, Total time = 4.223926s
37 : Statistics :: Grounding time = 0.117095s, Solving time = 6.452992s, Total time = 6.570087s
38 : Statistics :: Grounding time = 0.126912s, Solving time = 8.002686s, Total time = 8.129598s
39 : Statistics :: Grounding time = 0.395065s, Solving time = 4.078433s, Total time = 4.473498s

[05-02-2021_18-04-29] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.212740s, Solving time = 40.966101s, Total time = 45.665945s
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-04-29] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-04-29] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 45.929324s               
      ================================================      

[05-02-2021_18-04-29] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-04-29] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.017074s.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.003878s.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.192057s.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.009652s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-04-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.065153s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.005819s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.064631s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.007677s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071970s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.010200s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.070212s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.014855s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.071970s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.014415s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.075827s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016801s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078234s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080767s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.018732s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086125s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.020451s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080174s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022617s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.080791s.

[05-02-2021_18-04-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.028576s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.087019s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.037745s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.085189s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.041758s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086150s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.041731s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.087612s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.058655s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.093536s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.069333s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.092359s.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.111525s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-04-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.091809s.

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.194625s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.090549s.

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.253638s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095376s.

[05-02-2021_18-04-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.413526s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.102041s.

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.706404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-04-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.095025s.

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.850158s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.096252s.

[05-02-2021_18-04-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.788443s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.099078s.

[05-02-2021_18-04-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.720404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-04-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-04-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.100037s.

[05-02-2021_18-04-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.066261s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-04-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-04-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.105592s.

[05-02-2021_18-04-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.590661s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.103758s.

[05-02-2021_18-04-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.626609s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-04-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-04-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.105781s.

[05-02-2021_18-04-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.703448s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-04-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-04-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.112145s.

[05-02-2021_18-04-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.029329s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-04-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-04-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.108388s.

[05-02-2021_18-04-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.340504s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-04-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-04-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.109042s.

[05-02-2021_18-04-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.544073s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-04-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-04-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.111889s.

[05-02-2021_18-04-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 1.934209s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.114081s.

[05-02-2021_18-04-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 2.481391s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-04-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-04-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.116249s.

[05-02-2021_18-04-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.536192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-04-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-04-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.124737s.

[05-02-2021_18-04-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 4.203486s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.117838s.

[05-02-2021_18-04-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-05-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 6.988433s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-05-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-05-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.120885s.

[05-02-2021_18-05-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 6.982768s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.402381s.

[05-02-2021_18-05-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 2.797757s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 45.929281s because STOP_CON_REACHED.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.089784s, Solving time = 41.303573s, Total time = 45.929281s
Final Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.192057s, Solving time = 0.009652s, Total time = 0.201709s
2 : Statistics :: Grounding time = 0.065153s, Solving time = 0.005819s, Total time = 0.070973s
3 : Statistics :: Grounding time = 0.064631s, Solving time = 0.007677s, Total time = 0.072308s
4 : Statistics :: Grounding time = 0.071970s, Solving time = 0.010200s, Total time = 0.082170s
5 : Statistics :: Grounding time = 0.070212s, Solving time = 0.014855s, Total time = 0.085067s
6 : Statistics :: Grounding time = 0.071970s, Solving time = 0.014415s, Total time = 0.086386s
7 : Statistics :: Grounding time = 0.075827s, Solving time = 0.016801s, Total time = 0.092628s
8 : Statistics :: Grounding time = 0.078234s, Solving time = 0.016830s, Total time = 0.095064s
9 : Statistics :: Grounding time = 0.080767s, Solving time = 0.018732s, Total time = 0.099500s
10 : Statistics :: Grounding time = 0.086125s, Solving time = 0.020451s, Total time = 0.106576s
11 : Statistics :: Grounding time = 0.080174s, Solving time = 0.022617s, Total time = 0.102792s
12 : Statistics :: Grounding time = 0.080791s, Solving time = 0.028576s, Total time = 0.109367s
13 : Statistics :: Grounding time = 0.087019s, Solving time = 0.037745s, Total time = 0.124764s
14 : Statistics :: Grounding time = 0.085189s, Solving time = 0.041758s, Total time = 0.126947s
15 : Statistics :: Grounding time = 0.086150s, Solving time = 0.041731s, Total time = 0.127881s
16 : Statistics :: Grounding time = 0.087612s, Solving time = 0.058655s, Total time = 0.146268s
17 : Statistics :: Grounding time = 0.093536s, Solving time = 0.069333s, Total time = 0.162869s
18 : Statistics :: Grounding time = 0.092359s, Solving time = 0.111525s, Total time = 0.203884s
19 : Statistics :: Grounding time = 0.091809s, Solving time = 0.194625s, Total time = 0.286434s
20 : Statistics :: Grounding time = 0.090549s, Solving time = 0.253638s, Total time = 0.344187s
21 : Statistics :: Grounding time = 0.095376s, Solving time = 0.413526s, Total time = 0.508902s
22 : Statistics :: Grounding time = 0.102041s, Solving time = 0.706404s, Total time = 0.808444s
23 : Statistics :: Grounding time = 0.095025s, Solving time = 0.850158s, Total time = 0.945184s
24 : Statistics :: Grounding time = 0.096252s, Solving time = 0.788443s, Total time = 0.884695s
25 : Statistics :: Grounding time = 0.099078s, Solving time = 0.720404s, Total time = 0.819482s
26 : Statistics :: Grounding time = 0.100037s, Solving time = 1.066261s, Total time = 1.166298s
27 : Statistics :: Grounding time = 0.105592s, Solving time = 0.590661s, Total time = 0.696253s
28 : Statistics :: Grounding time = 0.103758s, Solving time = 0.626609s, Total time = 0.730367s
29 : Statistics :: Grounding time = 0.105781s, Solving time = 0.703448s, Total time = 0.809229s
30 : Statistics :: Grounding time = 0.112145s, Solving time = 1.029329s, Total time = 1.141473s
31 : Statistics :: Grounding time = 0.108388s, Solving time = 1.340504s, Total time = 1.448892s
32 : Statistics :: Grounding time = 0.109042s, Solving time = 1.544073s, Total time = 1.653115s
33 : Statistics :: Grounding time = 0.111889s, Solving time = 1.934209s, Total time = 2.046098s
34 : Statistics :: Grounding time = 0.114081s, Solving time = 2.481391s, Total time = 2.595473s
35 : Statistics :: Grounding time = 0.116249s, Solving time = 4.536192s, Total time = 4.652441s
36 : Statistics :: Grounding time = 0.124737s, Solving time = 4.203486s, Total time = 4.328224s
37 : Statistics :: Grounding time = 0.117838s, Solving time = 6.988433s, Total time = 7.106270s
38 : Statistics :: Grounding time = 0.120885s, Solving time = 6.982768s, Total time = 7.103653s
39 : Statistics :: Grounding time = 0.402381s, Solving time = 2.797757s, Total time = 3.200139s

[05-02-2021_18-05-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.089784s, Solving time = 41.303573s, Total time = 45.929281s
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-05-15] INFO :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 46.173560s            
      ================================================      

[05-02-2021_18-05-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-05-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.017237s.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.002994s.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-05-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.197764s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.010052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.064143s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.005312s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.066539s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.007366s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.066144s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.009710s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.068574s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.015604s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078167s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.014651s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.076169s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.016171s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.078240s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.017994s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077473s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.019052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.077891s.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.021393s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-05-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.084633s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.022349s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.080266s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.028045s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.090621s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.030223s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.090198s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.035406s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088307s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.046971s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.085786s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.063764s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.092129s.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.081449s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-05-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.088904s.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.101181s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.091372s.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.166626s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.091132s.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.221348s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.099304s.

[05-02-2021_18-05-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.292785s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.094999s.

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.468086s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.097929s.

[05-02-2021_18-05-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.580448s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.102003s.

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.260093s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.098238s.

[05-02-2021_18-05-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.337275s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.100618s.

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.410610s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.104299s.

[05-02-2021_18-05-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.452504s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.108359s.

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.539853s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-05-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.104090s.

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.798689s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106392s.

[05-02-2021_18-05-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.863252s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-05-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-05-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.106745s.

[05-02-2021_18-05-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.239685s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-05-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-05-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.112102s.

[05-02-2021_18-05-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 2.023192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.110394s.

[05-02-2021_18-05-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.889364s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-05-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-05-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.111823s.

[05-02-2021_18-05-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.745127s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.117801s.

[05-02-2021_18-05-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.848008s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-05-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-05-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.114541s.

[05-02-2021_18-05-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 4.260125s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.120144s.

[05-02-2021_18-05-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 3.486064s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-05-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-05-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.120306s.

[05-02-2021_18-05-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 6.166490s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-05-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-05-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.453422s.

[05-02-2021_18-05-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.172116s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 36.453779s because STOP_CON_REACHED.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.135195s, Solving time = 31.771427s, Total time = 36.453779s
Final Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.197764s, Solving time = 0.010052s, Total time = 0.207815s
2 : Statistics :: Grounding time = 0.064143s, Solving time = 0.005312s, Total time = 0.069455s
3 : Statistics :: Grounding time = 0.066539s, Solving time = 0.007366s, Total time = 0.073905s
4 : Statistics :: Grounding time = 0.066144s, Solving time = 0.009710s, Total time = 0.075854s
5 : Statistics :: Grounding time = 0.068574s, Solving time = 0.015604s, Total time = 0.084177s
6 : Statistics :: Grounding time = 0.078167s, Solving time = 0.014651s, Total time = 0.092819s
7 : Statistics :: Grounding time = 0.076169s, Solving time = 0.016171s, Total time = 0.092339s
8 : Statistics :: Grounding time = 0.078240s, Solving time = 0.017994s, Total time = 0.096235s
9 : Statistics :: Grounding time = 0.077473s, Solving time = 0.019052s, Total time = 0.096525s
10 : Statistics :: Grounding time = 0.077891s, Solving time = 0.021393s, Total time = 0.099284s
11 : Statistics :: Grounding time = 0.084633s, Solving time = 0.022349s, Total time = 0.106982s
12 : Statistics :: Grounding time = 0.080266s, Solving time = 0.028045s, Total time = 0.108311s
13 : Statistics :: Grounding time = 0.090621s, Solving time = 0.030223s, Total time = 0.120845s
14 : Statistics :: Grounding time = 0.090198s, Solving time = 0.035406s, Total time = 0.125604s
15 : Statistics :: Grounding time = 0.088307s, Solving time = 0.046971s, Total time = 0.135278s
16 : Statistics :: Grounding time = 0.085786s, Solving time = 0.063764s, Total time = 0.149551s
17 : Statistics :: Grounding time = 0.092129s, Solving time = 0.081449s, Total time = 0.173578s
18 : Statistics :: Grounding time = 0.088904s, Solving time = 0.101181s, Total time = 0.190085s
19 : Statistics :: Grounding time = 0.091372s, Solving time = 0.166626s, Total time = 0.257998s
20 : Statistics :: Grounding time = 0.091132s, Solving time = 0.221348s, Total time = 0.312480s
21 : Statistics :: Grounding time = 0.099304s, Solving time = 0.292785s, Total time = 0.392089s
22 : Statistics :: Grounding time = 0.094999s, Solving time = 0.468086s, Total time = 0.563085s
23 : Statistics :: Grounding time = 0.097929s, Solving time = 0.580448s, Total time = 0.678377s
24 : Statistics :: Grounding time = 0.102003s, Solving time = 0.260093s, Total time = 0.362095s
25 : Statistics :: Grounding time = 0.098238s, Solving time = 0.337275s, Total time = 0.435513s
26 : Statistics :: Grounding time = 0.100618s, Solving time = 0.410610s, Total time = 0.511227s
27 : Statistics :: Grounding time = 0.104299s, Solving time = 0.452504s, Total time = 0.556803s
28 : Statistics :: Grounding time = 0.108359s, Solving time = 0.539853s, Total time = 0.648212s
29 : Statistics :: Grounding time = 0.104090s, Solving time = 0.798689s, Total time = 0.902778s
30 : Statistics :: Grounding time = 0.106392s, Solving time = 0.863252s, Total time = 0.969643s
31 : Statistics :: Grounding time = 0.106745s, Solving time = 1.239685s, Total time = 1.346430s
32 : Statistics :: Grounding time = 0.112102s, Solving time = 2.023192s, Total time = 2.135295s
33 : Statistics :: Grounding time = 0.110394s, Solving time = 1.889364s, Total time = 1.999758s
34 : Statistics :: Grounding time = 0.111823s, Solving time = 1.745127s, Total time = 1.856950s
35 : Statistics :: Grounding time = 0.117801s, Solving time = 3.848008s, Total time = 3.965809s
36 : Statistics :: Grounding time = 0.114541s, Solving time = 4.260125s, Total time = 4.374666s
37 : Statistics :: Grounding time = 0.120144s, Solving time = 3.486064s, Total time = 3.606208s
38 : Statistics :: Grounding time = 0.120306s, Solving time = 6.166490s, Total time = 6.286796s
39 : Statistics :: Grounding time = 0.453422s, Solving time = 1.172116s, Total time = 1.625538s

[05-02-2021_18-05-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.135195s, Solving time = 31.771427s, Total time = 36.453779s
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-05-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-05-52] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 36.655779s            
      ================================================      

[05-02-2021_18-05-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-05-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.016901s.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.003073s.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.196920s.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017149s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.085930s.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005565s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.064194s.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007894s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-05-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.066814s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011327s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.069902s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.015891s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.073263s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.013903s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.079000s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.016721s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081719s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.017747s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.080774s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.024654s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.085438s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.024352s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.091491s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.028497s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.090080s.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.034792s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-05-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.081710s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.040074s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.083379s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.039356s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088399s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.039411s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.086474s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.067651s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.095031s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.069419s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.092450s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.096164s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.088462s.

[05-02-2021_18-05-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.143507s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.092329s.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.188627s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.092644s.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.341538s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.095029s.

[05-02-2021_18-05-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.403627s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.098101s.

[05-02-2021_18-05-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.743768s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.098239s.

[05-02-2021_18-05-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.907589s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.098371s.

[05-02-2021_18-05-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.211166s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.102416s.

[05-02-2021_18-05-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.794901s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.105728s.

[05-02-2021_18-06-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.607920s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.103396s.

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.677502s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.110078s.

[05-02-2021_18-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.878793s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.112376s.

[05-02-2021_18-06-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.204598s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.109445s.

[05-02-2021_18-06-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 1.638933s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.113311s.

[05-02-2021_18-06-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 2.641516s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-06-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.121882s.

[05-02-2021_18-06-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 3.694972s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-06-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-06-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.116194s.

[05-02-2021_18-06-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.634540s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-06-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-06-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.115589s.

[05-02-2021_18-06-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 4.955796s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-06-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-06-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.119635s.

[05-02-2021_18-06-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 6.351629s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.120340s.

[05-02-2021_18-06-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 5.775382s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.132281s.

[05-02-2021_18-06-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 9.342984s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-06-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-06-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.416035s.

[05-02-2021_18-06-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[05-02-2021_18-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 3.708020s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 56.191625s because STOP_CON_REACHED.

[05-02-2021_18-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.171749s, Solving time = 51.420950s, Total time = 56.191625s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-06-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.196920s, Solving time = 0.017149s, Total time = 0.214069s
2 : Statistics :: Grounding time = 0.085930s, Solving time = 0.005565s, Total time = 0.091495s
3 : Statistics :: Grounding time = 0.064194s, Solving time = 0.007894s, Total time = 0.072088s
4 : Statistics :: Grounding time = 0.066814s, Solving time = 0.011327s, Total time = 0.078141s
5 : Statistics :: Grounding time = 0.069902s, Solving time = 0.015891s, Total time = 0.085792s
6 : Statistics :: Grounding time = 0.073263s, Solving time = 0.013903s, Total time = 0.087166s
7 : Statistics :: Grounding time = 0.079000s, Solving time = 0.016721s, Total time = 0.095721s
8 : Statistics :: Grounding time = 0.081719s, Solving time = 0.017747s, Total time = 0.099467s
9 : Statistics :: Grounding time = 0.080774s, Solving time = 0.024654s, Total time = 0.105428s
10 : Statistics :: Grounding time = 0.085438s, Solving time = 0.024352s, Total time = 0.109790s
11 : Statistics :: Grounding time = 0.091491s, Solving time = 0.028497s, Total time = 0.119988s
12 : Statistics :: Grounding time = 0.090080s, Solving time = 0.034792s, Total time = 0.124872s
13 : Statistics :: Grounding time = 0.081710s, Solving time = 0.040074s, Total time = 0.121784s
14 : Statistics :: Grounding time = 0.083379s, Solving time = 0.039356s, Total time = 0.122735s
15 : Statistics :: Grounding time = 0.088399s, Solving time = 0.039411s, Total time = 0.127810s
16 : Statistics :: Grounding time = 0.086474s, Solving time = 0.067651s, Total time = 0.154124s
17 : Statistics :: Grounding time = 0.095031s, Solving time = 0.069419s, Total time = 0.164450s
18 : Statistics :: Grounding time = 0.092450s, Solving time = 0.096164s, Total time = 0.188614s
19 : Statistics :: Grounding time = 0.088462s, Solving time = 0.143507s, Total time = 0.231968s
20 : Statistics :: Grounding time = 0.092329s, Solving time = 0.188627s, Total time = 0.280957s
21 : Statistics :: Grounding time = 0.092644s, Solving time = 0.341538s, Total time = 0.434183s
22 : Statistics :: Grounding time = 0.095029s, Solving time = 0.403627s, Total time = 0.498657s
23 : Statistics :: Grounding time = 0.098101s, Solving time = 0.743768s, Total time = 0.841870s
24 : Statistics :: Grounding time = 0.098239s, Solving time = 0.907589s, Total time = 1.005828s
25 : Statistics :: Grounding time = 0.098371s, Solving time = 1.211166s, Total time = 1.309536s
26 : Statistics :: Grounding time = 0.102416s, Solving time = 0.794901s, Total time = 0.897316s
27 : Statistics :: Grounding time = 0.105728s, Solving time = 0.607920s, Total time = 0.713648s
28 : Statistics :: Grounding time = 0.103396s, Solving time = 0.677502s, Total time = 0.780897s
29 : Statistics :: Grounding time = 0.110078s, Solving time = 0.878793s, Total time = 0.988871s
30 : Statistics :: Grounding time = 0.112376s, Solving time = 1.204598s, Total time = 1.316973s
31 : Statistics :: Grounding time = 0.109445s, Solving time = 1.638933s, Total time = 1.748378s
32 : Statistics :: Grounding time = 0.113311s, Solving time = 2.641516s, Total time = 2.754827s
33 : Statistics :: Grounding time = 0.121882s, Solving time = 3.694972s, Total time = 3.816854s
34 : Statistics :: Grounding time = 0.116194s, Solving time = 4.634540s, Total time = 4.750733s
35 : Statistics :: Grounding time = 0.115589s, Solving time = 4.955796s, Total time = 5.071385s
36 : Statistics :: Grounding time = 0.119635s, Solving time = 6.351629s, Total time = 6.471264s
37 : Statistics :: Grounding time = 0.120340s, Solving time = 5.775382s, Total time = 5.895723s
38 : Statistics :: Grounding time = 0.132281s, Solving time = 9.342984s, Total time = 9.475265s
39 : Statistics :: Grounding time = 0.416035s, Solving time = 3.708020s, Total time = 4.124055s

[05-02-2021_18-06-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.171749s, Solving time = 51.420950s, Total time = 56.191625s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-06-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_2,extended),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),28)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-06-49] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 56.460262s            
      ================================================      

[05-02-2021_18-06-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-06-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.020703s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.003812s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.204230s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.009398s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080932s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.005990s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.066350s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.008406s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.069079s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.011029s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.074493s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.014883s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084487s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.015102s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.085504s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.020402s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.085516s.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.017561s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-06-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080667s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.018957s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.083141s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.021038s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.095545s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022442s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080903s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.026111s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.081959s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.036751s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.086243s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.033841s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.099824s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.047365s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.086187s.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.077305s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-06-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.088188s.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.097331s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.089867s.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.142790s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.096467s.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.213887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.093133s.

[05-02-2021_18-06-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.231757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.095587s.

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.329710s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.101079s.

[05-02-2021_18-06-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.507250s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.097762s.

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.399654s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.098166s.

[05-02-2021_18-06-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.484201s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-06-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-06-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.102294s.

[05-02-2021_18-06-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.716129s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-06-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-06-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.105094s.

[05-02-2021_18-06-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.314631s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-06-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-06-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.105136s.

[05-02-2021_18-06-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.606507s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-06-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-06-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.112764s.

[05-02-2021_18-06-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-06-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.221714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-06-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-06-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-06-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.112870s.

[05-02-2021_18-06-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.171884s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-07-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-07-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.113373s.

[05-02-2021_18-07-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 1.969414s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-07-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-07-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.114527s.

[05-02-2021_18-07-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 2.408524s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-07-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-07-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.112669s.

[05-02-2021_18-07-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 3.235096s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-07-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-07-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.118161s.

[05-02-2021_18-07-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 3.984861s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-07-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-07-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.126054s.

[05-02-2021_18-07-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.991311s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-07-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-07-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.118996s.

[05-02-2021_18-07-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 4.018959s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-07-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-07-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.115385s.

[05-02-2021_18-07-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 5.640987s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-07-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-07-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.119347s.

[05-02-2021_18-07-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 8.044870s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.121537s.

[05-02-2021_18-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 8.636982s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.409584s.

[05-02-2021_18-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[05-02-2021_18-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 9738, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 7.124539s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 63.699114s because STOP_CON_REACHED.

[05-02-2021_18-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.233802s, Solving time = 58.883380s, Total time = 63.699114s
Final Model :: Total atoms = 9738, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.204230s, Solving time = 0.009398s, Total time = 0.213628s
2 : Statistics :: Grounding time = 0.080932s, Solving time = 0.005990s, Total time = 0.086923s
3 : Statistics :: Grounding time = 0.066350s, Solving time = 0.008406s, Total time = 0.074756s
4 : Statistics :: Grounding time = 0.069079s, Solving time = 0.011029s, Total time = 0.080108s
5 : Statistics :: Grounding time = 0.074493s, Solving time = 0.014883s, Total time = 0.089377s
6 : Statistics :: Grounding time = 0.084487s, Solving time = 0.015102s, Total time = 0.099589s
7 : Statistics :: Grounding time = 0.085504s, Solving time = 0.020402s, Total time = 0.105906s
8 : Statistics :: Grounding time = 0.085516s, Solving time = 0.017561s, Total time = 0.103077s
9 : Statistics :: Grounding time = 0.080667s, Solving time = 0.018957s, Total time = 0.099624s
10 : Statistics :: Grounding time = 0.083141s, Solving time = 0.021038s, Total time = 0.104179s
11 : Statistics :: Grounding time = 0.095545s, Solving time = 0.022442s, Total time = 0.117987s
12 : Statistics :: Grounding time = 0.080903s, Solving time = 0.026111s, Total time = 0.107014s
13 : Statistics :: Grounding time = 0.081959s, Solving time = 0.036751s, Total time = 0.118709s
14 : Statistics :: Grounding time = 0.086243s, Solving time = 0.033841s, Total time = 0.120083s
15 : Statistics :: Grounding time = 0.099824s, Solving time = 0.047365s, Total time = 0.147189s
16 : Statistics :: Grounding time = 0.086187s, Solving time = 0.077305s, Total time = 0.163492s
17 : Statistics :: Grounding time = 0.088188s, Solving time = 0.097331s, Total time = 0.185519s
18 : Statistics :: Grounding time = 0.089867s, Solving time = 0.142790s, Total time = 0.232657s
19 : Statistics :: Grounding time = 0.096467s, Solving time = 0.213887s, Total time = 0.310354s
20 : Statistics :: Grounding time = 0.093133s, Solving time = 0.231757s, Total time = 0.324890s
21 : Statistics :: Grounding time = 0.095587s, Solving time = 0.329710s, Total time = 0.425297s
22 : Statistics :: Grounding time = 0.101079s, Solving time = 0.507250s, Total time = 0.608329s
23 : Statistics :: Grounding time = 0.097762s, Solving time = 0.399654s, Total time = 0.497416s
24 : Statistics :: Grounding time = 0.098166s, Solving time = 0.484201s, Total time = 0.582367s
25 : Statistics :: Grounding time = 0.102294s, Solving time = 0.716129s, Total time = 0.818423s
26 : Statistics :: Grounding time = 0.105094s, Solving time = 1.314631s, Total time = 1.419725s
27 : Statistics :: Grounding time = 0.105136s, Solving time = 1.606507s, Total time = 1.711643s
28 : Statistics :: Grounding time = 0.112764s, Solving time = 1.221714s, Total time = 1.334478s
29 : Statistics :: Grounding time = 0.112870s, Solving time = 1.171884s, Total time = 1.284754s
30 : Statistics :: Grounding time = 0.113373s, Solving time = 1.969414s, Total time = 2.082786s
31 : Statistics :: Grounding time = 0.114527s, Solving time = 2.408524s, Total time = 2.523051s
32 : Statistics :: Grounding time = 0.112669s, Solving time = 3.235096s, Total time = 3.347765s
33 : Statistics :: Grounding time = 0.118161s, Solving time = 3.984861s, Total time = 4.103022s
34 : Statistics :: Grounding time = 0.126054s, Solving time = 4.991311s, Total time = 5.117365s
35 : Statistics :: Grounding time = 0.118996s, Solving time = 4.018959s, Total time = 4.137955s
36 : Statistics :: Grounding time = 0.115385s, Solving time = 5.640987s, Total time = 5.756371s
37 : Statistics :: Grounding time = 0.119347s, Solving time = 8.044870s, Total time = 8.164217s
38 : Statistics :: Grounding time = 0.121537s, Solving time = 8.636982s, Total time = 8.758519s
39 : Statistics :: Grounding time = 0.409584s, Solving time = 7.124539s, Total time = 7.534123s

[05-02-2021_18-07-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.233802s, Solving time = 58.883380s, Total time = 63.699114s
Model :: Total atoms = 9738, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-07-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-07-52] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 63.977300s            
      ================================================      

[05-02-2021_18-07-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-07-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.021701s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.002438s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.201452s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.009702s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.069449s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.005738s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.063950s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.007990s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.067060s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.010501s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.074446s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.014713s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.073753s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.013755s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.096065s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.017350s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.100107s.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.016543s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.079196s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.018986s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.082420s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.023990s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.082506s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.027508s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.083123s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.028495s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.083384s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.034387s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086533s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.039726s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.086487s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.048847s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.087446s.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.074992s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.090445s.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.112257s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.090742s.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.135948s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.090844s.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.192538s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.096334s.

[05-02-2021_18-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.269999s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.095679s.

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.326244s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.095334s.

[05-02-2021_18-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.490270s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.096857s.

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.713716s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-07-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.096600s.

[05-02-2021_18-07-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.056482s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.103836s.

[05-02-2021_18-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.903532s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.101569s.

[05-02-2021_18-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.846192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.123014s.

[05-02-2021_18-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.419691s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.106013s.

[05-02-2021_18-08-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.997153s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.107628s.

[05-02-2021_18-08-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.106367s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.113255s.

[05-02-2021_18-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.618343s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.116718s.

[05-02-2021_18-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.578078s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.108692s.

[05-02-2021_18-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.071359s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.112039s.

[05-02-2021_18-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 2.242445s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.115536s.

[05-02-2021_18-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 3.435970s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.116248s.

[05-02-2021_18-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 5.329735s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.115686s.

[05-02-2021_18-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.894735s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.118670s.

[05-02-2021_18-08-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 4.910753s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.124972s.

[05-02-2021_18-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 7.669644s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.413752s.

[05-02-2021_18-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.449554s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 54.964638s because STOP_CON_REACHED.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.189542s, Solving time = 50.166666s, Total time = 54.964638s
Final Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.201452s, Solving time = 0.009702s, Total time = 0.211154s
2 : Statistics :: Grounding time = 0.069449s, Solving time = 0.005738s, Total time = 0.075186s
3 : Statistics :: Grounding time = 0.063950s, Solving time = 0.007990s, Total time = 0.071940s
4 : Statistics :: Grounding time = 0.067060s, Solving time = 0.010501s, Total time = 0.077561s
5 : Statistics :: Grounding time = 0.074446s, Solving time = 0.014713s, Total time = 0.089159s
6 : Statistics :: Grounding time = 0.073753s, Solving time = 0.013755s, Total time = 0.087507s
7 : Statistics :: Grounding time = 0.096065s, Solving time = 0.017350s, Total time = 0.113415s
8 : Statistics :: Grounding time = 0.100107s, Solving time = 0.016543s, Total time = 0.116651s
9 : Statistics :: Grounding time = 0.079196s, Solving time = 0.018986s, Total time = 0.098182s
10 : Statistics :: Grounding time = 0.082420s, Solving time = 0.023990s, Total time = 0.106410s
11 : Statistics :: Grounding time = 0.082506s, Solving time = 0.027508s, Total time = 0.110014s
12 : Statistics :: Grounding time = 0.083123s, Solving time = 0.028495s, Total time = 0.111618s
13 : Statistics :: Grounding time = 0.083384s, Solving time = 0.034387s, Total time = 0.117771s
14 : Statistics :: Grounding time = 0.086533s, Solving time = 0.039726s, Total time = 0.126258s
15 : Statistics :: Grounding time = 0.086487s, Solving time = 0.048847s, Total time = 0.135334s
16 : Statistics :: Grounding time = 0.087446s, Solving time = 0.074992s, Total time = 0.162438s
17 : Statistics :: Grounding time = 0.090445s, Solving time = 0.112257s, Total time = 0.202703s
18 : Statistics :: Grounding time = 0.090742s, Solving time = 0.135948s, Total time = 0.226690s
19 : Statistics :: Grounding time = 0.090844s, Solving time = 0.192538s, Total time = 0.283382s
20 : Statistics :: Grounding time = 0.096334s, Solving time = 0.269999s, Total time = 0.366333s
21 : Statistics :: Grounding time = 0.095679s, Solving time = 0.326244s, Total time = 0.421923s
22 : Statistics :: Grounding time = 0.095334s, Solving time = 0.490270s, Total time = 0.585604s
23 : Statistics :: Grounding time = 0.096857s, Solving time = 0.713716s, Total time = 0.810573s
24 : Statistics :: Grounding time = 0.096600s, Solving time = 1.056482s, Total time = 1.153082s
25 : Statistics :: Grounding time = 0.103836s, Solving time = 1.903532s, Total time = 2.007369s
26 : Statistics :: Grounding time = 0.101569s, Solving time = 2.846192s, Total time = 2.947762s
27 : Statistics :: Grounding time = 0.123014s, Solving time = 2.419691s, Total time = 2.542705s
28 : Statistics :: Grounding time = 0.106013s, Solving time = 1.997153s, Total time = 2.103166s
29 : Statistics :: Grounding time = 0.107628s, Solving time = 2.106367s, Total time = 2.213995s
30 : Statistics :: Grounding time = 0.113255s, Solving time = 1.618343s, Total time = 1.731598s
31 : Statistics :: Grounding time = 0.116718s, Solving time = 1.578078s, Total time = 1.694796s
32 : Statistics :: Grounding time = 0.108692s, Solving time = 2.071359s, Total time = 2.180051s
33 : Statistics :: Grounding time = 0.112039s, Solving time = 2.242445s, Total time = 2.354484s
34 : Statistics :: Grounding time = 0.115536s, Solving time = 3.435970s, Total time = 3.551506s
35 : Statistics :: Grounding time = 0.116248s, Solving time = 5.329735s, Total time = 5.445983s
36 : Statistics :: Grounding time = 0.115686s, Solving time = 4.894735s, Total time = 5.010421s
37 : Statistics :: Grounding time = 0.118670s, Solving time = 4.910753s, Total time = 5.029424s
38 : Statistics :: Grounding time = 0.124972s, Solving time = 7.669644s, Total time = 7.794615s
39 : Statistics :: Grounding time = 0.413752s, Solving time = 1.449554s, Total time = 1.863306s

[05-02-2021_18-08-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.189542s, Solving time = 50.166666s, Total time = 54.964638s
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-08-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),27)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-08-48] INFO :: Experiment >> 

      ================================================      
            Experimental run 5 : Time 55.212049s            
      ================================================      

[05-02-2021_18-08-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-08-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.018611s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003167s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.201450s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009416s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.064766s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005929s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.064817s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.008124s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.067068s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.010771s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.070300s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.015122s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.073131s.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.014226s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.075111s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.015791s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.078187s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.018913s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.083100s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.019994s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.087453s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.028285s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.103931s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.023430s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094211s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.027599s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.087326s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.031726s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094758s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.034324s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.090091s.

[05-02-2021_18-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.042621s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.095471s.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.045978s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.102096s.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.070354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.090408s.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.109040s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.094199s.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.113803s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.116683s.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.115991s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.129589s.

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.158003s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.106708s.

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.230104s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.098392s.

[05-02-2021_18-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.352655s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.098549s.

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.454334s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.104128s.

[05-02-2021_18-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.914310s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.105131s.

[05-02-2021_18-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.085745s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.106422s.

[05-02-2021_18-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.912518s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.105993s.

[05-02-2021_18-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.009959s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.108797s.

[05-02-2021_18-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 1.607111s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.107500s.

[05-02-2021_18-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.020020s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-09-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-09-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.109006s.

[05-02-2021_18-09-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.065819s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.113633s.

[05-02-2021_18-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.503925s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.115063s.

[05-02-2021_18-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 2.390772s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.127148s.

[05-02-2021_18-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.920661s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.115117s.

[05-02-2021_18-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.017612s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.119533s.

[05-02-2021_18-09-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 4.998528s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.118941s.

[05-02-2021_18-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.884381s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.121963s.

[05-02-2021_18-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 5.321001s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.389418s.

[05-02-2021_18-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[05-02-2021_18-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 3.281791s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 49.695838s because STOP_CON_REACHED.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.254201s, Solving time = 44.893854s, Total time = 49.695838s
Final Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.201450s, Solving time = 0.009416s, Total time = 0.210866s
2 : Statistics :: Grounding time = 0.064766s, Solving time = 0.005929s, Total time = 0.070695s
3 : Statistics :: Grounding time = 0.064817s, Solving time = 0.008124s, Total time = 0.072942s
4 : Statistics :: Grounding time = 0.067068s, Solving time = 0.010771s, Total time = 0.077838s
5 : Statistics :: Grounding time = 0.070300s, Solving time = 0.015122s, Total time = 0.085423s
6 : Statistics :: Grounding time = 0.073131s, Solving time = 0.014226s, Total time = 0.087358s
7 : Statistics :: Grounding time = 0.075111s, Solving time = 0.015791s, Total time = 0.090902s
8 : Statistics :: Grounding time = 0.078187s, Solving time = 0.018913s, Total time = 0.097100s
9 : Statistics :: Grounding time = 0.083100s, Solving time = 0.019994s, Total time = 0.103094s
10 : Statistics :: Grounding time = 0.087453s, Solving time = 0.028285s, Total time = 0.115738s
11 : Statistics :: Grounding time = 0.103931s, Solving time = 0.023430s, Total time = 0.127362s
12 : Statistics :: Grounding time = 0.094211s, Solving time = 0.027599s, Total time = 0.121810s
13 : Statistics :: Grounding time = 0.087326s, Solving time = 0.031726s, Total time = 0.119052s
14 : Statistics :: Grounding time = 0.094758s, Solving time = 0.034324s, Total time = 0.129082s
15 : Statistics :: Grounding time = 0.090091s, Solving time = 0.042621s, Total time = 0.132712s
16 : Statistics :: Grounding time = 0.095471s, Solving time = 0.045978s, Total time = 0.141449s
17 : Statistics :: Grounding time = 0.102096s, Solving time = 0.070354s, Total time = 0.172451s
18 : Statistics :: Grounding time = 0.090408s, Solving time = 0.109040s, Total time = 0.199448s
19 : Statistics :: Grounding time = 0.094199s, Solving time = 0.113803s, Total time = 0.208001s
20 : Statistics :: Grounding time = 0.116683s, Solving time = 0.115991s, Total time = 0.232674s
21 : Statistics :: Grounding time = 0.129589s, Solving time = 0.158003s, Total time = 0.287592s
22 : Statistics :: Grounding time = 0.106708s, Solving time = 0.230104s, Total time = 0.336813s
23 : Statistics :: Grounding time = 0.098392s, Solving time = 0.352655s, Total time = 0.451047s
24 : Statistics :: Grounding time = 0.098549s, Solving time = 0.454334s, Total time = 0.552883s
25 : Statistics :: Grounding time = 0.104128s, Solving time = 0.914310s, Total time = 1.018438s
26 : Statistics :: Grounding time = 0.105131s, Solving time = 1.085745s, Total time = 1.190876s
27 : Statistics :: Grounding time = 0.106422s, Solving time = 0.912518s, Total time = 1.018941s
28 : Statistics :: Grounding time = 0.105993s, Solving time = 1.009959s, Total time = 1.115952s
29 : Statistics :: Grounding time = 0.108797s, Solving time = 1.607111s, Total time = 1.715908s
30 : Statistics :: Grounding time = 0.107500s, Solving time = 2.020020s, Total time = 2.127520s
31 : Statistics :: Grounding time = 0.109006s, Solving time = 2.065819s, Total time = 2.174824s
32 : Statistics :: Grounding time = 0.113633s, Solving time = 2.503925s, Total time = 2.617558s
33 : Statistics :: Grounding time = 0.115063s, Solving time = 2.390772s, Total time = 2.505835s
34 : Statistics :: Grounding time = 0.127148s, Solving time = 3.920661s, Total time = 4.047809s
35 : Statistics :: Grounding time = 0.115117s, Solving time = 5.017612s, Total time = 5.132729s
36 : Statistics :: Grounding time = 0.119533s, Solving time = 4.998528s, Total time = 5.118060s
37 : Statistics :: Grounding time = 0.118941s, Solving time = 5.884381s, Total time = 6.003323s
38 : Statistics :: Grounding time = 0.121963s, Solving time = 5.321001s, Total time = 5.442964s
39 : Statistics :: Grounding time = 0.389418s, Solving time = 3.281791s, Total time = 3.671210s

[05-02-2021_18-09-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.254201s, Solving time = 44.893854s, Total time = 49.695838s
Model :: Total atoms = 9743, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-09-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_2,extended),9)
occurs(1,talos,configure(manipulator_limb_1,retracted),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,release(manipulator_end_2,(block,5)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-09-38] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 49.916456s            
      ================================================      

[05-02-2021_18-09-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-09-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.016775s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.003705s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.189189s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.009106s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.063418s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.005856s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.063960s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.007483s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.066577s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.010326s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.069755s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016438s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079230s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.015109s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076161s.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017036s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.083443s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.017711s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079953s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.018281s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.081555s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.019587s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.079858s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.022836s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.085084s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.029709s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084324s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.048311s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.101800s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.045231s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084690s.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.047722s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088450s.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.069660s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.089037s.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.086491s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088037s.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.124867s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.091006s.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.221738s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.091999s.

[05-02-2021_18-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.308900s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.102127s.

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.346564s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.156414s.

[05-02-2021_18-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.396336s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.103372s.

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.498917s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.098554s.

[05-02-2021_18-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.671450s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.106583s.

[05-02-2021_18-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.673428s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.107109s.

[05-02-2021_18-09-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.913994s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.119818s.

[05-02-2021_18-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.434706s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-09-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-09-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.108322s.

[05-02-2021_18-09-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 1.608188s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.105173s.

[05-02-2021_18-09-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.079351s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.111902s.

[05-02-2021_18-09-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.633474s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.107466s.

[05-02-2021_18-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.609276s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.111331s.

[05-02-2021_18-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 2.368044s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.112347s.

[05-02-2021_18-09-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.214505s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.119335s.

[05-02-2021_18-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.501322s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.120118s.

[05-02-2021_18-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 3.416404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.119368s.

[05-02-2021_18-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 4.736234s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.120543s.

[05-02-2021_18-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 4.780309s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-10-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-10-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.123112s.

[05-02-2021_18-10-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 6.965941s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.407041s.

[05-02-2021_18-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 8.414330s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 57.201205s because STOP_CON_REACHED.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.214339s, Solving time = 52.408876s, Total time = 57.201205s
Final Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.189189s, Solving time = 0.009106s, Total time = 0.198295s
2 : Statistics :: Grounding time = 0.063418s, Solving time = 0.005856s, Total time = 0.069274s
3 : Statistics :: Grounding time = 0.063960s, Solving time = 0.007483s, Total time = 0.071443s
4 : Statistics :: Grounding time = 0.066577s, Solving time = 0.010326s, Total time = 0.076903s
5 : Statistics :: Grounding time = 0.069755s, Solving time = 0.016438s, Total time = 0.086193s
6 : Statistics :: Grounding time = 0.079230s, Solving time = 0.015109s, Total time = 0.094340s
7 : Statistics :: Grounding time = 0.076161s, Solving time = 0.017036s, Total time = 0.093197s
8 : Statistics :: Grounding time = 0.083443s, Solving time = 0.017711s, Total time = 0.101154s
9 : Statistics :: Grounding time = 0.079953s, Solving time = 0.018281s, Total time = 0.098234s
10 : Statistics :: Grounding time = 0.081555s, Solving time = 0.019587s, Total time = 0.101142s
11 : Statistics :: Grounding time = 0.079858s, Solving time = 0.022836s, Total time = 0.102694s
12 : Statistics :: Grounding time = 0.085084s, Solving time = 0.029709s, Total time = 0.114793s
13 : Statistics :: Grounding time = 0.084324s, Solving time = 0.048311s, Total time = 0.132634s
14 : Statistics :: Grounding time = 0.101800s, Solving time = 0.045231s, Total time = 0.147031s
15 : Statistics :: Grounding time = 0.084690s, Solving time = 0.047722s, Total time = 0.132412s
16 : Statistics :: Grounding time = 0.088450s, Solving time = 0.069660s, Total time = 0.158110s
17 : Statistics :: Grounding time = 0.089037s, Solving time = 0.086491s, Total time = 0.175528s
18 : Statistics :: Grounding time = 0.088037s, Solving time = 0.124867s, Total time = 0.212903s
19 : Statistics :: Grounding time = 0.091006s, Solving time = 0.221738s, Total time = 0.312744s
20 : Statistics :: Grounding time = 0.091999s, Solving time = 0.308900s, Total time = 0.400900s
21 : Statistics :: Grounding time = 0.102127s, Solving time = 0.346564s, Total time = 0.448691s
22 : Statistics :: Grounding time = 0.156414s, Solving time = 0.396336s, Total time = 0.552750s
23 : Statistics :: Grounding time = 0.103372s, Solving time = 0.498917s, Total time = 0.602290s
24 : Statistics :: Grounding time = 0.098554s, Solving time = 0.671450s, Total time = 0.770005s
25 : Statistics :: Grounding time = 0.106583s, Solving time = 0.673428s, Total time = 0.780011s
26 : Statistics :: Grounding time = 0.107109s, Solving time = 0.913994s, Total time = 1.021103s
27 : Statistics :: Grounding time = 0.119818s, Solving time = 1.434706s, Total time = 1.554525s
28 : Statistics :: Grounding time = 0.108322s, Solving time = 1.608188s, Total time = 1.716510s
29 : Statistics :: Grounding time = 0.105173s, Solving time = 2.079351s, Total time = 2.184524s
30 : Statistics :: Grounding time = 0.111902s, Solving time = 2.633474s, Total time = 2.745376s
31 : Statistics :: Grounding time = 0.107466s, Solving time = 2.609276s, Total time = 2.716742s
32 : Statistics :: Grounding time = 0.111331s, Solving time = 2.368044s, Total time = 2.479375s
33 : Statistics :: Grounding time = 0.112347s, Solving time = 3.214505s, Total time = 3.326852s
34 : Statistics :: Grounding time = 0.119335s, Solving time = 3.501322s, Total time = 3.620657s
35 : Statistics :: Grounding time = 0.120118s, Solving time = 3.416404s, Total time = 3.536522s
36 : Statistics :: Grounding time = 0.119368s, Solving time = 4.736234s, Total time = 4.855602s
37 : Statistics :: Grounding time = 0.120543s, Solving time = 4.780309s, Total time = 4.900852s
38 : Statistics :: Grounding time = 0.123112s, Solving time = 6.965941s, Total time = 7.089053s
39 : Statistics :: Grounding time = 0.407041s, Solving time = 8.414330s, Total time = 8.821371s

[05-02-2021_18-10-35] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.214339s, Solving time = 52.408876s, Total time = 57.201205s
Model :: Total atoms = 9734, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-10-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,release(manipulator_end_2,(block,3)),31)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-10-35] INFO :: Experiment >> 

      ================================================      
            Experimental run 7 : Time 57.446674s            
      ================================================      

[05-02-2021_18-10-35] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-10-35] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.017042s.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003617s.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.190878s.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.009408s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.063820s.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.005886s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.064611s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.007383s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.067657s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.010349s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.071097s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.014889s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.072522s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.013741s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.077973s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.015047s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.077984s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.016221s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.078144s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.019028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.079491s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.019957s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.085137s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.022554s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.083692s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.023323s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.082666s.

[05-02-2021_18-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.030534s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.081755s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.046032s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.084962s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.044225s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.089979s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.058655s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.084545s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.047574s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.096157s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.049926s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.089122s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.054603s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.090975s.

[05-02-2021_18-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.066480s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.093412s.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.099281s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.096351s.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.152029s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.094281s.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.340479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.095357s.

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.517520s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.109987s.

[05-02-2021_18-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.592057s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.104852s.

[05-02-2021_18-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.943236s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.108587s.

[05-02-2021_18-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.506782s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.102685s.

[05-02-2021_18-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 2.368231s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.109314s.

[05-02-2021_18-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 2.478884s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.106817s.

[05-02-2021_18-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.186830s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.107490s.

[05-02-2021_18-10-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.800152s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.110644s.

[05-02-2021_18-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.213335s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.112426s.

[05-02-2021_18-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.461761s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.114723s.

[05-02-2021_18-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 2.991039s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.120959s.

[05-02-2021_18-11-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.640191s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.118605s.

[05-02-2021_18-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 3.834122s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.119397s.

[05-02-2021_18-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 4.544441s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.117453s.

[05-02-2021_18-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 5.244095s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.386650s.

[05-02-2021_18-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.989479s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 45.073438s because STOP_CON_REACHED.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.060202s, Solving time = 40.483375s, Total time = 45.073438s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.190878s, Solving time = 0.009408s, Total time = 0.200286s
2 : Statistics :: Grounding time = 0.063820s, Solving time = 0.005886s, Total time = 0.069705s
3 : Statistics :: Grounding time = 0.064611s, Solving time = 0.007383s, Total time = 0.071994s
4 : Statistics :: Grounding time = 0.067657s, Solving time = 0.010349s, Total time = 0.078006s
5 : Statistics :: Grounding time = 0.071097s, Solving time = 0.014889s, Total time = 0.085986s
6 : Statistics :: Grounding time = 0.072522s, Solving time = 0.013741s, Total time = 0.086264s
7 : Statistics :: Grounding time = 0.077973s, Solving time = 0.015047s, Total time = 0.093020s
8 : Statistics :: Grounding time = 0.077984s, Solving time = 0.016221s, Total time = 0.094205s
9 : Statistics :: Grounding time = 0.078144s, Solving time = 0.019028s, Total time = 0.097172s
10 : Statistics :: Grounding time = 0.079491s, Solving time = 0.019957s, Total time = 0.099448s
11 : Statistics :: Grounding time = 0.085137s, Solving time = 0.022554s, Total time = 0.107691s
12 : Statistics :: Grounding time = 0.083692s, Solving time = 0.023323s, Total time = 0.107015s
13 : Statistics :: Grounding time = 0.082666s, Solving time = 0.030534s, Total time = 0.113200s
14 : Statistics :: Grounding time = 0.081755s, Solving time = 0.046032s, Total time = 0.127787s
15 : Statistics :: Grounding time = 0.084962s, Solving time = 0.044225s, Total time = 0.129187s
16 : Statistics :: Grounding time = 0.089979s, Solving time = 0.058655s, Total time = 0.148634s
17 : Statistics :: Grounding time = 0.084545s, Solving time = 0.047574s, Total time = 0.132119s
18 : Statistics :: Grounding time = 0.096157s, Solving time = 0.049926s, Total time = 0.146083s
19 : Statistics :: Grounding time = 0.089122s, Solving time = 0.054603s, Total time = 0.143725s
20 : Statistics :: Grounding time = 0.090975s, Solving time = 0.066480s, Total time = 0.157456s
21 : Statistics :: Grounding time = 0.093412s, Solving time = 0.099281s, Total time = 0.192694s
22 : Statistics :: Grounding time = 0.096351s, Solving time = 0.152029s, Total time = 0.248380s
23 : Statistics :: Grounding time = 0.094281s, Solving time = 0.340479s, Total time = 0.434760s
24 : Statistics :: Grounding time = 0.095357s, Solving time = 0.517520s, Total time = 0.612877s
25 : Statistics :: Grounding time = 0.109987s, Solving time = 0.592057s, Total time = 0.702044s
26 : Statistics :: Grounding time = 0.104852s, Solving time = 0.943236s, Total time = 1.048088s
27 : Statistics :: Grounding time = 0.108587s, Solving time = 1.506782s, Total time = 1.615369s
28 : Statistics :: Grounding time = 0.102685s, Solving time = 2.368231s, Total time = 2.470916s
29 : Statistics :: Grounding time = 0.109314s, Solving time = 2.478884s, Total time = 2.588198s
30 : Statistics :: Grounding time = 0.106817s, Solving time = 4.186830s, Total time = 4.293647s
31 : Statistics :: Grounding time = 0.107490s, Solving time = 1.800152s, Total time = 1.907642s
32 : Statistics :: Grounding time = 0.110644s, Solving time = 1.213335s, Total time = 1.323979s
33 : Statistics :: Grounding time = 0.112426s, Solving time = 1.461761s, Total time = 1.574187s
34 : Statistics :: Grounding time = 0.114723s, Solving time = 2.991039s, Total time = 3.105762s
35 : Statistics :: Grounding time = 0.120959s, Solving time = 3.640191s, Total time = 3.761150s
36 : Statistics :: Grounding time = 0.118605s, Solving time = 3.834122s, Total time = 3.952727s
37 : Statistics :: Grounding time = 0.119397s, Solving time = 4.544441s, Total time = 4.663838s
38 : Statistics :: Grounding time = 0.117453s, Solving time = 5.244095s, Total time = 5.361548s
39 : Statistics :: Grounding time = 0.386650s, Solving time = 1.989479s, Total time = 2.376129s

[05-02-2021_18-11-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.060202s, Solving time = 40.483375s, Total time = 45.073438s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-11-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),25)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_1,(block,5)),27)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-11-20] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 45.289985s            
      ================================================      

[05-02-2021_18-11-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-11-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.017323s.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.003375s.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.196356s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009631s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.064863s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006006s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.065192s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.007474s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.066927s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.010391s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.070329s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014321s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.072362s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.014268s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.077811s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.016655s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.086437s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.018050s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.078311s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.018102s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.082868s.

[05-02-2021_18-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.020452s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.083373s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.022836s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.081958s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.024432s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080626s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.026148s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.082544s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.042183s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.085245s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.042694s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.084165s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.044278s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.087353s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.053355s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.093765s.

[05-02-2021_18-11-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.056166s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.094184s.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.086052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.092466s.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.115267s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.093002s.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.180532s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.099212s.

[05-02-2021_18-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.323528s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.097116s.

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.535436s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.097593s.

[05-02-2021_18-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.419209s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.105688s.

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.481513s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-11-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.104904s.

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.549879s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.101305s.

[05-02-2021_18-11-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.550566s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.105788s.

[05-02-2021_18-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.725803s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.107807s.

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.621012s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.106341s.

[05-02-2021_18-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.975199s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.109796s.

[05-02-2021_18-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.727468s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.120982s.

[05-02-2021_18-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 1.984410s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-11-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-11-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.119124s.

[05-02-2021_18-11-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 3.883195s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.126977s.

[05-02-2021_18-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.847223s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.117952s.

[05-02-2021_18-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 5.804141s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.115938s.

[05-02-2021_18-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 5.782519s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.132817s.

[05-02-2021_18-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-12-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 6.240075s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-12-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-12-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.120000s.

[05-02-2021_18-12-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 6.663030s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.399805s.

[05-02-2021_18-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 4.651670s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 52.260539s because STOP_CON_REACHED.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.126608s, Solving time = 47.598543s, Total time = 52.260539s
Final Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.196356s, Solving time = 0.009631s, Total time = 0.205987s
2 : Statistics :: Grounding time = 0.064863s, Solving time = 0.006006s, Total time = 0.070869s
3 : Statistics :: Grounding time = 0.065192s, Solving time = 0.007474s, Total time = 0.072666s
4 : Statistics :: Grounding time = 0.066927s, Solving time = 0.010391s, Total time = 0.077318s
5 : Statistics :: Grounding time = 0.070329s, Solving time = 0.014321s, Total time = 0.084651s
6 : Statistics :: Grounding time = 0.072362s, Solving time = 0.014268s, Total time = 0.086630s
7 : Statistics :: Grounding time = 0.077811s, Solving time = 0.016655s, Total time = 0.094466s
8 : Statistics :: Grounding time = 0.086437s, Solving time = 0.018050s, Total time = 0.104488s
9 : Statistics :: Grounding time = 0.078311s, Solving time = 0.018102s, Total time = 0.096413s
10 : Statistics :: Grounding time = 0.082868s, Solving time = 0.020452s, Total time = 0.103320s
11 : Statistics :: Grounding time = 0.083373s, Solving time = 0.022836s, Total time = 0.106208s
12 : Statistics :: Grounding time = 0.081958s, Solving time = 0.024432s, Total time = 0.106390s
13 : Statistics :: Grounding time = 0.080626s, Solving time = 0.026148s, Total time = 0.106774s
14 : Statistics :: Grounding time = 0.082544s, Solving time = 0.042183s, Total time = 0.124727s
15 : Statistics :: Grounding time = 0.085245s, Solving time = 0.042694s, Total time = 0.127939s
16 : Statistics :: Grounding time = 0.084165s, Solving time = 0.044278s, Total time = 0.128443s
17 : Statistics :: Grounding time = 0.087353s, Solving time = 0.053355s, Total time = 0.140709s
18 : Statistics :: Grounding time = 0.093765s, Solving time = 0.056166s, Total time = 0.149931s
19 : Statistics :: Grounding time = 0.094184s, Solving time = 0.086052s, Total time = 0.180236s
20 : Statistics :: Grounding time = 0.092466s, Solving time = 0.115267s, Total time = 0.207733s
21 : Statistics :: Grounding time = 0.093002s, Solving time = 0.180532s, Total time = 0.273534s
22 : Statistics :: Grounding time = 0.099212s, Solving time = 0.323528s, Total time = 0.422741s
23 : Statistics :: Grounding time = 0.097116s, Solving time = 0.535436s, Total time = 0.632553s
24 : Statistics :: Grounding time = 0.097593s, Solving time = 0.419209s, Total time = 0.516801s
25 : Statistics :: Grounding time = 0.105688s, Solving time = 0.481513s, Total time = 0.587202s
26 : Statistics :: Grounding time = 0.104904s, Solving time = 0.549879s, Total time = 0.654783s
27 : Statistics :: Grounding time = 0.101305s, Solving time = 0.550566s, Total time = 0.651870s
28 : Statistics :: Grounding time = 0.105788s, Solving time = 0.725803s, Total time = 0.831591s
29 : Statistics :: Grounding time = 0.107807s, Solving time = 0.621012s, Total time = 0.728819s
30 : Statistics :: Grounding time = 0.106341s, Solving time = 0.975199s, Total time = 1.081540s
31 : Statistics :: Grounding time = 0.109796s, Solving time = 1.727468s, Total time = 1.837263s
32 : Statistics :: Grounding time = 0.120982s, Solving time = 1.984410s, Total time = 2.105393s
33 : Statistics :: Grounding time = 0.119124s, Solving time = 3.883195s, Total time = 4.002319s
34 : Statistics :: Grounding time = 0.126977s, Solving time = 4.847223s, Total time = 4.974200s
35 : Statistics :: Grounding time = 0.117952s, Solving time = 5.804141s, Total time = 5.922092s
36 : Statistics :: Grounding time = 0.115938s, Solving time = 5.782519s, Total time = 5.898457s
37 : Statistics :: Grounding time = 0.132817s, Solving time = 6.240075s, Total time = 6.372893s
38 : Statistics :: Grounding time = 0.120000s, Solving time = 6.663030s, Total time = 6.783030s
39 : Statistics :: Grounding time = 0.399805s, Solving time = 4.651670s, Total time = 5.051476s

[05-02-2021_18-12-13] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.126608s, Solving time = 47.598543s, Total time = 52.260539s
Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[05-02-2021_18-12-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-12-13] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 52.493640s            
      ================================================      

[05-02-2021_18-12-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-12-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.017969s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.002847s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.203182s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.008060s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.070315s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.006354s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.064883s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.007562s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.084972s.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.010648s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.069741s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.013618s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073371s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.013542s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.076669s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.015426s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085507s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.016595s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.078729s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.017319s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.080874s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.020479s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.082667s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022844s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.083243s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.030601s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.087445s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.031974s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081820s.

[05-02-2021_18-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.040130s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.084903s.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.046822s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.087000s.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.065043s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.085907s.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.085599s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.091950s.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.152007s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.094698s.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.169216s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.090006s.

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.224187s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.096730s.

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.328888s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.095346s.

[05-02-2021_18-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.524904s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.103494s.

[05-02-2021_18-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.732969s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.097995s.

[05-02-2021_18-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.203567s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.103973s.

[05-02-2021_18-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.655836s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.105407s.

[05-02-2021_18-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.784028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.103055s.

[05-02-2021_18-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.773020s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.104012s.

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.543760s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.111799s.

[05-02-2021_18-12-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.621521s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-12-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-12-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.105539s.

[05-02-2021_18-12-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.811384s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.113878s.

[05-02-2021_18-12-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.168677s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.111208s.

[05-02-2021_18-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 1.799975s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.111460s.

[05-02-2021_18-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 2.872965s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.113973s.

[05-02-2021_18-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 4.799964s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.117713s.

[05-02-2021_18-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 4.326364s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.125498s.

[05-02-2021_18-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.930351s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.125881s.

[05-02-2021_18-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 5.589144s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.391074s.

[05-02-2021_18-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 6.734052s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.403203s.

[05-02-2021_18-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 7.817305s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 56.018335s because STOP_CON_REACHED.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.417093s, Solving time = 51.019546s, Total time = 56.018335s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.203182s, Solving time = 0.008060s, Total time = 0.211243s
2 : Statistics :: Grounding time = 0.070315s, Solving time = 0.006354s, Total time = 0.076669s
3 : Statistics :: Grounding time = 0.064883s, Solving time = 0.007562s, Total time = 0.072445s
4 : Statistics :: Grounding time = 0.084972s, Solving time = 0.010648s, Total time = 0.095620s
5 : Statistics :: Grounding time = 0.069741s, Solving time = 0.013618s, Total time = 0.083359s
6 : Statistics :: Grounding time = 0.073371s, Solving time = 0.013542s, Total time = 0.086913s
7 : Statistics :: Grounding time = 0.076669s, Solving time = 0.015426s, Total time = 0.092095s
8 : Statistics :: Grounding time = 0.085507s, Solving time = 0.016595s, Total time = 0.102102s
9 : Statistics :: Grounding time = 0.078729s, Solving time = 0.017319s, Total time = 0.096048s
10 : Statistics :: Grounding time = 0.080874s, Solving time = 0.020479s, Total time = 0.101353s
11 : Statistics :: Grounding time = 0.082667s, Solving time = 0.022844s, Total time = 0.105511s
12 : Statistics :: Grounding time = 0.083243s, Solving time = 0.030601s, Total time = 0.113844s
13 : Statistics :: Grounding time = 0.087445s, Solving time = 0.031974s, Total time = 0.119419s
14 : Statistics :: Grounding time = 0.081820s, Solving time = 0.040130s, Total time = 0.121951s
15 : Statistics :: Grounding time = 0.084903s, Solving time = 0.046822s, Total time = 0.131726s
16 : Statistics :: Grounding time = 0.087000s, Solving time = 0.065043s, Total time = 0.152043s
17 : Statistics :: Grounding time = 0.085907s, Solving time = 0.085599s, Total time = 0.171506s
18 : Statistics :: Grounding time = 0.091950s, Solving time = 0.152007s, Total time = 0.243957s
19 : Statistics :: Grounding time = 0.094698s, Solving time = 0.169216s, Total time = 0.263914s
20 : Statistics :: Grounding time = 0.090006s, Solving time = 0.224187s, Total time = 0.314192s
21 : Statistics :: Grounding time = 0.096730s, Solving time = 0.328888s, Total time = 0.425618s
22 : Statistics :: Grounding time = 0.095346s, Solving time = 0.524904s, Total time = 0.620250s
23 : Statistics :: Grounding time = 0.103494s, Solving time = 0.732969s, Total time = 0.836463s
24 : Statistics :: Grounding time = 0.097995s, Solving time = 1.203567s, Total time = 1.301562s
25 : Statistics :: Grounding time = 0.103973s, Solving time = 1.655836s, Total time = 1.759809s
26 : Statistics :: Grounding time = 0.105407s, Solving time = 0.784028s, Total time = 0.889435s
27 : Statistics :: Grounding time = 0.103055s, Solving time = 0.773020s, Total time = 0.876074s
28 : Statistics :: Grounding time = 0.104012s, Solving time = 0.543760s, Total time = 0.647772s
29 : Statistics :: Grounding time = 0.111799s, Solving time = 0.621521s, Total time = 0.733320s
30 : Statistics :: Grounding time = 0.105539s, Solving time = 0.811384s, Total time = 0.916923s
31 : Statistics :: Grounding time = 0.113878s, Solving time = 1.168677s, Total time = 1.282554s
32 : Statistics :: Grounding time = 0.111208s, Solving time = 1.799975s, Total time = 1.911184s
33 : Statistics :: Grounding time = 0.111460s, Solving time = 2.872965s, Total time = 2.984426s
34 : Statistics :: Grounding time = 0.113973s, Solving time = 4.799964s, Total time = 4.913937s
35 : Statistics :: Grounding time = 0.117713s, Solving time = 4.326364s, Total time = 4.444077s
36 : Statistics :: Grounding time = 0.125498s, Solving time = 6.930351s, Total time = 7.055849s
37 : Statistics :: Grounding time = 0.125881s, Solving time = 5.589144s, Total time = 5.715025s
38 : Statistics :: Grounding time = 0.391074s, Solving time = 6.734052s, Total time = 7.125125s
39 : Statistics :: Grounding time = 0.403203s, Solving time = 7.817305s, Total time = 8.220508s

[05-02-2021_18-13-09] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.417093s, Solving time = 51.019546s, Total time = 56.018335s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[05-02-2021_18-13-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),10)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),25)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),26)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),27)
occurs(1,talos,release(manipulator_end_1,(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-13-09] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 56.289045s            
      ================================================      

[05-02-2021_18-13-09] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-13-09] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.026757s.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.003710s.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-13-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.213168s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.009529s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.067520s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.005199s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.078244s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.008593s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.068865s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.010819s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.074772s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.014981s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.075717s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.015517s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.076816s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.016133s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.079060s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.017607s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.094717s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.019368s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.092888s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.020989s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.081432s.

[05-02-2021_18-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.024713s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.080203s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.022030s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.082962s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.033409s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.082415s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.034890s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.088709s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.036870s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.087325s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.054757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.091545s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.060630s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.101402s.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.070729s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.088980s.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.121203s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.098333s.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.139714s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.093634s.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.149739s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.096544s.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.196332s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.103336s.

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.270908s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.103476s.

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.351757s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.098910s.

[05-02-2021_18-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.606403s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.100843s.

[05-02-2021_18-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.833247s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-13-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-13-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.105243s.

[05-02-2021_18-13-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.895781s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.103793s.

[05-02-2021_18-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.659708s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.105343s.

[05-02-2021_18-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.077303s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.109294s.

[05-02-2021_18-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.233965s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.108643s.

[05-02-2021_18-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.341273s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.114156s.

[05-02-2021_18-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 2.620552s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.123016s.

[05-02-2021_18-13-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 4.265909s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.114533s.

[05-02-2021_18-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 4.504028s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.114720s.

[05-02-2021_18-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 4.737427s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.117572s.

[05-02-2021_18-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.829659s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.122810s.

[05-02-2021_18-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.243446s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.122572s.

[05-02-2021_18-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 5.488604s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.396541s.

[05-02-2021_18-13-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.837173s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 47.598377s because STOP_CON_REACHED.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.186807s, Solving time = 42.884604s, Total time = 47.598377s
Final Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.213168s, Solving time = 0.009529s, Total time = 0.222696s
2 : Statistics :: Grounding time = 0.067520s, Solving time = 0.005199s, Total time = 0.072719s
3 : Statistics :: Grounding time = 0.078244s, Solving time = 0.008593s, Total time = 0.086837s
4 : Statistics :: Grounding time = 0.068865s, Solving time = 0.010819s, Total time = 0.079684s
5 : Statistics :: Grounding time = 0.074772s, Solving time = 0.014981s, Total time = 0.089753s
6 : Statistics :: Grounding time = 0.075717s, Solving time = 0.015517s, Total time = 0.091234s
7 : Statistics :: Grounding time = 0.076816s, Solving time = 0.016133s, Total time = 0.092949s
8 : Statistics :: Grounding time = 0.079060s, Solving time = 0.017607s, Total time = 0.096667s
9 : Statistics :: Grounding time = 0.094717s, Solving time = 0.019368s, Total time = 0.114086s
10 : Statistics :: Grounding time = 0.092888s, Solving time = 0.020989s, Total time = 0.113877s
11 : Statistics :: Grounding time = 0.081432s, Solving time = 0.024713s, Total time = 0.106145s
12 : Statistics :: Grounding time = 0.080203s, Solving time = 0.022030s, Total time = 0.102233s
13 : Statistics :: Grounding time = 0.082962s, Solving time = 0.033409s, Total time = 0.116371s
14 : Statistics :: Grounding time = 0.082415s, Solving time = 0.034890s, Total time = 0.117305s
15 : Statistics :: Grounding time = 0.088709s, Solving time = 0.036870s, Total time = 0.125579s
16 : Statistics :: Grounding time = 0.087325s, Solving time = 0.054757s, Total time = 0.142082s
17 : Statistics :: Grounding time = 0.091545s, Solving time = 0.060630s, Total time = 0.152175s
18 : Statistics :: Grounding time = 0.101402s, Solving time = 0.070729s, Total time = 0.172131s
19 : Statistics :: Grounding time = 0.088980s, Solving time = 0.121203s, Total time = 0.210182s
20 : Statistics :: Grounding time = 0.098333s, Solving time = 0.139714s, Total time = 0.238046s
21 : Statistics :: Grounding time = 0.093634s, Solving time = 0.149739s, Total time = 0.243373s
22 : Statistics :: Grounding time = 0.096544s, Solving time = 0.196332s, Total time = 0.292876s
23 : Statistics :: Grounding time = 0.103336s, Solving time = 0.270908s, Total time = 0.374244s
24 : Statistics :: Grounding time = 0.103476s, Solving time = 0.351757s, Total time = 0.455233s
25 : Statistics :: Grounding time = 0.098910s, Solving time = 0.606403s, Total time = 0.705313s
26 : Statistics :: Grounding time = 0.100843s, Solving time = 0.833247s, Total time = 0.934090s
27 : Statistics :: Grounding time = 0.105243s, Solving time = 0.895781s, Total time = 1.001024s
28 : Statistics :: Grounding time = 0.103793s, Solving time = 0.659708s, Total time = 0.763501s
29 : Statistics :: Grounding time = 0.105343s, Solving time = 1.077303s, Total time = 1.182646s
30 : Statistics :: Grounding time = 0.109294s, Solving time = 1.233965s, Total time = 1.343259s
31 : Statistics :: Grounding time = 0.108643s, Solving time = 1.341273s, Total time = 1.449916s
32 : Statistics :: Grounding time = 0.114156s, Solving time = 2.620552s, Total time = 2.734709s
33 : Statistics :: Grounding time = 0.123016s, Solving time = 4.265909s, Total time = 4.388926s
34 : Statistics :: Grounding time = 0.114533s, Solving time = 4.504028s, Total time = 4.618560s
35 : Statistics :: Grounding time = 0.114720s, Solving time = 4.737427s, Total time = 4.852148s
36 : Statistics :: Grounding time = 0.117572s, Solving time = 5.829659s, Total time = 5.947230s
37 : Statistics :: Grounding time = 0.122810s, Solving time = 5.243446s, Total time = 5.366256s
38 : Statistics :: Grounding time = 0.122572s, Solving time = 5.488604s, Total time = 5.611176s
39 : Statistics :: Grounding time = 0.396541s, Solving time = 1.837173s, Total time = 2.233714s

[05-02-2021_18-13-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.186807s, Solving time = 42.884604s, Total time = 47.598377s
Model :: Total atoms = 9740, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[05-02-2021_18-13-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-13-57] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 47.831750s            
      ================================================      

[05-02-2021_18-13-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-13-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.018129s.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003245s.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.193477s.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009171s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.063268s.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005085s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.065097s.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.007023s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.068559s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009881s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.070383s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.018059s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.071812s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.013801s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.079532s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.015572s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.092589s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.017940s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.085589s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.020307s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.077633s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.018190s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.078966s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.021387s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.079337s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.022486s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.086353s.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.027608s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.081847s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.023216s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.083848s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.035192s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.088960s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.055500s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.085928s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.084096s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.090098s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.126511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.095291s.

[05-02-2021_18-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.227929s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.095117s.

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.251128s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.092305s.

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.333779s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.097069s.

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.528504s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.100648s.

[05-02-2021_18-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.615847s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.097075s.

[05-02-2021_18-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.684944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.102013s.

[05-02-2021_18-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.853082s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.109328s.

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.655806s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.112380s.

[05-02-2021_18-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.959576s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.102402s.

[05-02-2021_18-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.931896s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.104496s.

[05-02-2021_18-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.982810s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.108421s.

[05-02-2021_18-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.362563s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.145424s.

[05-02-2021_18-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 1.698971s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.107595s.

[05-02-2021_18-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.180938s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-14-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-14-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.116212s.

[05-02-2021_18-14-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 2.745421s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.116085s.

[05-02-2021_18-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.245189s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.124994s.

[05-02-2021_18-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 3.780383s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-14-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.115919s.

[05-02-2021_18-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 6.150837s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.136678s.

[05-02-2021_18-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.908084s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.117561s.

[05-02-2021_18-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 5.647784s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.409183s.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.151252s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 45.116374s because STOP_CON_REACHED.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.167600s, Solving time = 40.430998s, Total time = 45.116374s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193477s, Solving time = 0.009171s, Total time = 0.202647s
2 : Statistics :: Grounding time = 0.063268s, Solving time = 0.005085s, Total time = 0.068353s
3 : Statistics :: Grounding time = 0.065097s, Solving time = 0.007023s, Total time = 0.072121s
4 : Statistics :: Grounding time = 0.068559s, Solving time = 0.009881s, Total time = 0.078440s
5 : Statistics :: Grounding time = 0.070383s, Solving time = 0.018059s, Total time = 0.088442s
6 : Statistics :: Grounding time = 0.071812s, Solving time = 0.013801s, Total time = 0.085613s
7 : Statistics :: Grounding time = 0.079532s, Solving time = 0.015572s, Total time = 0.095104s
8 : Statistics :: Grounding time = 0.092589s, Solving time = 0.017940s, Total time = 0.110529s
9 : Statistics :: Grounding time = 0.085589s, Solving time = 0.020307s, Total time = 0.105896s
10 : Statistics :: Grounding time = 0.077633s, Solving time = 0.018190s, Total time = 0.095823s
11 : Statistics :: Grounding time = 0.078966s, Solving time = 0.021387s, Total time = 0.100354s
12 : Statistics :: Grounding time = 0.079337s, Solving time = 0.022486s, Total time = 0.101823s
13 : Statistics :: Grounding time = 0.086353s, Solving time = 0.027608s, Total time = 0.113961s
14 : Statistics :: Grounding time = 0.081847s, Solving time = 0.023216s, Total time = 0.105063s
15 : Statistics :: Grounding time = 0.083848s, Solving time = 0.035192s, Total time = 0.119040s
16 : Statistics :: Grounding time = 0.088960s, Solving time = 0.055500s, Total time = 0.144460s
17 : Statistics :: Grounding time = 0.085928s, Solving time = 0.084096s, Total time = 0.170024s
18 : Statistics :: Grounding time = 0.090098s, Solving time = 0.126511s, Total time = 0.216609s
19 : Statistics :: Grounding time = 0.095291s, Solving time = 0.227929s, Total time = 0.323220s
20 : Statistics :: Grounding time = 0.095117s, Solving time = 0.251128s, Total time = 0.346245s
21 : Statistics :: Grounding time = 0.092305s, Solving time = 0.333779s, Total time = 0.426084s
22 : Statistics :: Grounding time = 0.097069s, Solving time = 0.528504s, Total time = 0.625573s
23 : Statistics :: Grounding time = 0.100648s, Solving time = 0.615847s, Total time = 0.716495s
24 : Statistics :: Grounding time = 0.097075s, Solving time = 0.684944s, Total time = 0.782020s
25 : Statistics :: Grounding time = 0.102013s, Solving time = 0.853082s, Total time = 0.955095s
26 : Statistics :: Grounding time = 0.109328s, Solving time = 0.655806s, Total time = 0.765134s
27 : Statistics :: Grounding time = 0.112380s, Solving time = 0.959576s, Total time = 1.071956s
28 : Statistics :: Grounding time = 0.102402s, Solving time = 0.931896s, Total time = 1.034298s
29 : Statistics :: Grounding time = 0.104496s, Solving time = 0.982810s, Total time = 1.087306s
30 : Statistics :: Grounding time = 0.108421s, Solving time = 1.362563s, Total time = 1.470984s
31 : Statistics :: Grounding time = 0.145424s, Solving time = 1.698971s, Total time = 1.844395s
32 : Statistics :: Grounding time = 0.107595s, Solving time = 2.180938s, Total time = 2.288533s
33 : Statistics :: Grounding time = 0.116212s, Solving time = 2.745421s, Total time = 2.861633s
34 : Statistics :: Grounding time = 0.116085s, Solving time = 3.245189s, Total time = 3.361274s
35 : Statistics :: Grounding time = 0.124994s, Solving time = 3.780383s, Total time = 3.905377s
36 : Statistics :: Grounding time = 0.115919s, Solving time = 6.150837s, Total time = 6.266756s
37 : Statistics :: Grounding time = 0.136678s, Solving time = 5.908084s, Total time = 6.044762s
38 : Statistics :: Grounding time = 0.117561s, Solving time = 5.647784s, Total time = 5.765345s
39 : Statistics :: Grounding time = 0.409183s, Solving time = 0.151252s, Total time = 0.560435s

[05-02-2021_18-14-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.167600s, Solving time = 40.430998s, Total time = 45.116374s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-14-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,configure(manipulator_limb_2,extended),10)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),25)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),26)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),27)
occurs(1,talos,release(manipulator_end_1,(block,3)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),29)
occurs(1,talos,release(manipulator_end_2,(block,5)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-14-42] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 45.339940s            
      ================================================      

[05-02-2021_18-14-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-14-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.017894s.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.003955s.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-14-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.195993s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.009629s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.064536s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.005460s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.065276s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.008094s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.069986s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.010336s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072252s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.014530s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073385s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.013917s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.077713s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.015915s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.077485s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.016288s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082691s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086738s.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.019063s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.079806s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.021294s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.083961s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.027497s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082371s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.033240s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.083226s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.038787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.085315s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.052932s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.087300s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.063866s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086312s.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.076422s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089050s.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.125316s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.090188s.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.194399s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.098264s.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.255197s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.092326s.

[05-02-2021_18-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.310074s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.093609s.

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.370195s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.099694s.

[05-02-2021_18-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.226017s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.100632s.

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.431782s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.098898s.

[05-02-2021_18-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.543011s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.106095s.

[05-02-2021_18-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.773409s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.105487s.

[05-02-2021_18-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.197399s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.103249s.

[05-02-2021_18-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 1.734507s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.114427s.

[05-02-2021_18-14-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.813034s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.107164s.

[05-02-2021_18-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.325586s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.120907s.

[05-02-2021_18-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.335723s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.109620s.

[05-02-2021_18-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 2.527626s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.125035s.

[05-02-2021_18-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 3.399135s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.127049s.

[05-02-2021_18-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.046933s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.115558s.

[05-02-2021_18-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 3.953773s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.125430s.

[05-02-2021_18-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 4.966605s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-15-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-15-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.118708s.

[05-02-2021_18-15-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.614859s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.120277s.

[05-02-2021_18-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.703389s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.392885s.

[05-02-2021_18-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[05-02-2021_18-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 9745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 6.966421s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 57.986468s because STOP_CON_REACHED.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.126789s, Solving time = 53.263313s, Total time = 57.986468s
Final Model :: Total atoms = 9745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195993s, Solving time = 0.009629s, Total time = 0.205622s
2 : Statistics :: Grounding time = 0.064536s, Solving time = 0.005460s, Total time = 0.069996s
3 : Statistics :: Grounding time = 0.065276s, Solving time = 0.008094s, Total time = 0.073370s
4 : Statistics :: Grounding time = 0.069986s, Solving time = 0.010336s, Total time = 0.080322s
5 : Statistics :: Grounding time = 0.072252s, Solving time = 0.014530s, Total time = 0.086782s
6 : Statistics :: Grounding time = 0.073385s, Solving time = 0.013917s, Total time = 0.087301s
7 : Statistics :: Grounding time = 0.077713s, Solving time = 0.015915s, Total time = 0.093628s
8 : Statistics :: Grounding time = 0.077485s, Solving time = 0.016288s, Total time = 0.093773s
9 : Statistics :: Grounding time = 0.082691s, Solving time = 0.017697s, Total time = 0.100388s
10 : Statistics :: Grounding time = 0.086738s, Solving time = 0.019063s, Total time = 0.105801s
11 : Statistics :: Grounding time = 0.079806s, Solving time = 0.021294s, Total time = 0.101100s
12 : Statistics :: Grounding time = 0.083961s, Solving time = 0.027497s, Total time = 0.111457s
13 : Statistics :: Grounding time = 0.082371s, Solving time = 0.033240s, Total time = 0.115611s
14 : Statistics :: Grounding time = 0.083226s, Solving time = 0.038787s, Total time = 0.122012s
15 : Statistics :: Grounding time = 0.085315s, Solving time = 0.052932s, Total time = 0.138247s
16 : Statistics :: Grounding time = 0.087300s, Solving time = 0.063866s, Total time = 0.151166s
17 : Statistics :: Grounding time = 0.086312s, Solving time = 0.076422s, Total time = 0.162734s
18 : Statistics :: Grounding time = 0.089050s, Solving time = 0.125316s, Total time = 0.214366s
19 : Statistics :: Grounding time = 0.090188s, Solving time = 0.194399s, Total time = 0.284587s
20 : Statistics :: Grounding time = 0.098264s, Solving time = 0.255197s, Total time = 0.353460s
21 : Statistics :: Grounding time = 0.092326s, Solving time = 0.310074s, Total time = 0.402400s
22 : Statistics :: Grounding time = 0.093609s, Solving time = 0.370195s, Total time = 0.463803s
23 : Statistics :: Grounding time = 0.099694s, Solving time = 0.226017s, Total time = 0.325711s
24 : Statistics :: Grounding time = 0.100632s, Solving time = 0.431782s, Total time = 0.532415s
25 : Statistics :: Grounding time = 0.098898s, Solving time = 0.543011s, Total time = 0.641909s
26 : Statistics :: Grounding time = 0.106095s, Solving time = 0.773409s, Total time = 0.879504s
27 : Statistics :: Grounding time = 0.105487s, Solving time = 1.197399s, Total time = 1.302886s
28 : Statistics :: Grounding time = 0.103249s, Solving time = 1.734507s, Total time = 1.837756s
29 : Statistics :: Grounding time = 0.114427s, Solving time = 2.813034s, Total time = 2.927461s
30 : Statistics :: Grounding time = 0.107164s, Solving time = 2.325586s, Total time = 2.432751s
31 : Statistics :: Grounding time = 0.120907s, Solving time = 2.335723s, Total time = 2.456631s
32 : Statistics :: Grounding time = 0.109620s, Solving time = 2.527626s, Total time = 2.637245s
33 : Statistics :: Grounding time = 0.125035s, Solving time = 3.399135s, Total time = 3.524169s
34 : Statistics :: Grounding time = 0.127049s, Solving time = 4.046933s, Total time = 4.173981s
35 : Statistics :: Grounding time = 0.115558s, Solving time = 3.953773s, Total time = 4.069331s
36 : Statistics :: Grounding time = 0.125430s, Solving time = 4.966605s, Total time = 5.092035s
37 : Statistics :: Grounding time = 0.118708s, Solving time = 6.614859s, Total time = 6.733567s
38 : Statistics :: Grounding time = 0.120277s, Solving time = 6.703389s, Total time = 6.823666s
39 : Statistics :: Grounding time = 0.392885s, Solving time = 6.966421s, Total time = 7.359306s

[05-02-2021_18-15-41] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.126789s, Solving time = 53.263313s, Total time = 57.986468s
Model :: Total atoms = 9745, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-15-41] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_2,(block,6)),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),28)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_2,(block,3)),30)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),32)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-15-41] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 58.246418s            
      ================================================      

[05-02-2021_18-15-41] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-15-41] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.045629s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.002892s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.199581s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.008194s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.064554s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.005685s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.063857s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.007835s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.069372s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.011804s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.069516s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.014810s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.072529s.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.014487s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.076661s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.015546s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.085626s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.016494s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.082890s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.016739s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.079149s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.018417s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.080824s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.021546s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.086066s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.033100s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.081506s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.034480s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.085623s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.044112s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.083538s.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.053881s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.085360s.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.074702s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.089223s.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.102749s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.095389s.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.137369s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.096571s.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.215836s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.092926s.

[05-02-2021_18-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.254299s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.092476s.

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.256196s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.103571s.

[05-02-2021_18-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.490200s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.099293s.

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.624177s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-15-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.099096s.

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.784884s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.099366s.

[05-02-2021_18-15-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.834117s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.099891s.

[05-02-2021_18-15-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.485809s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.102622s.

[05-02-2021_18-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.390253s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.109079s.

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.711338s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.114204s.

[05-02-2021_18-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.917926s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.113927s.

[05-02-2021_18-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.329025s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.109330s.

[05-02-2021_18-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.702087s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.108996s.

[05-02-2021_18-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.639548s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.112703s.

[05-02-2021_18-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.096574s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-16-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-16-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.126222s.

[05-02-2021_18-16-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 3.797776s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.119262s.

[05-02-2021_18-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.758335s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.116117s.

[05-02-2021_18-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 5.894417s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-16-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-16-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.119600s.

[05-02-2021_18-16-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 6.946639s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.122478s.

[05-02-2021_18-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 7.265788s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.390735s.

[05-02-2021_18-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 4.997548s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 56.755500s because STOP_CON_REACHED.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.145356s, Solving time = 52.027613s, Total time = 56.755500s
Final Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.199581s, Solving time = 0.008194s, Total time = 0.207775s
2 : Statistics :: Grounding time = 0.064554s, Solving time = 0.005685s, Total time = 0.070239s
3 : Statistics :: Grounding time = 0.063857s, Solving time = 0.007835s, Total time = 0.071692s
4 : Statistics :: Grounding time = 0.069372s, Solving time = 0.011804s, Total time = 0.081176s
5 : Statistics :: Grounding time = 0.069516s, Solving time = 0.014810s, Total time = 0.084326s
6 : Statistics :: Grounding time = 0.072529s, Solving time = 0.014487s, Total time = 0.087016s
7 : Statistics :: Grounding time = 0.076661s, Solving time = 0.015546s, Total time = 0.092207s
8 : Statistics :: Grounding time = 0.085626s, Solving time = 0.016494s, Total time = 0.102120s
9 : Statistics :: Grounding time = 0.082890s, Solving time = 0.016739s, Total time = 0.099629s
10 : Statistics :: Grounding time = 0.079149s, Solving time = 0.018417s, Total time = 0.097566s
11 : Statistics :: Grounding time = 0.080824s, Solving time = 0.021546s, Total time = 0.102370s
12 : Statistics :: Grounding time = 0.086066s, Solving time = 0.033100s, Total time = 0.119166s
13 : Statistics :: Grounding time = 0.081506s, Solving time = 0.034480s, Total time = 0.115986s
14 : Statistics :: Grounding time = 0.085623s, Solving time = 0.044112s, Total time = 0.129734s
15 : Statistics :: Grounding time = 0.083538s, Solving time = 0.053881s, Total time = 0.137418s
16 : Statistics :: Grounding time = 0.085360s, Solving time = 0.074702s, Total time = 0.160062s
17 : Statistics :: Grounding time = 0.089223s, Solving time = 0.102749s, Total time = 0.191971s
18 : Statistics :: Grounding time = 0.095389s, Solving time = 0.137369s, Total time = 0.232758s
19 : Statistics :: Grounding time = 0.096571s, Solving time = 0.215836s, Total time = 0.312407s
20 : Statistics :: Grounding time = 0.092926s, Solving time = 0.254299s, Total time = 0.347225s
21 : Statistics :: Grounding time = 0.092476s, Solving time = 0.256196s, Total time = 0.348672s
22 : Statistics :: Grounding time = 0.103571s, Solving time = 0.490200s, Total time = 0.593771s
23 : Statistics :: Grounding time = 0.099293s, Solving time = 0.624177s, Total time = 0.723469s
24 : Statistics :: Grounding time = 0.099096s, Solving time = 0.784884s, Total time = 0.883980s
25 : Statistics :: Grounding time = 0.099366s, Solving time = 0.834117s, Total time = 0.933483s
26 : Statistics :: Grounding time = 0.099891s, Solving time = 1.485809s, Total time = 1.585701s
27 : Statistics :: Grounding time = 0.102622s, Solving time = 1.390253s, Total time = 1.492874s
28 : Statistics :: Grounding time = 0.109079s, Solving time = 0.711338s, Total time = 0.820417s
29 : Statistics :: Grounding time = 0.114204s, Solving time = 0.917926s, Total time = 1.032130s
30 : Statistics :: Grounding time = 0.113927s, Solving time = 1.329025s, Total time = 1.442952s
31 : Statistics :: Grounding time = 0.109330s, Solving time = 1.702087s, Total time = 1.811417s
32 : Statistics :: Grounding time = 0.108996s, Solving time = 2.639548s, Total time = 2.748544s
33 : Statistics :: Grounding time = 0.112703s, Solving time = 4.096574s, Total time = 4.209277s
34 : Statistics :: Grounding time = 0.126222s, Solving time = 3.797776s, Total time = 3.923997s
35 : Statistics :: Grounding time = 0.119262s, Solving time = 4.758335s, Total time = 4.877597s
36 : Statistics :: Grounding time = 0.116117s, Solving time = 5.894417s, Total time = 6.010534s
37 : Statistics :: Grounding time = 0.119600s, Solving time = 6.946639s, Total time = 7.066239s
38 : Statistics :: Grounding time = 0.122478s, Solving time = 7.265788s, Total time = 7.388266s
39 : Statistics :: Grounding time = 0.390735s, Solving time = 4.997548s, Total time = 5.388282s

[05-02-2021_18-16-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.145356s, Solving time = 52.027613s, Total time = 56.755500s
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-16-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),27)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),28)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),29)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-16-38] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 57.069097s            
      ================================================      

[05-02-2021_18-16-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-16-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.018116s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.002551s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.193072s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.009719s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.063562s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005779s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.064906s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008039s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.073244s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010503s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.069276s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.014596s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.072190s.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.013883s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.075776s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.015443s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.077510s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.016396s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.078814s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019252s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.080904s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.019487s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.081768s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.021138s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.079908s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.027343s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.083453s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.039046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.085741s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.034924s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.085637s.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.053057s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.092311s.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.065857s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.088185s.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.082548s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.087675s.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.102845s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.090781s.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.218351s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.091122s.

[05-02-2021_18-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.217598s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.095059s.

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.304218s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.099821s.

[05-02-2021_18-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.534010s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.106264s.

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.438601s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.101308s.

[05-02-2021_18-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.307625s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.097985s.

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.405788s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.104798s.

[05-02-2021_18-16-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.679982s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.108474s.

[05-02-2021_18-16-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.222801s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.108648s.

[05-02-2021_18-16-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.452165s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.104936s.

[05-02-2021_18-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 1.852925s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.105883s.

[05-02-2021_18-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.348027s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.107258s.

[05-02-2021_18-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.435660s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.144448s.

[05-02-2021_18-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 2.985043s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.144516s.

[05-02-2021_18-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 3.146577s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-17-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.128849s.

[05-02-2021_18-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.789738s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-17-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.114414s.

[05-02-2021_18-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 5.590332s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.120742s.

[05-02-2021_18-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.276863s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.125717s.

[05-02-2021_18-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.554043s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.125265s.

[05-02-2021_18-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 6.693351s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-17-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-17-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.397989s.

[05-02-2021_18-17-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 4.605302s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 58.374693s because STOP_CON_REACHED.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.176324s, Solving time = 53.621404s, Total time = 58.374693s
Final Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193072s, Solving time = 0.009719s, Total time = 0.202791s
2 : Statistics :: Grounding time = 0.063562s, Solving time = 0.005779s, Total time = 0.069341s
3 : Statistics :: Grounding time = 0.064906s, Solving time = 0.008039s, Total time = 0.072945s
4 : Statistics :: Grounding time = 0.073244s, Solving time = 0.010503s, Total time = 0.083746s
5 : Statistics :: Grounding time = 0.069276s, Solving time = 0.014596s, Total time = 0.083871s
6 : Statistics :: Grounding time = 0.072190s, Solving time = 0.013883s, Total time = 0.086073s
7 : Statistics :: Grounding time = 0.075776s, Solving time = 0.015443s, Total time = 0.091219s
8 : Statistics :: Grounding time = 0.077510s, Solving time = 0.016396s, Total time = 0.093905s
9 : Statistics :: Grounding time = 0.078814s, Solving time = 0.019252s, Total time = 0.098066s
10 : Statistics :: Grounding time = 0.080904s, Solving time = 0.019487s, Total time = 0.100391s
11 : Statistics :: Grounding time = 0.081768s, Solving time = 0.021138s, Total time = 0.102906s
12 : Statistics :: Grounding time = 0.079908s, Solving time = 0.027343s, Total time = 0.107251s
13 : Statistics :: Grounding time = 0.083453s, Solving time = 0.039046s, Total time = 0.122500s
14 : Statistics :: Grounding time = 0.085741s, Solving time = 0.034924s, Total time = 0.120665s
15 : Statistics :: Grounding time = 0.085637s, Solving time = 0.053057s, Total time = 0.138694s
16 : Statistics :: Grounding time = 0.092311s, Solving time = 0.065857s, Total time = 0.158168s
17 : Statistics :: Grounding time = 0.088185s, Solving time = 0.082548s, Total time = 0.170733s
18 : Statistics :: Grounding time = 0.087675s, Solving time = 0.102845s, Total time = 0.190521s
19 : Statistics :: Grounding time = 0.090781s, Solving time = 0.218351s, Total time = 0.309132s
20 : Statistics :: Grounding time = 0.091122s, Solving time = 0.217598s, Total time = 0.308720s
21 : Statistics :: Grounding time = 0.095059s, Solving time = 0.304218s, Total time = 0.399277s
22 : Statistics :: Grounding time = 0.099821s, Solving time = 0.534010s, Total time = 0.633831s
23 : Statistics :: Grounding time = 0.106264s, Solving time = 0.438601s, Total time = 0.544865s
24 : Statistics :: Grounding time = 0.101308s, Solving time = 0.307625s, Total time = 0.408932s
25 : Statistics :: Grounding time = 0.097985s, Solving time = 0.405788s, Total time = 0.503773s
26 : Statistics :: Grounding time = 0.104798s, Solving time = 0.679982s, Total time = 0.784780s
27 : Statistics :: Grounding time = 0.108474s, Solving time = 1.222801s, Total time = 1.331275s
28 : Statistics :: Grounding time = 0.108648s, Solving time = 1.452165s, Total time = 1.560813s
29 : Statistics :: Grounding time = 0.104936s, Solving time = 1.852925s, Total time = 1.957861s
30 : Statistics :: Grounding time = 0.105883s, Solving time = 2.348027s, Total time = 2.453910s
31 : Statistics :: Grounding time = 0.107258s, Solving time = 2.435660s, Total time = 2.542918s
32 : Statistics :: Grounding time = 0.144448s, Solving time = 2.985043s, Total time = 3.129491s
33 : Statistics :: Grounding time = 0.144516s, Solving time = 3.146577s, Total time = 3.291093s
34 : Statistics :: Grounding time = 0.128849s, Solving time = 4.789738s, Total time = 4.918587s
35 : Statistics :: Grounding time = 0.114414s, Solving time = 5.590332s, Total time = 5.704746s
36 : Statistics :: Grounding time = 0.120742s, Solving time = 6.276863s, Total time = 6.397605s
37 : Statistics :: Grounding time = 0.125717s, Solving time = 6.554043s, Total time = 6.679760s
38 : Statistics :: Grounding time = 0.125265s, Solving time = 6.693351s, Total time = 6.818616s
39 : Statistics :: Grounding time = 0.397989s, Solving time = 4.605302s, Total time = 5.003291s

[05-02-2021_18-17-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.176324s, Solving time = 53.621404s, Total time = 58.374693s
Model :: Total atoms = 9744, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-17-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,configure(manipulator_limb_1,extended),8)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),11)
occurs(1,talos,configure(manipulator_limb_1,retracted),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),29)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),30)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_1,(block,3)),32)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),34)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_1,(block,2)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),38)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),39)

[05-02-2021_18-17-36] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 58.601745s            
      ================================================      

[05-02-2021_18-17-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-17-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.016452s.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.003662s.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.195740s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.008457s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.063892s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.006428s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.064078s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.007949s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.066310s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.010507s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.070990s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014357s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.072555s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.014024s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.074875s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.016053s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083640s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017321s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.081924s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017145s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.082242s.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.020336s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079227s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.021412s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.080334s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.026543s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.081223s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.028308s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.081732s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.032627s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084196s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.040267s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.086116s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.047887s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088301s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.047911s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.088491s.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.075933s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.098659s.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.113845s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.096894s.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.145725s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.094543s.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.203659s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.098292s.

[05-02-2021_18-17-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.347929s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.095683s.

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.495676s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.099141s.

[05-02-2021_18-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.745389s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.099613s.

[05-02-2021_18-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.492157s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-17-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-17-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.109395s.

[05-02-2021_18-17-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.598456s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.108293s.

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.694916s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.105620s.

[05-02-2021_18-17-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.746264s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.104469s.

[05-02-2021_18-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.126991s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.106308s.

[05-02-2021_18-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.137834s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.108457s.

[05-02-2021_18-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.401401s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.108344s.

[05-02-2021_18-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 1.952583s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-17-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-17-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.110168s.

[05-02-2021_18-17-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.763214s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.113973s.

[05-02-2021_18-17-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 4.082421s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.113431s.

[05-02-2021_18-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 2.835967s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.120569s.

[05-02-2021_18-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 4.110570s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.118265s.

[05-02-2021_18-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.924465s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.387772s.

[05-02-2021_18-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.630893s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.403138s.

[05-02-2021_18-18-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 5.359415s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 46.261142s because STOP_CON_REACHED.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.343345s, Solving time = 41.366896s, Total time = 46.261142s
Final Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.195740s, Solving time = 0.008457s, Total time = 0.204196s
2 : Statistics :: Grounding time = 0.063892s, Solving time = 0.006428s, Total time = 0.070320s
3 : Statistics :: Grounding time = 0.064078s, Solving time = 0.007949s, Total time = 0.072027s
4 : Statistics :: Grounding time = 0.066310s, Solving time = 0.010507s, Total time = 0.076817s
5 : Statistics :: Grounding time = 0.070990s, Solving time = 0.014357s, Total time = 0.085346s
6 : Statistics :: Grounding time = 0.072555s, Solving time = 0.014024s, Total time = 0.086579s
7 : Statistics :: Grounding time = 0.074875s, Solving time = 0.016053s, Total time = 0.090928s
8 : Statistics :: Grounding time = 0.083640s, Solving time = 0.017321s, Total time = 0.100961s
9 : Statistics :: Grounding time = 0.081924s, Solving time = 0.017145s, Total time = 0.099070s
10 : Statistics :: Grounding time = 0.082242s, Solving time = 0.020336s, Total time = 0.102578s
11 : Statistics :: Grounding time = 0.079227s, Solving time = 0.021412s, Total time = 0.100639s
12 : Statistics :: Grounding time = 0.080334s, Solving time = 0.026543s, Total time = 0.106877s
13 : Statistics :: Grounding time = 0.081223s, Solving time = 0.028308s, Total time = 0.109531s
14 : Statistics :: Grounding time = 0.081732s, Solving time = 0.032627s, Total time = 0.114359s
15 : Statistics :: Grounding time = 0.084196s, Solving time = 0.040267s, Total time = 0.124462s
16 : Statistics :: Grounding time = 0.086116s, Solving time = 0.047887s, Total time = 0.134003s
17 : Statistics :: Grounding time = 0.088301s, Solving time = 0.047911s, Total time = 0.136212s
18 : Statistics :: Grounding time = 0.088491s, Solving time = 0.075933s, Total time = 0.164424s
19 : Statistics :: Grounding time = 0.098659s, Solving time = 0.113845s, Total time = 0.212504s
20 : Statistics :: Grounding time = 0.096894s, Solving time = 0.145725s, Total time = 0.242620s
21 : Statistics :: Grounding time = 0.094543s, Solving time = 0.203659s, Total time = 0.298201s
22 : Statistics :: Grounding time = 0.098292s, Solving time = 0.347929s, Total time = 0.446221s
23 : Statistics :: Grounding time = 0.095683s, Solving time = 0.495676s, Total time = 0.591359s
24 : Statistics :: Grounding time = 0.099141s, Solving time = 0.745389s, Total time = 0.844530s
25 : Statistics :: Grounding time = 0.099613s, Solving time = 0.492157s, Total time = 0.591770s
26 : Statistics :: Grounding time = 0.109395s, Solving time = 0.598456s, Total time = 0.707852s
27 : Statistics :: Grounding time = 0.108293s, Solving time = 0.694916s, Total time = 0.803209s
28 : Statistics :: Grounding time = 0.105620s, Solving time = 0.746264s, Total time = 0.851884s
29 : Statistics :: Grounding time = 0.104469s, Solving time = 1.126991s, Total time = 1.231460s
30 : Statistics :: Grounding time = 0.106308s, Solving time = 1.137834s, Total time = 1.244142s
31 : Statistics :: Grounding time = 0.108457s, Solving time = 1.401401s, Total time = 1.509858s
32 : Statistics :: Grounding time = 0.108344s, Solving time = 1.952583s, Total time = 2.060927s
33 : Statistics :: Grounding time = 0.110168s, Solving time = 2.763214s, Total time = 2.873382s
34 : Statistics :: Grounding time = 0.113973s, Solving time = 4.082421s, Total time = 4.196394s
35 : Statistics :: Grounding time = 0.113431s, Solving time = 2.835967s, Total time = 2.949398s
36 : Statistics :: Grounding time = 0.120569s, Solving time = 4.110570s, Total time = 4.231139s
37 : Statistics :: Grounding time = 0.118265s, Solving time = 5.924465s, Total time = 6.042730s
38 : Statistics :: Grounding time = 0.387772s, Solving time = 5.630893s, Total time = 6.018665s
39 : Statistics :: Grounding time = 0.403138s, Solving time = 5.359415s, Total time = 5.762554s

[05-02-2021_18-18-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.343345s, Solving time = 41.366896s, Total time = 46.261142s
Model :: Total atoms = 9748, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-18-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_limb_1,extended),7)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),9)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),10)
occurs(1,talos,configure(manipulator_limb_1,retracted),11)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_2,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),28)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),29)
occurs(1,talos,release(manipulator_end_1,(block,3)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-18-23] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 46.486498s            
      ================================================      

[05-02-2021_18-18-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-18-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.018217s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003148s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.193453s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.009278s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.065477s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.006656s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.066624s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.007690s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.067539s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.010239s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.070046s.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014916s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-18-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.071940s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.014119s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.076104s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.017992s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.077744s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.018572s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.078444s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.018697s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.079112s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.023030s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.080712s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.022781s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.079232s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.025582s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.082811s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.036102s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.082705s.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.042133s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-18-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.084299s.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.062702s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.084689s.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.075141s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.085379s.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.104232s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.092554s.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.149632s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.096802s.

[05-02-2021_18-18-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.212539s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.091176s.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.261072s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.092093s.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.368954s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.093658s.

[05-02-2021_18-18-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.634660s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-18-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-18-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.097238s.

[05-02-2021_18-18-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.836275s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-18-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-18-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.101347s.

[05-02-2021_18-18-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.860117s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-18-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-18-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.099363s.

[05-02-2021_18-18-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.008627s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103693s.

[05-02-2021_18-18-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.790046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.103304s.

[05-02-2021_18-18-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.737350s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-18-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-18-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.102634s.

[05-02-2021_18-18-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.672944s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-18-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-18-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.115093s.

[05-02-2021_18-18-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.984347s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-18-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-18-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.105359s.

[05-02-2021_18-18-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.475747s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-18-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-18-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.109453s.

[05-02-2021_18-18-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.738476s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-18-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-18-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.113638s.

[05-02-2021_18-18-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 3.438010s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-18-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-18-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.110492s.

[05-02-2021_18-18-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 5.750115s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-18-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-18-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.111602s.

[05-02-2021_18-18-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 4.753249s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-18-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-18-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.114579s.

[05-02-2021_18-18-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 6.306893s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.117127s.

[05-02-2021_18-18-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-19-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 6.343104s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-19-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-19-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.127999s.

[05-02-2021_18-19-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 7.353692s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.124956s.

[05-02-2021_18-19-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-19-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 8.174985s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-19-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.393658s.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.339431s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 59.292859s because STOP_CON_REACHED.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.062345s, Solving time = 54.703275s, Total time = 59.292859s
Final Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.193453s, Solving time = 0.009278s, Total time = 0.202731s
2 : Statistics :: Grounding time = 0.065477s, Solving time = 0.006656s, Total time = 0.072132s
3 : Statistics :: Grounding time = 0.066624s, Solving time = 0.007690s, Total time = 0.074314s
4 : Statistics :: Grounding time = 0.067539s, Solving time = 0.010239s, Total time = 0.077778s
5 : Statistics :: Grounding time = 0.070046s, Solving time = 0.014916s, Total time = 0.084962s
6 : Statistics :: Grounding time = 0.071940s, Solving time = 0.014119s, Total time = 0.086059s
7 : Statistics :: Grounding time = 0.076104s, Solving time = 0.017992s, Total time = 0.094097s
8 : Statistics :: Grounding time = 0.077744s, Solving time = 0.018572s, Total time = 0.096317s
9 : Statistics :: Grounding time = 0.078444s, Solving time = 0.018697s, Total time = 0.097141s
10 : Statistics :: Grounding time = 0.079112s, Solving time = 0.023030s, Total time = 0.102142s
11 : Statistics :: Grounding time = 0.080712s, Solving time = 0.022781s, Total time = 0.103492s
12 : Statistics :: Grounding time = 0.079232s, Solving time = 0.025582s, Total time = 0.104815s
13 : Statistics :: Grounding time = 0.082811s, Solving time = 0.036102s, Total time = 0.118913s
14 : Statistics :: Grounding time = 0.082705s, Solving time = 0.042133s, Total time = 0.124838s
15 : Statistics :: Grounding time = 0.084299s, Solving time = 0.062702s, Total time = 0.147001s
16 : Statistics :: Grounding time = 0.084689s, Solving time = 0.075141s, Total time = 0.159830s
17 : Statistics :: Grounding time = 0.085379s, Solving time = 0.104232s, Total time = 0.189611s
18 : Statistics :: Grounding time = 0.092554s, Solving time = 0.149632s, Total time = 0.242186s
19 : Statistics :: Grounding time = 0.096802s, Solving time = 0.212539s, Total time = 0.309341s
20 : Statistics :: Grounding time = 0.091176s, Solving time = 0.261072s, Total time = 0.352247s
21 : Statistics :: Grounding time = 0.092093s, Solving time = 0.368954s, Total time = 0.461046s
22 : Statistics :: Grounding time = 0.093658s, Solving time = 0.634660s, Total time = 0.728318s
23 : Statistics :: Grounding time = 0.097238s, Solving time = 0.836275s, Total time = 0.933513s
24 : Statistics :: Grounding time = 0.101347s, Solving time = 0.860117s, Total time = 0.961464s
25 : Statistics :: Grounding time = 0.099363s, Solving time = 1.008627s, Total time = 1.107990s
26 : Statistics :: Grounding time = 0.103693s, Solving time = 0.790046s, Total time = 0.893739s
27 : Statistics :: Grounding time = 0.103304s, Solving time = 0.737350s, Total time = 0.840654s
28 : Statistics :: Grounding time = 0.102634s, Solving time = 0.672944s, Total time = 0.775578s
29 : Statistics :: Grounding time = 0.115093s, Solving time = 0.984347s, Total time = 1.099439s
30 : Statistics :: Grounding time = 0.105359s, Solving time = 1.475747s, Total time = 1.581106s
31 : Statistics :: Grounding time = 0.109453s, Solving time = 2.738476s, Total time = 2.847929s
32 : Statistics :: Grounding time = 0.113638s, Solving time = 3.438010s, Total time = 3.551648s
33 : Statistics :: Grounding time = 0.110492s, Solving time = 5.750115s, Total time = 5.860607s
34 : Statistics :: Grounding time = 0.111602s, Solving time = 4.753249s, Total time = 4.864851s
35 : Statistics :: Grounding time = 0.114579s, Solving time = 6.306893s, Total time = 6.421472s
36 : Statistics :: Grounding time = 0.117127s, Solving time = 6.343104s, Total time = 6.460231s
37 : Statistics :: Grounding time = 0.127999s, Solving time = 7.353692s, Total time = 7.481692s
38 : Statistics :: Grounding time = 0.124956s, Solving time = 8.174985s, Total time = 8.299942s
39 : Statistics :: Grounding time = 0.393658s, Solving time = 0.339431s, Total time = 0.733089s

[05-02-2021_18-19-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.062345s, Solving time = 54.703275s, Total time = 59.292859s
Model :: Total atoms = 9746, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-19-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),7)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,configure(manipulator_limb_1,extended),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),22)
occurs(1,talos,release(manipulator_end_1,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),24)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),25)
occurs(1,talos,release(manipulator_end_2,(block,5)),26)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),27)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),28)
occurs(1,talos,release(manipulator_end_1,(block,3)),29)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),30)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),31)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-19-22] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 59.495866s            
      ================================================      

[05-02-2021_18-19-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-19-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.016905s.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003775s.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-19-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.188144s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010710s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.063543s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006300s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.066743s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007637s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.083773s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010330s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.069910s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.013925s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.071244s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.014525s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.075051s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.017289s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077988s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.017294s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.078587s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.017400s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.077081s.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.019279s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-19-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082090s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.021174s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.081500s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.026511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084555s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.033002s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084383s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.037981s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.085364s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.048194s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.084873s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.070171s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095439s.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.073026s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-19-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.087658s.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.103553s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.097449s.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.143129s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095725s.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.173332s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095270s.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.234641s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-19-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.100924s.

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.310121s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.095406s.

[05-02-2021_18-19-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.531004s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.097836s.

[05-02-2021_18-19-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.978142s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.104289s.

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.712107s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-19-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.100493s.

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.644534s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.113603s.

[05-02-2021_18-19-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.799711s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-19-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-19-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.102521s.

[05-02-2021_18-19-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.249366s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-19-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-19-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.106022s.

[05-02-2021_18-19-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.290929s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-19-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-19-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.112454s.

[05-02-2021_18-19-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.395195s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-19-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-19-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.110074s.

[05-02-2021_18-19-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 1.800076s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-19-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-19-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.108782s.

[05-02-2021_18-19-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 2.303766s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.111439s.

[05-02-2021_18-19-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 2.699222s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.115331s.

[05-02-2021_18-19-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 4.007175s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.121321s.

[05-02-2021_18-19-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.692962s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.116186s.

[05-02-2021_18-19-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-19-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.924408s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-19-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-19-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-19-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.119522s.

[05-02-2021_18-19-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.086112s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.120291s.

[05-02-2021_18-20-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 6.745747s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.397062s.

[05-02-2021_18-20-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 5.507366s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 55.427917s because STOP_CON_REACHED.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.096835s, Solving time = 50.781123s, Total time = 55.427917s
Final Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.188144s, Solving time = 0.010710s, Total time = 0.198854s
2 : Statistics :: Grounding time = 0.063543s, Solving time = 0.006300s, Total time = 0.069844s
3 : Statistics :: Grounding time = 0.066743s, Solving time = 0.007637s, Total time = 0.074380s
4 : Statistics :: Grounding time = 0.083773s, Solving time = 0.010330s, Total time = 0.094102s
5 : Statistics :: Grounding time = 0.069910s, Solving time = 0.013925s, Total time = 0.083835s
6 : Statistics :: Grounding time = 0.071244s, Solving time = 0.014525s, Total time = 0.085769s
7 : Statistics :: Grounding time = 0.075051s, Solving time = 0.017289s, Total time = 0.092341s
8 : Statistics :: Grounding time = 0.077988s, Solving time = 0.017294s, Total time = 0.095283s
9 : Statistics :: Grounding time = 0.078587s, Solving time = 0.017400s, Total time = 0.095987s
10 : Statistics :: Grounding time = 0.077081s, Solving time = 0.019279s, Total time = 0.096360s
11 : Statistics :: Grounding time = 0.082090s, Solving time = 0.021174s, Total time = 0.103264s
12 : Statistics :: Grounding time = 0.081500s, Solving time = 0.026511s, Total time = 0.108011s
13 : Statistics :: Grounding time = 0.084555s, Solving time = 0.033002s, Total time = 0.117558s
14 : Statistics :: Grounding time = 0.084383s, Solving time = 0.037981s, Total time = 0.122364s
15 : Statistics :: Grounding time = 0.085364s, Solving time = 0.048194s, Total time = 0.133557s
16 : Statistics :: Grounding time = 0.084873s, Solving time = 0.070171s, Total time = 0.155044s
17 : Statistics :: Grounding time = 0.095439s, Solving time = 0.073026s, Total time = 0.168465s
18 : Statistics :: Grounding time = 0.087658s, Solving time = 0.103553s, Total time = 0.191212s
19 : Statistics :: Grounding time = 0.097449s, Solving time = 0.143129s, Total time = 0.240578s
20 : Statistics :: Grounding time = 0.095725s, Solving time = 0.173332s, Total time = 0.269057s
21 : Statistics :: Grounding time = 0.095270s, Solving time = 0.234641s, Total time = 0.329911s
22 : Statistics :: Grounding time = 0.100924s, Solving time = 0.310121s, Total time = 0.411045s
23 : Statistics :: Grounding time = 0.095406s, Solving time = 0.531004s, Total time = 0.626410s
24 : Statistics :: Grounding time = 0.097836s, Solving time = 0.978142s, Total time = 1.075978s
25 : Statistics :: Grounding time = 0.104289s, Solving time = 0.712107s, Total time = 0.816396s
26 : Statistics :: Grounding time = 0.100493s, Solving time = 0.644534s, Total time = 0.745028s
27 : Statistics :: Grounding time = 0.113603s, Solving time = 0.799711s, Total time = 0.913314s
28 : Statistics :: Grounding time = 0.102521s, Solving time = 1.249366s, Total time = 1.351887s
29 : Statistics :: Grounding time = 0.106022s, Solving time = 1.290929s, Total time = 1.396951s
30 : Statistics :: Grounding time = 0.112454s, Solving time = 1.395195s, Total time = 1.507650s
31 : Statistics :: Grounding time = 0.110074s, Solving time = 1.800076s, Total time = 1.910150s
32 : Statistics :: Grounding time = 0.108782s, Solving time = 2.303766s, Total time = 2.412548s
33 : Statistics :: Grounding time = 0.111439s, Solving time = 2.699222s, Total time = 2.810661s
34 : Statistics :: Grounding time = 0.115331s, Solving time = 4.007175s, Total time = 4.122506s
35 : Statistics :: Grounding time = 0.121321s, Solving time = 5.692962s, Total time = 5.814283s
36 : Statistics :: Grounding time = 0.116186s, Solving time = 6.924408s, Total time = 7.040594s
37 : Statistics :: Grounding time = 0.119522s, Solving time = 6.086112s, Total time = 6.205634s
38 : Statistics :: Grounding time = 0.120291s, Solving time = 6.745747s, Total time = 6.866039s
39 : Statistics :: Grounding time = 0.397062s, Solving time = 5.507366s, Total time = 5.904428s

[05-02-2021_18-20-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.096835s, Solving time = 50.781123s, Total time = 55.427917s
Model :: Total atoms = 9739, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[05-02-2021_18-20-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_limb_2,extended),7)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),8)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),9)
occurs(1,talos,configure(manipulator_limb_2,retracted),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_1,(block,6)),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),26)
occurs(1,talos,release(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),28)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),29)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),30)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-20-18] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 55.629995s            
      ================================================      

[05-02-2021_18-20-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-20-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.016569s.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.003511s.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.189020s.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008787s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.063739s.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.005785s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.063744s.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.008414s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-20-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.067670s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.009808s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.069318s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.013959s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.073092s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.014246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077066s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.015591s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079076s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016663s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.079115s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.025482s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.081077s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.020332s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.100059s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.021179s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089254s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.027868s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.087472s.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.036122s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-20-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.084355s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.049042s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089285s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.056007s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.085245s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.080882s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089851s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.084030s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.090250s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.105525s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089002s.

[05-02-2021_18-20-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.143749s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092748s.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.201902s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092723s.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.348335s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.094821s.

[05-02-2021_18-20-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.610039s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-20-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-20-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.095993s.

[05-02-2021_18-20-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.933618s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.100333s.

[05-02-2021_18-20-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.455219s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.104288s.

[05-02-2021_18-20-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.107745s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.106452s.

[05-02-2021_18-20-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.961404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-20-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-20-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.102351s.

[05-02-2021_18-20-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.839152s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-20-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-20-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.104443s.

[05-02-2021_18-20-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.333165s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-20-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.105940s.

[05-02-2021_18-20-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 1.683348s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.111440s.

[05-02-2021_18-20-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 3.025101s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.108704s.

[05-02-2021_18-20-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.522640s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.109742s.

[05-02-2021_18-20-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.290038s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-20-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.113090s.

[05-02-2021_18-20-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.948643s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.113238s.

[05-02-2021_18-20-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 2.882776s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.115111s.

[05-02-2021_18-20-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.102621s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-20-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-20-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.135428s.

[05-02-2021_18-20-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-20-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.724246s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-20-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-20-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-20-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.122599s.

[05-02-2021_18-20-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 5.873511s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.385700s.

[05-02-2021_18-21-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 8.408587s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.407497s.

[05-02-2021_18-21-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[05-02-2021_18-21-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 4.345174s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-21-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 58.331293s because STOP_CON_REACHED.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.386903s, Solving time = 53.344247s, Total time = 58.331293s
Final Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.189020s, Solving time = 0.008787s, Total time = 0.197807s
2 : Statistics :: Grounding time = 0.063739s, Solving time = 0.005785s, Total time = 0.069525s
3 : Statistics :: Grounding time = 0.063744s, Solving time = 0.008414s, Total time = 0.072158s
4 : Statistics :: Grounding time = 0.067670s, Solving time = 0.009808s, Total time = 0.077478s
5 : Statistics :: Grounding time = 0.069318s, Solving time = 0.013959s, Total time = 0.083277s
6 : Statistics :: Grounding time = 0.073092s, Solving time = 0.014246s, Total time = 0.087338s
7 : Statistics :: Grounding time = 0.077066s, Solving time = 0.015591s, Total time = 0.092656s
8 : Statistics :: Grounding time = 0.079076s, Solving time = 0.016663s, Total time = 0.095738s
9 : Statistics :: Grounding time = 0.079115s, Solving time = 0.025482s, Total time = 0.104597s
10 : Statistics :: Grounding time = 0.081077s, Solving time = 0.020332s, Total time = 0.101410s
11 : Statistics :: Grounding time = 0.100059s, Solving time = 0.021179s, Total time = 0.121238s
12 : Statistics :: Grounding time = 0.089254s, Solving time = 0.027868s, Total time = 0.117122s
13 : Statistics :: Grounding time = 0.087472s, Solving time = 0.036122s, Total time = 0.123595s
14 : Statistics :: Grounding time = 0.084355s, Solving time = 0.049042s, Total time = 0.133397s
15 : Statistics :: Grounding time = 0.089285s, Solving time = 0.056007s, Total time = 0.145292s
16 : Statistics :: Grounding time = 0.085245s, Solving time = 0.080882s, Total time = 0.166127s
17 : Statistics :: Grounding time = 0.089851s, Solving time = 0.084030s, Total time = 0.173881s
18 : Statistics :: Grounding time = 0.090250s, Solving time = 0.105525s, Total time = 0.195775s
19 : Statistics :: Grounding time = 0.089002s, Solving time = 0.143749s, Total time = 0.232751s
20 : Statistics :: Grounding time = 0.092748s, Solving time = 0.201902s, Total time = 0.294650s
21 : Statistics :: Grounding time = 0.092723s, Solving time = 0.348335s, Total time = 0.441058s
22 : Statistics :: Grounding time = 0.094821s, Solving time = 0.610039s, Total time = 0.704860s
23 : Statistics :: Grounding time = 0.095993s, Solving time = 0.933618s, Total time = 1.029612s
24 : Statistics :: Grounding time = 0.100333s, Solving time = 1.455219s, Total time = 1.555553s
25 : Statistics :: Grounding time = 0.104288s, Solving time = 1.107745s, Total time = 1.212033s
26 : Statistics :: Grounding time = 0.106452s, Solving time = 0.961404s, Total time = 1.067856s
27 : Statistics :: Grounding time = 0.102351s, Solving time = 0.839152s, Total time = 0.941503s
28 : Statistics :: Grounding time = 0.104443s, Solving time = 1.333165s, Total time = 1.437608s
29 : Statistics :: Grounding time = 0.105940s, Solving time = 1.683348s, Total time = 1.789289s
30 : Statistics :: Grounding time = 0.111440s, Solving time = 3.025101s, Total time = 3.136541s
31 : Statistics :: Grounding time = 0.108704s, Solving time = 2.522640s, Total time = 2.631344s
32 : Statistics :: Grounding time = 0.109742s, Solving time = 2.290038s, Total time = 2.399780s
33 : Statistics :: Grounding time = 0.113090s, Solving time = 2.948643s, Total time = 3.061733s
34 : Statistics :: Grounding time = 0.113238s, Solving time = 2.882776s, Total time = 2.996014s
35 : Statistics :: Grounding time = 0.115111s, Solving time = 5.102621s, Total time = 5.217732s
36 : Statistics :: Grounding time = 0.135428s, Solving time = 5.724246s, Total time = 5.859674s
37 : Statistics :: Grounding time = 0.122599s, Solving time = 5.873511s, Total time = 5.996110s
38 : Statistics :: Grounding time = 0.385700s, Solving time = 8.408587s, Total time = 8.794288s
39 : Statistics :: Grounding time = 0.407497s, Solving time = 4.345174s, Total time = 4.752671s

[05-02-2021_18-21-17] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.386903s, Solving time = 53.344247s, Total time = 58.331293s
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-17] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_1,extended),6)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),7)
occurs(1,talos,configure(manipulator_limb_2,extended),8)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),9)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),10)
occurs(1,talos,configure(manipulator_limb_2,retracted),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),24)
occurs(1,talos,release(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),27)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),28)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),29)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),30)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),31)
occurs(1,talos,release(manipulator_end_2,(block,3)),32)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-21-17] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 58.584024s            
      ================================================      

[05-02-2021_18-21-17] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 1)
	('step_inc_init', None)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_1.lp'], Anon #1), Main #1, 8, False, True))

[05-02-2021_18-21-17] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.016320s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003156s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.189079s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.008955s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.064206s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.006741s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.067651s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.007422s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.068148s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.010197s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.073734s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.014561s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.075086s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.014264s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.076131s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.016316s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.078363s.

[05-02-2021_18-21-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.016353s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.083795s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.017827s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.098620s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.021494s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.080502s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.022230s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.081340s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.024046s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.083289s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.029324s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.082549s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.038474s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.089966s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.035509s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.088704s.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.048977s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[05-02-2021_18-21-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.092812s.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.075543s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.091823s.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.113838s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [19]:
Current step bound = 19
End step min = 0
End step max = None

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0])].

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.090111s.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.161894s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [20]:
Current step bound = 20
End step min = 0
End step max = None

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0])].

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.092561s.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.190673s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [21]:
Current step bound = 21
End step min = 0
End step max = None

[05-02-2021_18-21-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0])].

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.094232s.

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.301095s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [22]:
Current step bound = 22
End step min = 0
End step max = None

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0])].

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.093430s.

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.328791s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [23]:
Current step bound = 23
End step min = 0
End step max = None

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0])].

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.095231s.

[05-02-2021_18-21-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.369604s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [24]:
Current step bound = 24
End step min = 0
End step max = None

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0])].

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.096890s.

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.495187s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [25]:
Current step bound = 25
End step min = 0
End step max = None

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0])].

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099423s.

[05-02-2021_18-21-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.451779s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [26]:
Current step bound = 26
End step min = 0
End step max = None

[05-02-2021_18-21-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0])].

[05-02-2021_18-21-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.099253s.

[05-02-2021_18-21-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.511404s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [27]:
Current step bound = 27
End step min = 0
End step max = None

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0])].

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.100846s.

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.465413s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [28]:
Current step bound = 28
End step min = 0
End step max = None

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0])].

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.108527s.

[05-02-2021_18-21-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.662084s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [29]:
Current step bound = 29
End step min = 0
End step max = None

[05-02-2021_18-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0])].

[05-02-2021_18-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.107597s.

[05-02-2021_18-21-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.745998s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [30]:
Current step bound = 30
End step min = 0
End step max = None

[05-02-2021_18-21-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0])].

[05-02-2021_18-21-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.105631s.

[05-02-2021_18-21-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.873120s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [31]:
Current step bound = 31
End step min = 0
End step max = None

[05-02-2021_18-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0])].

[05-02-2021_18-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.113354s.

[05-02-2021_18-21-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.256398s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [32]:
Current step bound = 32
End step min = 0
End step max = None

[05-02-2021_18-21-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0])].

[05-02-2021_18-21-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.118731s.

[05-02-2021_18-21-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.460903s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [33]:
Current step bound = 33
End step min = 0
End step max = None

[05-02-2021_18-21-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0])].

[05-02-2021_18-21-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.114167s.

[05-02-2021_18-21-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.085569s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [34]:
Current step bound = 34
End step min = 0
End step max = None

[05-02-2021_18-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0])].

[05-02-2021_18-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.120634s.

[05-02-2021_18-21-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.663847s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [35]:
Current step bound = 35
End step min = 0
End step max = None

[05-02-2021_18-21-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0])].

[05-02-2021_18-21-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.130901s.

[05-02-2021_18-21-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 4.154873s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [36]:
Current step bound = 36
End step min = 0
End step max = None

[05-02-2021_18-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0])].

[05-02-2021_18-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.118705s.

[05-02-2021_18-21-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 4.661561s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [37]:
Current step bound = 37
End step min = 0
End step max = None

[05-02-2021_18-21-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0])].

[05-02-2021_18-21-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.117456s.

[05-02-2021_18-21-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 4.834566s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [38]:
Current step bound = 38
End step min = 0
End step max = None

[05-02-2021_18-21-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0])].

[05-02-2021_18-21-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.116726s.

[05-02-2021_18-21-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 3.147108s:
Result = UNSAT, Stop condition = SAT

[05-02-2021_18-21-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [39]:
Current step bound = 39
End step min = 0
End step max = None

[05-02-2021_18-21-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0])].

[05-02-2021_18-21-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.391049s.

[05-02-2021_18-21-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[05-02-2021_18-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.932691s:
Result = SAT, Stop condition = SAT

[05-02-2021_18-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 38.903903s because STOP_CON_REACHED.

[05-02-2021_18-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 4.107574s, Solving time = 34.279784s, Total time = 38.903903s
Final Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.189079s, Solving time = 0.008955s, Total time = 0.198034s
2 : Statistics :: Grounding time = 0.064206s, Solving time = 0.006741s, Total time = 0.070947s
3 : Statistics :: Grounding time = 0.067651s, Solving time = 0.007422s, Total time = 0.075073s
4 : Statistics :: Grounding time = 0.068148s, Solving time = 0.010197s, Total time = 0.078345s
5 : Statistics :: Grounding time = 0.073734s, Solving time = 0.014561s, Total time = 0.088295s
6 : Statistics :: Grounding time = 0.075086s, Solving time = 0.014264s, Total time = 0.089350s
7 : Statistics :: Grounding time = 0.076131s, Solving time = 0.016316s, Total time = 0.092447s
8 : Statistics :: Grounding time = 0.078363s, Solving time = 0.016353s, Total time = 0.094716s
9 : Statistics :: Grounding time = 0.083795s, Solving time = 0.017827s, Total time = 0.101622s
10 : Statistics :: Grounding time = 0.098620s, Solving time = 0.021494s, Total time = 0.120113s
11 : Statistics :: Grounding time = 0.080502s, Solving time = 0.022230s, Total time = 0.102731s
12 : Statistics :: Grounding time = 0.081340s, Solving time = 0.024046s, Total time = 0.105386s
13 : Statistics :: Grounding time = 0.083289s, Solving time = 0.029324s, Total time = 0.112613s
14 : Statistics :: Grounding time = 0.082549s, Solving time = 0.038474s, Total time = 0.121023s
15 : Statistics :: Grounding time = 0.089966s, Solving time = 0.035509s, Total time = 0.125474s
16 : Statistics :: Grounding time = 0.088704s, Solving time = 0.048977s, Total time = 0.137682s
17 : Statistics :: Grounding time = 0.092812s, Solving time = 0.075543s, Total time = 0.168355s
18 : Statistics :: Grounding time = 0.091823s, Solving time = 0.113838s, Total time = 0.205661s
19 : Statistics :: Grounding time = 0.090111s, Solving time = 0.161894s, Total time = 0.252005s
20 : Statistics :: Grounding time = 0.092561s, Solving time = 0.190673s, Total time = 0.283233s
21 : Statistics :: Grounding time = 0.094232s, Solving time = 0.301095s, Total time = 0.395327s
22 : Statistics :: Grounding time = 0.093430s, Solving time = 0.328791s, Total time = 0.422221s
23 : Statistics :: Grounding time = 0.095231s, Solving time = 0.369604s, Total time = 0.464835s
24 : Statistics :: Grounding time = 0.096890s, Solving time = 0.495187s, Total time = 0.592077s
25 : Statistics :: Grounding time = 0.099423s, Solving time = 0.451779s, Total time = 0.551202s
26 : Statistics :: Grounding time = 0.099253s, Solving time = 0.511404s, Total time = 0.610656s
27 : Statistics :: Grounding time = 0.100846s, Solving time = 0.465413s, Total time = 0.566259s
28 : Statistics :: Grounding time = 0.108527s, Solving time = 0.662084s, Total time = 0.770611s
29 : Statistics :: Grounding time = 0.107597s, Solving time = 0.745998s, Total time = 0.853596s
30 : Statistics :: Grounding time = 0.105631s, Solving time = 0.873120s, Total time = 0.978751s
31 : Statistics :: Grounding time = 0.113354s, Solving time = 1.256398s, Total time = 1.369752s
32 : Statistics :: Grounding time = 0.118731s, Solving time = 1.460903s, Total time = 1.579634s
33 : Statistics :: Grounding time = 0.114167s, Solving time = 3.085569s, Total time = 3.199736s
34 : Statistics :: Grounding time = 0.120634s, Solving time = 2.663847s, Total time = 2.784480s
35 : Statistics :: Grounding time = 0.130901s, Solving time = 4.154873s, Total time = 4.285775s
36 : Statistics :: Grounding time = 0.118705s, Solving time = 4.661561s, Total time = 4.780266s
37 : Statistics :: Grounding time = 0.117456s, Solving time = 4.834566s, Total time = 4.952023s
38 : Statistics :: Grounding time = 0.116726s, Solving time = 3.147108s, Total time = 3.263834s
39 : Statistics :: Grounding time = 0.391049s, Solving time = 2.932691s, Total time = 3.323740s

[05-02-2021_18-21-56] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 4.107574s, Solving time = 34.279784s, Total time = 38.903903s
Model :: Total atoms = 9750, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[05-02-2021_18-21-56] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,move((store_room,1)),4)
occurs(1,talos,move((store_room,0)),5)
occurs(1,talos,configure(manipulator_limb_2,extended),6)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),7)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,configure(manipulator_limb_1,extended),10)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),11)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),12)
occurs(1,talos,configure(manipulator_limb_1,retracted),13)
occurs(1,talos,move((store_room,1)),14)
occurs(1,talos,move((hallway,0)),15)
occurs(1,talos,move((hallway,1)),16)
occurs(1,talos,move((hallway,2)),17)
occurs(1,talos,move((puzzle_room,0)),18)
occurs(1,talos,move((puzzle_room,1)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),21)
occurs(1,talos,release(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),24)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),25)
occurs(1,talos,release(manipulator_end_2,(block,3)),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),27)
occurs(1,talos,configure(manipulator_limb_1,extended),28)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),29)
occurs(1,talos,release(manipulator_end_1,(block,5)),30)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),31)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),32)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),33)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),34)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),35)
occurs(1,talos,release(manipulator_end_2,(block,2)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),37)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),38)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),39)

[05-02-2021_18-21-56] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 39.096188s            
      ================================================      

[05-02-2021_18-21-56] INFO :: Experiment >> 

  ################################################################################################  
     All 20 experimental runs complete : Real time 1046.537854s, Proccessing time 7136.187500s      
  ################################################################################################  

[05-02-2021_18-21-56] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL        GT         ST         TT   S   A
  0   1   1  4.089784  41.303573  45.929281  39  39
  1   1   1  4.135195  31.771427  36.453779  39  39
  2   1   1  4.171749  51.420950  56.191625  39  39
  3   1   1  4.233802  58.883380  63.699114  39  39
  4   1   1  4.189542  50.166666  54.964638  39  39
  5   1   1  4.254201  44.893854  49.695838  39  39
  6   1   1  4.214339  52.408876  57.201205  39  39
  7   1   1  4.060202  40.483375  45.073438  39  39
  8   1   1  4.126608  47.598543  52.260539  39  39
  9   1   1  4.417093  51.019546  56.018335  39  39
 10   1   1  4.186807  42.884604  47.598377  39  39
 11   1   1  4.167600  40.430998  45.116374  39  39
 12   1   1  4.126789  53.263313  57.986468  39  39
 13   1   1  4.145356  52.027613  56.755500  39  39
 14   1   1  4.176324  53.621404  58.374693  39  39
 15   1   1  4.343345  41.366896  46.261142  39  39
 16   1   1  4.062345  54.703275  59.292859  39  39
 17   1   1  4.096835  50.781123  55.427917  39  39
 18   1   1  4.386903  53.344247  58.331293  39  39
 19   1   1  4.107574  34.279784  38.903903  39  39

[05-02-2021_18-21-56] INFO :: __main__ >> Exiting with code 0

