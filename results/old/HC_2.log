[06-02-2021_15-07-31] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
         This program comes with ABSOLUTELY NO WARRANTY; for details type `--warranty'. This is free software,          
           and you are welcome to redistribute it under certain conditions; type `--conditions' for details.            
                                     For help and usage instructions type `--help'.                                     
                                                                                                                        
  ####################################################################################################################  

[06-02-2021_15-07-31] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[06-02-2021_15-07-31] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Abstraction Planner for Robots                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[06-02-2021_15-07-31] DEBUG :: __main__ >> Parsing command line arguments: ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp', '-sc', '-pm=hierarchical', '-xf', '-df', '-ir', '2', '-er', '20', '-op=False'].

[06-02-2021_15-07-31] DEBUG :: __main__ >> Parsing complete:
('domain_files', ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'])
('log_file', None)
('excel_file', './results/ASH_Excel_06-02-2021_15-07-31.xlsx')
('data_file', './results/ASH_Data_06-02-2021_15-07-31.dat')
('data_sep', ' ')
('data_end', '\n')
('silence_ash', False)
('silence_clingo', True)
('logging', 'INFO')
('threads', 8)
('time_limit', [3600])
('planning_mode', 'hierarchical')
('enforce_conformance', True)
('optimise_plan', False)
('step_max', [0])
('step_inc', [1])
('step_inc_init', [2])
('partial_planning_length', [])
('experimental_runs', 20)
('initial_runs', 2)
('warranty', False)
('conditions', False)

[06-02-2021_15-07-31] DEBUG :: planner.ASH >> Instantiating new planning domain: Name = None, Domain files = ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'].

[06-02-2021_15-07-31] DEBUG :: planner.ASH >> The domain files ['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'entities': True, 'static_state': True, 'initial_state': True, 'goal_state': True}.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Instantiated.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Entering standard solve call:
Solver options = --outf=3, --warn=none, -t, 1, -c, plan_at=0
Program parts = #program instance_module()., #program domain_sorts().

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Program building started.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Program building completed.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Grounding started.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Grounding completed in 0.006055s.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Solving started.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Model found:
Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Solving completed in 0.000208s.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Anon #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.006055s, Solving time = 0.000208s, Total time = 0.006263s
Final Model :: Total atoms = 69, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-31] DEBUG :: planner.ASH >> Planning Domain Anon #1 : Abstraction range = [1-3] instantiated successfully

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program ASH #1 >> Instantiated.

[06-02-2021_15-07-31] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program instance_module.
al((1..abstraction_max)).
#const plan_at = 1.
pl(AL) :- AL=plan_at; al(AL).
sl(AL) :- AL>=plan_at; AL<=(plan_at+1); al(AL).
sl(AL) :- plan_at<1; al(AL).
(boolean(true);boolean(false)).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1>=AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1!=DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step).
#show is/2.
#show holds/4.
{ holds(AL,F,V,step) :  } :- fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step=0.
#false :- not 1 = { holds(AL,F,V,step) : fluent(AL,_,F,V) }; fluent(AL,_,F,_); AL>=plan_at; sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); AL>=plan_at; sl(AL); step>0.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; sl(AL).
#program plan_module(step,start).
#show occurs/4.
#show sub_goal/6.
{ occurs(AL,ROBOT,A,step) : action(AL,ROBOT,A) } :- incomplete_plan((step-1)); AL=plan_at; step>start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1!=A_2; action(AL,ROBOT,A_1); action(AL,ROBOT,A_2); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; step>start.
:~ occurs(AL,step); incomplete_plan((step-1)); AL=plan_at; step>start. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); incomplete_plan((step-1)); AL=plan_at; step>start. [1@2,ROBOT,A,step]
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,ROBOT,A); AL=plan_at; step>start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); AL=plan_at; step>start.
goal_satisfied(AL,F,V,true,step) :- goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
goal_satisfied(AL,F,V,false,step) :- goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); AL=plan_at.
incomplete_plan(step) :- goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); AL=plan_at; boolean(B).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,ROBOT,A); fluent(AL,inertial,F,V); AL=plan_at; AL!=1; step>start.
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#program conformance_module(step).
#show current_sub_goal/7.
current_sub_goal((AL+1),ROBOT,A,F,V,1,0) :- sub_goal((AL+1),ROBOT,A,F,V,1); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_sub_goals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); incomplete_sub_goals((AL+1),I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); AL=plan_at.
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),ROBOT,A); fluent((AL+1),inertial,F,V); AL=plan_at.
#program goal_abstraction_module.
#show holds/4.
#show goal/4.
holds(AL,F,V,0) :- goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) :  } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); AL>=plan_at; al(AL).
#false :- not 1 = { holds(AL,F,V,0) : fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); AL>=plan_at; al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); AL>=plan_at; al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL<reduc; al(AL).
state(AL,extensible,retracted) :- AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL<reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL<reduc; al(AL).
state(AL,door,open) :- AL<reduc; al(AL).
state(AL,door,closed) :- AL<reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ!=nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ!=SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1<redef; AL_2<redef; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1<reduc; AL_2<reduc; sl(AL_1); sl(AL_2); AL_2>=AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; sl(AL).
action(AL,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; sl(AL).
action(AL,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; sl(AL).
#program domain_rules(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL<reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL<reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ!=SURFACE; SURFACE!=nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1!=STATE_2; AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,in(ROBO),L_1,(t-1)); not is(AL,connected(L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L_2),t) :- holds(AL,configuration(D),closed,(t-1)); holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1!=L_2; action(AL,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,actuate(DESC,D),t) :- not 1 = { holds(AL,grasping(DESC),H,(t-1)) : desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,ROBO,actuate(DESC,D)), fluent(AL,inertial,grasping(DESC),H) }; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); is(AL,in(OBJ,L)); action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL<reduc; pl(AL).
not occurs(AL,ROBO,move(L),t) :- holds(AL,configuration(DESC),extended,(t-1)); action(AL,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; OBJ_1!=nothing; action(AL,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,grasp(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL<reduc; pl(AL).
not occurs(AL,ROBO,grasp(END,OBJ),t) :- not holds(AL,configuration(END),aligned_with(OBJ),(t-1)); OBJ!=nothing; action(AL,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,release(DESC,OBJ),t) :- holds(AL,configuration(DESC),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t>0.
not occurs(AL,ROBO,release(DESC_1,OBJ),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); OBJ!=nothing; action(AL,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
not occurs(AL,ROBO,configure(DESC_1,STATE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL<reduc; pl(AL).
not occurs(AL,ROBO,configure(DESC,aligned_with(OBJ)),t) :- not holds(AL,grasping(DESC),nothing,(t-1)); action(AL,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,DESC,aligned_with(OBJ)); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ_1,BLOCK),t) :- holds(AL,on(OBJ_2),BLOCK,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; OBJ!=nothing; SURFACE!=nothing; action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
not occurs(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),t) :- holds(AL,grasping(DESC_2),OBJ_2,(t-1)); OBJ_1!=OBJ_2; DESC_1!=DESC_2; action(AL,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
not occurs(AL,ROBO,put(DESC,OBJ,SURFACE),t) :- holds(AL,configuration(DESC),retracted,(t-1)); action(AL,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,put(DESC_1,OBJ,SURFACE),t) :- holds(AL,configuration(DESC_2),retracted,(t-1)); action(AL,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL<reduc; pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ_1),t) :- holds(AL,on(OBJ_2),OBJ_1,(t-1)); OBJ_1!=OBJ_2; action(AL,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
not occurs(AL,ROBO,lift(DESC,OBJ),t) :- not holds(AL,grasping(DESC),OBJ,(t-1)); OBJ!=SURFACE; action(AL,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,surface,SURFACE); pl(AL).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t) : not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)) : insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ!=nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1!=nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1!=BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1=(block,N_1); number(N_1); BLOCK_2=(block,N_2); number(N_2); BLOCK_1!=BLOCK_2; N_1>N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK : holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK : is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1!=L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1!=L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1>=AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1>=AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_2; sl(AL_4); AL_4>=AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ!=nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_3; sl(AL_5); AL_5>=AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_2; sl(AL_5); AL_5>=AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1; sl(AL_4); AL_4>=AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1>=AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1>=AL_2; sl(AL_3); AL_3>=AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N<=3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N>3; N<=6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2=(X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); sl(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
goal(1,on((block,3)),puzzle_room_table_left,true).
goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X<MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[06-02-2021_15-07-31] INFO :: ASH Planner Main #1 >> Generating initial state.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Instantiated.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('initial_state', []), ('instance_module', []), ('state_module', [0]), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building started.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Program building completed.

[06-02-2021_15-07-31] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Grounding completed in 0.092905s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Model found:
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Solving completed in 0.013892s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate initial state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.092905s, Solving time = 0.013892s, Total time = 0.106798s
Final Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> Initial state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.092905s, Solving time = 0.013892s, Total time = 0.106798s
Model :: Total atoms = 2730, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3,complete(blue),false,0)
holds(3,complete(red),false,0)
holds(3,grasping(manipulator_arm_1),nothing,0)
holds(3,grasping(manipulator_arm_2),nothing,0)
holds(3,in(manipulator_arm_1),starting_room,0)
holds(3,in(manipulator_arm_2),starting_room,0)
holds(3,in(puzzle_room_table),puzzle_room,0)
holds(3,in(talos),starting_room,0)
holds(3,in((block,1)),puzzle_room,0)
holds(3,in((block,2)),puzzle_room,0)
holds(3,in((block,3)),puzzle_room,0)
holds(3,in((block,4)),puzzle_room,0)
holds(3,in((block,5)),store_room,0)
holds(3,in((block,6)),store_room,0)
holds(3,on((block,1)),puzzle_room_table,0)
holds(3,on((block,2)),puzzle_room_table,0)
holds(3,on((block,3)),(block,1),0)
holds(3,on((block,4)),(block,2),0)
holds(3,on((block,5)),nothing,0)
holds(3,on((block,6)),nothing,0)
holds(3,tower_base((block,1)),true,0)
holds(3,tower_base((block,2)),true,0)
holds(3,tower_base((block,3)),false,0)
holds(3,tower_base((block,4)),false,0)
holds(3,tower_base((block,5)),false,0)
holds(3,tower_base((block,6)),false,0)
holds(3,unordered_tower((block,1)),true,0)
holds(3,unordered_tower((block,2)),true,0)
holds(3,unordered_tower((block,3)),false,0)
holds(3,unordered_tower((block,4)),false,0)
holds(3,unordered_tower((block,5)),false,0)
holds(3,unordered_tower((block,6)),false,0)
holds(3,in_tower((block,1),(block,1)),true,0)
holds(3,in_tower((block,1),(block,2)),false,0)
holds(3,in_tower((block,1),(block,3)),true,0)
holds(3,in_tower((block,1),(block,4)),false,0)
holds(3,in_tower((block,1),(block,5)),false,0)
holds(3,in_tower((block,1),(block,6)),false,0)
holds(3,in_tower((block,2),(block,1)),false,0)
holds(3,in_tower((block,2),(block,2)),true,0)
holds(3,in_tower((block,2),(block,3)),false,0)
holds(3,in_tower((block,2),(block,4)),true,0)
holds(3,in_tower((block,2),(block,5)),false,0)
holds(3,in_tower((block,2),(block,6)),false,0)
holds(3,in_tower((block,3),(block,1)),false,0)
holds(3,in_tower((block,3),(block,2)),false,0)
holds(3,in_tower((block,3),(block,3)),false,0)
holds(3,in_tower((block,3),(block,4)),false,0)
holds(3,in_tower((block,3),(block,5)),false,0)
holds(3,in_tower((block,3),(block,6)),false,0)
holds(3,in_tower((block,4),(block,1)),false,0)
holds(3,in_tower((block,4),(block,2)),false,0)
holds(3,in_tower((block,4),(block,3)),false,0)
holds(3,in_tower((block,4),(block,4)),false,0)
holds(3,in_tower((block,4),(block,5)),false,0)
holds(3,in_tower((block,4),(block,6)),false,0)
holds(3,in_tower((block,5),(block,1)),false,0)
holds(3,in_tower((block,5),(block,2)),false,0)
holds(3,in_tower((block,5),(block,3)),false,0)
holds(3,in_tower((block,5),(block,4)),false,0)
holds(3,in_tower((block,5),(block,5)),false,0)
holds(3,in_tower((block,5),(block,6)),false,0)
holds(3,in_tower((block,6),(block,1)),false,0)
holds(3,in_tower((block,6),(block,2)),false,0)
holds(3,in_tower((block,6),(block,3)),false,0)
holds(3,in_tower((block,6),(block,4)),false,0)
holds(3,in_tower((block,6),(block,5)),false,0)
holds(3,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2,complete(blue),false,0)
holds(2,complete(red),false,0)
holds(2,configuration(manipulator_arm_1),retracted,0)
holds(2,configuration(manipulator_arm_2),retracted,0)
holds(2,configuration(puzzle_room_door),closed,0)
holds(2,configuration(starting_room_door),closed,0)
holds(2,configuration(store_room_door),closed,0)
holds(2,grasping(manipulator_arm_1),nothing,0)
holds(2,grasping(manipulator_arm_2),nothing,0)
holds(2,in(manipulator_arm_1),starting_room,0)
holds(2,in(manipulator_arm_2),starting_room,0)
holds(2,in(puzzle_room_table),puzzle_room,0)
holds(2,in(talos),starting_room,0)
holds(2,in((block,1)),puzzle_room,0)
holds(2,in((block,2)),puzzle_room,0)
holds(2,in((block,3)),puzzle_room,0)
holds(2,in((block,4)),puzzle_room,0)
holds(2,in((block,5)),store_room,0)
holds(2,in((block,6)),store_room,0)
holds(2,on((block,1)),puzzle_room_table,0)
holds(2,on((block,2)),puzzle_room_table,0)
holds(2,on((block,3)),(block,1),0)
holds(2,on((block,4)),(block,2),0)
holds(2,on((block,5)),nothing,0)
holds(2,on((block,6)),nothing,0)
holds(2,tower_base((block,1)),true,0)
holds(2,tower_base((block,2)),true,0)
holds(2,tower_base((block,3)),false,0)
holds(2,tower_base((block,4)),false,0)
holds(2,tower_base((block,5)),false,0)
holds(2,tower_base((block,6)),false,0)
holds(2,unordered_tower((block,1)),true,0)
holds(2,unordered_tower((block,2)),true,0)
holds(2,unordered_tower((block,3)),false,0)
holds(2,unordered_tower((block,4)),false,0)
holds(2,unordered_tower((block,5)),false,0)
holds(2,unordered_tower((block,6)),false,0)
holds(2,in_tower((block,1),(block,1)),true,0)
holds(2,in_tower((block,1),(block,2)),false,0)
holds(2,in_tower((block,1),(block,3)),true,0)
holds(2,in_tower((block,1),(block,4)),false,0)
holds(2,in_tower((block,1),(block,5)),false,0)
holds(2,in_tower((block,1),(block,6)),false,0)
holds(2,in_tower((block,2),(block,1)),false,0)
holds(2,in_tower((block,2),(block,2)),true,0)
holds(2,in_tower((block,2),(block,3)),false,0)
holds(2,in_tower((block,2),(block,4)),true,0)
holds(2,in_tower((block,2),(block,5)),false,0)
holds(2,in_tower((block,2),(block,6)),false,0)
holds(2,in_tower((block,3),(block,1)),false,0)
holds(2,in_tower((block,3),(block,2)),false,0)
holds(2,in_tower((block,3),(block,3)),false,0)
holds(2,in_tower((block,3),(block,4)),false,0)
holds(2,in_tower((block,3),(block,5)),false,0)
holds(2,in_tower((block,3),(block,6)),false,0)
holds(2,in_tower((block,4),(block,1)),false,0)
holds(2,in_tower((block,4),(block,2)),false,0)
holds(2,in_tower((block,4),(block,3)),false,0)
holds(2,in_tower((block,4),(block,4)),false,0)
holds(2,in_tower((block,4),(block,5)),false,0)
holds(2,in_tower((block,4),(block,6)),false,0)
holds(2,in_tower((block,5),(block,1)),false,0)
holds(2,in_tower((block,5),(block,2)),false,0)
holds(2,in_tower((block,5),(block,3)),false,0)
holds(2,in_tower((block,5),(block,4)),false,0)
holds(2,in_tower((block,5),(block,5)),false,0)
holds(2,in_tower((block,5),(block,6)),false,0)
holds(2,in_tower((block,6),(block,1)),false,0)
holds(2,in_tower((block,6),(block,2)),false,0)
holds(2,in_tower((block,6),(block,3)),false,0)
holds(2,in_tower((block,6),(block,4)),false,0)
holds(2,in_tower((block,6),(block,5)),false,0)
holds(2,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1,complete(blue),false,0)
holds(1,complete(red),false,0)
holds(1,configuration(manipulator_end_1),aligned_with(nothing),0)
holds(1,configuration(manipulator_end_2),aligned_with(nothing),0)
holds(1,configuration(manipulator_limb_1),retracted,0)
holds(1,configuration(manipulator_limb_2),retracted,0)
holds(1,configuration(puzzle_room_door),closed,0)
holds(1,configuration(starting_room_door),closed,0)
holds(1,configuration(store_room_door),closed,0)
holds(1,grasping(manipulator_arm_1),nothing,0)
holds(1,grasping(manipulator_arm_2),nothing,0)
holds(1,grasping(manipulator_end_1),nothing,0)
holds(1,grasping(manipulator_end_2),nothing,0)
holds(1,in(manipulator_arm_1),(starting_room,0),0)
holds(1,in(manipulator_arm_2),(starting_room,0),0)
holds(1,in(manipulator_end_1),(starting_room,0),0)
holds(1,in(manipulator_end_2),(starting_room,0),0)
holds(1,in(manipulator_limb_1),(starting_room,0),0)
holds(1,in(manipulator_limb_2),(starting_room,0),0)
holds(1,in(puzzle_room_table),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_left),(puzzle_room,1),0)
holds(1,in(puzzle_room_table_right),(puzzle_room,1),0)
holds(1,in(talos),(starting_room,0),0)
holds(1,in((block,1)),(puzzle_room,1),0)
holds(1,in((block,2)),(puzzle_room,1),0)
holds(1,in((block,3)),(puzzle_room,1),0)
holds(1,in((block,4)),(puzzle_room,1),0)
holds(1,in((block,5)),(store_room,0),0)
holds(1,in((block,6)),(store_room,0),0)
holds(1,on((block,1)),puzzle_room_table_left,0)
holds(1,on((block,2)),puzzle_room_table_right,0)
holds(1,on((block,3)),(block,1),0)
holds(1,on((block,4)),(block,2),0)
holds(1,on((block,5)),nothing,0)
holds(1,on((block,6)),nothing,0)
holds(1,tower_base((block,1)),true,0)
holds(1,tower_base((block,2)),true,0)
holds(1,tower_base((block,3)),false,0)
holds(1,tower_base((block,4)),false,0)
holds(1,tower_base((block,5)),false,0)
holds(1,tower_base((block,6)),false,0)
holds(1,unordered_tower((block,1)),true,0)
holds(1,unordered_tower((block,2)),true,0)
holds(1,unordered_tower((block,3)),false,0)
holds(1,unordered_tower((block,4)),false,0)
holds(1,unordered_tower((block,5)),false,0)
holds(1,unordered_tower((block,6)),false,0)
holds(1,in_tower((block,1),(block,1)),true,0)
holds(1,in_tower((block,1),(block,2)),false,0)
holds(1,in_tower((block,1),(block,3)),true,0)
holds(1,in_tower((block,1),(block,4)),false,0)
holds(1,in_tower((block,1),(block,5)),false,0)
holds(1,in_tower((block,1),(block,6)),false,0)
holds(1,in_tower((block,2),(block,1)),false,0)
holds(1,in_tower((block,2),(block,2)),true,0)
holds(1,in_tower((block,2),(block,3)),false,0)
holds(1,in_tower((block,2),(block,4)),true,0)
holds(1,in_tower((block,2),(block,5)),false,0)
holds(1,in_tower((block,2),(block,6)),false,0)
holds(1,in_tower((block,3),(block,1)),false,0)
holds(1,in_tower((block,3),(block,2)),false,0)
holds(1,in_tower((block,3),(block,3)),false,0)
holds(1,in_tower((block,3),(block,4)),false,0)
holds(1,in_tower((block,3),(block,5)),false,0)
holds(1,in_tower((block,3),(block,6)),false,0)
holds(1,in_tower((block,4),(block,1)),false,0)
holds(1,in_tower((block,4),(block,2)),false,0)
holds(1,in_tower((block,4),(block,3)),false,0)
holds(1,in_tower((block,4),(block,4)),false,0)
holds(1,in_tower((block,4),(block,5)),false,0)
holds(1,in_tower((block,4),(block,6)),false,0)
holds(1,in_tower((block,5),(block,1)),false,0)
holds(1,in_tower((block,5),(block,2)),false,0)
holds(1,in_tower((block,5),(block,3)),false,0)
holds(1,in_tower((block,5),(block,4)),false,0)
holds(1,in_tower((block,5),(block,5)),false,0)
holds(1,in_tower((block,5),(block,6)),false,0)
holds(1,in_tower((block,6),(block,1)),false,0)
holds(1,in_tower((block,6),(block,2)),false,0)
holds(1,in_tower((block,6),(block,3)),false,0)
holds(1,in_tower((block,6),(block,4)),false,0)
holds(1,in_tower((block,6),(block,5)),false,0)
holds(1,in_tower((block,6),(block,6)),false,0)

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> Generating goal state.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Instantiated.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Entering standard solve call:
Solver options = -c, plan_at=0, --models=2, --parallel-mode=8,compete, --outf=3, --warn=none
Program parts = ('entities', []), ('static_state', []), ('goal_state', []), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('domain_rules', [0])

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Program building completed.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Grounding completed in 0.035914s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Model found:
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Solving completed in 0.004604s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate goal state #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED : Total models = 1
Statistics :: Grounding time = 0.035914s, Solving time = 0.004604s, Total time = 0.040518s
Final Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> Goal state generated successfully:
Result :: SATISFIABLE : SEARCH SPACE EXHAUSTED
Statistics :: Grounding time = 0.035914s, Solving time = 0.004604s, Total time = 0.040518s
Model :: Total atoms = 2598, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 3              
          ========================================          

goal(3,complete(blue),false,false)
goal(3,complete(blue),true,true)
goal(3,complete(red),false,false)
goal(3,complete(red),true,true)
goal(3,on((block,3)),nothing,false)
goal(3,on((block,3)),puzzle_room_table,true)
goal(3,on((block,3)),(block,1),false)
goal(3,on((block,3)),(block,2),false)
goal(3,on((block,3)),(block,4),false)
goal(3,on((block,3)),(block,5),false)
goal(3,on((block,3)),(block,6),false)
goal(3,on((block,6)),nothing,false)
goal(3,on((block,6)),puzzle_room_table,true)
goal(3,on((block,6)),(block,1),false)
goal(3,on((block,6)),(block,2),false)
goal(3,on((block,6)),(block,3),false)
goal(3,on((block,6)),(block,4),false)
goal(3,on((block,6)),(block,5),false)

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 2              
          ========================================          

goal(2,complete(blue),false,false)
goal(2,complete(blue),true,true)
goal(2,complete(red),false,false)
goal(2,complete(red),true,true)
goal(2,on((block,3)),nothing,false)
goal(2,on((block,3)),puzzle_room_table,true)
goal(2,on((block,3)),(block,1),false)
goal(2,on((block,3)),(block,2),false)
goal(2,on((block,3)),(block,4),false)
goal(2,on((block,3)),(block,5),false)
goal(2,on((block,3)),(block,6),false)
goal(2,on((block,6)),nothing,false)
goal(2,on((block,6)),puzzle_room_table,true)
goal(2,on((block,6)),(block,1),false)
goal(2,on((block,6)),(block,2),false)
goal(2,on((block,6)),(block,3),false)
goal(2,on((block,6)),(block,4),false)
goal(2,on((block,6)),(block,5),false)

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Goal state at abstraction level 1              
          ========================================          

goal(1,complete(blue),false,false)
goal(1,complete(blue),true,true)
goal(1,complete(red),false,false)
goal(1,complete(red),true,true)
goal(1,on((block,3)),nothing,false)
goal(1,on((block,3)),puzzle_room_table_left,true)
goal(1,on((block,3)),puzzle_room_table_right,false)
goal(1,on((block,3)),(block,1),false)
goal(1,on((block,3)),(block,2),false)
goal(1,on((block,3)),(block,4),false)
goal(1,on((block,3)),(block,5),false)
goal(1,on((block,3)),(block,6),false)
goal(1,on((block,6)),nothing,false)
goal(1,on((block,6)),puzzle_room_table_left,false)
goal(1,on((block,6)),puzzle_room_table_right,true)
goal(1,on((block,6)),(block,1),false)
goal(1,on((block,6)),(block,2),false)
goal(1,on((block,6)),(block,3),false)
goal(1,on((block,6)),(block,4),false)
goal(1,on((block,6)),(block,5),false)

[06-02-2021_15-07-32] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 2 : Experimental runs = 20                   
  ################################################################################################  

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-07-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-07-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-07-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Instantiated.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Program building completed.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding base program parts.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.012372s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving base program parts.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.002628s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.039588s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005626s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.030898s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.003664s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.031094s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.004614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.034135s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.034237s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.005772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.037131s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.006433s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.038349s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.007078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.042190s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.009427s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.052334s.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.010087s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-07-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.043362s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.011286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044609s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.016581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.049204s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.023796s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.044200s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.025871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.041997s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.038878s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.043394s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.074749s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089777s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.120300s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.084990s.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.197867s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-07-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Grounding completed in 0.089467s.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving started.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Solving completed in 0.039848s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental solving completed in 1.556819s because STOP_CON_REACHED.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.883330s, Solving time = 0.609933s, Total time = 1.556819s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #1 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039588s, Solving time = 0.005626s, Total time = 0.045214s
2 : Statistics :: Grounding time = 0.030898s, Solving time = 0.003664s, Total time = 0.034562s
3 : Statistics :: Grounding time = 0.031094s, Solving time = 0.004614s, Total time = 0.035709s
4 : Statistics :: Grounding time = 0.034135s, Solving time = 0.005428s, Total time = 0.039563s
5 : Statistics :: Grounding time = 0.034237s, Solving time = 0.005772s, Total time = 0.040008s
6 : Statistics :: Grounding time = 0.037131s, Solving time = 0.006433s, Total time = 0.043564s
7 : Statistics :: Grounding time = 0.038349s, Solving time = 0.007078s, Total time = 0.045427s
8 : Statistics :: Grounding time = 0.042190s, Solving time = 0.009427s, Total time = 0.051617s
9 : Statistics :: Grounding time = 0.052334s, Solving time = 0.010087s, Total time = 0.062422s
10 : Statistics :: Grounding time = 0.043362s, Solving time = 0.011286s, Total time = 0.054648s
11 : Statistics :: Grounding time = 0.044609s, Solving time = 0.016581s, Total time = 0.061190s
12 : Statistics :: Grounding time = 0.049204s, Solving time = 0.023796s, Total time = 0.073000s
13 : Statistics :: Grounding time = 0.044200s, Solving time = 0.025871s, Total time = 0.070072s
14 : Statistics :: Grounding time = 0.041997s, Solving time = 0.038878s, Total time = 0.080875s
15 : Statistics :: Grounding time = 0.043394s, Solving time = 0.074749s, Total time = 0.118142s
16 : Statistics :: Grounding time = 0.089777s, Solving time = 0.120300s, Total time = 0.210077s
17 : Statistics :: Grounding time = 0.084990s, Solving time = 0.197867s, Total time = 0.282857s
18 : Statistics :: Grounding time = 0.089467s, Solving time = 0.039848s, Total time = 0.129315s

[06-02-2021_15-07-34] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.883330s, Solving time = 0.609933s, Total time = 1.556819s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-07-34] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-07-34] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-07-34] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Instantiated.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building started.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Program building completed.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding base program parts.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.014047s.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving base program parts.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.003090s.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving started.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.648700s.

[06-02-2021_15-07-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.228002s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.069684s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.017302s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.068261s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.016412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.091259s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.022425s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.074172s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.023174s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.072383s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.036121s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.073952s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.021604s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.074185s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.042004s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.076568s.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.050729s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-07-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.075752s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.042300s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.078754s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.065863s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.079986s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.072593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081801s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.112616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.081548s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.136988s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.083465s.

[06-02-2021_15-07-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.133267s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.093325s.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.188732s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086278s.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.244124s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Grounding completed in 0.086006s.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving started.

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Solving completed in 0.198294s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-07-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental solving completed in 3.803324s because STOP_CON_REACHED.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.010127s, Solving time = 1.655642s, Total time = 3.803324s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #2 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.648700s, Solving time = 0.228002s, Total time = 0.876702s
2 : Statistics :: Grounding time = 0.069684s, Solving time = 0.017302s, Total time = 0.086986s
3 : Statistics :: Grounding time = 0.068261s, Solving time = 0.016412s, Total time = 0.084673s
4 : Statistics :: Grounding time = 0.091259s, Solving time = 0.022425s, Total time = 0.113684s
5 : Statistics :: Grounding time = 0.074172s, Solving time = 0.023174s, Total time = 0.097346s
6 : Statistics :: Grounding time = 0.072383s, Solving time = 0.036121s, Total time = 0.108504s
7 : Statistics :: Grounding time = 0.073952s, Solving time = 0.021604s, Total time = 0.095556s
8 : Statistics :: Grounding time = 0.074185s, Solving time = 0.042004s, Total time = 0.116190s
9 : Statistics :: Grounding time = 0.076568s, Solving time = 0.050729s, Total time = 0.127298s
10 : Statistics :: Grounding time = 0.075752s, Solving time = 0.042300s, Total time = 0.118052s
11 : Statistics :: Grounding time = 0.078754s, Solving time = 0.065863s, Total time = 0.144616s
12 : Statistics :: Grounding time = 0.079986s, Solving time = 0.072593s, Total time = 0.152579s
13 : Statistics :: Grounding time = 0.081801s, Solving time = 0.112616s, Total time = 0.194417s
14 : Statistics :: Grounding time = 0.081548s, Solving time = 0.136988s, Total time = 0.218537s
15 : Statistics :: Grounding time = 0.083465s, Solving time = 0.133267s, Total time = 0.216732s
16 : Statistics :: Grounding time = 0.093325s, Solving time = 0.188732s, Total time = 0.282057s
17 : Statistics :: Grounding time = 0.086278s, Solving time = 0.244124s, Total time = 0.330402s
18 : Statistics :: Grounding time = 0.086006s, Solving time = 0.198294s, Total time = 0.284300s

[06-02-2021_15-07-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.010127s, Solving time = 1.655642s, Total time = 3.803324s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-07-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-07-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-07-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Instantiated.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building started.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Program building completed.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding base program parts.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.017017s.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving base program parts.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.002918s.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving started.

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-07-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 4.432565s.

[06-02-2021_15-07-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.967161s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.347074s.

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.043769s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-07-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.353817s.

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.049810s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.373379s.

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.048268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-07-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.373077s.

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.054366s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.381759s.

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.050135s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-07-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.381417s.

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.092539s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.399104s.

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.066554s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-07-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.388981s.

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.070525s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.408142s.

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.154085s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-07-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.401397s.

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.195994s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.411531s.

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.150206s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-07-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.414902s.

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.172124s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.421659s.

[06-02-2021_15-07-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.265636s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.443341s.

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.234330s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-07-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.441192s.

[06-02-2021_15-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.291431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-07-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.452923s.

[06-02-2021_15-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.710782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-07-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.462138s.

[06-02-2021_15-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.264431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-07-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.476942s.

[06-02-2021_15-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.472765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-07-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.486773s.

[06-02-2021_15-07-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.957556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.486720s.

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.392495s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.488850s.

[06-02-2021_15-07-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-07-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 1.397406s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-07-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-07-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Grounding completed in 0.517453s.

[06-02-2021_15-07-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Model found:
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Solving completed in 0.887767s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental solving completed in 22.213968s because STOP_CON_REACHED.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.762152s, Solving time = 7.993053s, Total time = 22.213968s
Final Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #3 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.432565s, Solving time = 0.967161s, Total time = 5.399726s
2 : Statistics :: Grounding time = 0.347074s, Solving time = 0.043769s, Total time = 0.390842s
3 : Statistics :: Grounding time = 0.353817s, Solving time = 0.049810s, Total time = 0.403628s
4 : Statistics :: Grounding time = 0.373379s, Solving time = 0.048268s, Total time = 0.421646s
5 : Statistics :: Grounding time = 0.373077s, Solving time = 0.054366s, Total time = 0.427444s
6 : Statistics :: Grounding time = 0.381759s, Solving time = 0.050135s, Total time = 0.431895s
7 : Statistics :: Grounding time = 0.381417s, Solving time = 0.092539s, Total time = 0.473956s
8 : Statistics :: Grounding time = 0.399104s, Solving time = 0.066554s, Total time = 0.465658s
9 : Statistics :: Grounding time = 0.388981s, Solving time = 0.070525s, Total time = 0.459506s
10 : Statistics :: Grounding time = 0.408142s, Solving time = 0.154085s, Total time = 0.562227s
11 : Statistics :: Grounding time = 0.401397s, Solving time = 0.195994s, Total time = 0.597391s
12 : Statistics :: Grounding time = 0.411531s, Solving time = 0.150206s, Total time = 0.561737s
13 : Statistics :: Grounding time = 0.414902s, Solving time = 0.172124s, Total time = 0.587027s
14 : Statistics :: Grounding time = 0.421659s, Solving time = 0.265636s, Total time = 0.687294s
15 : Statistics :: Grounding time = 0.443341s, Solving time = 0.234330s, Total time = 0.677671s
16 : Statistics :: Grounding time = 0.441192s, Solving time = 0.291431s, Total time = 0.732623s
17 : Statistics :: Grounding time = 0.452923s, Solving time = 0.710782s, Total time = 1.163704s
18 : Statistics :: Grounding time = 0.462138s, Solving time = 0.264431s, Total time = 0.726568s
19 : Statistics :: Grounding time = 0.476942s, Solving time = 0.472765s, Total time = 0.949707s
20 : Statistics :: Grounding time = 0.486773s, Solving time = 0.957556s, Total time = 1.444329s
21 : Statistics :: Grounding time = 0.486720s, Solving time = 0.392495s, Total time = 0.879215s
22 : Statistics :: Grounding time = 0.488850s, Solving time = 1.397406s, Total time = 1.886256s
23 : Statistics :: Grounding time = 0.517453s, Solving time = 0.887767s, Total time = 1.405221s

[06-02-2021_15-08-00] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.762152s, Solving time = 7.993053s, Total time = 22.213968s
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-00] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),46)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),47)
occurs(1,talos,release(manipulator_end_2,(block,3)),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),50)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_2,(block,2)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),54)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),55)

[06-02-2021_15-08-00] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.556819s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.803324s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    22.213968s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-08-00] INFO :: Experiment >> 

      ================================================      
              Initial run 1 : Time 28.089602s               
      ================================================      

[06-02-2021_15-08-00] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-08-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-08-00] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-00] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Instantiated.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Program building completed.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding base program parts.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.013764s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving base program parts.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.001872s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.041144s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005919s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.031281s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.002797s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.031737s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.004474s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.034328s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.004922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.035004s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.005507s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.036412s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.006925s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.038085s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.007039s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.036925s.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.008703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-08-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.037512s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011523s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040760s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.011772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.041146s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.014010s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040596s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.019386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.039849s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.028210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.041197s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.036596s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.040902s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.065060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.077018s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.126855s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.082195s.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.229619s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Grounding completed in 0.083024s.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving started.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Solving completed in 0.104071s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental solving completed in 1.561580s because STOP_CON_REACHED.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.822878s, Solving time = 0.695261s, Total time = 1.561580s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #4 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041144s, Solving time = 0.005919s, Total time = 0.047063s
2 : Statistics :: Grounding time = 0.031281s, Solving time = 0.002797s, Total time = 0.034078s
3 : Statistics :: Grounding time = 0.031737s, Solving time = 0.004474s, Total time = 0.036211s
4 : Statistics :: Grounding time = 0.034328s, Solving time = 0.004922s, Total time = 0.039250s
5 : Statistics :: Grounding time = 0.035004s, Solving time = 0.005507s, Total time = 0.040512s
6 : Statistics :: Grounding time = 0.036412s, Solving time = 0.006925s, Total time = 0.043337s
7 : Statistics :: Grounding time = 0.038085s, Solving time = 0.007039s, Total time = 0.045125s
8 : Statistics :: Grounding time = 0.036925s, Solving time = 0.008703s, Total time = 0.045628s
9 : Statistics :: Grounding time = 0.037512s, Solving time = 0.011523s, Total time = 0.049035s
10 : Statistics :: Grounding time = 0.040760s, Solving time = 0.011772s, Total time = 0.052532s
11 : Statistics :: Grounding time = 0.041146s, Solving time = 0.014010s, Total time = 0.055156s
12 : Statistics :: Grounding time = 0.040596s, Solving time = 0.019386s, Total time = 0.059983s
13 : Statistics :: Grounding time = 0.039849s, Solving time = 0.028210s, Total time = 0.068059s
14 : Statistics :: Grounding time = 0.041197s, Solving time = 0.036596s, Total time = 0.077793s
15 : Statistics :: Grounding time = 0.040902s, Solving time = 0.065060s, Total time = 0.105961s
16 : Statistics :: Grounding time = 0.077018s, Solving time = 0.126855s, Total time = 0.203873s
17 : Statistics :: Grounding time = 0.082195s, Solving time = 0.229619s, Total time = 0.311814s
18 : Statistics :: Grounding time = 0.083024s, Solving time = 0.104071s, Total time = 0.187095s

[06-02-2021_15-08-02] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.822878s, Solving time = 0.695261s, Total time = 1.561580s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-08-02] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-08-02] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-02] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Instantiated.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building started.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Program building completed.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding base program parts.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.014756s.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving base program parts.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.002277s.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving started.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.641153s.

[06-02-2021_15-08-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.225507s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.069439s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.017822s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.070118s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.016103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.070667s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022096s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072261s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.022496s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.072164s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.032528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.075894s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.021147s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.075543s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.029473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.076321s.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.036721s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-08-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.077578s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.048917s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.078134s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.036121s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.079094s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.058500s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.081027s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.072176s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.080583s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.109671s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.084735s.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.104353s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-08-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.085006s.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.113646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.090236s.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.114679s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Grounding completed in 0.096729s.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving started.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Model found:
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Solving completed in 0.186323s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental solving completed in 3.393776s because STOP_CON_REACHED.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.991440s, Solving time = 1.270555s, Total time = 3.393776s
Final Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #5 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.641153s, Solving time = 0.225507s, Total time = 0.866660s
2 : Statistics :: Grounding time = 0.069439s, Solving time = 0.017822s, Total time = 0.087261s
3 : Statistics :: Grounding time = 0.070118s, Solving time = 0.016103s, Total time = 0.086221s
4 : Statistics :: Grounding time = 0.070667s, Solving time = 0.022096s, Total time = 0.092763s
5 : Statistics :: Grounding time = 0.072261s, Solving time = 0.022496s, Total time = 0.094757s
6 : Statistics :: Grounding time = 0.072164s, Solving time = 0.032528s, Total time = 0.104692s
7 : Statistics :: Grounding time = 0.075894s, Solving time = 0.021147s, Total time = 0.097041s
8 : Statistics :: Grounding time = 0.075543s, Solving time = 0.029473s, Total time = 0.105016s
9 : Statistics :: Grounding time = 0.076321s, Solving time = 0.036721s, Total time = 0.113043s
10 : Statistics :: Grounding time = 0.077578s, Solving time = 0.048917s, Total time = 0.126495s
11 : Statistics :: Grounding time = 0.078134s, Solving time = 0.036121s, Total time = 0.114255s
12 : Statistics :: Grounding time = 0.079094s, Solving time = 0.058500s, Total time = 0.137594s
13 : Statistics :: Grounding time = 0.081027s, Solving time = 0.072176s, Total time = 0.153203s
14 : Statistics :: Grounding time = 0.080583s, Solving time = 0.109671s, Total time = 0.190254s
15 : Statistics :: Grounding time = 0.084735s, Solving time = 0.104353s, Total time = 0.189088s
16 : Statistics :: Grounding time = 0.085006s, Solving time = 0.113646s, Total time = 0.198653s
17 : Statistics :: Grounding time = 0.090236s, Solving time = 0.114679s, Total time = 0.204915s
18 : Statistics :: Grounding time = 0.096729s, Solving time = 0.186323s, Total time = 0.283052s

[06-02-2021_15-08-05] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.991440s, Solving time = 1.270555s, Total time = 3.393776s
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-05] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_1,extended),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_1,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),25)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-08-05] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-05] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Instantiated.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building started.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Program building completed.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding base program parts.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.017546s.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving base program parts.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.003752s.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving started.

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-08-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 4.365911s.

[06-02-2021_15-08-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.976621s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.343745s.

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.045019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.357341s.

[06-02-2021_15-08-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.049853s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.368363s.

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.049905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.371701s.

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.060358s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-08-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.375160s.

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.052407s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.382264s.

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.054429s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-08-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.389516s.

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.087496s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.394176s.

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.070016s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-08-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.401471s.

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.088755s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.407894s.

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.083170s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-08-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.422003s.

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.154926s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.420928s.

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.116081s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-08-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.429928s.

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.145488s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.436125s.

[06-02-2021_15-08-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.166709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.435158s.

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.226284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-08-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.451895s.

[06-02-2021_15-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.308604s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-08-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.466812s.

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.208371s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.469954s.

[06-02-2021_15-08-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.421245s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.478610s.

[06-02-2021_15-08-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.598149s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.502161s.

[06-02-2021_15-08-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.639684s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-08-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.500022s.

[06-02-2021_15-08-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 1.215114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Grounding completed in 0.510458s.

[06-02-2021_15-08-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Model found:
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Solving completed in 0.542142s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental solving completed in 20.498054s because STOP_CON_REACHED.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.699144s, Solving time = 6.364577s, Total time = 20.498054s
Final Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #6 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.365911s, Solving time = 0.976621s, Total time = 5.342532s
2 : Statistics :: Grounding time = 0.343745s, Solving time = 0.045019s, Total time = 0.388764s
3 : Statistics :: Grounding time = 0.357341s, Solving time = 0.049853s, Total time = 0.407194s
4 : Statistics :: Grounding time = 0.368363s, Solving time = 0.049905s, Total time = 0.418268s
5 : Statistics :: Grounding time = 0.371701s, Solving time = 0.060358s, Total time = 0.432059s
6 : Statistics :: Grounding time = 0.375160s, Solving time = 0.052407s, Total time = 0.427567s
7 : Statistics :: Grounding time = 0.382264s, Solving time = 0.054429s, Total time = 0.436694s
8 : Statistics :: Grounding time = 0.389516s, Solving time = 0.087496s, Total time = 0.477012s
9 : Statistics :: Grounding time = 0.394176s, Solving time = 0.070016s, Total time = 0.464192s
10 : Statistics :: Grounding time = 0.401471s, Solving time = 0.088755s, Total time = 0.490227s
11 : Statistics :: Grounding time = 0.407894s, Solving time = 0.083170s, Total time = 0.491063s
12 : Statistics :: Grounding time = 0.422003s, Solving time = 0.154926s, Total time = 0.576929s
13 : Statistics :: Grounding time = 0.420928s, Solving time = 0.116081s, Total time = 0.537009s
14 : Statistics :: Grounding time = 0.429928s, Solving time = 0.145488s, Total time = 0.575417s
15 : Statistics :: Grounding time = 0.436125s, Solving time = 0.166709s, Total time = 0.602834s
16 : Statistics :: Grounding time = 0.435158s, Solving time = 0.226284s, Total time = 0.661442s
17 : Statistics :: Grounding time = 0.451895s, Solving time = 0.308604s, Total time = 0.760499s
18 : Statistics :: Grounding time = 0.466812s, Solving time = 0.208371s, Total time = 0.675183s
19 : Statistics :: Grounding time = 0.469954s, Solving time = 0.421245s, Total time = 0.891199s
20 : Statistics :: Grounding time = 0.478610s, Solving time = 0.598149s, Total time = 1.076759s
21 : Statistics :: Grounding time = 0.502161s, Solving time = 0.639684s, Total time = 1.141845s
22 : Statistics :: Grounding time = 0.500022s, Solving time = 1.215114s, Total time = 1.715136s
23 : Statistics :: Grounding time = 0.510458s, Solving time = 0.542142s, Total time = 1.052600s

[06-02-2021_15-08-26] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.699144s, Solving time = 6.364577s, Total time = 20.498054s
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-26] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_1,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,release(manipulator_end_1,(block,3)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-08-26] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.561580s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.393776s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    20.498054s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-08-26] INFO :: Experiment >> 

      ================================================      
              Initial run 2 : Time 25.994221s               
      ================================================      

[06-02-2021_15-08-26] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-08-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-08-26] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-26] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Instantiated.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Program building completed.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding base program parts.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.014867s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving base program parts.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.002215s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039818s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005566s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.031019s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.003643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.031082s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.004614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.033966s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005142s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.034591s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.005348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.036412s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.006592s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.037419s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.007542s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.037872s.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.009472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-08-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.036823s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.010555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.039713s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.011620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.042362s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.016607s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040550s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.026752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.040813s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.031608s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.041701s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.043568s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.042252s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.067842s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.076050s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.114870s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.082985s.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.204803s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Grounding completed in 0.082662s.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving started.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Solving completed in 0.051949s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental solving completed in 1.496936s because STOP_CON_REACHED.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.822957s, Solving time = 0.630306s, Total time = 1.496936s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #7 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039818s, Solving time = 0.005566s, Total time = 0.045383s
2 : Statistics :: Grounding time = 0.031019s, Solving time = 0.003643s, Total time = 0.034662s
3 : Statistics :: Grounding time = 0.031082s, Solving time = 0.004614s, Total time = 0.035695s
4 : Statistics :: Grounding time = 0.033966s, Solving time = 0.005142s, Total time = 0.039108s
5 : Statistics :: Grounding time = 0.034591s, Solving time = 0.005348s, Total time = 0.039940s
6 : Statistics :: Grounding time = 0.036412s, Solving time = 0.006592s, Total time = 0.043004s
7 : Statistics :: Grounding time = 0.037419s, Solving time = 0.007542s, Total time = 0.044961s
8 : Statistics :: Grounding time = 0.037872s, Solving time = 0.009472s, Total time = 0.047344s
9 : Statistics :: Grounding time = 0.036823s, Solving time = 0.010555s, Total time = 0.047378s
10 : Statistics :: Grounding time = 0.039713s, Solving time = 0.011620s, Total time = 0.051333s
11 : Statistics :: Grounding time = 0.042362s, Solving time = 0.016607s, Total time = 0.058969s
12 : Statistics :: Grounding time = 0.040550s, Solving time = 0.026752s, Total time = 0.067302s
13 : Statistics :: Grounding time = 0.040813s, Solving time = 0.031608s, Total time = 0.072421s
14 : Statistics :: Grounding time = 0.041701s, Solving time = 0.043568s, Total time = 0.085269s
15 : Statistics :: Grounding time = 0.042252s, Solving time = 0.067842s, Total time = 0.110094s
16 : Statistics :: Grounding time = 0.076050s, Solving time = 0.114870s, Total time = 0.190920s
17 : Statistics :: Grounding time = 0.082985s, Solving time = 0.204803s, Total time = 0.287788s
18 : Statistics :: Grounding time = 0.082662s, Solving time = 0.051949s, Total time = 0.134610s

[06-02-2021_15-08-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.822957s, Solving time = 0.630306s, Total time = 1.496936s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-08-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Instantiated.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building started.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Program building completed.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding base program parts.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.015620s.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving base program parts.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.002604s.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving started.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.628781s.

[06-02-2021_15-08-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.229291s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.071234s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.066928s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.016148s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077835s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.023711s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.073253s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.022390s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.073179s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.025805s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.073282s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.021527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.075284s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.023604s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.077996s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.033727s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076764s.

[06-02-2021_15-08-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.043809s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.076182s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.046908s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.085864s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.062715s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.081633s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.072465s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.082444s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.094549s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.081942s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.139977s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.084677s.

[06-02-2021_15-08-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.183469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.087482s.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.184746s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Grounding completed in 0.088156s.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving started.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Solving completed in 0.186138s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental solving completed in 3.544714s because STOP_CON_REACHED.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.978537s, Solving time = 1.430511s, Total time = 3.544714s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #8 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.628781s, Solving time = 0.229291s, Total time = 0.858072s
2 : Statistics :: Grounding time = 0.071234s, Solving time = 0.016929s, Total time = 0.088163s
3 : Statistics :: Grounding time = 0.066928s, Solving time = 0.016148s, Total time = 0.083076s
4 : Statistics :: Grounding time = 0.077835s, Solving time = 0.023711s, Total time = 0.101546s
5 : Statistics :: Grounding time = 0.073253s, Solving time = 0.022390s, Total time = 0.095644s
6 : Statistics :: Grounding time = 0.073179s, Solving time = 0.025805s, Total time = 0.098984s
7 : Statistics :: Grounding time = 0.073282s, Solving time = 0.021527s, Total time = 0.094809s
8 : Statistics :: Grounding time = 0.075284s, Solving time = 0.023604s, Total time = 0.098888s
9 : Statistics :: Grounding time = 0.077996s, Solving time = 0.033727s, Total time = 0.111724s
10 : Statistics :: Grounding time = 0.076764s, Solving time = 0.043809s, Total time = 0.120573s
11 : Statistics :: Grounding time = 0.076182s, Solving time = 0.046908s, Total time = 0.123091s
12 : Statistics :: Grounding time = 0.085864s, Solving time = 0.062715s, Total time = 0.148579s
13 : Statistics :: Grounding time = 0.081633s, Solving time = 0.072465s, Total time = 0.154097s
14 : Statistics :: Grounding time = 0.082444s, Solving time = 0.094549s, Total time = 0.176993s
15 : Statistics :: Grounding time = 0.081942s, Solving time = 0.139977s, Total time = 0.221919s
16 : Statistics :: Grounding time = 0.084677s, Solving time = 0.183469s, Total time = 0.268146s
17 : Statistics :: Grounding time = 0.087482s, Solving time = 0.184746s, Total time = 0.272227s
18 : Statistics :: Grounding time = 0.088156s, Solving time = 0.186138s, Total time = 0.274295s

[06-02-2021_15-08-31] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.978537s, Solving time = 1.430511s, Total time = 3.544714s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-08-31] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-08-31] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-31] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Instantiated.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building started.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Program building completed.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding base program parts.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.017280s.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving base program parts.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.003885s.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving started.

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 4.375621s.

[06-02-2021_15-08-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.968791s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.342572s.

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.044905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-08-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.355912s.

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.050540s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.373398s.

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.045108s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.374763s.

[06-02-2021_15-08-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.053347s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.380965s.

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.058533s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.379644s.

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.081280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-08-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.392451s.

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.073867s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.396293s.

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.077705s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-08-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.404625s.

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.087080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.417755s.

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.066640s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-08-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.418653s.

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.090792s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.418290s.

[06-02-2021_15-08-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.143556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.445230s.

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.170900s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-08-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.436871s.

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.096439s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.448633s.

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.205247s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-08-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-08-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.456859s.

[06-02-2021_15-08-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.240852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-08-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.455949s.

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.370948s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.469045s.

[06-02-2021_15-08-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.297566s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-08-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-08-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.491176s.

[06-02-2021_15-08-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.259373s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.494194s.

[06-02-2021_15-08-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.539765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.510092s.

[06-02-2021_15-08-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 0.883775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-08-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Grounding completed in 0.514771s.

[06-02-2021_15-08-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving started.

[06-02-2021_15-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Model found:
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Solving completed in 1.846826s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental solving completed in 20.960305s because STOP_CON_REACHED.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.771041s, Solving time = 6.757722s, Total time = 20.960305s
Final Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #9 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.375621s, Solving time = 0.968791s, Total time = 5.344412s
2 : Statistics :: Grounding time = 0.342572s, Solving time = 0.044905s, Total time = 0.387477s
3 : Statistics :: Grounding time = 0.355912s, Solving time = 0.050540s, Total time = 0.406452s
4 : Statistics :: Grounding time = 0.373398s, Solving time = 0.045108s, Total time = 0.418506s
5 : Statistics :: Grounding time = 0.374763s, Solving time = 0.053347s, Total time = 0.428110s
6 : Statistics :: Grounding time = 0.380965s, Solving time = 0.058533s, Total time = 0.439499s
7 : Statistics :: Grounding time = 0.379644s, Solving time = 0.081280s, Total time = 0.460924s
8 : Statistics :: Grounding time = 0.392451s, Solving time = 0.073867s, Total time = 0.466318s
9 : Statistics :: Grounding time = 0.396293s, Solving time = 0.077705s, Total time = 0.473999s
10 : Statistics :: Grounding time = 0.404625s, Solving time = 0.087080s, Total time = 0.491705s
11 : Statistics :: Grounding time = 0.417755s, Solving time = 0.066640s, Total time = 0.484395s
12 : Statistics :: Grounding time = 0.418653s, Solving time = 0.090792s, Total time = 0.509445s
13 : Statistics :: Grounding time = 0.418290s, Solving time = 0.143556s, Total time = 0.561846s
14 : Statistics :: Grounding time = 0.445230s, Solving time = 0.170900s, Total time = 0.616130s
15 : Statistics :: Grounding time = 0.436871s, Solving time = 0.096439s, Total time = 0.533311s
16 : Statistics :: Grounding time = 0.448633s, Solving time = 0.205247s, Total time = 0.653880s
17 : Statistics :: Grounding time = 0.456859s, Solving time = 0.240852s, Total time = 0.697711s
18 : Statistics :: Grounding time = 0.455949s, Solving time = 0.370948s, Total time = 0.826897s
19 : Statistics :: Grounding time = 0.469045s, Solving time = 0.297566s, Total time = 0.766610s
20 : Statistics :: Grounding time = 0.491176s, Solving time = 0.259373s, Total time = 0.750549s
21 : Statistics :: Grounding time = 0.494194s, Solving time = 0.539765s, Total time = 1.033960s
22 : Statistics :: Grounding time = 0.510092s, Solving time = 0.883775s, Total time = 1.393867s
23 : Statistics :: Grounding time = 0.514771s, Solving time = 1.846826s, Total time = 2.361597s

[06-02-2021_15-08-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.771041s, Solving time = 6.757722s, Total time = 20.960305s
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-08-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_2,(block,3)),48)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),50)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_2,(block,2)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),54)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),55)

[06-02-2021_15-08-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.496936s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.544714s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    20.960305s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-08-53] INFO :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 26.574428s            
      ================================================      

[06-02-2021_15-08-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-08-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-08-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Instantiated.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Program building completed.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding base program parts.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.013664s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving base program parts.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.001908s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040084s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.031203s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.003581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.033062s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.004613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.034023s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005480s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.034435s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.005860s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.036656s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006319s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037777s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.006624s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037055s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.007848s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.037664s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.010558s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.045633s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.009456s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040158s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.015579s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040790s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.022048s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.040459s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.028786s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041275s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.048763s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.041153s.

[06-02-2021_15-08-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.083983s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.075861s.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.137891s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.080230s.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.215896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Grounding completed in 0.090344s.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Solving completed in 0.110352s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental solving completed in 1.604801s because STOP_CON_REACHED.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.831527s, Solving time = 0.730974s, Total time = 1.604801s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #10 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040084s, Solving time = 0.005431s, Total time = 0.045515s
2 : Statistics :: Grounding time = 0.031203s, Solving time = 0.003581s, Total time = 0.034784s
3 : Statistics :: Grounding time = 0.033062s, Solving time = 0.004613s, Total time = 0.037675s
4 : Statistics :: Grounding time = 0.034023s, Solving time = 0.005480s, Total time = 0.039503s
5 : Statistics :: Grounding time = 0.034435s, Solving time = 0.005860s, Total time = 0.040295s
6 : Statistics :: Grounding time = 0.036656s, Solving time = 0.006319s, Total time = 0.042975s
7 : Statistics :: Grounding time = 0.037777s, Solving time = 0.006624s, Total time = 0.044401s
8 : Statistics :: Grounding time = 0.037055s, Solving time = 0.007848s, Total time = 0.044902s
9 : Statistics :: Grounding time = 0.037664s, Solving time = 0.010558s, Total time = 0.048222s
10 : Statistics :: Grounding time = 0.045633s, Solving time = 0.009456s, Total time = 0.055089s
11 : Statistics :: Grounding time = 0.040158s, Solving time = 0.015579s, Total time = 0.055737s
12 : Statistics :: Grounding time = 0.040790s, Solving time = 0.022048s, Total time = 0.062838s
13 : Statistics :: Grounding time = 0.040459s, Solving time = 0.028786s, Total time = 0.069245s
14 : Statistics :: Grounding time = 0.041275s, Solving time = 0.048763s, Total time = 0.090038s
15 : Statistics :: Grounding time = 0.041153s, Solving time = 0.083983s, Total time = 0.125136s
16 : Statistics :: Grounding time = 0.075861s, Solving time = 0.137891s, Total time = 0.213752s
17 : Statistics :: Grounding time = 0.080230s, Solving time = 0.215896s, Total time = 0.296126s
18 : Statistics :: Grounding time = 0.090344s, Solving time = 0.110352s, Total time = 0.200696s

[06-02-2021_15-08-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.831527s, Solving time = 0.730974s, Total time = 1.604801s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-08-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-08-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Instantiated.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Program building completed.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding base program parts.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.014700s.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving base program parts.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.002260s.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving started.

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-08-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.637899s.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.233348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.069144s.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.018473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073442s.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.016342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-08-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.071883s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.022803s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.070888s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.024336s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073574s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.031424s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.072457s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.019429s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.073866s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.033550s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.077952s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.039725s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.081852s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.037297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.077156s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.057808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.079607s.

[06-02-2021_15-08-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.062910s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.080197s.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.085989s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.080276s.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.111713s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.082465s.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.115154s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.089899s.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.149652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.084727s.

[06-02-2021_15-08-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.166848s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Grounding completed in 0.086765s.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving started.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Solving completed in 0.202225s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental solving completed in 3.537332s because STOP_CON_REACHED.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.978749s, Solving time = 1.431287s, Total time = 3.537332s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #11 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.637899s, Solving time = 0.233348s, Total time = 0.871246s
2 : Statistics :: Grounding time = 0.069144s, Solving time = 0.018473s, Total time = 0.087618s
3 : Statistics :: Grounding time = 0.073442s, Solving time = 0.016342s, Total time = 0.089784s
4 : Statistics :: Grounding time = 0.071883s, Solving time = 0.022803s, Total time = 0.094685s
5 : Statistics :: Grounding time = 0.070888s, Solving time = 0.024336s, Total time = 0.095224s
6 : Statistics :: Grounding time = 0.073574s, Solving time = 0.031424s, Total time = 0.104997s
7 : Statistics :: Grounding time = 0.072457s, Solving time = 0.019429s, Total time = 0.091886s
8 : Statistics :: Grounding time = 0.073866s, Solving time = 0.033550s, Total time = 0.107416s
9 : Statistics :: Grounding time = 0.077952s, Solving time = 0.039725s, Total time = 0.117677s
10 : Statistics :: Grounding time = 0.081852s, Solving time = 0.037297s, Total time = 0.119149s
11 : Statistics :: Grounding time = 0.077156s, Solving time = 0.057808s, Total time = 0.134964s
12 : Statistics :: Grounding time = 0.079607s, Solving time = 0.062910s, Total time = 0.142517s
13 : Statistics :: Grounding time = 0.080197s, Solving time = 0.085989s, Total time = 0.166187s
14 : Statistics :: Grounding time = 0.080276s, Solving time = 0.111713s, Total time = 0.191989s
15 : Statistics :: Grounding time = 0.082465s, Solving time = 0.115154s, Total time = 0.197619s
16 : Statistics :: Grounding time = 0.089899s, Solving time = 0.149652s, Total time = 0.239551s
17 : Statistics :: Grounding time = 0.084727s, Solving time = 0.166848s, Total time = 0.251575s
18 : Statistics :: Grounding time = 0.086765s, Solving time = 0.202225s, Total time = 0.288991s

[06-02-2021_15-08-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.978749s, Solving time = 1.431287s, Total time = 3.537332s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-08-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-08-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-08-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Instantiated.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building started.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Program building completed.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding base program parts.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.016504s.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving base program parts.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.003006s.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving started.

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-08-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-09-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 4.329668s.

[06-02-2021_15-09-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.971095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-09-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.343290s.

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.044311s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.354229s.

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.047861s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-09-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.370615s.

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.048473s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.371444s.

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.052964s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.386843s.

[06-02-2021_15-09-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.058194s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.388757s.

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.098397s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.396815s.

[06-02-2021_15-09-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.053275s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.386394s.

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.072402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.394958s.

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.083431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.407867s.

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.102934s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.417416s.

[06-02-2021_15-09-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.112771s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.416807s.

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.230837s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-09-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.434879s.

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.228581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.432303s.

[06-02-2021_15-09-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.272964s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.430639s.

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.299341s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-09-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.457782s.

[06-02-2021_15-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.377991s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-09-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-09-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.466952s.

[06-02-2021_15-09-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.336868s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-09-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-09-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.479249s.

[06-02-2021_15-09-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.933045s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-09-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-09-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.484989s.

[06-02-2021_15-09-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 0.917722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-09-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-09-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Grounding completed in 0.493984s.

[06-02-2021_15-09-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Model found:
Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Solving completed in 1.259783s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental solving completed in 19.661909s because STOP_CON_REACHED.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.662385s, Solving time = 6.606247s, Total time = 19.661909s
Final Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #12 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.329668s, Solving time = 0.971095s, Total time = 5.300763s
2 : Statistics :: Grounding time = 0.343290s, Solving time = 0.044311s, Total time = 0.387601s
3 : Statistics :: Grounding time = 0.354229s, Solving time = 0.047861s, Total time = 0.402090s
4 : Statistics :: Grounding time = 0.370615s, Solving time = 0.048473s, Total time = 0.419088s
5 : Statistics :: Grounding time = 0.371444s, Solving time = 0.052964s, Total time = 0.424408s
6 : Statistics :: Grounding time = 0.386843s, Solving time = 0.058194s, Total time = 0.445038s
7 : Statistics :: Grounding time = 0.388757s, Solving time = 0.098397s, Total time = 0.487155s
8 : Statistics :: Grounding time = 0.396815s, Solving time = 0.053275s, Total time = 0.450090s
9 : Statistics :: Grounding time = 0.386394s, Solving time = 0.072402s, Total time = 0.458797s
10 : Statistics :: Grounding time = 0.394958s, Solving time = 0.083431s, Total time = 0.478389s
11 : Statistics :: Grounding time = 0.407867s, Solving time = 0.102934s, Total time = 0.510801s
12 : Statistics :: Grounding time = 0.417416s, Solving time = 0.112771s, Total time = 0.530186s
13 : Statistics :: Grounding time = 0.416807s, Solving time = 0.230837s, Total time = 0.647644s
14 : Statistics :: Grounding time = 0.434879s, Solving time = 0.228581s, Total time = 0.663460s
15 : Statistics :: Grounding time = 0.432303s, Solving time = 0.272964s, Total time = 0.705267s
16 : Statistics :: Grounding time = 0.430639s, Solving time = 0.299341s, Total time = 0.729980s
17 : Statistics :: Grounding time = 0.457782s, Solving time = 0.377991s, Total time = 0.835773s
18 : Statistics :: Grounding time = 0.466952s, Solving time = 0.336868s, Total time = 0.803820s
19 : Statistics :: Grounding time = 0.479249s, Solving time = 0.933045s, Total time = 1.412295s
20 : Statistics :: Grounding time = 0.484989s, Solving time = 0.917722s, Total time = 1.402712s
21 : Statistics :: Grounding time = 0.493984s, Solving time = 1.259783s, Total time = 1.753767s

[06-02-2021_15-09-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.662385s, Solving time = 6.606247s, Total time = 19.661909s
Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-09-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),22)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),37)
occurs(1,talos,configure(manipulator_limb_1,extended),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),42)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-09-18] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.604801s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.537332s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    19.661909s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-09-18] INFO :: Experiment >> 

      ================================================      
            Experimental run 2 : Time 25.311540s            
      ================================================      

[06-02-2021_15-09-18] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-09-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-09-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Instantiated.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Program building completed.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding base program parts.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.013934s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving base program parts.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.001920s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.039163s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005860s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.030473s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.003623s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.030973s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.004151s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.034380s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.034079s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.005601s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.035765s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.006532s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.037296s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.007040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.037298s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.007819s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.038148s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.009773s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.039944s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.010286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.039619s.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.013676s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-09-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.042172s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.018820s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.040486s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.024875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.041905s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.038548s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.042671s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.062718s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.076071s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.129978s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.080325s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.269992s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Grounding completed in 0.083428s.

[06-02-2021_15-09-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving started.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Solving completed in 0.077398s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental solving completed in 1.565417s because STOP_CON_REACHED.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.818131s, Solving time = 0.704022s, Total time = 1.565417s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #13 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039163s, Solving time = 0.005860s, Total time = 0.045023s
2 : Statistics :: Grounding time = 0.030473s, Solving time = 0.003623s, Total time = 0.034096s
3 : Statistics :: Grounding time = 0.030973s, Solving time = 0.004151s, Total time = 0.035124s
4 : Statistics :: Grounding time = 0.034380s, Solving time = 0.005413s, Total time = 0.039793s
5 : Statistics :: Grounding time = 0.034079s, Solving time = 0.005601s, Total time = 0.039680s
6 : Statistics :: Grounding time = 0.035765s, Solving time = 0.006532s, Total time = 0.042297s
7 : Statistics :: Grounding time = 0.037296s, Solving time = 0.007040s, Total time = 0.044336s
8 : Statistics :: Grounding time = 0.037298s, Solving time = 0.007819s, Total time = 0.045117s
9 : Statistics :: Grounding time = 0.038148s, Solving time = 0.009773s, Total time = 0.047921s
10 : Statistics :: Grounding time = 0.039944s, Solving time = 0.010286s, Total time = 0.050231s
11 : Statistics :: Grounding time = 0.039619s, Solving time = 0.013676s, Total time = 0.053295s
12 : Statistics :: Grounding time = 0.042172s, Solving time = 0.018820s, Total time = 0.060992s
13 : Statistics :: Grounding time = 0.040486s, Solving time = 0.024875s, Total time = 0.065361s
14 : Statistics :: Grounding time = 0.041905s, Solving time = 0.038548s, Total time = 0.080453s
15 : Statistics :: Grounding time = 0.042671s, Solving time = 0.062718s, Total time = 0.105389s
16 : Statistics :: Grounding time = 0.076071s, Solving time = 0.129978s, Total time = 0.206048s
17 : Statistics :: Grounding time = 0.080325s, Solving time = 0.269992s, Total time = 0.350316s
18 : Statistics :: Grounding time = 0.083428s, Solving time = 0.077398s, Total time = 0.160825s

[06-02-2021_15-09-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.818131s, Solving time = 0.704022s, Total time = 1.565417s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_1,(block,3)),9)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_2,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-09-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Instantiated.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building started.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Program building completed.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding base program parts.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.014465s.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving base program parts.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.002169s.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving started.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.629065s.

[06-02-2021_15-09-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.225312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.070904s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.017388s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.067107s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.015627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072018s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022471s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072749s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.022687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.072531s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.026893s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.073021s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.019591s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.074375s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.027963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.075636s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.051355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.077481s.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.040725s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-09-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082560s.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.049182s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.079783s.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.063152s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.082056s.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.128561s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.089772s.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.139176s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.084905s.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.159526s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-09-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086710s.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.127058s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.086951s.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.213806s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Grounding completed in 0.088385s.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving started.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Model found:
Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Solving completed in 0.225883s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental solving completed in 3.689438s because STOP_CON_REACHED.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.980475s, Solving time = 1.578526s, Total time = 3.689438s
Final Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #14 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.629065s, Solving time = 0.225312s, Total time = 0.854377s
2 : Statistics :: Grounding time = 0.070904s, Solving time = 0.017388s, Total time = 0.088292s
3 : Statistics :: Grounding time = 0.067107s, Solving time = 0.015627s, Total time = 0.082735s
4 : Statistics :: Grounding time = 0.072018s, Solving time = 0.022471s, Total time = 0.094489s
5 : Statistics :: Grounding time = 0.072749s, Solving time = 0.022687s, Total time = 0.095436s
6 : Statistics :: Grounding time = 0.072531s, Solving time = 0.026893s, Total time = 0.099424s
7 : Statistics :: Grounding time = 0.073021s, Solving time = 0.019591s, Total time = 0.092612s
8 : Statistics :: Grounding time = 0.074375s, Solving time = 0.027963s, Total time = 0.102338s
9 : Statistics :: Grounding time = 0.075636s, Solving time = 0.051355s, Total time = 0.126991s
10 : Statistics :: Grounding time = 0.077481s, Solving time = 0.040725s, Total time = 0.118206s
11 : Statistics :: Grounding time = 0.082560s, Solving time = 0.049182s, Total time = 0.131743s
12 : Statistics :: Grounding time = 0.079783s, Solving time = 0.063152s, Total time = 0.142935s
13 : Statistics :: Grounding time = 0.082056s, Solving time = 0.128561s, Total time = 0.210617s
14 : Statistics :: Grounding time = 0.089772s, Solving time = 0.139176s, Total time = 0.228948s
15 : Statistics :: Grounding time = 0.084905s, Solving time = 0.159526s, Total time = 0.244430s
16 : Statistics :: Grounding time = 0.086710s, Solving time = 0.127058s, Total time = 0.213768s
17 : Statistics :: Grounding time = 0.086951s, Solving time = 0.213806s, Total time = 0.300757s
18 : Statistics :: Grounding time = 0.088385s, Solving time = 0.225883s, Total time = 0.314268s

[06-02-2021_15-09-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.980475s, Solving time = 1.578526s, Total time = 3.689438s
Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_2,extended),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),24)
occurs(2,talos,release(manipulator_arm_1,(block,3)),25)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),26)
occurs(2,talos,release(manipulator_arm_2,(block,5)),27)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-09-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Instantiated.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building started.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Program building completed.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding base program parts.

[06-02-2021_15-09-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.017832s.

[06-02-2021_15-09-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving base program parts.

[06-02-2021_15-09-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.003805s.

[06-02-2021_15-09-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving started.

[06-02-2021_15-09-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-09-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 4.373545s.

[06-02-2021_15-09-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.971703s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.353766s.

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.044982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-09-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.350195s.

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.051373s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.371556s.

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.050134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-09-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.368121s.

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.061042s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.383033s.

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.058324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.380183s.

[06-02-2021_15-09-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.094975s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.405853s.

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.068840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.387816s.

[06-02-2021_15-09-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.085687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.405519s.

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.109159s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.416897s.

[06-02-2021_15-09-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.079773s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.413751s.

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.231762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-09-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.414674s.

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.274949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.420474s.

[06-02-2021_15-09-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.282283s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-09-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-09-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.447508s.

[06-02-2021_15-09-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.425434s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.444150s.

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.359191s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-09-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.454737s.

[06-02-2021_15-09-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.682461s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.466420s.

[06-02-2021_15-09-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.795269s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.472836s.

[06-02-2021_15-09-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.153268s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-09-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.490209s.

[06-02-2021_15-09-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 0.987978s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.493331s.

[06-02-2021_15-09-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 1.621576s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-09-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-09-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.524731s.

[06-02-2021_15-09-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.857261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Grounding completed in 0.511968s.

[06-02-2021_15-09-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Model found:
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Solving completed in 2.791633s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental solving completed in 28.401205s because STOP_CON_REACHED.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.769107s, Solving time = 14.142863s, Total time = 28.401205s
Final Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #15 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.373545s, Solving time = 0.971703s, Total time = 5.345248s
2 : Statistics :: Grounding time = 0.353766s, Solving time = 0.044982s, Total time = 0.398748s
3 : Statistics :: Grounding time = 0.350195s, Solving time = 0.051373s, Total time = 0.401568s
4 : Statistics :: Grounding time = 0.371556s, Solving time = 0.050134s, Total time = 0.421691s
5 : Statistics :: Grounding time = 0.368121s, Solving time = 0.061042s, Total time = 0.429164s
6 : Statistics :: Grounding time = 0.383033s, Solving time = 0.058324s, Total time = 0.441357s
7 : Statistics :: Grounding time = 0.380183s, Solving time = 0.094975s, Total time = 0.475158s
8 : Statistics :: Grounding time = 0.405853s, Solving time = 0.068840s, Total time = 0.474693s
9 : Statistics :: Grounding time = 0.387816s, Solving time = 0.085687s, Total time = 0.473503s
10 : Statistics :: Grounding time = 0.405519s, Solving time = 0.109159s, Total time = 0.514678s
11 : Statistics :: Grounding time = 0.416897s, Solving time = 0.079773s, Total time = 0.496670s
12 : Statistics :: Grounding time = 0.413751s, Solving time = 0.231762s, Total time = 0.645513s
13 : Statistics :: Grounding time = 0.414674s, Solving time = 0.274949s, Total time = 0.689623s
14 : Statistics :: Grounding time = 0.420474s, Solving time = 0.282283s, Total time = 0.702757s
15 : Statistics :: Grounding time = 0.447508s, Solving time = 0.425434s, Total time = 0.872942s
16 : Statistics :: Grounding time = 0.444150s, Solving time = 0.359191s, Total time = 0.803341s
17 : Statistics :: Grounding time = 0.454737s, Solving time = 0.682461s, Total time = 1.137197s
18 : Statistics :: Grounding time = 0.466420s, Solving time = 0.795269s, Total time = 1.261689s
19 : Statistics :: Grounding time = 0.472836s, Solving time = 1.153268s, Total time = 1.626104s
20 : Statistics :: Grounding time = 0.490209s, Solving time = 0.987978s, Total time = 1.478187s
21 : Statistics :: Grounding time = 0.493331s, Solving time = 1.621576s, Total time = 2.114907s
22 : Statistics :: Grounding time = 0.524731s, Solving time = 2.857261s, Total time = 3.381992s
23 : Statistics :: Grounding time = 0.511968s, Solving time = 2.791633s, Total time = 3.303601s

[06-02-2021_15-09-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.769107s, Solving time = 14.142863s, Total time = 28.401205s
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-09-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,configure(manipulator_limb_2,extended),24)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),41)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),42)
occurs(1,talos,release(manipulator_end_2,(block,5)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),50)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_2,(block,2)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),54)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),55)

[06-02-2021_15-09-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.565417s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.689438s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    28.401205s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-09-52] INFO :: Experiment >> 

      ================================================      
            Experimental run 3 : Time 34.151599s            
      ================================================      

[06-02-2021_15-09-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-09-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-09-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Instantiated.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Program building completed.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding base program parts.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.013634s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving base program parts.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.002940s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.041297s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005600s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.032459s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.003423s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.031020s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.004078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.034456s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005034s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.034450s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.005554s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.035896s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.006348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.037761s.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.007226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-09-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.036766s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.008782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.038670s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010182s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040147s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.010094s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039885s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.012824s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.040489s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.018179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.039779s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.027835s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.048009s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.038321s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.041390s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.064240s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.075353s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.124099s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.080123s.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.177556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-09-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Grounding completed in 0.083052s.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving started.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Solving completed in 0.230522s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental solving completed in 1.631337s because STOP_CON_REACHED.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.824635s, Solving time = 0.762836s, Total time = 1.631337s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #16 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.041297s, Solving time = 0.005600s, Total time = 0.046898s
2 : Statistics :: Grounding time = 0.032459s, Solving time = 0.003423s, Total time = 0.035883s
3 : Statistics :: Grounding time = 0.031020s, Solving time = 0.004078s, Total time = 0.035098s
4 : Statistics :: Grounding time = 0.034456s, Solving time = 0.005034s, Total time = 0.039490s
5 : Statistics :: Grounding time = 0.034450s, Solving time = 0.005554s, Total time = 0.040003s
6 : Statistics :: Grounding time = 0.035896s, Solving time = 0.006348s, Total time = 0.042244s
7 : Statistics :: Grounding time = 0.037761s, Solving time = 0.007226s, Total time = 0.044987s
8 : Statistics :: Grounding time = 0.036766s, Solving time = 0.008782s, Total time = 0.045548s
9 : Statistics :: Grounding time = 0.038670s, Solving time = 0.010182s, Total time = 0.048852s
10 : Statistics :: Grounding time = 0.040147s, Solving time = 0.010094s, Total time = 0.050240s
11 : Statistics :: Grounding time = 0.039885s, Solving time = 0.012824s, Total time = 0.052708s
12 : Statistics :: Grounding time = 0.040489s, Solving time = 0.018179s, Total time = 0.058667s
13 : Statistics :: Grounding time = 0.039779s, Solving time = 0.027835s, Total time = 0.067614s
14 : Statistics :: Grounding time = 0.048009s, Solving time = 0.038321s, Total time = 0.086330s
15 : Statistics :: Grounding time = 0.041390s, Solving time = 0.064240s, Total time = 0.105630s
16 : Statistics :: Grounding time = 0.075353s, Solving time = 0.124099s, Total time = 0.199453s
17 : Statistics :: Grounding time = 0.080123s, Solving time = 0.177556s, Total time = 0.257679s
18 : Statistics :: Grounding time = 0.083052s, Solving time = 0.230522s, Total time = 0.313574s

[06-02-2021_15-09-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.824635s, Solving time = 0.762836s, Total time = 1.631337s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-09-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),11)
occurs(3,talos,release(manipulator_arm_1,(block,5)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-09-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Instantiated.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building started.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Program building completed.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding base program parts.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.015144s.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving base program parts.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.002081s.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving started.

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-09-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.641525s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.230462s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.068985s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.017629s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.079679s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.015897s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.071222s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.022614s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.072834s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.023078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.077374s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.023636s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.073860s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.020357s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.075652s.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.023360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-09-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076414s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.035889s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.077014s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.028190s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.077363s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.031008s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.076468s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.040456s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.078057s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.059282s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.081444s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.106040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083274s.

[06-02-2021_15-09-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.166931s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.083182s.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.159012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.084931s.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.184680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Grounding completed in 0.086531s.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving started.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Model found:
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Solving completed in 0.256880s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental solving completed in 3.558693s because STOP_CON_REACHED.

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.980956s, Solving time = 1.447482s, Total time = 3.558693s
Final Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-09-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #17 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.641525s, Solving time = 0.230462s, Total time = 0.871987s
2 : Statistics :: Grounding time = 0.068985s, Solving time = 0.017629s, Total time = 0.086614s
3 : Statistics :: Grounding time = 0.079679s, Solving time = 0.015897s, Total time = 0.095577s
4 : Statistics :: Grounding time = 0.071222s, Solving time = 0.022614s, Total time = 0.093837s
5 : Statistics :: Grounding time = 0.072834s, Solving time = 0.023078s, Total time = 0.095912s
6 : Statistics :: Grounding time = 0.077374s, Solving time = 0.023636s, Total time = 0.101010s
7 : Statistics :: Grounding time = 0.073860s, Solving time = 0.020357s, Total time = 0.094217s
8 : Statistics :: Grounding time = 0.075652s, Solving time = 0.023360s, Total time = 0.099012s
9 : Statistics :: Grounding time = 0.076414s, Solving time = 0.035889s, Total time = 0.112302s
10 : Statistics :: Grounding time = 0.077014s, Solving time = 0.028190s, Total time = 0.105205s
11 : Statistics :: Grounding time = 0.077363s, Solving time = 0.031008s, Total time = 0.108372s
12 : Statistics :: Grounding time = 0.076468s, Solving time = 0.040456s, Total time = 0.116923s
13 : Statistics :: Grounding time = 0.078057s, Solving time = 0.059282s, Total time = 0.137339s
14 : Statistics :: Grounding time = 0.081444s, Solving time = 0.106040s, Total time = 0.187485s
15 : Statistics :: Grounding time = 0.083274s, Solving time = 0.166931s, Total time = 0.250205s
16 : Statistics :: Grounding time = 0.083182s, Solving time = 0.159012s, Total time = 0.242194s
17 : Statistics :: Grounding time = 0.084931s, Solving time = 0.184680s, Total time = 0.269611s
18 : Statistics :: Grounding time = 0.086531s, Solving time = 0.256880s, Total time = 0.343411s

[06-02-2021_15-09-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.980956s, Solving time = 1.447482s, Total time = 3.558693s
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-09-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),24)
occurs(2,talos,release(manipulator_arm_2,(block,3)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),27)
occurs(2,talos,release(manipulator_arm_1,(block,5)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-09-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-09-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Instantiated.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building started.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Program building completed.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding base program parts.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.017168s.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving base program parts.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.003897s.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving started.

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-09-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 4.393926s.

[06-02-2021_15-10-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.971689s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.347124s.

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.047979s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-10-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.373485s.

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.050324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.390756s.

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.048687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-10-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.375617s.

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.047889s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.381006s.

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.059012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-10-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.389125s.

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.072670s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.391120s.

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.057871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-10-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.401493s.

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.064531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.406545s.

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.084594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-10-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.421146s.

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.123488s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.430175s.

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.162385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-10-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.427724s.

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.171414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.430628s.

[06-02-2021_15-10-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.255750s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.431745s.

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.269402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-10-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-10-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.453328s.

[06-02-2021_15-10-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.374312s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-10-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-10-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.459639s.

[06-02-2021_15-10-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.587037s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-10-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.458176s.

[06-02-2021_15-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.642662s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-10-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.471349s.

[06-02-2021_15-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.486313s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-10-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-10-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.486282s.

[06-02-2021_15-10-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 0.708451s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-10-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-10-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.488899s.

[06-02-2021_15-10-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 1.018939s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-10-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.498978s.

[06-02-2021_15-10-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.028620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-10-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-10-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Grounding completed in 0.513456s.

[06-02-2021_15-10-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Model found:
Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Solving completed in 2.337403s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental solving completed in 24.981777s because STOP_CON_REACHED.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.838892s, Solving time = 10.675318s, Total time = 24.981777s
Final Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #18 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.393926s, Solving time = 0.971689s, Total time = 5.365616s
2 : Statistics :: Grounding time = 0.347124s, Solving time = 0.047979s, Total time = 0.395103s
3 : Statistics :: Grounding time = 0.373485s, Solving time = 0.050324s, Total time = 0.423809s
4 : Statistics :: Grounding time = 0.390756s, Solving time = 0.048687s, Total time = 0.439444s
5 : Statistics :: Grounding time = 0.375617s, Solving time = 0.047889s, Total time = 0.423506s
6 : Statistics :: Grounding time = 0.381006s, Solving time = 0.059012s, Total time = 0.440018s
7 : Statistics :: Grounding time = 0.389125s, Solving time = 0.072670s, Total time = 0.461795s
8 : Statistics :: Grounding time = 0.391120s, Solving time = 0.057871s, Total time = 0.448991s
9 : Statistics :: Grounding time = 0.401493s, Solving time = 0.064531s, Total time = 0.466024s
10 : Statistics :: Grounding time = 0.406545s, Solving time = 0.084594s, Total time = 0.491139s
11 : Statistics :: Grounding time = 0.421146s, Solving time = 0.123488s, Total time = 0.544634s
12 : Statistics :: Grounding time = 0.430175s, Solving time = 0.162385s, Total time = 0.592560s
13 : Statistics :: Grounding time = 0.427724s, Solving time = 0.171414s, Total time = 0.599138s
14 : Statistics :: Grounding time = 0.430628s, Solving time = 0.255750s, Total time = 0.686377s
15 : Statistics :: Grounding time = 0.431745s, Solving time = 0.269402s, Total time = 0.701147s
16 : Statistics :: Grounding time = 0.453328s, Solving time = 0.374312s, Total time = 0.827640s
17 : Statistics :: Grounding time = 0.459639s, Solving time = 0.587037s, Total time = 1.046676s
18 : Statistics :: Grounding time = 0.458176s, Solving time = 0.642662s, Total time = 1.100838s
19 : Statistics :: Grounding time = 0.471349s, Solving time = 0.486313s, Total time = 0.957662s
20 : Statistics :: Grounding time = 0.486282s, Solving time = 0.708451s, Total time = 1.194733s
21 : Statistics :: Grounding time = 0.488899s, Solving time = 1.018939s, Total time = 1.507838s
22 : Statistics :: Grounding time = 0.498978s, Solving time = 2.028620s, Total time = 2.527598s
23 : Statistics :: Grounding time = 0.513456s, Solving time = 2.337403s, Total time = 2.850859s

[06-02-2021_15-10-23] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.838892s, Solving time = 10.675318s, Total time = 24.981777s
Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-23] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_1,extended),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-10-23] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.631337s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.558693s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    24.981777s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-10-23] INFO :: Experiment >> 

      ================================================      
            Experimental run 4 : Time 30.665911s            
      ================================================      

[06-02-2021_15-10-23] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-10-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-10-23] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-23] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Instantiated.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Program building completed.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding base program parts.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.013809s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving base program parts.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.001972s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038848s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005678s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.030671s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.003664s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.030383s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.004436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.033901s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.034236s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.005680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.036216s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.006619s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038217s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.007548s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.036777s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.008517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038849s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.008934s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.039511s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.010365s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.038288s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.013111s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.041038s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.018821s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.040796s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.027327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.042113s.

[06-02-2021_15-10-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.037732s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.041267s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.068011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.082091s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.125469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.080891s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.181555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Grounding completed in 0.083585s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Solving completed in 0.054812s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental solving completed in 1.459279s because STOP_CON_REACHED.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.821487s, Solving time = 0.595530s, Total time = 1.459279s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #19 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038848s, Solving time = 0.005678s, Total time = 0.044525s
2 : Statistics :: Grounding time = 0.030671s, Solving time = 0.003664s, Total time = 0.034335s
3 : Statistics :: Grounding time = 0.030383s, Solving time = 0.004436s, Total time = 0.034819s
4 : Statistics :: Grounding time = 0.033901s, Solving time = 0.005280s, Total time = 0.039181s
5 : Statistics :: Grounding time = 0.034236s, Solving time = 0.005680s, Total time = 0.039916s
6 : Statistics :: Grounding time = 0.036216s, Solving time = 0.006619s, Total time = 0.042835s
7 : Statistics :: Grounding time = 0.038217s, Solving time = 0.007548s, Total time = 0.045764s
8 : Statistics :: Grounding time = 0.036777s, Solving time = 0.008517s, Total time = 0.045294s
9 : Statistics :: Grounding time = 0.038849s, Solving time = 0.008934s, Total time = 0.047784s
10 : Statistics :: Grounding time = 0.039511s, Solving time = 0.010365s, Total time = 0.049876s
11 : Statistics :: Grounding time = 0.038288s, Solving time = 0.013111s, Total time = 0.051399s
12 : Statistics :: Grounding time = 0.041038s, Solving time = 0.018821s, Total time = 0.059859s
13 : Statistics :: Grounding time = 0.040796s, Solving time = 0.027327s, Total time = 0.068123s
14 : Statistics :: Grounding time = 0.042113s, Solving time = 0.037732s, Total time = 0.079845s
15 : Statistics :: Grounding time = 0.041267s, Solving time = 0.068011s, Total time = 0.109278s
16 : Statistics :: Grounding time = 0.082091s, Solving time = 0.125469s, Total time = 0.207560s
17 : Statistics :: Grounding time = 0.080891s, Solving time = 0.181555s, Total time = 0.262446s
18 : Statistics :: Grounding time = 0.083585s, Solving time = 0.054812s, Total time = 0.138397s

[06-02-2021_15-10-24] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.821487s, Solving time = 0.595530s, Total time = 1.459279s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-10-24] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,release(manipulator_arm_1,(block,3)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-10-24] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-24] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Instantiated.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Program building completed.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding base program parts.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.014666s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving base program parts.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.003323s.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving started.

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-10-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.640125s.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.231938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.068691s.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.068667s.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.016249s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-10-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.080536s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.023031s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.072547s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022735s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078080s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.022492s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.073938s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.019717s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.072054s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.030028s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.075893s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.033129s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.077529s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.055393s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.080884s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.047123s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.078661s.

[06-02-2021_15-10-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.058898s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.080986s.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.093577s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089884s.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.119597s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.083392s.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.149531s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.084249s.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.156190s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-10-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.092645s.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.161244s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Grounding completed in 0.089847s.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving started.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Solving completed in 0.195398s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental solving completed in 3.597457s because STOP_CON_REACHED.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.003274s, Solving time = 1.456300s, Total time = 3.597457s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #20 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.640125s, Solving time = 0.231938s, Total time = 0.872064s
2 : Statistics :: Grounding time = 0.068691s, Solving time = 0.016709s, Total time = 0.085399s
3 : Statistics :: Grounding time = 0.068667s, Solving time = 0.016249s, Total time = 0.084916s
4 : Statistics :: Grounding time = 0.080536s, Solving time = 0.023031s, Total time = 0.103567s
5 : Statistics :: Grounding time = 0.072547s, Solving time = 0.022735s, Total time = 0.095282s
6 : Statistics :: Grounding time = 0.078080s, Solving time = 0.022492s, Total time = 0.100572s
7 : Statistics :: Grounding time = 0.073938s, Solving time = 0.019717s, Total time = 0.093655s
8 : Statistics :: Grounding time = 0.072054s, Solving time = 0.030028s, Total time = 0.102082s
9 : Statistics :: Grounding time = 0.075893s, Solving time = 0.033129s, Total time = 0.109023s
10 : Statistics :: Grounding time = 0.077529s, Solving time = 0.055393s, Total time = 0.132922s
11 : Statistics :: Grounding time = 0.080884s, Solving time = 0.047123s, Total time = 0.128007s
12 : Statistics :: Grounding time = 0.078661s, Solving time = 0.058898s, Total time = 0.137558s
13 : Statistics :: Grounding time = 0.080986s, Solving time = 0.093577s, Total time = 0.174563s
14 : Statistics :: Grounding time = 0.089884s, Solving time = 0.119597s, Total time = 0.209481s
15 : Statistics :: Grounding time = 0.083392s, Solving time = 0.149531s, Total time = 0.232923s
16 : Statistics :: Grounding time = 0.084249s, Solving time = 0.156190s, Total time = 0.240439s
17 : Statistics :: Grounding time = 0.092645s, Solving time = 0.161244s, Total time = 0.253888s
18 : Statistics :: Grounding time = 0.089847s, Solving time = 0.195398s, Total time = 0.285244s

[06-02-2021_15-10-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.003274s, Solving time = 1.456300s, Total time = 3.597457s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_2,extended),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_1,(block,3)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-10-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Instantiated.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building started.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Program building completed.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding base program parts.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.017420s.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving base program parts.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.003920s.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving started.

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-10-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-10-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 4.359702s.

[06-02-2021_15-10-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.953192s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-10-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.347099s.

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.046526s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.353957s.

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.049627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-10-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.375643s.

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.048971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.375906s.

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.068611s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-10-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.377705s.

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.082975s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.382016s.

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.073586s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-10-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.364974s.

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.067656s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.377772s.

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.088315s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.384000s.

[06-02-2021_15-10-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.070028s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.398677s.

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.087079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.409425s.

[06-02-2021_15-10-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.134577s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.444700s.

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.183114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-10-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.423052s.

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.236620s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.427169s.

[06-02-2021_15-10-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.302564s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.446965s.

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.351374s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.450253s.

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.345874s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-10-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.457171s.

[06-02-2021_15-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.501891s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-10-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.496205s.

[06-02-2021_15-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.593287s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-10-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.472063s.

[06-02-2021_15-10-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 0.682023s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.496602s.

[06-02-2021_15-10-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.478530s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.507782s.

[06-02-2021_15-10-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 2.033483s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-10-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Grounding completed in 0.507670s.

[06-02-2021_15-10-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Model found:
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Solving completed in 1.965065s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental solving completed in 24.553523s because STOP_CON_REACHED.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.653927s, Solving time = 10.448889s, Total time = 24.553523s
Final Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #21 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.359702s, Solving time = 0.953192s, Total time = 5.312894s
2 : Statistics :: Grounding time = 0.347099s, Solving time = 0.046526s, Total time = 0.393624s
3 : Statistics :: Grounding time = 0.353957s, Solving time = 0.049627s, Total time = 0.403584s
4 : Statistics :: Grounding time = 0.375643s, Solving time = 0.048971s, Total time = 0.424614s
5 : Statistics :: Grounding time = 0.375906s, Solving time = 0.068611s, Total time = 0.444517s
6 : Statistics :: Grounding time = 0.377705s, Solving time = 0.082975s, Total time = 0.460680s
7 : Statistics :: Grounding time = 0.382016s, Solving time = 0.073586s, Total time = 0.455603s
8 : Statistics :: Grounding time = 0.364974s, Solving time = 0.067656s, Total time = 0.432630s
9 : Statistics :: Grounding time = 0.377772s, Solving time = 0.088315s, Total time = 0.466086s
10 : Statistics :: Grounding time = 0.384000s, Solving time = 0.070028s, Total time = 0.454028s
11 : Statistics :: Grounding time = 0.398677s, Solving time = 0.087079s, Total time = 0.485756s
12 : Statistics :: Grounding time = 0.409425s, Solving time = 0.134577s, Total time = 0.544002s
13 : Statistics :: Grounding time = 0.444700s, Solving time = 0.183114s, Total time = 0.627814s
14 : Statistics :: Grounding time = 0.423052s, Solving time = 0.236620s, Total time = 0.659672s
15 : Statistics :: Grounding time = 0.427169s, Solving time = 0.302564s, Total time = 0.729733s
16 : Statistics :: Grounding time = 0.446965s, Solving time = 0.351374s, Total time = 0.798338s
17 : Statistics :: Grounding time = 0.450253s, Solving time = 0.345874s, Total time = 0.796127s
18 : Statistics :: Grounding time = 0.457171s, Solving time = 0.501891s, Total time = 0.959063s
19 : Statistics :: Grounding time = 0.496205s, Solving time = 0.593287s, Total time = 1.089492s
20 : Statistics :: Grounding time = 0.472063s, Solving time = 0.682023s, Total time = 1.154086s
21 : Statistics :: Grounding time = 0.496602s, Solving time = 1.478530s, Total time = 1.975132s
22 : Statistics :: Grounding time = 0.507782s, Solving time = 2.033483s, Total time = 2.541266s
23 : Statistics :: Grounding time = 0.507670s, Solving time = 1.965065s, Total time = 2.472736s

[06-02-2021_15-10-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.653927s, Solving time = 10.448889s, Total time = 24.553523s
Model :: Total atoms = 12826, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-10-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_1,(block,3)),46)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),47)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),48)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-10-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.459279s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.597457s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    24.553523s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-10-53] INFO :: Experiment >> 

      ================================================      
            Experimental run 5 : Time 30.092448s            
      ================================================      

[06-02-2021_15-10-53] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-10-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-10-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Instantiated.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Program building completed.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding base program parts.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.013683s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving base program parts.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.002128s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039432s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005906s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031262s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.002984s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.031233s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.004489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034086s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005234s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.034262s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.005722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.036842s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.006407s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.037720s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.007258s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040367s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.009009s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039153s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.009888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040172s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.011026s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.039683s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.012479s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040042s.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.017986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-10-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.040374s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.026432s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041390s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.037667s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.041192s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.056841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.077598s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.131598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.080795s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.183776s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Grounding completed in 0.089778s.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving started.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Solving completed in 0.138864s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental solving completed in 1.547236s because STOP_CON_REACHED.

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829063s, Solving time = 0.675694s, Total time = 1.547236s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #22 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039432s, Solving time = 0.005906s, Total time = 0.045338s
2 : Statistics :: Grounding time = 0.031262s, Solving time = 0.002984s, Total time = 0.034246s
3 : Statistics :: Grounding time = 0.031233s, Solving time = 0.004489s, Total time = 0.035722s
4 : Statistics :: Grounding time = 0.034086s, Solving time = 0.005234s, Total time = 0.039319s
5 : Statistics :: Grounding time = 0.034262s, Solving time = 0.005722s, Total time = 0.039983s
6 : Statistics :: Grounding time = 0.036842s, Solving time = 0.006407s, Total time = 0.043249s
7 : Statistics :: Grounding time = 0.037720s, Solving time = 0.007258s, Total time = 0.044978s
8 : Statistics :: Grounding time = 0.040367s, Solving time = 0.009009s, Total time = 0.049376s
9 : Statistics :: Grounding time = 0.039153s, Solving time = 0.009888s, Total time = 0.049042s
10 : Statistics :: Grounding time = 0.040172s, Solving time = 0.011026s, Total time = 0.051198s
11 : Statistics :: Grounding time = 0.039683s, Solving time = 0.012479s, Total time = 0.052162s
12 : Statistics :: Grounding time = 0.040042s, Solving time = 0.017986s, Total time = 0.058028s
13 : Statistics :: Grounding time = 0.040374s, Solving time = 0.026432s, Total time = 0.066807s
14 : Statistics :: Grounding time = 0.041390s, Solving time = 0.037667s, Total time = 0.079057s
15 : Statistics :: Grounding time = 0.041192s, Solving time = 0.056841s, Total time = 0.098033s
16 : Statistics :: Grounding time = 0.077598s, Solving time = 0.131598s, Total time = 0.209196s
17 : Statistics :: Grounding time = 0.080795s, Solving time = 0.183776s, Total time = 0.264571s
18 : Statistics :: Grounding time = 0.089778s, Solving time = 0.138864s, Total time = 0.228642s

[06-02-2021_15-10-54] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.829063s, Solving time = 0.675694s, Total time = 1.547236s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-10-54] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-10-54] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-54] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Instantiated.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building started.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Program building completed.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding base program parts.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.014799s.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving base program parts.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.001900s.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving started.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.635007s.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.228830s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.070131s.

[06-02-2021_15-10-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.017095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.068435s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.015382s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.072668s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.022289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.078400s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.024447s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076380s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.023009s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.095034s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.019716s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.075312s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.029117s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076161s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.039139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.085599s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.031502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.076298s.

[06-02-2021_15-10-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.049957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.078856s.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.074047s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.081542s.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.099469s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.082999s.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.170437s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.083386s.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.183627s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-10-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.086180s.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.201476s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.086594s.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.195289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Grounding completed in 0.087266s.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving started.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Model found:
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Solving completed in 0.243392s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental solving completed in 3.812491s because STOP_CON_REACHED.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.011048s, Solving time = 1.670124s, Total time = 3.812491s
Final Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #23 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635007s, Solving time = 0.228830s, Total time = 0.863837s
2 : Statistics :: Grounding time = 0.070131s, Solving time = 0.017095s, Total time = 0.087226s
3 : Statistics :: Grounding time = 0.068435s, Solving time = 0.015382s, Total time = 0.083816s
4 : Statistics :: Grounding time = 0.072668s, Solving time = 0.022289s, Total time = 0.094957s
5 : Statistics :: Grounding time = 0.078400s, Solving time = 0.024447s, Total time = 0.102847s
6 : Statistics :: Grounding time = 0.076380s, Solving time = 0.023009s, Total time = 0.099389s
7 : Statistics :: Grounding time = 0.095034s, Solving time = 0.019716s, Total time = 0.114750s
8 : Statistics :: Grounding time = 0.075312s, Solving time = 0.029117s, Total time = 0.104430s
9 : Statistics :: Grounding time = 0.076161s, Solving time = 0.039139s, Total time = 0.115300s
10 : Statistics :: Grounding time = 0.085599s, Solving time = 0.031502s, Total time = 0.117101s
11 : Statistics :: Grounding time = 0.076298s, Solving time = 0.049957s, Total time = 0.126255s
12 : Statistics :: Grounding time = 0.078856s, Solving time = 0.074047s, Total time = 0.152904s
13 : Statistics :: Grounding time = 0.081542s, Solving time = 0.099469s, Total time = 0.181011s
14 : Statistics :: Grounding time = 0.082999s, Solving time = 0.170437s, Total time = 0.253437s
15 : Statistics :: Grounding time = 0.083386s, Solving time = 0.183627s, Total time = 0.267013s
16 : Statistics :: Grounding time = 0.086180s, Solving time = 0.201476s, Total time = 0.287656s
17 : Statistics :: Grounding time = 0.086594s, Solving time = 0.195289s, Total time = 0.281883s
18 : Statistics :: Grounding time = 0.087266s, Solving time = 0.243392s, Total time = 0.330659s

[06-02-2021_15-10-58] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.011048s, Solving time = 1.670124s, Total time = 3.812491s
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-10-58] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),24)
occurs(2,talos,release(manipulator_arm_2,(block,3)),25)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),26)
occurs(2,talos,release(manipulator_arm_1,(block,5)),27)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-10-58] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-10-58] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Instantiated.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-10-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building started.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Program building completed.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding base program parts.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.016305s.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving base program parts.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.002850s.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving started.

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-10-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-11-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 4.330615s.

[06-02-2021_15-11-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.964804s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.348690s.

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.044950s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-11-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.363902s.

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.050567s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.366138s.

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.106500s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-11-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.369599s.

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.059782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.359986s.

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.085291s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.365881s.

[06-02-2021_15-11-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.108422s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.369789s.

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.104261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.380168s.

[06-02-2021_15-11-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.091708s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.381327s.

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.144155s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-11-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.398196s.

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.101905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.406711s.

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.164700s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-11-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.420129s.

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.267675s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.422686s.

[06-02-2021_15-11-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.275759s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.427730s.

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.337871s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-11-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.441776s.

[06-02-2021_15-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.502641s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-11-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.453007s.

[06-02-2021_15-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.521594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-11-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.454354s.

[06-02-2021_15-11-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.686444s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-11-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-11-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.471183s.

[06-02-2021_15-11-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 0.623706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.490960s.

[06-02-2021_15-11-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 1.582629s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.492974s.

[06-02-2021_15-11-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 1.843019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-11-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.501331s.

[06-02-2021_15-11-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 2.533040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-11-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Grounding completed in 0.504873s.

[06-02-2021_15-11-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Model found:
Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Solving completed in 2.829984s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental solving completed in 28.069967s because STOP_CON_REACHED.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.538310s, Solving time = 14.034255s, Total time = 28.069967s
Final Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #24 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.330615s, Solving time = 0.964804s, Total time = 5.295419s
2 : Statistics :: Grounding time = 0.348690s, Solving time = 0.044950s, Total time = 0.393640s
3 : Statistics :: Grounding time = 0.363902s, Solving time = 0.050567s, Total time = 0.414468s
4 : Statistics :: Grounding time = 0.366138s, Solving time = 0.106500s, Total time = 0.472637s
5 : Statistics :: Grounding time = 0.369599s, Solving time = 0.059782s, Total time = 0.429381s
6 : Statistics :: Grounding time = 0.359986s, Solving time = 0.085291s, Total time = 0.445277s
7 : Statistics :: Grounding time = 0.365881s, Solving time = 0.108422s, Total time = 0.474303s
8 : Statistics :: Grounding time = 0.369789s, Solving time = 0.104261s, Total time = 0.474050s
9 : Statistics :: Grounding time = 0.380168s, Solving time = 0.091708s, Total time = 0.471875s
10 : Statistics :: Grounding time = 0.381327s, Solving time = 0.144155s, Total time = 0.525482s
11 : Statistics :: Grounding time = 0.398196s, Solving time = 0.101905s, Total time = 0.500101s
12 : Statistics :: Grounding time = 0.406711s, Solving time = 0.164700s, Total time = 0.571411s
13 : Statistics :: Grounding time = 0.420129s, Solving time = 0.267675s, Total time = 0.687804s
14 : Statistics :: Grounding time = 0.422686s, Solving time = 0.275759s, Total time = 0.698445s
15 : Statistics :: Grounding time = 0.427730s, Solving time = 0.337871s, Total time = 0.765601s
16 : Statistics :: Grounding time = 0.441776s, Solving time = 0.502641s, Total time = 0.944416s
17 : Statistics :: Grounding time = 0.453007s, Solving time = 0.521594s, Total time = 0.974601s
18 : Statistics :: Grounding time = 0.454354s, Solving time = 0.686444s, Total time = 1.140799s
19 : Statistics :: Grounding time = 0.471183s, Solving time = 0.623706s, Total time = 1.094889s
20 : Statistics :: Grounding time = 0.490960s, Solving time = 1.582629s, Total time = 2.073589s
21 : Statistics :: Grounding time = 0.492974s, Solving time = 1.843019s, Total time = 2.335993s
22 : Statistics :: Grounding time = 0.501331s, Solving time = 2.533040s, Total time = 3.034370s
23 : Statistics :: Grounding time = 0.504873s, Solving time = 2.829984s, Total time = 3.334857s

[06-02-2021_15-11-27] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.538310s, Solving time = 14.034255s, Total time = 28.069967s
Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-11-27] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.547236s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.812491s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    28.069967s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-11-27] INFO :: Experiment >> 

      ================================================      
            Experimental run 6 : Time 33.929777s            
      ================================================      

[06-02-2021_15-11-27] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-11-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-11-27] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-27] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Instantiated.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Program building completed.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding base program parts.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.013680s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving base program parts.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.001713s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039519s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005174s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031193s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.002859s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.031495s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.003970s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.034093s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.034304s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.005109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.036836s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006033s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.037833s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.006452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041770s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.008056s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.038278s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.010721s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040190s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.011670s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.039438s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.014392s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041444s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.017923s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.040551s.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.026385s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-11-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.042885s.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.041763s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.041916s.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.069179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.079235s.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.114925s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.081696s.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.185799s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Grounding completed in 0.082899s.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Solving completed in 0.145501s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental solving completed in 1.555071s because STOP_CON_REACHED.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829255s, Solving time = 0.683309s, Total time = 1.555071s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #25 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039519s, Solving time = 0.005174s, Total time = 0.044693s
2 : Statistics :: Grounding time = 0.031193s, Solving time = 0.002859s, Total time = 0.034052s
3 : Statistics :: Grounding time = 0.031495s, Solving time = 0.003970s, Total time = 0.035465s
4 : Statistics :: Grounding time = 0.034093s, Solving time = 0.005687s, Total time = 0.039780s
5 : Statistics :: Grounding time = 0.034304s, Solving time = 0.005109s, Total time = 0.039413s
6 : Statistics :: Grounding time = 0.036836s, Solving time = 0.006033s, Total time = 0.042870s
7 : Statistics :: Grounding time = 0.037833s, Solving time = 0.006452s, Total time = 0.044284s
8 : Statistics :: Grounding time = 0.041770s, Solving time = 0.008056s, Total time = 0.049825s
9 : Statistics :: Grounding time = 0.038278s, Solving time = 0.010721s, Total time = 0.048999s
10 : Statistics :: Grounding time = 0.040190s, Solving time = 0.011670s, Total time = 0.051860s
11 : Statistics :: Grounding time = 0.039438s, Solving time = 0.014392s, Total time = 0.053829s
12 : Statistics :: Grounding time = 0.041444s, Solving time = 0.017923s, Total time = 0.059367s
13 : Statistics :: Grounding time = 0.040551s, Solving time = 0.026385s, Total time = 0.066936s
14 : Statistics :: Grounding time = 0.042885s, Solving time = 0.041763s, Total time = 0.084648s
15 : Statistics :: Grounding time = 0.041916s, Solving time = 0.069179s, Total time = 0.111095s
16 : Statistics :: Grounding time = 0.079235s, Solving time = 0.114925s, Total time = 0.194159s
17 : Statistics :: Grounding time = 0.081696s, Solving time = 0.185799s, Total time = 0.267495s
18 : Statistics :: Grounding time = 0.082899s, Solving time = 0.145501s, Total time = 0.228400s

[06-02-2021_15-11-28] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.829255s, Solving time = 0.683309s, Total time = 1.555071s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-11-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-11-28] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-28] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Instantiated.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building started.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Program building completed.

[06-02-2021_15-11-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding base program parts.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.015522s.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving base program parts.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.002252s.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving started.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.655503s.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.228024s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.070659s.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.017357s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-11-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.068215s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.016282s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.071387s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.021018s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.070506s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.022756s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.073491s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.033127s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.074337s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.028215s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.074032s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.035235s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.073680s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.047625s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.076625s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.040015s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.079477s.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.043555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.078857s.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.075080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.080466s.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.115844s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.090547s.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.120222s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.084432s.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.163013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.084605s.

[06-02-2021_15-11-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.155162s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.085538s.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.174020s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Grounding completed in 0.092879s.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving started.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Solving completed in 0.215215s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental solving completed in 3.690670s because STOP_CON_REACHED.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.000758s, Solving time = 1.554014s, Total time = 3.690670s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #26 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.655503s, Solving time = 0.228024s, Total time = 0.883527s
2 : Statistics :: Grounding time = 0.070659s, Solving time = 0.017357s, Total time = 0.088017s
3 : Statistics :: Grounding time = 0.068215s, Solving time = 0.016282s, Total time = 0.084496s
4 : Statistics :: Grounding time = 0.071387s, Solving time = 0.021018s, Total time = 0.092405s
5 : Statistics :: Grounding time = 0.070506s, Solving time = 0.022756s, Total time = 0.093262s
6 : Statistics :: Grounding time = 0.073491s, Solving time = 0.033127s, Total time = 0.106618s
7 : Statistics :: Grounding time = 0.074337s, Solving time = 0.028215s, Total time = 0.102553s
8 : Statistics :: Grounding time = 0.074032s, Solving time = 0.035235s, Total time = 0.109267s
9 : Statistics :: Grounding time = 0.073680s, Solving time = 0.047625s, Total time = 0.121305s
10 : Statistics :: Grounding time = 0.076625s, Solving time = 0.040015s, Total time = 0.116639s
11 : Statistics :: Grounding time = 0.079477s, Solving time = 0.043555s, Total time = 0.123032s
12 : Statistics :: Grounding time = 0.078857s, Solving time = 0.075080s, Total time = 0.153937s
13 : Statistics :: Grounding time = 0.080466s, Solving time = 0.115844s, Total time = 0.196309s
14 : Statistics :: Grounding time = 0.090547s, Solving time = 0.120222s, Total time = 0.210769s
15 : Statistics :: Grounding time = 0.084432s, Solving time = 0.163013s, Total time = 0.247445s
16 : Statistics :: Grounding time = 0.084605s, Solving time = 0.155162s, Total time = 0.239767s
17 : Statistics :: Grounding time = 0.085538s, Solving time = 0.174020s, Total time = 0.259558s
18 : Statistics :: Grounding time = 0.092879s, Solving time = 0.215215s, Total time = 0.308094s

[06-02-2021_15-11-32] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.000758s, Solving time = 1.554014s, Total time = 3.690670s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-11-32] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_2,retracted),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-11-32] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-32] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Instantiated.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building started.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Program building completed.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding base program parts.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.016977s.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving base program parts.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.002929s.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving started.

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-11-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-11-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 4.334043s.

[06-02-2021_15-11-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.963244s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.354530s.

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.044695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.358235s.

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.049501s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-11-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.368228s.

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.050292s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.379182s.

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.056687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-11-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.380473s.

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.055294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.388115s.

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.058412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-11-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.403435s.

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.118522s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.400505s.

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.106794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-11-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.400826s.

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.098860s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.402903s.

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.077475s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-11-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.402174s.

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.132892s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.422457s.

[06-02-2021_15-11-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.172264s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.424622s.

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.285306s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-11-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.435423s.

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.183929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.440762s.

[06-02-2021_15-11-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.405223s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-11-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-11-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.455570s.

[06-02-2021_15-11-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.480454s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.463470s.

[06-02-2021_15-11-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.508245s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.463977s.

[06-02-2021_15-11-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.546134s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.486712s.

[06-02-2021_15-11-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 0.721428s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-11-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-11-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Grounding completed in 0.493164s.

[06-02-2021_15-11-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Model found:
Model :: Total atoms = 12462, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Solving completed in 1.032687s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental solving completed in 19.234807s because STOP_CON_REACHED.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.675782s, Solving time = 6.151268s, Total time = 19.234807s
Final Model :: Total atoms = 12462, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #27 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.334043s, Solving time = 0.963244s, Total time = 5.297286s
2 : Statistics :: Grounding time = 0.354530s, Solving time = 0.044695s, Total time = 0.399226s
3 : Statistics :: Grounding time = 0.358235s, Solving time = 0.049501s, Total time = 0.407736s
4 : Statistics :: Grounding time = 0.368228s, Solving time = 0.050292s, Total time = 0.418519s
5 : Statistics :: Grounding time = 0.379182s, Solving time = 0.056687s, Total time = 0.435869s
6 : Statistics :: Grounding time = 0.380473s, Solving time = 0.055294s, Total time = 0.435767s
7 : Statistics :: Grounding time = 0.388115s, Solving time = 0.058412s, Total time = 0.446527s
8 : Statistics :: Grounding time = 0.403435s, Solving time = 0.118522s, Total time = 0.521957s
9 : Statistics :: Grounding time = 0.400505s, Solving time = 0.106794s, Total time = 0.507299s
10 : Statistics :: Grounding time = 0.400826s, Solving time = 0.098860s, Total time = 0.499685s
11 : Statistics :: Grounding time = 0.402903s, Solving time = 0.077475s, Total time = 0.480378s
12 : Statistics :: Grounding time = 0.402174s, Solving time = 0.132892s, Total time = 0.535066s
13 : Statistics :: Grounding time = 0.422457s, Solving time = 0.172264s, Total time = 0.594721s
14 : Statistics :: Grounding time = 0.424622s, Solving time = 0.285306s, Total time = 0.709928s
15 : Statistics :: Grounding time = 0.435423s, Solving time = 0.183929s, Total time = 0.619352s
16 : Statistics :: Grounding time = 0.440762s, Solving time = 0.405223s, Total time = 0.845985s
17 : Statistics :: Grounding time = 0.455570s, Solving time = 0.480454s, Total time = 0.936024s
18 : Statistics :: Grounding time = 0.463470s, Solving time = 0.508245s, Total time = 0.971714s
19 : Statistics :: Grounding time = 0.463977s, Solving time = 0.546134s, Total time = 1.010111s
20 : Statistics :: Grounding time = 0.486712s, Solving time = 0.721428s, Total time = 1.208140s
21 : Statistics :: Grounding time = 0.493164s, Solving time = 1.032687s, Total time = 1.525851s

[06-02-2021_15-11-52] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.675782s, Solving time = 6.151268s, Total time = 19.234807s
Model :: Total atoms = 12462, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-11-52] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-11-52] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.555071s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.690670s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    19.234807s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-11-52] INFO :: Experiment >> 

      ================================================      
            Experimental run 7 : Time 24.971355s            
      ================================================      

[06-02-2021_15-11-52] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-11-52] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-52] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Instantiated.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Program building completed.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding base program parts.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.014787s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving base program parts.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.003130s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.039062s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031297s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.002848s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.031422s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.004322s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.034367s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.004863s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.034330s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005073s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.036672s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.005857s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037921s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.006529s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.037188s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.007265s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.038131s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.010957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.044963s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.010662s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.041927s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.013423s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040449s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.019010s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.039703s.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.025539s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-11-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.041824s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.035137s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.040938s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.050951s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.076606s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.095029s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.080487s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.169076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Grounding completed in 0.082786s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Solving completed in 0.149618s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental solving completed in 1.491249s because STOP_CON_REACHED.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.824862s, Solving time = 0.624905s, Total time = 1.491249s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #28 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039062s, Solving time = 0.005616s, Total time = 0.044678s
2 : Statistics :: Grounding time = 0.031297s, Solving time = 0.002848s, Total time = 0.034144s
3 : Statistics :: Grounding time = 0.031422s, Solving time = 0.004322s, Total time = 0.035744s
4 : Statistics :: Grounding time = 0.034367s, Solving time = 0.004863s, Total time = 0.039231s
5 : Statistics :: Grounding time = 0.034330s, Solving time = 0.005073s, Total time = 0.039403s
6 : Statistics :: Grounding time = 0.036672s, Solving time = 0.005857s, Total time = 0.042529s
7 : Statistics :: Grounding time = 0.037921s, Solving time = 0.006529s, Total time = 0.044450s
8 : Statistics :: Grounding time = 0.037188s, Solving time = 0.007265s, Total time = 0.044453s
9 : Statistics :: Grounding time = 0.038131s, Solving time = 0.010957s, Total time = 0.049089s
10 : Statistics :: Grounding time = 0.044963s, Solving time = 0.010662s, Total time = 0.055625s
11 : Statistics :: Grounding time = 0.041927s, Solving time = 0.013423s, Total time = 0.055350s
12 : Statistics :: Grounding time = 0.040449s, Solving time = 0.019010s, Total time = 0.059458s
13 : Statistics :: Grounding time = 0.039703s, Solving time = 0.025539s, Total time = 0.065242s
14 : Statistics :: Grounding time = 0.041824s, Solving time = 0.035137s, Total time = 0.076962s
15 : Statistics :: Grounding time = 0.040938s, Solving time = 0.050951s, Total time = 0.091889s
16 : Statistics :: Grounding time = 0.076606s, Solving time = 0.095029s, Total time = 0.171635s
17 : Statistics :: Grounding time = 0.080487s, Solving time = 0.169076s, Total time = 0.249563s
18 : Statistics :: Grounding time = 0.082786s, Solving time = 0.149618s, Total time = 0.232404s

[06-02-2021_15-11-53] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.824862s, Solving time = 0.624905s, Total time = 1.491249s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-11-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-11-53] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-53] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Instantiated.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Program building completed.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding base program parts.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.014750s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving base program parts.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.002396s.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving started.

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-11-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.620303s.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.225255s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.072152s.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.017243s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.068145s.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.016130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-11-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.070780s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.022370s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.072325s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.022464s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.072320s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.034878s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.080256s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.021130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.074026s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.043208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.085959s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.036244s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.077457s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.030569s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.081559s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.051420s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.079011s.

[06-02-2021_15-11-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.054323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.089492s.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.090436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.081741s.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.148405s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.082702s.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.114316s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.083728s.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.126530s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.082972s.

[06-02-2021_15-11-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.156933s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Grounding completed in 0.091239s.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving started.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Solving completed in 0.157488s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental solving completed in 3.492617s because STOP_CON_REACHED.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.980918s, Solving time = 1.371738s, Total time = 3.492617s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #29 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.620303s, Solving time = 0.225255s, Total time = 0.845559s
2 : Statistics :: Grounding time = 0.072152s, Solving time = 0.017243s, Total time = 0.089396s
3 : Statistics :: Grounding time = 0.068145s, Solving time = 0.016130s, Total time = 0.084274s
4 : Statistics :: Grounding time = 0.070780s, Solving time = 0.022370s, Total time = 0.093150s
5 : Statistics :: Grounding time = 0.072325s, Solving time = 0.022464s, Total time = 0.094789s
6 : Statistics :: Grounding time = 0.072320s, Solving time = 0.034878s, Total time = 0.107198s
7 : Statistics :: Grounding time = 0.080256s, Solving time = 0.021130s, Total time = 0.101386s
8 : Statistics :: Grounding time = 0.074026s, Solving time = 0.043208s, Total time = 0.117233s
9 : Statistics :: Grounding time = 0.085959s, Solving time = 0.036244s, Total time = 0.122202s
10 : Statistics :: Grounding time = 0.077457s, Solving time = 0.030569s, Total time = 0.108026s
11 : Statistics :: Grounding time = 0.081559s, Solving time = 0.051420s, Total time = 0.132980s
12 : Statistics :: Grounding time = 0.079011s, Solving time = 0.054323s, Total time = 0.133334s
13 : Statistics :: Grounding time = 0.089492s, Solving time = 0.090436s, Total time = 0.179928s
14 : Statistics :: Grounding time = 0.081741s, Solving time = 0.148405s, Total time = 0.230146s
15 : Statistics :: Grounding time = 0.082702s, Solving time = 0.114316s, Total time = 0.197018s
16 : Statistics :: Grounding time = 0.083728s, Solving time = 0.126530s, Total time = 0.210258s
17 : Statistics :: Grounding time = 0.082972s, Solving time = 0.156933s, Total time = 0.239905s
18 : Statistics :: Grounding time = 0.091239s, Solving time = 0.157488s, Total time = 0.248727s

[06-02-2021_15-11-57] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.980918s, Solving time = 1.371738s, Total time = 3.492617s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-11-57] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-11-57] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-11-57] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Instantiated.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building started.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Program building completed.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding base program parts.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.016987s.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving base program parts.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.003579s.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving started.

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-11-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-12-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 4.418437s.

[06-02-2021_15-12-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.974945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.346955s.

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.045303s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.357176s.

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.053462s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-12-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.378239s.

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.053938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.369269s.

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.070672s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-12-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.395729s.

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.147200s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.377441s.

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.088683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-12-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.388180s.

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.204024s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.377366s.

[06-02-2021_15-12-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.197393s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.381942s.

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.068585s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.394480s.

[06-02-2021_15-12-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.150946s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.408756s.

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.302596s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-12-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.412708s.

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.283132s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.416987s.

[06-02-2021_15-12-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.175815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.424571s.

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.222815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-12-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.445195s.

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.293800s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.447789s.

[06-02-2021_15-12-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.312511s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-12-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-12-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.442050s.

[06-02-2021_15-12-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.760317s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-12-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.465502s.

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.172821s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.480584s.

[06-02-2021_15-12-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.549995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Grounding completed in 0.485209s.

[06-02-2021_15-12-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving started.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Model found:
Model :: Total atoms = 12466, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Solving completed in 0.898505s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental solving completed in 19.074565s because STOP_CON_REACHED.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.631552s, Solving time = 6.031036s, Total time = 19.074565s
Final Model :: Total atoms = 12466, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #30 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.418437s, Solving time = 0.974945s, Total time = 5.393382s
2 : Statistics :: Grounding time = 0.346955s, Solving time = 0.045303s, Total time = 0.392257s
3 : Statistics :: Grounding time = 0.357176s, Solving time = 0.053462s, Total time = 0.410638s
4 : Statistics :: Grounding time = 0.378239s, Solving time = 0.053938s, Total time = 0.432177s
5 : Statistics :: Grounding time = 0.369269s, Solving time = 0.070672s, Total time = 0.439940s
6 : Statistics :: Grounding time = 0.395729s, Solving time = 0.147200s, Total time = 0.542929s
7 : Statistics :: Grounding time = 0.377441s, Solving time = 0.088683s, Total time = 0.466124s
8 : Statistics :: Grounding time = 0.388180s, Solving time = 0.204024s, Total time = 0.592204s
9 : Statistics :: Grounding time = 0.377366s, Solving time = 0.197393s, Total time = 0.574760s
10 : Statistics :: Grounding time = 0.381942s, Solving time = 0.068585s, Total time = 0.450528s
11 : Statistics :: Grounding time = 0.394480s, Solving time = 0.150946s, Total time = 0.545426s
12 : Statistics :: Grounding time = 0.408756s, Solving time = 0.302596s, Total time = 0.711352s
13 : Statistics :: Grounding time = 0.412708s, Solving time = 0.283132s, Total time = 0.695840s
14 : Statistics :: Grounding time = 0.416987s, Solving time = 0.175815s, Total time = 0.592802s
15 : Statistics :: Grounding time = 0.424571s, Solving time = 0.222815s, Total time = 0.647386s
16 : Statistics :: Grounding time = 0.445195s, Solving time = 0.293800s, Total time = 0.738994s
17 : Statistics :: Grounding time = 0.447789s, Solving time = 0.312511s, Total time = 0.760299s
18 : Statistics :: Grounding time = 0.442050s, Solving time = 0.760317s, Total time = 1.202367s
19 : Statistics :: Grounding time = 0.465502s, Solving time = 0.172821s, Total time = 0.638324s
20 : Statistics :: Grounding time = 0.480584s, Solving time = 0.549995s, Total time = 1.030579s
21 : Statistics :: Grounding time = 0.485209s, Solving time = 0.898505s, Total time = 1.383714s

[06-02-2021_15-12-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.631552s, Solving time = 6.031036s, Total time = 19.074565s
Model :: Total atoms = 12466, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_2,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),41)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),42)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-12-16] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.491249s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.492617s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    19.074565s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-12-16] INFO :: Experiment >> 

      ================================================      
            Experimental run 8 : Time 24.614535s            
      ================================================      

[06-02-2021_15-12-16] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-12-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-12-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Instantiated.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building started.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Program building completed.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding base program parts.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.014079s.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving base program parts.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.001854s.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving started.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040585s.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005985s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-12-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.031640s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.003023s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.031067s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.003793s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.034460s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006392s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.035293s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.005546s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.036473s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006680s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038107s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.006511s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038170s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.007502s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038333s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.009701s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040350s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.010467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.038525s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.012657s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.040941s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.016254s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.043915s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.023930s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041340s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.042918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.041472s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.072124s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.077642s.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.116771s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-12-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.079366s.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.245154s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Grounding completed in 0.085022s.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving started.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Model found:
Model :: Total atoms = 3535, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Solving completed in 0.041759s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental solving completed in 1.507776s because STOP_CON_REACHED.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.826779s, Solving time = 0.639024s, Total time = 1.507776s
Final Model :: Total atoms = 3535, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #31 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.040585s, Solving time = 0.005985s, Total time = 0.046570s
2 : Statistics :: Grounding time = 0.031640s, Solving time = 0.003023s, Total time = 0.034664s
3 : Statistics :: Grounding time = 0.031067s, Solving time = 0.003793s, Total time = 0.034860s
4 : Statistics :: Grounding time = 0.034460s, Solving time = 0.006392s, Total time = 0.040852s
5 : Statistics :: Grounding time = 0.035293s, Solving time = 0.005546s, Total time = 0.040839s
6 : Statistics :: Grounding time = 0.036473s, Solving time = 0.006680s, Total time = 0.043153s
7 : Statistics :: Grounding time = 0.038107s, Solving time = 0.006511s, Total time = 0.044618s
8 : Statistics :: Grounding time = 0.038170s, Solving time = 0.007502s, Total time = 0.045672s
9 : Statistics :: Grounding time = 0.038333s, Solving time = 0.009701s, Total time = 0.048034s
10 : Statistics :: Grounding time = 0.040350s, Solving time = 0.010467s, Total time = 0.050817s
11 : Statistics :: Grounding time = 0.038525s, Solving time = 0.012657s, Total time = 0.051182s
12 : Statistics :: Grounding time = 0.040941s, Solving time = 0.016254s, Total time = 0.057195s
13 : Statistics :: Grounding time = 0.043915s, Solving time = 0.023930s, Total time = 0.067845s
14 : Statistics :: Grounding time = 0.041340s, Solving time = 0.042918s, Total time = 0.084258s
15 : Statistics :: Grounding time = 0.041472s, Solving time = 0.072124s, Total time = 0.113596s
16 : Statistics :: Grounding time = 0.077642s, Solving time = 0.116771s, Total time = 0.194413s
17 : Statistics :: Grounding time = 0.079366s, Solving time = 0.245154s, Total time = 0.324520s
18 : Statistics :: Grounding time = 0.085022s, Solving time = 0.041759s, Total time = 0.126781s

[06-02-2021_15-12-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.826779s, Solving time = 0.639024s, Total time = 1.507776s
Model :: Total atoms = 3535, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_2,(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-12-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Instantiated.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building started.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Program building completed.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding base program parts.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.014258s.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving base program parts.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.003018s.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving started.

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-12-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.635604s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.227308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.070689s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.016806s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.075303s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.015916s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.071660s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.023081s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.072619s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.023509s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.073150s.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.028616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-12-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.081850s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.019898s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.072806s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.029931s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.077051s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.044073s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.077001s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.035745s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.080742s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.057009s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.079315s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.065788s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.084399s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.100291s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.081846s.

[06-02-2021_15-12-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.117017s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.085959s.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.113955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.084827s.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.127811s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.086756s.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.198674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Grounding completed in 0.086083s.

[06-02-2021_15-12-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving started.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Model found:
Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Solving completed in 0.308124s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental solving completed in 3.683448s because STOP_CON_REACHED.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.991919s, Solving time = 1.556570s, Total time = 3.683448s
Final Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #32 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635604s, Solving time = 0.227308s, Total time = 0.862912s
2 : Statistics :: Grounding time = 0.070689s, Solving time = 0.016806s, Total time = 0.087495s
3 : Statistics :: Grounding time = 0.075303s, Solving time = 0.015916s, Total time = 0.091219s
4 : Statistics :: Grounding time = 0.071660s, Solving time = 0.023081s, Total time = 0.094741s
5 : Statistics :: Grounding time = 0.072619s, Solving time = 0.023509s, Total time = 0.096128s
6 : Statistics :: Grounding time = 0.073150s, Solving time = 0.028616s, Total time = 0.101766s
7 : Statistics :: Grounding time = 0.081850s, Solving time = 0.019898s, Total time = 0.101747s
8 : Statistics :: Grounding time = 0.072806s, Solving time = 0.029931s, Total time = 0.102738s
9 : Statistics :: Grounding time = 0.077051s, Solving time = 0.044073s, Total time = 0.121124s
10 : Statistics :: Grounding time = 0.077001s, Solving time = 0.035745s, Total time = 0.112747s
11 : Statistics :: Grounding time = 0.080742s, Solving time = 0.057009s, Total time = 0.137751s
12 : Statistics :: Grounding time = 0.079315s, Solving time = 0.065788s, Total time = 0.145103s
13 : Statistics :: Grounding time = 0.084399s, Solving time = 0.100291s, Total time = 0.184690s
14 : Statistics :: Grounding time = 0.081846s, Solving time = 0.117017s, Total time = 0.198863s
15 : Statistics :: Grounding time = 0.085959s, Solving time = 0.113955s, Total time = 0.199914s
16 : Statistics :: Grounding time = 0.084827s, Solving time = 0.127811s, Total time = 0.212638s
17 : Statistics :: Grounding time = 0.086756s, Solving time = 0.198674s, Total time = 0.285430s
18 : Statistics :: Grounding time = 0.086083s, Solving time = 0.308124s, Total time = 0.394206s

[06-02-2021_15-12-22] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.991919s, Solving time = 1.556570s, Total time = 3.683448s
Model :: Total atoms = 8062, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-12-22] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,retracted),13)
occurs(2,talos,configure(manipulator_arm_1,extended),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),24)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),25)
occurs(2,talos,release(manipulator_arm_2,(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-12-22] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-22] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Instantiated.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building started.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Program building completed.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding base program parts.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.016830s.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving base program parts.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.002825s.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving started.

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-12-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 4.367307s.

[06-02-2021_15-12-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.958109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-12-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.346688s.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.043494s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.359863s.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.050181s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.364741s.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.054774s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-12-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.376805s.

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.117036s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.368023s.

[06-02-2021_15-12-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.171011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.366404s.

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.089476s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.365421s.

[06-02-2021_15-12-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.093982s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.373619s.

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.162575s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.384631s.

[06-02-2021_15-12-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.079995s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.409782s.

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.102471s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.401484s.

[06-02-2021_15-12-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.159832s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.419302s.

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.324101s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-12-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.435841s.

[06-02-2021_15-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.465811s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-12-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.425241s.

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.145109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.432539s.

[06-02-2021_15-12-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.178436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.447786s.

[06-02-2021_15-12-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.837141s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.451515s.

[06-02-2021_15-12-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.705784s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-12-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.461215s.

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.391901s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.471697s.

[06-02-2021_15-12-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 0.981358s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-12-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Grounding completed in 0.486205s.

[06-02-2021_15-12-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Model found:
Model :: Total atoms = 12468, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Solving completed in 1.111584s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental solving completed in 20.177233s because STOP_CON_REACHED.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.532938s, Solving time = 7.226988s, Total time = 20.177233s
Final Model :: Total atoms = 12468, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #33 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.367307s, Solving time = 0.958109s, Total time = 5.325417s
2 : Statistics :: Grounding time = 0.346688s, Solving time = 0.043494s, Total time = 0.390183s
3 : Statistics :: Grounding time = 0.359863s, Solving time = 0.050181s, Total time = 0.410044s
4 : Statistics :: Grounding time = 0.364741s, Solving time = 0.054774s, Total time = 0.419515s
5 : Statistics :: Grounding time = 0.376805s, Solving time = 0.117036s, Total time = 0.493841s
6 : Statistics :: Grounding time = 0.368023s, Solving time = 0.171011s, Total time = 0.539034s
7 : Statistics :: Grounding time = 0.366404s, Solving time = 0.089476s, Total time = 0.455880s
8 : Statistics :: Grounding time = 0.365421s, Solving time = 0.093982s, Total time = 0.459403s
9 : Statistics :: Grounding time = 0.373619s, Solving time = 0.162575s, Total time = 0.536194s
10 : Statistics :: Grounding time = 0.384631s, Solving time = 0.079995s, Total time = 0.464626s
11 : Statistics :: Grounding time = 0.409782s, Solving time = 0.102471s, Total time = 0.512253s
12 : Statistics :: Grounding time = 0.401484s, Solving time = 0.159832s, Total time = 0.561315s
13 : Statistics :: Grounding time = 0.419302s, Solving time = 0.324101s, Total time = 0.743403s
14 : Statistics :: Grounding time = 0.435841s, Solving time = 0.465811s, Total time = 0.901652s
15 : Statistics :: Grounding time = 0.425241s, Solving time = 0.145109s, Total time = 0.570350s
16 : Statistics :: Grounding time = 0.432539s, Solving time = 0.178436s, Total time = 0.610975s
17 : Statistics :: Grounding time = 0.447786s, Solving time = 0.837141s, Total time = 1.284927s
18 : Statistics :: Grounding time = 0.451515s, Solving time = 0.705784s, Total time = 1.157299s
19 : Statistics :: Grounding time = 0.461215s, Solving time = 0.391901s, Total time = 0.853116s
20 : Statistics :: Grounding time = 0.471697s, Solving time = 0.981358s, Total time = 1.453055s
21 : Statistics :: Grounding time = 0.486205s, Solving time = 1.111584s, Total time = 1.597789s

[06-02-2021_15-12-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.532938s, Solving time = 7.226988s, Total time = 20.177233s
Model :: Total atoms = 12468, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-12-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_limb_1,extended),21)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_2,retracted),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_2,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),41)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),42)
occurs(1,talos,release(manipulator_end_1,(block,3)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),45)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),48)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_1,(block,2)),50)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),52)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),53)

[06-02-2021_15-12-42] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.507776s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.683448s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    20.177233s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-12-42] INFO :: Experiment >> 

      ================================================      
            Experimental run 9 : Time 25.834690s            
      ================================================      

[06-02-2021_15-12-42] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-12-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-12-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Instantiated.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Program building completed.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding base program parts.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.013566s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving base program parts.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.002902s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.039267s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.030641s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.003503s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.030422s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.004605s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.034500s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005206s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.034421s.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.005645s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-12-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.035891s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.006460s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.038077s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.007295s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.036689s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.007905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.037886s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.009971s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040056s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.011144s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.039422s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.016517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040715s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.021953s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.040034s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.024741s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.041986s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.048340s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.043753s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.075569s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.076163s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.130740s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.079655s.

[06-02-2021_15-12-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.236021s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Grounding completed in 0.082779s.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving started.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Solving completed in 0.228132s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental solving completed in 1.713276s because STOP_CON_REACHED.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.815922s, Solving time = 0.852409s, Total time = 1.713276s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #34 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039267s, Solving time = 0.005760s, Total time = 0.045027s
2 : Statistics :: Grounding time = 0.030641s, Solving time = 0.003503s, Total time = 0.034144s
3 : Statistics :: Grounding time = 0.030422s, Solving time = 0.004605s, Total time = 0.035027s
4 : Statistics :: Grounding time = 0.034500s, Solving time = 0.005206s, Total time = 0.039705s
5 : Statistics :: Grounding time = 0.034421s, Solving time = 0.005645s, Total time = 0.040065s
6 : Statistics :: Grounding time = 0.035891s, Solving time = 0.006460s, Total time = 0.042351s
7 : Statistics :: Grounding time = 0.038077s, Solving time = 0.007295s, Total time = 0.045372s
8 : Statistics :: Grounding time = 0.036689s, Solving time = 0.007905s, Total time = 0.044595s
9 : Statistics :: Grounding time = 0.037886s, Solving time = 0.009971s, Total time = 0.047857s
10 : Statistics :: Grounding time = 0.040056s, Solving time = 0.011144s, Total time = 0.051200s
11 : Statistics :: Grounding time = 0.039422s, Solving time = 0.016517s, Total time = 0.055939s
12 : Statistics :: Grounding time = 0.040715s, Solving time = 0.021953s, Total time = 0.062668s
13 : Statistics :: Grounding time = 0.040034s, Solving time = 0.024741s, Total time = 0.064775s
14 : Statistics :: Grounding time = 0.041986s, Solving time = 0.048340s, Total time = 0.090326s
15 : Statistics :: Grounding time = 0.043753s, Solving time = 0.075569s, Total time = 0.119323s
16 : Statistics :: Grounding time = 0.076163s, Solving time = 0.130740s, Total time = 0.206903s
17 : Statistics :: Grounding time = 0.079655s, Solving time = 0.236021s, Total time = 0.315677s
18 : Statistics :: Grounding time = 0.082779s, Solving time = 0.228132s, Total time = 0.310911s

[06-02-2021_15-12-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.815922s, Solving time = 0.852409s, Total time = 1.713276s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-12-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_2,(block,3)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),11)
occurs(3,talos,release(manipulator_arm_1,(block,5)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-12-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Instantiated.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building started.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Program building completed.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding base program parts.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.014374s.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving base program parts.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.002351s.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving started.

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-12-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.632910s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.223369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.068888s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.017482s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.072036s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.016829s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.072041s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.023486s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.072838s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.022834s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.073110s.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.021574s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-12-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.071762s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.020789s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.074274s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.028748s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.076136s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.039249s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.076766s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.040714s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.077643s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.051090s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.082371s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.057487s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.079489s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.109999s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.081554s.

[06-02-2021_15-12-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.146115s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.083030s.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.104059s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.084522s.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.204753s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.094038s.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.178875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Grounding completed in 0.087368s.

[06-02-2021_15-12-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving started.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Model found:
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Solving completed in 0.146069s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental solving completed in 3.565102s because STOP_CON_REACHED.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.975149s, Solving time = 1.455873s, Total time = 3.565102s
Final Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #35 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.632910s, Solving time = 0.223369s, Total time = 0.856279s
2 : Statistics :: Grounding time = 0.068888s, Solving time = 0.017482s, Total time = 0.086370s
3 : Statistics :: Grounding time = 0.072036s, Solving time = 0.016829s, Total time = 0.088865s
4 : Statistics :: Grounding time = 0.072041s, Solving time = 0.023486s, Total time = 0.095527s
5 : Statistics :: Grounding time = 0.072838s, Solving time = 0.022834s, Total time = 0.095672s
6 : Statistics :: Grounding time = 0.073110s, Solving time = 0.021574s, Total time = 0.094684s
7 : Statistics :: Grounding time = 0.071762s, Solving time = 0.020789s, Total time = 0.092551s
8 : Statistics :: Grounding time = 0.074274s, Solving time = 0.028748s, Total time = 0.103022s
9 : Statistics :: Grounding time = 0.076136s, Solving time = 0.039249s, Total time = 0.115385s
10 : Statistics :: Grounding time = 0.076766s, Solving time = 0.040714s, Total time = 0.117480s
11 : Statistics :: Grounding time = 0.077643s, Solving time = 0.051090s, Total time = 0.128734s
12 : Statistics :: Grounding time = 0.082371s, Solving time = 0.057487s, Total time = 0.139858s
13 : Statistics :: Grounding time = 0.079489s, Solving time = 0.109999s, Total time = 0.189488s
14 : Statistics :: Grounding time = 0.081554s, Solving time = 0.146115s, Total time = 0.227669s
15 : Statistics :: Grounding time = 0.083030s, Solving time = 0.104059s, Total time = 0.187089s
16 : Statistics :: Grounding time = 0.084522s, Solving time = 0.204753s, Total time = 0.289275s
17 : Statistics :: Grounding time = 0.094038s, Solving time = 0.178875s, Total time = 0.272913s
18 : Statistics :: Grounding time = 0.087368s, Solving time = 0.146069s, Total time = 0.233437s

[06-02-2021_15-12-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.975149s, Solving time = 1.455873s, Total time = 3.565102s
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-12-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_2,(block,3)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),27)
occurs(2,talos,release(manipulator_arm_1,(block,5)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-12-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-12-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Instantiated.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building started.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Program building completed.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding base program parts.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.016500s.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving base program parts.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.003862s.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving started.

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-12-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-12-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 4.346864s.

[06-02-2021_15-12-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.980891s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-12-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.346013s.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.043308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.357309s.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.049286s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.371387s.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.105938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-12-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.368335s.

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.058398s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.364862s.

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.057153s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-12-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.363888s.

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.085594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.384937s.

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.077673s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-12-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.390593s.

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.075347s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.402099s.

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.179193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-12-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.414209s.

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.162360s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.406335s.

[06-02-2021_15-12-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.112928s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.417459s.

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.194925s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-12-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.426795s.

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.409560s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.436316s.

[06-02-2021_15-13-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.315355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.442262s.

[06-02-2021_15-13-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.382914s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-13-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-13-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.452925s.

[06-02-2021_15-13-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.669146s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.463031s.

[06-02-2021_15-13-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.981677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-13-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.482798s.

[06-02-2021_15-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 0.677262s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-13-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.482773s.

[06-02-2021_15-13-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 1.524050s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-13-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-13-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.504340s.

[06-02-2021_15-13-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 2.114608s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-13-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.516383s.

[06-02-2021_15-13-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 2.697352s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-13-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Grounding completed in 0.543037s.

[06-02-2021_15-13-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Model found:
Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Solving completed in 2.018863s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental solving completed in 28.175522s because STOP_CON_REACHED.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.701448s, Solving time = 13.977647s, Total time = 28.175522s
Final Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #36 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.346864s, Solving time = 0.980891s, Total time = 5.327755s
2 : Statistics :: Grounding time = 0.346013s, Solving time = 0.043308s, Total time = 0.389320s
3 : Statistics :: Grounding time = 0.357309s, Solving time = 0.049286s, Total time = 0.406595s
4 : Statistics :: Grounding time = 0.371387s, Solving time = 0.105938s, Total time = 0.477326s
5 : Statistics :: Grounding time = 0.368335s, Solving time = 0.058398s, Total time = 0.426733s
6 : Statistics :: Grounding time = 0.364862s, Solving time = 0.057153s, Total time = 0.422016s
7 : Statistics :: Grounding time = 0.363888s, Solving time = 0.085594s, Total time = 0.449482s
8 : Statistics :: Grounding time = 0.384937s, Solving time = 0.077673s, Total time = 0.462610s
9 : Statistics :: Grounding time = 0.390593s, Solving time = 0.075347s, Total time = 0.465940s
10 : Statistics :: Grounding time = 0.402099s, Solving time = 0.179193s, Total time = 0.581291s
11 : Statistics :: Grounding time = 0.414209s, Solving time = 0.162360s, Total time = 0.576569s
12 : Statistics :: Grounding time = 0.406335s, Solving time = 0.112928s, Total time = 0.519264s
13 : Statistics :: Grounding time = 0.417459s, Solving time = 0.194925s, Total time = 0.612384s
14 : Statistics :: Grounding time = 0.426795s, Solving time = 0.409560s, Total time = 0.836355s
15 : Statistics :: Grounding time = 0.436316s, Solving time = 0.315355s, Total time = 0.751671s
16 : Statistics :: Grounding time = 0.442262s, Solving time = 0.382914s, Total time = 0.825176s
17 : Statistics :: Grounding time = 0.452925s, Solving time = 0.669146s, Total time = 1.122071s
18 : Statistics :: Grounding time = 0.463031s, Solving time = 0.981677s, Total time = 1.444708s
19 : Statistics :: Grounding time = 0.482798s, Solving time = 0.677262s, Total time = 1.160061s
20 : Statistics :: Grounding time = 0.482773s, Solving time = 1.524050s, Total time = 2.006824s
21 : Statistics :: Grounding time = 0.504340s, Solving time = 2.114608s, Total time = 2.618948s
22 : Statistics :: Grounding time = 0.516383s, Solving time = 2.697352s, Total time = 3.213735s
23 : Statistics :: Grounding time = 0.543037s, Solving time = 2.018863s, Total time = 2.561900s

[06-02-2021_15-13-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.701448s, Solving time = 13.977647s, Total time = 28.175522s
Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_2,extended),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),43)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-13-16] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.713276s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.565102s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    28.175522s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-13-16] INFO :: Experiment >> 

      ================================================      
           Experimental run 10 : Time 33.967533s            
      ================================================      

[06-02-2021_15-13-16] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-13-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-13-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Instantiated.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Program building completed.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding base program parts.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.013706s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving base program parts.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.002063s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039473s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004881s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.031653s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.003583s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.032140s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.004418s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.034244s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005186s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.034396s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.005467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.035991s.

[06-02-2021_15-13-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006014s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.038839s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.006717s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.037623s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.008369s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042372s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.011026s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039977s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.010307s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.039494s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.014185s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042114s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.019080s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.045049s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.029733s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.043543s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.040529s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.042299s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.061806s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.077134s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.126704s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.080647s.

[06-02-2021_15-13-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.159550s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Grounding completed in 0.083508s.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving started.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Solving completed in 0.098370s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental solving completed in 1.495068s because STOP_CON_REACHED.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.834202s, Solving time = 0.617988s, Total time = 1.495068s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #37 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039473s, Solving time = 0.004881s, Total time = 0.044354s
2 : Statistics :: Grounding time = 0.031653s, Solving time = 0.003583s, Total time = 0.035236s
3 : Statistics :: Grounding time = 0.032140s, Solving time = 0.004418s, Total time = 0.036558s
4 : Statistics :: Grounding time = 0.034244s, Solving time = 0.005186s, Total time = 0.039430s
5 : Statistics :: Grounding time = 0.034396s, Solving time = 0.005467s, Total time = 0.039862s
6 : Statistics :: Grounding time = 0.035991s, Solving time = 0.006014s, Total time = 0.042005s
7 : Statistics :: Grounding time = 0.038839s, Solving time = 0.006717s, Total time = 0.045556s
8 : Statistics :: Grounding time = 0.037623s, Solving time = 0.008369s, Total time = 0.045992s
9 : Statistics :: Grounding time = 0.042372s, Solving time = 0.011026s, Total time = 0.053399s
10 : Statistics :: Grounding time = 0.039977s, Solving time = 0.010307s, Total time = 0.050284s
11 : Statistics :: Grounding time = 0.039494s, Solving time = 0.014185s, Total time = 0.053680s
12 : Statistics :: Grounding time = 0.042114s, Solving time = 0.019080s, Total time = 0.061193s
13 : Statistics :: Grounding time = 0.045049s, Solving time = 0.029733s, Total time = 0.074782s
14 : Statistics :: Grounding time = 0.043543s, Solving time = 0.040529s, Total time = 0.084072s
15 : Statistics :: Grounding time = 0.042299s, Solving time = 0.061806s, Total time = 0.104105s
16 : Statistics :: Grounding time = 0.077134s, Solving time = 0.126704s, Total time = 0.203838s
17 : Statistics :: Grounding time = 0.080647s, Solving time = 0.159550s, Total time = 0.240197s
18 : Statistics :: Grounding time = 0.083508s, Solving time = 0.098370s, Total time = 0.181878s

[06-02-2021_15-13-18] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.834202s, Solving time = 0.617988s, Total time = 1.495068s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-13-18] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-13-18] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-18] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Instantiated.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building started.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Program building completed.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding base program parts.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.015993s.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving base program parts.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.002025s.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving started.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.631067s.

[06-02-2021_15-13-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.225710s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.069641s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.018991s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.068998s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.015815s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.071889s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.023158s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.073485s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.022414s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.072734s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.030083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074850s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.021032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074746s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.027938s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.074540s.

[06-02-2021_15-13-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.051765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.077497s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.042186s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.077942s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.055315s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.081351s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.055956s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.081257s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.087148s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.082216s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.120149s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.085222s.

[06-02-2021_15-13-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.176032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.084261s.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.112732s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.086657s.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.143045s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Grounding completed in 0.086169s.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Solving completed in 0.171983s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental solving completed in 3.512371s because STOP_CON_REACHED.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.970513s, Solving time = 1.403478s, Total time = 3.512371s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #38 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.631067s, Solving time = 0.225710s, Total time = 0.856777s
2 : Statistics :: Grounding time = 0.069641s, Solving time = 0.018991s, Total time = 0.088632s
3 : Statistics :: Grounding time = 0.068998s, Solving time = 0.015815s, Total time = 0.084814s
4 : Statistics :: Grounding time = 0.071889s, Solving time = 0.023158s, Total time = 0.095047s
5 : Statistics :: Grounding time = 0.073485s, Solving time = 0.022414s, Total time = 0.095899s
6 : Statistics :: Grounding time = 0.072734s, Solving time = 0.030083s, Total time = 0.102817s
7 : Statistics :: Grounding time = 0.074850s, Solving time = 0.021032s, Total time = 0.095881s
8 : Statistics :: Grounding time = 0.074746s, Solving time = 0.027938s, Total time = 0.102684s
9 : Statistics :: Grounding time = 0.074540s, Solving time = 0.051765s, Total time = 0.126306s
10 : Statistics :: Grounding time = 0.077497s, Solving time = 0.042186s, Total time = 0.119683s
11 : Statistics :: Grounding time = 0.077942s, Solving time = 0.055315s, Total time = 0.133257s
12 : Statistics :: Grounding time = 0.081351s, Solving time = 0.055956s, Total time = 0.137308s
13 : Statistics :: Grounding time = 0.081257s, Solving time = 0.087148s, Total time = 0.168405s
14 : Statistics :: Grounding time = 0.082216s, Solving time = 0.120149s, Total time = 0.202364s
15 : Statistics :: Grounding time = 0.085222s, Solving time = 0.176032s, Total time = 0.261254s
16 : Statistics :: Grounding time = 0.084261s, Solving time = 0.112732s, Total time = 0.196992s
17 : Statistics :: Grounding time = 0.086657s, Solving time = 0.143045s, Total time = 0.229702s
18 : Statistics :: Grounding time = 0.086169s, Solving time = 0.171983s, Total time = 0.258152s

[06-02-2021_15-13-21] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.970513s, Solving time = 1.403478s, Total time = 3.512371s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-21] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-13-21] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-21] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Instantiated.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Program building completed.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding base program parts.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.016836s.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving base program parts.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.002974s.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving started.

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-13-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 4.340533s.

[06-02-2021_15-13-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.978294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.345741s.

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.043220s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-13-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.355140s.

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.048558s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.381679s.

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.048040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.366883s.

[06-02-2021_15-13-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.052706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.371495s.

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.078297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.398898s.

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.063266s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-13-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.376827s.

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.060460s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.400771s.

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.064129s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-13-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.414370s.

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.072060s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.422823s.

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.081683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-13-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.429779s.

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.139303s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.436501s.

[06-02-2021_15-13-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.119518s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.435882s.

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.155858s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-13-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.439567s.

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.219368s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.451341s.

[06-02-2021_15-13-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.334711s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.461274s.

[06-02-2021_15-13-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.555897s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.468334s.

[06-02-2021_15-13-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.375101s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-13-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-13-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.495464s.

[06-02-2021_15-13-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.666205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.495106s.

[06-02-2021_15-13-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.510127s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-13-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-13-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.493422s.

[06-02-2021_15-13-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 0.978404s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-13-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-13-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.529545s.

[06-02-2021_15-13-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 2.266052s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-13-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Grounding completed in 0.514639s.

[06-02-2021_15-13-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Model found:
Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Solving completed in 2.314086s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental solving completed in 24.510249s because STOP_CON_REACHED.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.842851s, Solving time = 10.228315s, Total time = 24.510249s
Final Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #39 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.340533s, Solving time = 0.978294s, Total time = 5.318827s
2 : Statistics :: Grounding time = 0.345741s, Solving time = 0.043220s, Total time = 0.388961s
3 : Statistics :: Grounding time = 0.355140s, Solving time = 0.048558s, Total time = 0.403697s
4 : Statistics :: Grounding time = 0.381679s, Solving time = 0.048040s, Total time = 0.429719s
5 : Statistics :: Grounding time = 0.366883s, Solving time = 0.052706s, Total time = 0.419589s
6 : Statistics :: Grounding time = 0.371495s, Solving time = 0.078297s, Total time = 0.449793s
7 : Statistics :: Grounding time = 0.398898s, Solving time = 0.063266s, Total time = 0.462163s
8 : Statistics :: Grounding time = 0.376827s, Solving time = 0.060460s, Total time = 0.437287s
9 : Statistics :: Grounding time = 0.400771s, Solving time = 0.064129s, Total time = 0.464900s
10 : Statistics :: Grounding time = 0.414370s, Solving time = 0.072060s, Total time = 0.486430s
11 : Statistics :: Grounding time = 0.422823s, Solving time = 0.081683s, Total time = 0.504506s
12 : Statistics :: Grounding time = 0.429779s, Solving time = 0.139303s, Total time = 0.569082s
13 : Statistics :: Grounding time = 0.436501s, Solving time = 0.119518s, Total time = 0.556019s
14 : Statistics :: Grounding time = 0.435882s, Solving time = 0.155858s, Total time = 0.591740s
15 : Statistics :: Grounding time = 0.439567s, Solving time = 0.219368s, Total time = 0.658936s
16 : Statistics :: Grounding time = 0.451341s, Solving time = 0.334711s, Total time = 0.786051s
17 : Statistics :: Grounding time = 0.461274s, Solving time = 0.555897s, Total time = 1.017171s
18 : Statistics :: Grounding time = 0.468334s, Solving time = 0.375101s, Total time = 0.843435s
19 : Statistics :: Grounding time = 0.495464s, Solving time = 0.666205s, Total time = 1.161669s
20 : Statistics :: Grounding time = 0.495106s, Solving time = 0.510127s, Total time = 1.005233s
21 : Statistics :: Grounding time = 0.493422s, Solving time = 0.978404s, Total time = 1.471826s
22 : Statistics :: Grounding time = 0.529545s, Solving time = 2.266052s, Total time = 2.795597s
23 : Statistics :: Grounding time = 0.514639s, Solving time = 2.314086s, Total time = 2.828724s

[06-02-2021_15-13-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.842851s, Solving time = 10.228315s, Total time = 24.510249s
Model :: Total atoms = 12828, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-13-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),27)
occurs(1,talos,configure(manipulator_limb_2,retracted),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_1,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_2,extended),39)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),40)
occurs(1,talos,release(manipulator_end_2,(block,5)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),44)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-13-46] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.495068s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.512371s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    24.510249s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-13-46] INFO :: Experiment >> 

      ================================================      
           Experimental run 11 : Time 30.017549s            
      ================================================      

[06-02-2021_15-13-46] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-13-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-13-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Instantiated.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Program building completed.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding base program parts.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.013686s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving base program parts.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.002117s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.039353s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005689s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.030601s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.003521s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.030911s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.004585s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.034301s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005383s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.034623s.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.005572s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-13-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.036042s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.006505s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.037737s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.007198s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.037289s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.008191s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.038091s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011121s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040289s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.011049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.039318s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.016324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040586s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.022126s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.040509s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.028103s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.042141s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.045616s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.041355s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.072874s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.077349s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.143072s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.081429s.

[06-02-2021_15-13-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.209193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Grounding completed in 0.083280s.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving started.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Solving completed in 0.081782s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental solving completed in 1.551428s because STOP_CON_REACHED.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.818890s, Solving time = 0.690021s, Total time = 1.551428s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #40 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039353s, Solving time = 0.005689s, Total time = 0.045042s
2 : Statistics :: Grounding time = 0.030601s, Solving time = 0.003521s, Total time = 0.034122s
3 : Statistics :: Grounding time = 0.030911s, Solving time = 0.004585s, Total time = 0.035496s
4 : Statistics :: Grounding time = 0.034301s, Solving time = 0.005383s, Total time = 0.039684s
5 : Statistics :: Grounding time = 0.034623s, Solving time = 0.005572s, Total time = 0.040195s
6 : Statistics :: Grounding time = 0.036042s, Solving time = 0.006505s, Total time = 0.042547s
7 : Statistics :: Grounding time = 0.037737s, Solving time = 0.007198s, Total time = 0.044934s
8 : Statistics :: Grounding time = 0.037289s, Solving time = 0.008191s, Total time = 0.045480s
9 : Statistics :: Grounding time = 0.038091s, Solving time = 0.011121s, Total time = 0.049213s
10 : Statistics :: Grounding time = 0.040289s, Solving time = 0.011049s, Total time = 0.051338s
11 : Statistics :: Grounding time = 0.039318s, Solving time = 0.016324s, Total time = 0.055642s
12 : Statistics :: Grounding time = 0.040586s, Solving time = 0.022126s, Total time = 0.062712s
13 : Statistics :: Grounding time = 0.040509s, Solving time = 0.028103s, Total time = 0.068612s
14 : Statistics :: Grounding time = 0.042141s, Solving time = 0.045616s, Total time = 0.087758s
15 : Statistics :: Grounding time = 0.041355s, Solving time = 0.072874s, Total time = 0.114229s
16 : Statistics :: Grounding time = 0.077349s, Solving time = 0.143072s, Total time = 0.220421s
17 : Statistics :: Grounding time = 0.081429s, Solving time = 0.209193s, Total time = 0.290622s
18 : Statistics :: Grounding time = 0.083280s, Solving time = 0.081782s, Total time = 0.165062s

[06-02-2021_15-13-48] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.818890s, Solving time = 0.690021s, Total time = 1.551428s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-13-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-13-48] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-48] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Instantiated.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building started.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Program building completed.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding base program parts.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.014852s.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving base program parts.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.002520s.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving started.

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-13-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.639380s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.224922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.068827s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.016875s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.069922s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.017368s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.070653s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.022098s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.072645s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.023179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.073615s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.029399s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077237s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.023096s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.075964s.

[06-02-2021_15-13-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.027648s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.076019s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.049336s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077843s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.038139s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.077725s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.029437s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.079326s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.036565s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.079442s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.057929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.084033s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.075802s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.087417s.

[06-02-2021_15-13-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.121772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.091985s.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.085874s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.087056s.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.138665s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Grounding completed in 0.086091s.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Solving completed in 0.130785s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental solving completed in 3.271991s because STOP_CON_REACHED.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.990032s, Solving time = 1.151409s, Total time = 3.271991s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #41 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.639380s, Solving time = 0.224922s, Total time = 0.864301s
2 : Statistics :: Grounding time = 0.068827s, Solving time = 0.016875s, Total time = 0.085702s
3 : Statistics :: Grounding time = 0.069922s, Solving time = 0.017368s, Total time = 0.087290s
4 : Statistics :: Grounding time = 0.070653s, Solving time = 0.022098s, Total time = 0.092750s
5 : Statistics :: Grounding time = 0.072645s, Solving time = 0.023179s, Total time = 0.095824s
6 : Statistics :: Grounding time = 0.073615s, Solving time = 0.029399s, Total time = 0.103013s
7 : Statistics :: Grounding time = 0.077237s, Solving time = 0.023096s, Total time = 0.100332s
8 : Statistics :: Grounding time = 0.075964s, Solving time = 0.027648s, Total time = 0.103613s
9 : Statistics :: Grounding time = 0.076019s, Solving time = 0.049336s, Total time = 0.125355s
10 : Statistics :: Grounding time = 0.077843s, Solving time = 0.038139s, Total time = 0.115982s
11 : Statistics :: Grounding time = 0.077725s, Solving time = 0.029437s, Total time = 0.107162s
12 : Statistics :: Grounding time = 0.079326s, Solving time = 0.036565s, Total time = 0.115891s
13 : Statistics :: Grounding time = 0.079442s, Solving time = 0.057929s, Total time = 0.137371s
14 : Statistics :: Grounding time = 0.084033s, Solving time = 0.075802s, Total time = 0.159835s
15 : Statistics :: Grounding time = 0.087417s, Solving time = 0.121772s, Total time = 0.209189s
16 : Statistics :: Grounding time = 0.091985s, Solving time = 0.085874s, Total time = 0.177859s
17 : Statistics :: Grounding time = 0.087056s, Solving time = 0.138665s, Total time = 0.225722s
18 : Statistics :: Grounding time = 0.086091s, Solving time = 0.130785s, Total time = 0.216875s

[06-02-2021_15-13-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.990032s, Solving time = 1.151409s, Total time = 3.271991s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-13-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-13-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-13-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Instantiated.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Program building completed.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding base program parts.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.019813s.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving base program parts.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.002985s.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving started.

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-13-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-13-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 4.331931s.

[06-02-2021_15-13-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.981878s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.340088s.

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.043439s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.356869s.

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.049841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.366021s.

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.049927s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.368010s.

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.056133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-13-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.380966s.

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.050019s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.377993s.

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.083705s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-13-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.402871s.

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.090193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.395248s.

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.076239s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-14-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.407309s.

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.097527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.413120s.

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.075243s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-14-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.414579s.

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.139524s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.423177s.

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.086537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-14-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.431121s.

[06-02-2021_15-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.199537s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-14-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.445887s.

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.263731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.442877s.

[06-02-2021_15-14-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.251255s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.447257s.

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.298819s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-14-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.467277s.

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.216270s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.474662s.

[06-02-2021_15-14-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.573412s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-14-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.497117s.

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.363032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.500942s.

[06-02-2021_15-14-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 0.906058s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-14-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-14-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.500883s.

[06-02-2021_15-14-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 1.375805s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-14-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-14-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Grounding completed in 0.517145s.

[06-02-2021_15-14-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Model found:
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Solving completed in 2.026247s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental solving completed in 22.526399s because STOP_CON_REACHED.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.723163s, Solving time = 8.357357s, Total time = 22.526399s
Final Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #42 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.331931s, Solving time = 0.981878s, Total time = 5.313809s
2 : Statistics :: Grounding time = 0.340088s, Solving time = 0.043439s, Total time = 0.383527s
3 : Statistics :: Grounding time = 0.356869s, Solving time = 0.049841s, Total time = 0.406710s
4 : Statistics :: Grounding time = 0.366021s, Solving time = 0.049927s, Total time = 0.415948s
5 : Statistics :: Grounding time = 0.368010s, Solving time = 0.056133s, Total time = 0.424142s
6 : Statistics :: Grounding time = 0.380966s, Solving time = 0.050019s, Total time = 0.430986s
7 : Statistics :: Grounding time = 0.377993s, Solving time = 0.083705s, Total time = 0.461698s
8 : Statistics :: Grounding time = 0.402871s, Solving time = 0.090193s, Total time = 0.493065s
9 : Statistics :: Grounding time = 0.395248s, Solving time = 0.076239s, Total time = 0.471486s
10 : Statistics :: Grounding time = 0.407309s, Solving time = 0.097527s, Total time = 0.504835s
11 : Statistics :: Grounding time = 0.413120s, Solving time = 0.075243s, Total time = 0.488363s
12 : Statistics :: Grounding time = 0.414579s, Solving time = 0.139524s, Total time = 0.554103s
13 : Statistics :: Grounding time = 0.423177s, Solving time = 0.086537s, Total time = 0.509715s
14 : Statistics :: Grounding time = 0.431121s, Solving time = 0.199537s, Total time = 0.630659s
15 : Statistics :: Grounding time = 0.445887s, Solving time = 0.263731s, Total time = 0.709618s
16 : Statistics :: Grounding time = 0.442877s, Solving time = 0.251255s, Total time = 0.694132s
17 : Statistics :: Grounding time = 0.447257s, Solving time = 0.298819s, Total time = 0.746076s
18 : Statistics :: Grounding time = 0.467277s, Solving time = 0.216270s, Total time = 0.683548s
19 : Statistics :: Grounding time = 0.474662s, Solving time = 0.573412s, Total time = 1.048074s
20 : Statistics :: Grounding time = 0.497117s, Solving time = 0.363032s, Total time = 0.860149s
21 : Statistics :: Grounding time = 0.500942s, Solving time = 0.906058s, Total time = 1.407000s
22 : Statistics :: Grounding time = 0.500883s, Solving time = 1.375805s, Total time = 1.876689s
23 : Statistics :: Grounding time = 0.517145s, Solving time = 2.026247s, Total time = 2.543392s

[06-02-2021_15-14-14] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.723163s, Solving time = 8.357357s, Total time = 22.526399s
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),25)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_1,(block,6)),38)
occurs(1,talos,configure(manipulator_limb_2,extended),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-14-14] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.551428s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.271991s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    22.526399s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-14-14] INFO :: Experiment >> 

      ================================================      
           Experimental run 12 : Time 27.895166s            
      ================================================      

[06-02-2021_15-14-14] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-14-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-14-14] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-14] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Instantiated.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Program building completed.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding base program parts.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.013903s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving base program parts.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.002265s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039661s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005707s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031118s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.003045s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.031334s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.004112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.034430s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005406s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.035079s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.005719s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037014s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.006722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038187s.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.007421s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-14-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038619s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.009308s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.037574s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.010415s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.039469s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.012468s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.038859s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.013451s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.043069s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.019534s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.042708s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.025803s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.046023s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.041659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.041960s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.069137s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.076388s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.115885s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.085043s.

[06-02-2021_15-14-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.199601s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Grounding completed in 0.084619s.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving started.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Solving completed in 0.186617s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental solving completed in 1.622260s because STOP_CON_REACHED.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.835057s, Solving time = 0.744274s, Total time = 1.622260s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #43 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039661s, Solving time = 0.005707s, Total time = 0.045368s
2 : Statistics :: Grounding time = 0.031118s, Solving time = 0.003045s, Total time = 0.034163s
3 : Statistics :: Grounding time = 0.031334s, Solving time = 0.004112s, Total time = 0.035446s
4 : Statistics :: Grounding time = 0.034430s, Solving time = 0.005406s, Total time = 0.039835s
5 : Statistics :: Grounding time = 0.035079s, Solving time = 0.005719s, Total time = 0.040798s
6 : Statistics :: Grounding time = 0.037014s, Solving time = 0.006722s, Total time = 0.043736s
7 : Statistics :: Grounding time = 0.038187s, Solving time = 0.007421s, Total time = 0.045609s
8 : Statistics :: Grounding time = 0.038619s, Solving time = 0.009308s, Total time = 0.047927s
9 : Statistics :: Grounding time = 0.037574s, Solving time = 0.010415s, Total time = 0.047989s
10 : Statistics :: Grounding time = 0.039469s, Solving time = 0.012468s, Total time = 0.051936s
11 : Statistics :: Grounding time = 0.038859s, Solving time = 0.013451s, Total time = 0.052310s
12 : Statistics :: Grounding time = 0.043069s, Solving time = 0.019534s, Total time = 0.062602s
13 : Statistics :: Grounding time = 0.042708s, Solving time = 0.025803s, Total time = 0.068511s
14 : Statistics :: Grounding time = 0.046023s, Solving time = 0.041659s, Total time = 0.087682s
15 : Statistics :: Grounding time = 0.041960s, Solving time = 0.069137s, Total time = 0.111097s
16 : Statistics :: Grounding time = 0.076388s, Solving time = 0.115885s, Total time = 0.192273s
17 : Statistics :: Grounding time = 0.085043s, Solving time = 0.199601s, Total time = 0.284645s
18 : Statistics :: Grounding time = 0.084619s, Solving time = 0.186617s, Total time = 0.271236s

[06-02-2021_15-14-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.835057s, Solving time = 0.744274s, Total time = 1.622260s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-14-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,release(manipulator_arm_2,(block,3)),9)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),10)
occurs(3,talos,release(manipulator_arm_1,(block,5)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-14-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Instantiated.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building started.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Program building completed.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding base program parts.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.014359s.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving base program parts.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.003346s.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving started.

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-14-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.639922s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.230190s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.069745s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.017527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.069614s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.016001s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.072622s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.023207s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.072697s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.023094s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.074967s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.032394s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.072616s.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.021431s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-14-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.076278s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.022775s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.077812s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.030659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.078364s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.033407s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.081857s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.062647s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.079480s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.081453s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.080211s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.122859s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.080431s.

[06-02-2021_15-14-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.117664s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.081681s.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.138653s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.087215s.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.125659s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.084859s.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.161572s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Grounding completed in 0.087386s.

[06-02-2021_15-14-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving started.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Model found:
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Solving completed in 0.242299s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental solving completed in 3.627108s because STOP_CON_REACHED.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.982118s, Solving time = 1.506834s, Total time = 3.627108s
Final Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #44 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.639922s, Solving time = 0.230190s, Total time = 0.870112s
2 : Statistics :: Grounding time = 0.069745s, Solving time = 0.017527s, Total time = 0.087272s
3 : Statistics :: Grounding time = 0.069614s, Solving time = 0.016001s, Total time = 0.085615s
4 : Statistics :: Grounding time = 0.072622s, Solving time = 0.023207s, Total time = 0.095828s
5 : Statistics :: Grounding time = 0.072697s, Solving time = 0.023094s, Total time = 0.095790s
6 : Statistics :: Grounding time = 0.074967s, Solving time = 0.032394s, Total time = 0.107361s
7 : Statistics :: Grounding time = 0.072616s, Solving time = 0.021431s, Total time = 0.094047s
8 : Statistics :: Grounding time = 0.076278s, Solving time = 0.022775s, Total time = 0.099053s
9 : Statistics :: Grounding time = 0.077812s, Solving time = 0.030659s, Total time = 0.108471s
10 : Statistics :: Grounding time = 0.078364s, Solving time = 0.033407s, Total time = 0.111771s
11 : Statistics :: Grounding time = 0.081857s, Solving time = 0.062647s, Total time = 0.144504s
12 : Statistics :: Grounding time = 0.079480s, Solving time = 0.081453s, Total time = 0.160933s
13 : Statistics :: Grounding time = 0.080211s, Solving time = 0.122859s, Total time = 0.203070s
14 : Statistics :: Grounding time = 0.080431s, Solving time = 0.117664s, Total time = 0.198095s
15 : Statistics :: Grounding time = 0.081681s, Solving time = 0.138653s, Total time = 0.220334s
16 : Statistics :: Grounding time = 0.087215s, Solving time = 0.125659s, Total time = 0.212874s
17 : Statistics :: Grounding time = 0.084859s, Solving time = 0.161572s, Total time = 0.246432s
18 : Statistics :: Grounding time = 0.087386s, Solving time = 0.242299s, Total time = 0.329685s

[06-02-2021_15-14-20] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.982118s, Solving time = 1.506834s, Total time = 3.627108s
Model :: Total atoms = 8060, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-14-20] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_1,retracted),13)
occurs(2,talos,configure(manipulator_arm_2,extended),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),24)
occurs(2,talos,release(manipulator_arm_2,(block,3)),25)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),26)
occurs(2,talos,release(manipulator_arm_1,(block,5)),27)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-14-20] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-20] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Instantiated.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building started.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Program building completed.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding base program parts.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.016993s.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving base program parts.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.003626s.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving started.

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-14-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 4.354661s.

[06-02-2021_15-14-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.976024s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.351742s.

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.044640s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-14-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.357366s.

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.051231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.370594s.

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.047101s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-14-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.373075s.

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.088311s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.378829s.

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.068920s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-14-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.373022s.

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.081033s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.385603s.

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.088012s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-14-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.384612s.

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.075843s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.400147s.

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.148006s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-14-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.402200s.

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.186864s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.412098s.

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.134384s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-14-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.410988s.

[06-02-2021_15-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.214079s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-14-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.422320s.

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.305854s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.432160s.

[06-02-2021_15-14-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.265083s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.429015s.

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.390825s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-14-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-14-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.443755s.

[06-02-2021_15-14-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.381192s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-14-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.451835s.

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.219964s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.466241s.

[06-02-2021_15-14-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.927011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-14-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.485590s.

[06-02-2021_15-14-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 0.714905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-14-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-14-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.478870s.

[06-02-2021_15-14-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 2.342638s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-14-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.493121s.

[06-02-2021_15-14-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 2.051343s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-14-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Grounding completed in 0.506896s.

[06-02-2021_15-14-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving started.

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Model found:
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Solving completed in 1.707041s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental solving completed in 25.589627s because STOP_CON_REACHED.

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.581736s, Solving time = 11.513931s, Total time = 25.589627s
Final Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #45 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.354661s, Solving time = 0.976024s, Total time = 5.330685s
2 : Statistics :: Grounding time = 0.351742s, Solving time = 0.044640s, Total time = 0.396382s
3 : Statistics :: Grounding time = 0.357366s, Solving time = 0.051231s, Total time = 0.408597s
4 : Statistics :: Grounding time = 0.370594s, Solving time = 0.047101s, Total time = 0.417695s
5 : Statistics :: Grounding time = 0.373075s, Solving time = 0.088311s, Total time = 0.461386s
6 : Statistics :: Grounding time = 0.378829s, Solving time = 0.068920s, Total time = 0.447750s
7 : Statistics :: Grounding time = 0.373022s, Solving time = 0.081033s, Total time = 0.454055s
8 : Statistics :: Grounding time = 0.385603s, Solving time = 0.088012s, Total time = 0.473614s
9 : Statistics :: Grounding time = 0.384612s, Solving time = 0.075843s, Total time = 0.460455s
10 : Statistics :: Grounding time = 0.400147s, Solving time = 0.148006s, Total time = 0.548153s
11 : Statistics :: Grounding time = 0.402200s, Solving time = 0.186864s, Total time = 0.589064s
12 : Statistics :: Grounding time = 0.412098s, Solving time = 0.134384s, Total time = 0.546482s
13 : Statistics :: Grounding time = 0.410988s, Solving time = 0.214079s, Total time = 0.625067s
14 : Statistics :: Grounding time = 0.422320s, Solving time = 0.305854s, Total time = 0.728175s
15 : Statistics :: Grounding time = 0.432160s, Solving time = 0.265083s, Total time = 0.697243s
16 : Statistics :: Grounding time = 0.429015s, Solving time = 0.390825s, Total time = 0.819841s
17 : Statistics :: Grounding time = 0.443755s, Solving time = 0.381192s, Total time = 0.824947s
18 : Statistics :: Grounding time = 0.451835s, Solving time = 0.219964s, Total time = 0.671800s
19 : Statistics :: Grounding time = 0.466241s, Solving time = 0.927011s, Total time = 1.393252s
20 : Statistics :: Grounding time = 0.485590s, Solving time = 0.714905s, Total time = 1.200496s
21 : Statistics :: Grounding time = 0.478870s, Solving time = 2.342638s, Total time = 2.821508s
22 : Statistics :: Grounding time = 0.493121s, Solving time = 2.051343s, Total time = 2.544464s
23 : Statistics :: Grounding time = 0.506896s, Solving time = 1.707041s, Total time = 2.213937s

[06-02-2021_15-14-45] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.581736s, Solving time = 11.513931s, Total time = 25.589627s
Model :: Total atoms = 12830, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),43)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),48)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),50)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_2,(block,2)),52)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),54)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),55)

[06-02-2021_15-14-45] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.622260s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.627108s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    25.589627s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-14-45] INFO :: Experiment >> 

      ================================================      
           Experimental run 13 : Time 31.373233s            
      ================================================      

[06-02-2021_15-14-45] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-14-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-14-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-45] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Instantiated.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Program building completed.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding base program parts.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.013730s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving base program parts.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.002225s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039677s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005890s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.031084s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.002768s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.030719s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.003760s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.034133s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.004780s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.035358s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.005171s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.036128s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006553s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.037777s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.006552s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.037400s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.008029s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.038323s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.009123s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.040920s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.010108s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039901s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.015643s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.043376s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.021106s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.039990s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.030736s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.042080s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.041998s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.046327s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.067539s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.078509s.

[06-02-2021_15-14-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.122677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.079328s.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.170606s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Grounding completed in 0.086877s.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving started.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Solving completed in 0.044768s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental solving completed in 1.453604s because STOP_CON_REACHED.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.831638s, Solving time = 0.580033s, Total time = 1.453604s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #46 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039677s, Solving time = 0.005890s, Total time = 0.045567s
2 : Statistics :: Grounding time = 0.031084s, Solving time = 0.002768s, Total time = 0.033852s
3 : Statistics :: Grounding time = 0.030719s, Solving time = 0.003760s, Total time = 0.034479s
4 : Statistics :: Grounding time = 0.034133s, Solving time = 0.004780s, Total time = 0.038913s
5 : Statistics :: Grounding time = 0.035358s, Solving time = 0.005171s, Total time = 0.040530s
6 : Statistics :: Grounding time = 0.036128s, Solving time = 0.006553s, Total time = 0.042681s
7 : Statistics :: Grounding time = 0.037777s, Solving time = 0.006552s, Total time = 0.044328s
8 : Statistics :: Grounding time = 0.037400s, Solving time = 0.008029s, Total time = 0.045429s
9 : Statistics :: Grounding time = 0.038323s, Solving time = 0.009123s, Total time = 0.047446s
10 : Statistics :: Grounding time = 0.040920s, Solving time = 0.010108s, Total time = 0.051029s
11 : Statistics :: Grounding time = 0.039901s, Solving time = 0.015643s, Total time = 0.055544s
12 : Statistics :: Grounding time = 0.043376s, Solving time = 0.021106s, Total time = 0.064482s
13 : Statistics :: Grounding time = 0.039990s, Solving time = 0.030736s, Total time = 0.070726s
14 : Statistics :: Grounding time = 0.042080s, Solving time = 0.041998s, Total time = 0.084078s
15 : Statistics :: Grounding time = 0.046327s, Solving time = 0.067539s, Total time = 0.113867s
16 : Statistics :: Grounding time = 0.078509s, Solving time = 0.122677s, Total time = 0.201185s
17 : Statistics :: Grounding time = 0.079328s, Solving time = 0.170606s, Total time = 0.249935s
18 : Statistics :: Grounding time = 0.086877s, Solving time = 0.044768s, Total time = 0.131645s

[06-02-2021_15-14-47] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.831638s, Solving time = 0.580033s, Total time = 1.453604s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-14-47] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_2,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),9)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-14-47] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-47] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Instantiated.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building started.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Program building completed.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding base program parts.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.014945s.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving base program parts.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.002205s.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving started.

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-14-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.636393s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.228687s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.068111s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.016394s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.067899s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.016157s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.071116s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.022150s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.072550s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.022889s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.074173s.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.028205s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-14-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075402s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.020598s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075928s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.027384s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.075073s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.033331s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.076239s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.039445s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.079602s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.058541s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.080870s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.059902s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.081484s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.103841s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.085367s.

[06-02-2021_15-14-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.122929s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.083099s.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.126784s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.084499s.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.154109s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.088882s.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.191954s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Grounding completed in 0.087360s.

[06-02-2021_15-14-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving started.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Model found:
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Solving completed in 0.243659s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental solving completed in 3.628031s because STOP_CON_REACHED.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.978992s, Solving time = 1.519163s, Total time = 3.628031s
Final Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #47 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.636393s, Solving time = 0.228687s, Total time = 0.865080s
2 : Statistics :: Grounding time = 0.068111s, Solving time = 0.016394s, Total time = 0.084505s
3 : Statistics :: Grounding time = 0.067899s, Solving time = 0.016157s, Total time = 0.084056s
4 : Statistics :: Grounding time = 0.071116s, Solving time = 0.022150s, Total time = 0.093266s
5 : Statistics :: Grounding time = 0.072550s, Solving time = 0.022889s, Total time = 0.095439s
6 : Statistics :: Grounding time = 0.074173s, Solving time = 0.028205s, Total time = 0.102378s
7 : Statistics :: Grounding time = 0.075402s, Solving time = 0.020598s, Total time = 0.096000s
8 : Statistics :: Grounding time = 0.075928s, Solving time = 0.027384s, Total time = 0.103312s
9 : Statistics :: Grounding time = 0.075073s, Solving time = 0.033331s, Total time = 0.108404s
10 : Statistics :: Grounding time = 0.076239s, Solving time = 0.039445s, Total time = 0.115684s
11 : Statistics :: Grounding time = 0.079602s, Solving time = 0.058541s, Total time = 0.138142s
12 : Statistics :: Grounding time = 0.080870s, Solving time = 0.059902s, Total time = 0.140772s
13 : Statistics :: Grounding time = 0.081484s, Solving time = 0.103841s, Total time = 0.185325s
14 : Statistics :: Grounding time = 0.085367s, Solving time = 0.122929s, Total time = 0.208296s
15 : Statistics :: Grounding time = 0.083099s, Solving time = 0.126784s, Total time = 0.209883s
16 : Statistics :: Grounding time = 0.084499s, Solving time = 0.154109s, Total time = 0.238608s
17 : Statistics :: Grounding time = 0.088882s, Solving time = 0.191954s, Total time = 0.280836s
18 : Statistics :: Grounding time = 0.087360s, Solving time = 0.243659s, Total time = 0.331019s

[06-02-2021_15-14-51] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.978992s, Solving time = 1.519163s, Total time = 3.628031s
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 2, Model type = StableModel

[06-02-2021_15-14-51] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_2,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),25)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-14-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-14-51] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Instantiated.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building started.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Program building completed.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding base program parts.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.016248s.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving base program parts.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.003592s.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving started.

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-14-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 4.348905s.

[06-02-2021_15-14-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.968224s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-14-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.342479s.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.047581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.362328s.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.047489s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.392617s.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.049193s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-14-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.371888s.

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.057894s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.371147s.

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.066179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-14-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.381721s.

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.071522s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.383769s.

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.085565s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-14-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.397006s.

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.078157s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.409567s.

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.121497s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-15-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.411673s.

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.130215s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.409908s.

[06-02-2021_15-15-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.146210s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.423338s.

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.212217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-15-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.420322s.

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.233922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.431531s.

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.170709s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-15-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.445174s.

[06-02-2021_15-15-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.753021s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-15-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-15-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.454312s.

[06-02-2021_15-15-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.335922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.465850s.

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.463594s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-15-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-15-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.484498s.

[06-02-2021_15-15-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 1.066945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-15-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-15-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.488669s.

[06-02-2021_15-15-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.752396s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-15-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Grounding completed in 0.488650s.

[06-02-2021_15-15-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Model found:
Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Solving completed in 0.892508s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental solving completed in 19.870354s because STOP_CON_REACHED.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.701601s, Solving time = 6.754554s, Total time = 19.870354s
Final Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #48 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.348905s, Solving time = 0.968224s, Total time = 5.317129s
2 : Statistics :: Grounding time = 0.342479s, Solving time = 0.047581s, Total time = 0.390061s
3 : Statistics :: Grounding time = 0.362328s, Solving time = 0.047489s, Total time = 0.409817s
4 : Statistics :: Grounding time = 0.392617s, Solving time = 0.049193s, Total time = 0.441810s
5 : Statistics :: Grounding time = 0.371888s, Solving time = 0.057894s, Total time = 0.429782s
6 : Statistics :: Grounding time = 0.371147s, Solving time = 0.066179s, Total time = 0.437326s
7 : Statistics :: Grounding time = 0.381721s, Solving time = 0.071522s, Total time = 0.453243s
8 : Statistics :: Grounding time = 0.383769s, Solving time = 0.085565s, Total time = 0.469335s
9 : Statistics :: Grounding time = 0.397006s, Solving time = 0.078157s, Total time = 0.475164s
10 : Statistics :: Grounding time = 0.409567s, Solving time = 0.121497s, Total time = 0.531064s
11 : Statistics :: Grounding time = 0.411673s, Solving time = 0.130215s, Total time = 0.541888s
12 : Statistics :: Grounding time = 0.409908s, Solving time = 0.146210s, Total time = 0.556118s
13 : Statistics :: Grounding time = 0.423338s, Solving time = 0.212217s, Total time = 0.635555s
14 : Statistics :: Grounding time = 0.420322s, Solving time = 0.233922s, Total time = 0.654244s
15 : Statistics :: Grounding time = 0.431531s, Solving time = 0.170709s, Total time = 0.602240s
16 : Statistics :: Grounding time = 0.445174s, Solving time = 0.753021s, Total time = 1.198195s
17 : Statistics :: Grounding time = 0.454312s, Solving time = 0.335922s, Total time = 0.790234s
18 : Statistics :: Grounding time = 0.465850s, Solving time = 0.463594s, Total time = 0.929444s
19 : Statistics :: Grounding time = 0.484498s, Solving time = 1.066945s, Total time = 1.551443s
20 : Statistics :: Grounding time = 0.488669s, Solving time = 0.752396s, Total time = 1.241065s
21 : Statistics :: Grounding time = 0.488650s, Solving time = 0.892508s, Total time = 1.381158s

[06-02-2021_15-15-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.701601s, Solving time = 6.754554s, Total time = 19.870354s
Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_limb_2,retracted),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_1,extended),34)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_1,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_2,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),38)
occurs(1,talos,release(manipulator_end_2,(block,5)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-15-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.453604s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.628031s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    19.870354s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-15-11] INFO :: Experiment >> 

      ================================================      
           Experimental run 14 : Time 25.444383s            
      ================================================      

[06-02-2021_15-15-11] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-15-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-15-11] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-11] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Instantiated.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Program building completed.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding base program parts.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.015047s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving base program parts.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.002973s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038766s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.005484s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.030583s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.003465s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.030665s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004545s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.033996s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.004839s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.034262s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.005190s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.036726s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.005942s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037754s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.006612s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038477s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.008217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.037126s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.009656s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.039193s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.009759s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.038856s.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.013589s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-15-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040488s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.016936s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.040742s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.026085s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.041657s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.040366s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.042246s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.077655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.078758s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.112407s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.080508s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.206963s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Grounding completed in 0.083175s.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving started.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Solving completed in 0.088351s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental solving completed in 1.509259s because STOP_CON_REACHED.

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.819024s, Solving time = 0.649033s, Total time = 1.509259s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-15-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #49 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038766s, Solving time = 0.005484s, Total time = 0.044249s
2 : Statistics :: Grounding time = 0.030583s, Solving time = 0.003465s, Total time = 0.034048s
3 : Statistics :: Grounding time = 0.030665s, Solving time = 0.004545s, Total time = 0.035210s
4 : Statistics :: Grounding time = 0.033996s, Solving time = 0.004839s, Total time = 0.038834s
5 : Statistics :: Grounding time = 0.034262s, Solving time = 0.005190s, Total time = 0.039452s
6 : Statistics :: Grounding time = 0.036726s, Solving time = 0.005942s, Total time = 0.042668s
7 : Statistics :: Grounding time = 0.037754s, Solving time = 0.006612s, Total time = 0.044366s
8 : Statistics :: Grounding time = 0.038477s, Solving time = 0.008217s, Total time = 0.046693s
9 : Statistics :: Grounding time = 0.037126s, Solving time = 0.009656s, Total time = 0.046781s
10 : Statistics :: Grounding time = 0.039193s, Solving time = 0.009759s, Total time = 0.048952s
11 : Statistics :: Grounding time = 0.038856s, Solving time = 0.013589s, Total time = 0.052445s
12 : Statistics :: Grounding time = 0.040488s, Solving time = 0.016936s, Total time = 0.057425s
13 : Statistics :: Grounding time = 0.040742s, Solving time = 0.026085s, Total time = 0.066827s
14 : Statistics :: Grounding time = 0.041657s, Solving time = 0.040366s, Total time = 0.082023s
15 : Statistics :: Grounding time = 0.042246s, Solving time = 0.077655s, Total time = 0.119901s
16 : Statistics :: Grounding time = 0.078758s, Solving time = 0.112407s, Total time = 0.191164s
17 : Statistics :: Grounding time = 0.080508s, Solving time = 0.206963s, Total time = 0.287471s
18 : Statistics :: Grounding time = 0.083175s, Solving time = 0.088351s, Total time = 0.171525s

[06-02-2021_15-15-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.819024s, Solving time = 0.649033s, Total time = 1.509259s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-15-13] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_1,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,5),(block,6)),8)
occurs(3,talos,release(manipulator_arm_2,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),10)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),11)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-15-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-13] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Instantiated.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building started.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Program building completed.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding base program parts.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.014792s.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving base program parts.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.002171s.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving started.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.630826s.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.222015s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-15-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.068890s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.017706s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.069170s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.016833s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.071861s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.022849s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.073528s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.023284s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.077006s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.024277s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.073763s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.019850s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.078432s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.027527s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.073707s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.039168s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.077440s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.040480s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.079122s.

[06-02-2021_15-15-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.058827s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.080366s.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.056324s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.082945s.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.117645s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.086055s.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.110072s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.082884s.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.134996s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.085504s.

[06-02-2021_15-15-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.208472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.086040s.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.222969s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Grounding completed in 0.089095s.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving started.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Model found:
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Solving completed in 0.208318s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental solving completed in 3.687731s because STOP_CON_REACHED.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.981427s, Solving time = 1.573783s, Total time = 3.687731s
Final Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #50 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.630826s, Solving time = 0.222015s, Total time = 0.852841s
2 : Statistics :: Grounding time = 0.068890s, Solving time = 0.017706s, Total time = 0.086596s
3 : Statistics :: Grounding time = 0.069170s, Solving time = 0.016833s, Total time = 0.086003s
4 : Statistics :: Grounding time = 0.071861s, Solving time = 0.022849s, Total time = 0.094710s
5 : Statistics :: Grounding time = 0.073528s, Solving time = 0.023284s, Total time = 0.096812s
6 : Statistics :: Grounding time = 0.077006s, Solving time = 0.024277s, Total time = 0.101284s
7 : Statistics :: Grounding time = 0.073763s, Solving time = 0.019850s, Total time = 0.093613s
8 : Statistics :: Grounding time = 0.078432s, Solving time = 0.027527s, Total time = 0.105960s
9 : Statistics :: Grounding time = 0.073707s, Solving time = 0.039168s, Total time = 0.112875s
10 : Statistics :: Grounding time = 0.077440s, Solving time = 0.040480s, Total time = 0.117920s
11 : Statistics :: Grounding time = 0.079122s, Solving time = 0.058827s, Total time = 0.137949s
12 : Statistics :: Grounding time = 0.080366s, Solving time = 0.056324s, Total time = 0.136690s
13 : Statistics :: Grounding time = 0.082945s, Solving time = 0.117645s, Total time = 0.200590s
14 : Statistics :: Grounding time = 0.086055s, Solving time = 0.110072s, Total time = 0.196127s
15 : Statistics :: Grounding time = 0.082884s, Solving time = 0.134996s, Total time = 0.217880s
16 : Statistics :: Grounding time = 0.085504s, Solving time = 0.208472s, Total time = 0.293976s
17 : Statistics :: Grounding time = 0.086040s, Solving time = 0.222969s, Total time = 0.309010s
18 : Statistics :: Grounding time = 0.089095s, Solving time = 0.208318s, Total time = 0.297413s

[06-02-2021_15-15-16] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.981427s, Solving time = 1.573783s, Total time = 3.687731s
Model :: Total atoms = 8056, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-16] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_1,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_1,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),23)
occurs(2,talos,put(manipulator_arm_2,(block,5),(block,6)),24)
occurs(2,talos,release(manipulator_arm_2,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),26)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),27)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-15-16] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-16] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Instantiated.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building started.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Program building completed.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding base program parts.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.017044s.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving base program parts.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.002876s.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving started.

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-15-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-15-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 4.306364s.

[06-02-2021_15-15-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.957156s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.367426s.

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.044236s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.354464s.

[06-02-2021_15-15-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.048560s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.370513s.

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.044780s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.377122s.

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.054046s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-15-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.378668s.

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.053040s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.394434s.

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.087697s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-15-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.395859s.

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.085413s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.396421s.

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.082456s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-15-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.396940s.

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.093729s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.409090s.

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.081179s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-15-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.407042s.

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.116181s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.418726s.

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.096686s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-15-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.484421s.

[06-02-2021_15-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.230869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-15-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.441322s.

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.203169s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.446855s.

[06-02-2021_15-15-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.277076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.450311s.

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.308161s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-15-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-15-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.464114s.

[06-02-2021_15-15-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.327013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-15-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-15-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.478878s.

[06-02-2021_15-15-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.404722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-15-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.489445s.

[06-02-2021_15-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.673517s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-15-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-15-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.488163s.

[06-02-2021_15-15-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.927695s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-15-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-15-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.516605s.

[06-02-2021_15-15-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 2.113305s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-15-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-15-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Grounding completed in 0.529039s.

[06-02-2021_15-15-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving started.

[06-02-2021_15-15-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Model found:
Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Solving completed in 0.468668s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental solving completed in 22.012635s because STOP_CON_REACHED.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.779268s, Solving time = 7.782231s, Total time = 22.012635s
Final Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #51 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.306364s, Solving time = 0.957156s, Total time = 5.263520s
2 : Statistics :: Grounding time = 0.367426s, Solving time = 0.044236s, Total time = 0.411661s
3 : Statistics :: Grounding time = 0.354464s, Solving time = 0.048560s, Total time = 0.403024s
4 : Statistics :: Grounding time = 0.370513s, Solving time = 0.044780s, Total time = 0.415294s
5 : Statistics :: Grounding time = 0.377122s, Solving time = 0.054046s, Total time = 0.431168s
6 : Statistics :: Grounding time = 0.378668s, Solving time = 0.053040s, Total time = 0.431708s
7 : Statistics :: Grounding time = 0.394434s, Solving time = 0.087697s, Total time = 0.482131s
8 : Statistics :: Grounding time = 0.395859s, Solving time = 0.085413s, Total time = 0.481272s
9 : Statistics :: Grounding time = 0.396421s, Solving time = 0.082456s, Total time = 0.478877s
10 : Statistics :: Grounding time = 0.396940s, Solving time = 0.093729s, Total time = 0.490670s
11 : Statistics :: Grounding time = 0.409090s, Solving time = 0.081179s, Total time = 0.490269s
12 : Statistics :: Grounding time = 0.407042s, Solving time = 0.116181s, Total time = 0.523223s
13 : Statistics :: Grounding time = 0.418726s, Solving time = 0.096686s, Total time = 0.515412s
14 : Statistics :: Grounding time = 0.484421s, Solving time = 0.230869s, Total time = 0.715290s
15 : Statistics :: Grounding time = 0.441322s, Solving time = 0.203169s, Total time = 0.644491s
16 : Statistics :: Grounding time = 0.446855s, Solving time = 0.277076s, Total time = 0.723931s
17 : Statistics :: Grounding time = 0.450311s, Solving time = 0.308161s, Total time = 0.758472s
18 : Statistics :: Grounding time = 0.464114s, Solving time = 0.327013s, Total time = 0.791128s
19 : Statistics :: Grounding time = 0.478878s, Solving time = 0.404722s, Total time = 0.883600s
20 : Statistics :: Grounding time = 0.489445s, Solving time = 0.673517s, Total time = 1.162961s
21 : Statistics :: Grounding time = 0.488163s, Solving time = 0.927695s, Total time = 1.415858s
22 : Statistics :: Grounding time = 0.516605s, Solving time = 2.113305s, Total time = 2.629910s
23 : Statistics :: Grounding time = 0.529039s, Solving time = 0.468668s, Total time = 0.997707s

[06-02-2021_15-15-39] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.779268s, Solving time = 7.782231s, Total time = 22.012635s
Model :: Total atoms = 12829, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_1,extended),22)
occurs(1,talos,configure(manipulator_limb_2,extended),23)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_2,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,6))),27)
occurs(1,talos,grasp(manipulator_end_1,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_1,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,put(manipulator_end_1,(block,6),puzzle_room_table_right),37)
occurs(1,talos,configure(manipulator_limb_2,extended),38)
occurs(1,talos,release(manipulator_end_1,(block,6)),39)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),40)
occurs(1,talos,put(manipulator_end_2,(block,5),(block,6)),41)
occurs(1,talos,release(manipulator_end_2,(block,5)),42)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),43)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),44)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),46)
occurs(1,talos,release(manipulator_end_1,(block,3)),47)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-15-39] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.509259s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.687731s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    22.012635s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-15-39] INFO :: Experiment >> 

      ================================================      
           Experimental run 15 : Time 27.672799s            
      ================================================      

[06-02-2021_15-15-39] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-15-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-15-39] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-39] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Instantiated.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Program building completed.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding base program parts.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.013700s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving base program parts.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.002930s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.042233s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.031180s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.003510s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.048934s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.004710s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.037153s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005316s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.034468s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.005782s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.035853s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.006684s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038240s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.006893s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.040835s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.008329s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.038037s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.010713s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039351s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.011418s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.039730s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.017692s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.043129s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.023240s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.041067s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.031180s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.042039s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.048870s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.041951s.

[06-02-2021_15-15-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.078212s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.076694s.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.109116s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.080429s.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.201467s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Grounding completed in 0.083910s.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Model found:
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Solving completed in 0.103953s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental solving completed in 1.578274s because STOP_CON_REACHED.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.848932s, Solving time = 0.685544s, Total time = 1.578274s
Final Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #52 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.042233s, Solving time = 0.005528s, Total time = 0.047761s
2 : Statistics :: Grounding time = 0.031180s, Solving time = 0.003510s, Total time = 0.034690s
3 : Statistics :: Grounding time = 0.048934s, Solving time = 0.004710s, Total time = 0.053644s
4 : Statistics :: Grounding time = 0.037153s, Solving time = 0.005316s, Total time = 0.042468s
5 : Statistics :: Grounding time = 0.034468s, Solving time = 0.005782s, Total time = 0.040250s
6 : Statistics :: Grounding time = 0.035853s, Solving time = 0.006684s, Total time = 0.042537s
7 : Statistics :: Grounding time = 0.038240s, Solving time = 0.006893s, Total time = 0.045132s
8 : Statistics :: Grounding time = 0.040835s, Solving time = 0.008329s, Total time = 0.049164s
9 : Statistics :: Grounding time = 0.038037s, Solving time = 0.010713s, Total time = 0.048750s
10 : Statistics :: Grounding time = 0.039351s, Solving time = 0.011418s, Total time = 0.050769s
11 : Statistics :: Grounding time = 0.039730s, Solving time = 0.017692s, Total time = 0.057422s
12 : Statistics :: Grounding time = 0.043129s, Solving time = 0.023240s, Total time = 0.066368s
13 : Statistics :: Grounding time = 0.041067s, Solving time = 0.031180s, Total time = 0.072247s
14 : Statistics :: Grounding time = 0.042039s, Solving time = 0.048870s, Total time = 0.090910s
15 : Statistics :: Grounding time = 0.041951s, Solving time = 0.078212s, Total time = 0.120163s
16 : Statistics :: Grounding time = 0.076694s, Solving time = 0.109116s, Total time = 0.185811s
17 : Statistics :: Grounding time = 0.080429s, Solving time = 0.201467s, Total time = 0.281897s
18 : Statistics :: Grounding time = 0.083910s, Solving time = 0.103953s, Total time = 0.187863s

[06-02-2021_15-15-40] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.848932s, Solving time = 0.685544s, Total time = 1.578274s
Model :: Total atoms = 3529, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-15-40] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,3)),10)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),11)
occurs(3,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_1,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-15-40] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-40] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Instantiated.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Program building completed.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding base program parts.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.014884s.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving base program parts.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.002647s.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving started.

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-15-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.632356s.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.227208s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.072537s.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.017226s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.069614s.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.016364s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.071806s.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.022683s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.079988s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.023277s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077234s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.020625s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.075163s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.020696s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.075322s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.020854s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077504s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.035808s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.077516s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.029768s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.079237s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.047757s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.086369s.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.044142s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-15-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.079762s.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.077786s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.082775s.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.102032s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.084325s.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.109563s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.084183s.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.149481s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.092502s.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.135955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-15-43] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Grounding completed in 0.095988s.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving started.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Model found:
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Solving completed in 0.179684s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental solving completed in 3.420894s because STOP_CON_REACHED.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.009067s, Solving time = 1.283555s, Total time = 3.420894s
Final Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #53 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.632356s, Solving time = 0.227208s, Total time = 0.859564s
2 : Statistics :: Grounding time = 0.072537s, Solving time = 0.017226s, Total time = 0.089763s
3 : Statistics :: Grounding time = 0.069614s, Solving time = 0.016364s, Total time = 0.085977s
4 : Statistics :: Grounding time = 0.071806s, Solving time = 0.022683s, Total time = 0.094489s
5 : Statistics :: Grounding time = 0.079988s, Solving time = 0.023277s, Total time = 0.103265s
6 : Statistics :: Grounding time = 0.077234s, Solving time = 0.020625s, Total time = 0.097860s
7 : Statistics :: Grounding time = 0.075163s, Solving time = 0.020696s, Total time = 0.095859s
8 : Statistics :: Grounding time = 0.075322s, Solving time = 0.020854s, Total time = 0.096175s
9 : Statistics :: Grounding time = 0.077504s, Solving time = 0.035808s, Total time = 0.113312s
10 : Statistics :: Grounding time = 0.077516s, Solving time = 0.029768s, Total time = 0.107285s
11 : Statistics :: Grounding time = 0.079237s, Solving time = 0.047757s, Total time = 0.126993s
12 : Statistics :: Grounding time = 0.086369s, Solving time = 0.044142s, Total time = 0.130512s
13 : Statistics :: Grounding time = 0.079762s, Solving time = 0.077786s, Total time = 0.157548s
14 : Statistics :: Grounding time = 0.082775s, Solving time = 0.102032s, Total time = 0.184807s
15 : Statistics :: Grounding time = 0.084325s, Solving time = 0.109563s, Total time = 0.193889s
16 : Statistics :: Grounding time = 0.084183s, Solving time = 0.149481s, Total time = 0.233664s
17 : Statistics :: Grounding time = 0.092502s, Solving time = 0.135955s, Total time = 0.228457s
18 : Statistics :: Grounding time = 0.095988s, Solving time = 0.179684s, Total time = 0.275672s

[06-02-2021_15-15-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.009067s, Solving time = 1.283555s, Total time = 3.420894s
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-15-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),4)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),14)
occurs(2,talos,configure(manipulator_arm_1,retracted),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,configure(manipulator_arm_1,extended),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,3)),26)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),27)
occurs(2,talos,put(manipulator_arm_1,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_1,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-15-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-15-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Instantiated.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building started.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Program building completed.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding base program parts.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.017118s.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving base program parts.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.002857s.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving started.

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-15-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-15-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 4.332334s.

[06-02-2021_15-15-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.972404s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-15-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.348218s.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.043093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.357162s.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.049074s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.371505s.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.049696s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-15-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.365371s.

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.055082s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.372903s.

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.076922s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-15-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.384762s.

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.104618s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.375793s.

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.069377s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-15-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.379651s.

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.090329s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.389730s.

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.073300s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-15-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.401040s.

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.093220s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.425852s.

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.092953s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-15-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.419567s.

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.102119s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.425397s.

[06-02-2021_15-15-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.130391s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.436136s.

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.198824s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-15-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-15-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.443381s.

[06-02-2021_15-15-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.406252s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-15-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.454311s.

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.264974s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.465467s.

[06-02-2021_15-15-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.462945s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.473009s.

[06-02-2021_15-15-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 0.511609s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.480293s.

[06-02-2021_15-16-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-16-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 1.019904s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-16-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-16-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.491573s.

[06-02-2021_15-16-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 2.012421s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.502952s.

[06-02-2021_15-16-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 2.841593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-16-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-16-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Grounding completed in 0.509070s.

[06-02-2021_15-16-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Model found:
Model :: Total atoms = 12824, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Solving completed in 2.055495s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental solving completed in 25.880373s because STOP_CON_REACHED.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.622595s, Solving time = 11.779451s, Total time = 25.880373s
Final Model :: Total atoms = 12824, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #54 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.332334s, Solving time = 0.972404s, Total time = 5.304739s
2 : Statistics :: Grounding time = 0.348218s, Solving time = 0.043093s, Total time = 0.391310s
3 : Statistics :: Grounding time = 0.357162s, Solving time = 0.049074s, Total time = 0.406236s
4 : Statistics :: Grounding time = 0.371505s, Solving time = 0.049696s, Total time = 0.421202s
5 : Statistics :: Grounding time = 0.365371s, Solving time = 0.055082s, Total time = 0.420453s
6 : Statistics :: Grounding time = 0.372903s, Solving time = 0.076922s, Total time = 0.449825s
7 : Statistics :: Grounding time = 0.384762s, Solving time = 0.104618s, Total time = 0.489380s
8 : Statistics :: Grounding time = 0.375793s, Solving time = 0.069377s, Total time = 0.445169s
9 : Statistics :: Grounding time = 0.379651s, Solving time = 0.090329s, Total time = 0.469980s
10 : Statistics :: Grounding time = 0.389730s, Solving time = 0.073300s, Total time = 0.463030s
11 : Statistics :: Grounding time = 0.401040s, Solving time = 0.093220s, Total time = 0.494260s
12 : Statistics :: Grounding time = 0.425852s, Solving time = 0.092953s, Total time = 0.518804s
13 : Statistics :: Grounding time = 0.419567s, Solving time = 0.102119s, Total time = 0.521686s
14 : Statistics :: Grounding time = 0.425397s, Solving time = 0.130391s, Total time = 0.555788s
15 : Statistics :: Grounding time = 0.436136s, Solving time = 0.198824s, Total time = 0.634960s
16 : Statistics :: Grounding time = 0.443381s, Solving time = 0.406252s, Total time = 0.849633s
17 : Statistics :: Grounding time = 0.454311s, Solving time = 0.264974s, Total time = 0.719285s
18 : Statistics :: Grounding time = 0.465467s, Solving time = 0.462945s, Total time = 0.928412s
19 : Statistics :: Grounding time = 0.473009s, Solving time = 0.511609s, Total time = 0.984618s
20 : Statistics :: Grounding time = 0.480293s, Solving time = 1.019904s, Total time = 1.500197s
21 : Statistics :: Grounding time = 0.491573s, Solving time = 2.012421s, Total time = 2.503994s
22 : Statistics :: Grounding time = 0.502952s, Solving time = 2.841593s, Total time = 3.344545s
23 : Statistics :: Grounding time = 0.509070s, Solving time = 2.055495s, Total time = 2.564565s

[06-02-2021_15-16-10] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.622595s, Solving time = 11.779451s, Total time = 25.880373s
Model :: Total atoms = 12824, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-10] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),7)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,configure(manipulator_limb_1,extended),25)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),26)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),27)
occurs(1,talos,configure(manipulator_limb_1,retracted),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),38)
occurs(1,talos,release(manipulator_end_2,(block,6)),39)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),40)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),41)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),42)
occurs(1,talos,release(manipulator_end_1,(block,5)),43)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,3))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,3)),46)
occurs(1,talos,put(manipulator_end_1,(block,3),puzzle_room_table_left),47)
occurs(1,talos,release(manipulator_end_1,(block,3)),48)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-16-10] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.578274s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.420894s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    25.880373s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-16-10] INFO :: Experiment >> 

      ================================================      
           Experimental run 16 : Time 31.378524s            
      ================================================      

[06-02-2021_15-16-10] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-16-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-16-10] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-10] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Instantiated.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Program building completed.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding base program parts.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.013979s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving base program parts.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.002579s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.039138s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.033271s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.003613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.030207s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.004395s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.033860s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005544s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.034415s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005652s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.035947s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.005957s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038006s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.006556s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.037956s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.008904s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.038588s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.009633s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.039748s.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.011726s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-16-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040080s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.012290s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.040983s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.019581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.039754s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.027955s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.041391s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.046014s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.042211s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.065905s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.076963s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.126069s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.078588s.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.252093s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-16-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Grounding completed in 0.084270s.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving started.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Model found:
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Solving completed in 0.097042s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental solving completed in 1.579564s because STOP_CON_REACHED.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.819354s, Solving time = 0.717162s, Total time = 1.579564s
Final Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #55 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039138s, Solving time = 0.005654s, Total time = 0.044792s
2 : Statistics :: Grounding time = 0.033271s, Solving time = 0.003613s, Total time = 0.036883s
3 : Statistics :: Grounding time = 0.030207s, Solving time = 0.004395s, Total time = 0.034602s
4 : Statistics :: Grounding time = 0.033860s, Solving time = 0.005544s, Total time = 0.039404s
5 : Statistics :: Grounding time = 0.034415s, Solving time = 0.005652s, Total time = 0.040066s
6 : Statistics :: Grounding time = 0.035947s, Solving time = 0.005957s, Total time = 0.041904s
7 : Statistics :: Grounding time = 0.038006s, Solving time = 0.006556s, Total time = 0.044561s
8 : Statistics :: Grounding time = 0.037956s, Solving time = 0.008904s, Total time = 0.046860s
9 : Statistics :: Grounding time = 0.038588s, Solving time = 0.009633s, Total time = 0.048221s
10 : Statistics :: Grounding time = 0.039748s, Solving time = 0.011726s, Total time = 0.051474s
11 : Statistics :: Grounding time = 0.040080s, Solving time = 0.012290s, Total time = 0.052369s
12 : Statistics :: Grounding time = 0.040983s, Solving time = 0.019581s, Total time = 0.060565s
13 : Statistics :: Grounding time = 0.039754s, Solving time = 0.027955s, Total time = 0.067709s
14 : Statistics :: Grounding time = 0.041391s, Solving time = 0.046014s, Total time = 0.087405s
15 : Statistics :: Grounding time = 0.042211s, Solving time = 0.065905s, Total time = 0.108116s
16 : Statistics :: Grounding time = 0.076963s, Solving time = 0.126069s, Total time = 0.203033s
17 : Statistics :: Grounding time = 0.078588s, Solving time = 0.252093s, Total time = 0.330681s
18 : Statistics :: Grounding time = 0.084270s, Solving time = 0.097042s, Total time = 0.181312s

[06-02-2021_15-16-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.819354s, Solving time = 0.717162s, Total time = 1.579564s
Model :: Total atoms = 3527, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),8)
occurs(3,talos,release(manipulator_arm_1,(block,5)),9)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),10)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),11)
occurs(3,talos,release(manipulator_arm_2,(block,3)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-16-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Instantiated.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building started.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Program building completed.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding base program parts.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.014403s.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving base program parts.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.003137s.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving started.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.635722s.

[06-02-2021_15-16-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.228464s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.067622s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016510s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.068102s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.016920s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.070977s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.022402s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.075312s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.023241s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.072239s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.026468s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.073354s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.019894s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.075210s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.030022s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.075742s.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.046762s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-16-13] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.077916s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.031435s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.087590s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.040583s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.099963s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.056112s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.084382s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.079059s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.082465s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.139229s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.083402s.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.097034s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-16-14] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.093556s.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.080426s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.094138s.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.141066s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Grounding completed in 0.089972s.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving started.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Model found:
Model :: Total atoms = 8054, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Solving completed in 0.185391s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental solving completed in 3.439263s because STOP_CON_REACHED.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 2.022067s, Solving time = 1.284155s, Total time = 3.439263s
Final Model :: Total atoms = 8054, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #56 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635722s, Solving time = 0.228464s, Total time = 0.864186s
2 : Statistics :: Grounding time = 0.067622s, Solving time = 0.016510s, Total time = 0.084132s
3 : Statistics :: Grounding time = 0.068102s, Solving time = 0.016920s, Total time = 0.085022s
4 : Statistics :: Grounding time = 0.070977s, Solving time = 0.022402s, Total time = 0.093379s
5 : Statistics :: Grounding time = 0.075312s, Solving time = 0.023241s, Total time = 0.098553s
6 : Statistics :: Grounding time = 0.072239s, Solving time = 0.026468s, Total time = 0.098707s
7 : Statistics :: Grounding time = 0.073354s, Solving time = 0.019894s, Total time = 0.093248s
8 : Statistics :: Grounding time = 0.075210s, Solving time = 0.030022s, Total time = 0.105233s
9 : Statistics :: Grounding time = 0.075742s, Solving time = 0.046762s, Total time = 0.122504s
10 : Statistics :: Grounding time = 0.077916s, Solving time = 0.031435s, Total time = 0.109350s
11 : Statistics :: Grounding time = 0.087590s, Solving time = 0.040583s, Total time = 0.128173s
12 : Statistics :: Grounding time = 0.099963s, Solving time = 0.056112s, Total time = 0.156075s
13 : Statistics :: Grounding time = 0.084382s, Solving time = 0.079059s, Total time = 0.163441s
14 : Statistics :: Grounding time = 0.082465s, Solving time = 0.139229s, Total time = 0.221694s
15 : Statistics :: Grounding time = 0.083402s, Solving time = 0.097034s, Total time = 0.180436s
16 : Statistics :: Grounding time = 0.093556s, Solving time = 0.080426s, Total time = 0.173983s
17 : Statistics :: Grounding time = 0.094138s, Solving time = 0.141066s, Total time = 0.235204s
18 : Statistics :: Grounding time = 0.089972s, Solving time = 0.185391s, Total time = 0.275363s

[06-02-2021_15-16-15] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 2.022067s, Solving time = 1.284155s, Total time = 3.439263s
Model :: Total atoms = 8054, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),12)
occurs(2,talos,configure(manipulator_arm_1,extended),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),24)
occurs(2,talos,release(manipulator_arm_1,(block,5)),25)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),26)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),27)
occurs(2,talos,release(manipulator_arm_2,(block,3)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-16-15] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-15] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Instantiated.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building started.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Program building completed.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding base program parts.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.016513s.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving base program parts.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.002869s.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving started.

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-16-15] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-16-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 4.341812s.

[06-02-2021_15-16-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.964271s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.345141s.

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.046844s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.352598s.

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.049949s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-16-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.373159s.

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.052438s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.385915s.

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.139712s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-16-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.379642s.

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.087049s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.376293s.

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.120198s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-16-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.379748s.

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.259132s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.373597s.

[06-02-2021_15-16-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.359231s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.386784s.

[06-02-2021_15-16-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.439452s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.396529s.

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.253821s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-16-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.401803s.

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.184223s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.419324s.

[06-02-2021_15-16-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.200587s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-16-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-16-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.432607s.

[06-02-2021_15-16-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.474048s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.428441s.

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.153568s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-16-29] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.436761s.

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.369722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.454157s.

[06-02-2021_15-16-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.512137s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-16-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-16-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.463226s.

[06-02-2021_15-16-31] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.399885s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.490595s.

[06-02-2021_15-16-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.408273s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.506812s.

[06-02-2021_15-16-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 0.809343s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-16-34] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-16-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Grounding completed in 0.497113s.

[06-02-2021_15-16-35] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving started.

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Model found:
Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Solving completed in 1.646938s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental solving completed in 20.982989s because STOP_CON_REACHED.

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.638569s, Solving time = 7.933692s, Total time = 20.982989s
Final Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #57 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.341812s, Solving time = 0.964271s, Total time = 5.306083s
2 : Statistics :: Grounding time = 0.345141s, Solving time = 0.046844s, Total time = 0.391985s
3 : Statistics :: Grounding time = 0.352598s, Solving time = 0.049949s, Total time = 0.402547s
4 : Statistics :: Grounding time = 0.373159s, Solving time = 0.052438s, Total time = 0.425597s
5 : Statistics :: Grounding time = 0.385915s, Solving time = 0.139712s, Total time = 0.525627s
6 : Statistics :: Grounding time = 0.379642s, Solving time = 0.087049s, Total time = 0.466691s
7 : Statistics :: Grounding time = 0.376293s, Solving time = 0.120198s, Total time = 0.496491s
8 : Statistics :: Grounding time = 0.379748s, Solving time = 0.259132s, Total time = 0.638880s
9 : Statistics :: Grounding time = 0.373597s, Solving time = 0.359231s, Total time = 0.732828s
10 : Statistics :: Grounding time = 0.386784s, Solving time = 0.439452s, Total time = 0.826236s
11 : Statistics :: Grounding time = 0.396529s, Solving time = 0.253821s, Total time = 0.650349s
12 : Statistics :: Grounding time = 0.401803s, Solving time = 0.184223s, Total time = 0.586026s
13 : Statistics :: Grounding time = 0.419324s, Solving time = 0.200587s, Total time = 0.619910s
14 : Statistics :: Grounding time = 0.432607s, Solving time = 0.474048s, Total time = 0.906655s
15 : Statistics :: Grounding time = 0.428441s, Solving time = 0.153568s, Total time = 0.582009s
16 : Statistics :: Grounding time = 0.436761s, Solving time = 0.369722s, Total time = 0.806484s
17 : Statistics :: Grounding time = 0.454157s, Solving time = 0.512137s, Total time = 0.966295s
18 : Statistics :: Grounding time = 0.463226s, Solving time = 0.399885s, Total time = 0.863112s
19 : Statistics :: Grounding time = 0.490595s, Solving time = 0.408273s, Total time = 0.898868s
20 : Statistics :: Grounding time = 0.506812s, Solving time = 0.809343s, Total time = 1.316155s
21 : Statistics :: Grounding time = 0.497113s, Solving time = 1.646938s, Total time = 2.144051s

[06-02-2021_15-16-36] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.638569s, Solving time = 7.933692s, Total time = 20.982989s
Model :: Total atoms = 12463, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-16-36] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_limb_2,extended),21)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),24)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),25)
occurs(1,talos,configure(manipulator_limb_2,retracted),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,configure(manipulator_limb_1,extended),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),40)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),41)
occurs(1,talos,release(manipulator_end_1,(block,5)),42)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),43)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),44)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-16-36] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.579564s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.439263s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    20.982989s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-16-36] INFO :: Experiment >> 

      ================================================      
           Experimental run 17 : Time 26.489746s            
      ================================================      

[06-02-2021_15-16-36] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-16-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-16-36] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-36] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Instantiated.

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Program building completed.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding base program parts.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.013641s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving base program parts.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.002069s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.039531s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005657s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.031152s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.002816s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.031258s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.004555s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038574s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.036859s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005462s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.039861s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.005896s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.038368s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.006642s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.037519s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.008668s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.037917s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010491s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040479s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.010524s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040882s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.013391s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040401s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.019671s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.040048s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.028752s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.041784s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.050629s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.043327s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.062888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.077147s.

[06-02-2021_15-16-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.076840s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.079950s.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.174834s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Grounding completed in 0.084014s.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving started.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Solving completed in 0.230877s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental solving completed in 1.602098s because STOP_CON_REACHED.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.832713s, Solving time = 0.726189s, Total time = 1.602098s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #58 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039531s, Solving time = 0.005657s, Total time = 0.045188s
2 : Statistics :: Grounding time = 0.031152s, Solving time = 0.002816s, Total time = 0.033968s
3 : Statistics :: Grounding time = 0.031258s, Solving time = 0.004555s, Total time = 0.035813s
4 : Statistics :: Grounding time = 0.038574s, Solving time = 0.005528s, Total time = 0.044102s
5 : Statistics :: Grounding time = 0.036859s, Solving time = 0.005462s, Total time = 0.042320s
6 : Statistics :: Grounding time = 0.039861s, Solving time = 0.005896s, Total time = 0.045757s
7 : Statistics :: Grounding time = 0.038368s, Solving time = 0.006642s, Total time = 0.045010s
8 : Statistics :: Grounding time = 0.037519s, Solving time = 0.008668s, Total time = 0.046186s
9 : Statistics :: Grounding time = 0.037917s, Solving time = 0.010491s, Total time = 0.048408s
10 : Statistics :: Grounding time = 0.040479s, Solving time = 0.010524s, Total time = 0.051003s
11 : Statistics :: Grounding time = 0.040882s, Solving time = 0.013391s, Total time = 0.054273s
12 : Statistics :: Grounding time = 0.040401s, Solving time = 0.019671s, Total time = 0.060073s
13 : Statistics :: Grounding time = 0.040048s, Solving time = 0.028752s, Total time = 0.068799s
14 : Statistics :: Grounding time = 0.041784s, Solving time = 0.050629s, Total time = 0.092414s
15 : Statistics :: Grounding time = 0.043327s, Solving time = 0.062888s, Total time = 0.106215s
16 : Statistics :: Grounding time = 0.077147s, Solving time = 0.076840s, Total time = 0.153986s
17 : Statistics :: Grounding time = 0.079950s, Solving time = 0.174834s, Total time = 0.254785s
18 : Statistics :: Grounding time = 0.084014s, Solving time = 0.230877s, Total time = 0.314891s

[06-02-2021_15-16-38] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.832713s, Solving time = 0.726189s, Total time = 1.602098s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-16-38] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),8)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),12)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-16-38] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-38] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Instantiated.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building started.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Program building completed.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding base program parts.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.015026s.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving base program parts.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.002238s.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving started.

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-16-38] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.634501s.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.225948s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.068984s.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.017025s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.069914s.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.016765s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.075622s.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.021774s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.073142s.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.023289s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-16-39] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.073891s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.038514s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.074888s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.028076s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.076449s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.045528s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078421s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.046674s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.079920s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.040739s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.078437s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.053755s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.082737s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.078615s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.088770s.

[06-02-2021_15-16-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.129399s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.082277s.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.128772s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.083785s.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.158281s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.085588s.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.158170s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.085483s.

[06-02-2021_15-16-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.200770s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Grounding completed in 0.088488s.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving started.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Model found:
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Solving completed in 0.196008s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental solving completed in 3.741769s because STOP_CON_REACHED.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.996325s, Solving time = 1.610340s, Total time = 3.741769s
Final Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #59 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.634501s, Solving time = 0.225948s, Total time = 0.860449s
2 : Statistics :: Grounding time = 0.068984s, Solving time = 0.017025s, Total time = 0.086008s
3 : Statistics :: Grounding time = 0.069914s, Solving time = 0.016765s, Total time = 0.086680s
4 : Statistics :: Grounding time = 0.075622s, Solving time = 0.021774s, Total time = 0.097396s
5 : Statistics :: Grounding time = 0.073142s, Solving time = 0.023289s, Total time = 0.096430s
6 : Statistics :: Grounding time = 0.073891s, Solving time = 0.038514s, Total time = 0.112405s
7 : Statistics :: Grounding time = 0.074888s, Solving time = 0.028076s, Total time = 0.102964s
8 : Statistics :: Grounding time = 0.076449s, Solving time = 0.045528s, Total time = 0.121978s
9 : Statistics :: Grounding time = 0.078421s, Solving time = 0.046674s, Total time = 0.125095s
10 : Statistics :: Grounding time = 0.079920s, Solving time = 0.040739s, Total time = 0.120659s
11 : Statistics :: Grounding time = 0.078437s, Solving time = 0.053755s, Total time = 0.132192s
12 : Statistics :: Grounding time = 0.082737s, Solving time = 0.078615s, Total time = 0.161353s
13 : Statistics :: Grounding time = 0.088770s, Solving time = 0.129399s, Total time = 0.218169s
14 : Statistics :: Grounding time = 0.082277s, Solving time = 0.128772s, Total time = 0.211048s
15 : Statistics :: Grounding time = 0.083785s, Solving time = 0.158281s, Total time = 0.242066s
16 : Statistics :: Grounding time = 0.085588s, Solving time = 0.158170s, Total time = 0.243758s
17 : Statistics :: Grounding time = 0.085483s, Solving time = 0.200770s, Total time = 0.286253s
18 : Statistics :: Grounding time = 0.088488s, Solving time = 0.196008s, Total time = 0.284496s

[06-02-2021_15-16-42] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.996325s, Solving time = 1.610340s, Total time = 3.741769s
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 4, Model type = StableModel

[06-02-2021_15-16-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),7)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_2,extended),11)
occurs(2,talos,configure(manipulator_arm_1,extended),12)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),13)
occurs(2,talos,configure(manipulator_arm_2,retracted),14)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),15)
occurs(2,talos,configure(manipulator_arm_1,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,configure(manipulator_arm_1,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),23)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),24)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),25)
occurs(2,talos,release(manipulator_arm_1,(block,5)),26)
occurs(2,talos,release(manipulator_arm_2,(block,3)),27)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),28)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-16-42] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-16-42] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Instantiated.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building started.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Program building completed.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding base program parts.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.016079s.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving base program parts.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.003488s.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving started.

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-16-42] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 4.333920s.

[06-02-2021_15-16-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.972013s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-16-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.345409s.

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.043062s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.352338s.

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.049161s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-16-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.377984s.

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.051200s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.372286s.

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.053730s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-16-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.379179s.

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.106584s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.401550s.

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.101458s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-16-50] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.384515s.

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.065377s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.390945s.

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.070636s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-16-51] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.411543s.

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.125953s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.419851s.

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.174287s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-16-52] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.419688s.

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.182309s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.409690s.

[06-02-2021_15-16-53] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.448339s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.420159s.

[06-02-2021_15-16-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.500799s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.435193s.

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.171959s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-16-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.444638s.

[06-02-2021_15-16-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.937794s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.459240s.

[06-02-2021_15-16-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.476011s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.458407s.

[06-02-2021_15-16-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-16-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 0.472390s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-16-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-16-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-16-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.467511s.

[06-02-2021_15-16-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.610317s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.467771s.

[06-02-2021_15-17-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-17-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 1.928486s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-17-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-17-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Grounding completed in 0.486909s.

[06-02-2021_15-17-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Model found:
Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Solving completed in 2.183787s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental solving completed in 23.800559s because STOP_CON_REACHED.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.654806s, Solving time = 10.729140s, Total time = 23.800559s
Final Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #60 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.333920s, Solving time = 0.972013s, Total time = 5.305933s
2 : Statistics :: Grounding time = 0.345409s, Solving time = 0.043062s, Total time = 0.388471s
3 : Statistics :: Grounding time = 0.352338s, Solving time = 0.049161s, Total time = 0.401499s
4 : Statistics :: Grounding time = 0.377984s, Solving time = 0.051200s, Total time = 0.429184s
5 : Statistics :: Grounding time = 0.372286s, Solving time = 0.053730s, Total time = 0.426017s
6 : Statistics :: Grounding time = 0.379179s, Solving time = 0.106584s, Total time = 0.485763s
7 : Statistics :: Grounding time = 0.401550s, Solving time = 0.101458s, Total time = 0.503008s
8 : Statistics :: Grounding time = 0.384515s, Solving time = 0.065377s, Total time = 0.449891s
9 : Statistics :: Grounding time = 0.390945s, Solving time = 0.070636s, Total time = 0.461581s
10 : Statistics :: Grounding time = 0.411543s, Solving time = 0.125953s, Total time = 0.537496s
11 : Statistics :: Grounding time = 0.419851s, Solving time = 0.174287s, Total time = 0.594139s
12 : Statistics :: Grounding time = 0.419688s, Solving time = 0.182309s, Total time = 0.601997s
13 : Statistics :: Grounding time = 0.409690s, Solving time = 0.448339s, Total time = 0.858029s
14 : Statistics :: Grounding time = 0.420159s, Solving time = 0.500799s, Total time = 0.920958s
15 : Statistics :: Grounding time = 0.435193s, Solving time = 0.171959s, Total time = 0.607152s
16 : Statistics :: Grounding time = 0.444638s, Solving time = 0.937794s, Total time = 1.382432s
17 : Statistics :: Grounding time = 0.459240s, Solving time = 0.476011s, Total time = 0.935251s
18 : Statistics :: Grounding time = 0.458407s, Solving time = 0.472390s, Total time = 0.930798s
19 : Statistics :: Grounding time = 0.467511s, Solving time = 1.610317s, Total time = 2.077829s
20 : Statistics :: Grounding time = 0.467771s, Solving time = 1.928486s, Total time = 2.396257s
21 : Statistics :: Grounding time = 0.486909s, Solving time = 2.183787s, Total time = 2.670695s

[06-02-2021_15-17-06] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.654806s, Solving time = 10.729140s, Total time = 23.800559s
Model :: Total atoms = 12461, Cost = [], Optimality proven = False, Number = 1, Thread ID = 7, Model type = StableModel

[06-02-2021_15-17-06] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),15)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_2,extended),20)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),21)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),22)
occurs(1,talos,configure(manipulator_limb_1,extended),23)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,configure(manipulator_limb_1,extended),35)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),36)
occurs(1,talos,release(manipulator_end_2,(block,6)),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),39)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),40)
occurs(1,talos,release(manipulator_end_2,(block,3)),41)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),42)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),43)
occurs(1,talos,release(manipulator_end_1,(block,5)),44)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),45)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),46)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-17-06] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.602098s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.741769s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    23.800559s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-17-06] INFO :: Experiment >> 

      ================================================      
           Experimental run 18 : Time 29.659803s            
      ================================================      

[06-02-2021_15-17-06] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-17-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-17-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-06] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Instantiated.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Program building completed.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding base program parts.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.014032s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving base program parts.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.002224s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.039458s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005007s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.030979s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.003602s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.033389s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.003757s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.034439s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.004920s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.034508s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005237s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.036476s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.005911s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037756s.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.006773s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-17-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037442s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008408s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.037944s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.008694s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.039714s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.009961s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.040433s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.014909s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.041062s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.019396s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.044995s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.028327s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.041327s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.046251s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.045534s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.064211s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.076715s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.120822s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.079762s.

[06-02-2021_15-17-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.197411s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Grounding completed in 0.083276s.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving started.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Model found:
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Solving completed in 0.046009s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental solving completed in 1.473798s because STOP_CON_REACHED.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.829240s, Solving time = 0.601831s, Total time = 1.473798s
Final Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #61 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.039458s, Solving time = 0.005007s, Total time = 0.044465s
2 : Statistics :: Grounding time = 0.030979s, Solving time = 0.003602s, Total time = 0.034581s
3 : Statistics :: Grounding time = 0.033389s, Solving time = 0.003757s, Total time = 0.037146s
4 : Statistics :: Grounding time = 0.034439s, Solving time = 0.004920s, Total time = 0.039359s
5 : Statistics :: Grounding time = 0.034508s, Solving time = 0.005237s, Total time = 0.039745s
6 : Statistics :: Grounding time = 0.036476s, Solving time = 0.005911s, Total time = 0.042387s
7 : Statistics :: Grounding time = 0.037756s, Solving time = 0.006773s, Total time = 0.044529s
8 : Statistics :: Grounding time = 0.037442s, Solving time = 0.008408s, Total time = 0.045850s
9 : Statistics :: Grounding time = 0.037944s, Solving time = 0.008694s, Total time = 0.046638s
10 : Statistics :: Grounding time = 0.039714s, Solving time = 0.009961s, Total time = 0.049675s
11 : Statistics :: Grounding time = 0.040433s, Solving time = 0.014909s, Total time = 0.055342s
12 : Statistics :: Grounding time = 0.041062s, Solving time = 0.019396s, Total time = 0.060458s
13 : Statistics :: Grounding time = 0.044995s, Solving time = 0.028327s, Total time = 0.073322s
14 : Statistics :: Grounding time = 0.041327s, Solving time = 0.046251s, Total time = 0.087577s
15 : Statistics :: Grounding time = 0.045534s, Solving time = 0.064211s, Total time = 0.109745s
16 : Statistics :: Grounding time = 0.076715s, Solving time = 0.120822s, Total time = 0.197537s
17 : Statistics :: Grounding time = 0.079762s, Solving time = 0.197411s, Total time = 0.277173s
18 : Statistics :: Grounding time = 0.083276s, Solving time = 0.046009s, Total time = 0.129285s

[06-02-2021_15-17-08] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.829240s, Solving time = 0.601831s, Total time = 1.473798s
Model :: Total atoms = 3533, Cost = [], Optimality proven = False, Number = 1, Thread ID = 3, Model type = StableModel

[06-02-2021_15-17-08] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),2)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),7)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),8)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),9)
occurs(3,talos,release(manipulator_arm_1,(block,5)),10)
occurs(3,talos,release(manipulator_arm_2,(block,3)),11)
occurs(3,talos,grasp(manipulator_arm_2,(block,4)),12)
occurs(3,talos,put(manipulator_arm_2,(block,4),(block,5)),13)
occurs(3,talos,grasp(manipulator_arm_1,(block,2)),14)
occurs(3,talos,put(manipulator_arm_1,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_1,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_1,(block,1)),17)
occurs(3,talos,put(manipulator_arm_1,(block,1),(block,2)),18)

[06-02-2021_15-17-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-08] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Instantiated.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building started.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Program building completed.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding base program parts.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.014563s.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving base program parts.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.002262s.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving started.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.635380s.

[06-02-2021_15-17-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.226961s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.069004s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.016800s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.069949s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.016866s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.070677s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.022213s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.076762s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.023355s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.072524s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.024622s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.074133s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.020261s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.075591s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.027858s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.078293s.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.039986s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-17-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.077767s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.038852s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.079677s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.058472s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.088273s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.065463s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.084795s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.097061s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.081982s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.122638s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.083870s.

[06-02-2021_15-17-10] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.176436s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.086256s.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.209082s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.089842s.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.272393s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Grounding completed in 0.087851s.

[06-02-2021_15-17-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving started.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Model found:
Model :: Total atoms = 8064, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Solving completed in 0.183088s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental solving completed in 3.778094s because STOP_CON_REACHED.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.997189s, Solving time = 1.644671s, Total time = 3.778094s
Final Model :: Total atoms = 8064, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #62 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.635380s, Solving time = 0.226961s, Total time = 0.862341s
2 : Statistics :: Grounding time = 0.069004s, Solving time = 0.016800s, Total time = 0.085804s
3 : Statistics :: Grounding time = 0.069949s, Solving time = 0.016866s, Total time = 0.086815s
4 : Statistics :: Grounding time = 0.070677s, Solving time = 0.022213s, Total time = 0.092891s
5 : Statistics :: Grounding time = 0.076762s, Solving time = 0.023355s, Total time = 0.100117s
6 : Statistics :: Grounding time = 0.072524s, Solving time = 0.024622s, Total time = 0.097146s
7 : Statistics :: Grounding time = 0.074133s, Solving time = 0.020261s, Total time = 0.094394s
8 : Statistics :: Grounding time = 0.075591s, Solving time = 0.027858s, Total time = 0.103448s
9 : Statistics :: Grounding time = 0.078293s, Solving time = 0.039986s, Total time = 0.118280s
10 : Statistics :: Grounding time = 0.077767s, Solving time = 0.038852s, Total time = 0.116619s
11 : Statistics :: Grounding time = 0.079677s, Solving time = 0.058472s, Total time = 0.138150s
12 : Statistics :: Grounding time = 0.088273s, Solving time = 0.065463s, Total time = 0.153736s
13 : Statistics :: Grounding time = 0.084795s, Solving time = 0.097061s, Total time = 0.181856s
14 : Statistics :: Grounding time = 0.081982s, Solving time = 0.122638s, Total time = 0.204621s
15 : Statistics :: Grounding time = 0.083870s, Solving time = 0.176436s, Total time = 0.260306s
16 : Statistics :: Grounding time = 0.086256s, Solving time = 0.209082s, Total time = 0.295338s
17 : Statistics :: Grounding time = 0.089842s, Solving time = 0.272393s, Total time = 0.362235s
18 : Statistics :: Grounding time = 0.087851s, Solving time = 0.183088s, Total time = 0.270939s

[06-02-2021_15-17-12] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.997189s, Solving time = 1.644671s, Total time = 3.778094s
Model :: Total atoms = 8064, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-17-12] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_2,extended),2)
occurs(2,talos,grasp(manipulator_arm_2,store_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_2,store_room_door),4)
occurs(2,talos,release(manipulator_arm_2,store_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_2,puzzle_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_2,puzzle_room_door),7)
occurs(2,talos,release(manipulator_arm_2,puzzle_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_2,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,configure(manipulator_arm_2,extended),12)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_2,extended),19)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),20)
occurs(2,talos,release(manipulator_arm_2,(block,6)),21)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),22)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),23)
occurs(2,talos,configure(manipulator_arm_1,extended),24)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),25)
occurs(2,talos,release(manipulator_arm_1,(block,5)),26)
occurs(2,talos,release(manipulator_arm_2,(block,3)),27)
occurs(2,talos,grasp(manipulator_arm_2,(block,4)),28)
occurs(2,talos,put(manipulator_arm_2,(block,4),(block,5)),29)
occurs(2,talos,grasp(manipulator_arm_1,(block,2)),30)
occurs(2,talos,put(manipulator_arm_1,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_1,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_1,(block,1)),33)
occurs(2,talos,put(manipulator_arm_1,(block,1),(block,2)),34)

[06-02-2021_15-17-12] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-12] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Instantiated.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building started.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Program building completed.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding base program parts.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.016939s.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving base program parts.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.003422s.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving started.

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-17-12] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-17-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 4.326956s.

[06-02-2021_15-17-16] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.978520s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.362061s.

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.043787s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-17-17] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.355163s.

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.050253s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.366532s.

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.048610s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-17-18] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.366668s.

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.053342s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.388065s.

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.093819s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-17-19] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.380785s.

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.080377s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.391400s.

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.063388s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-17-20] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.380652s.

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.098323s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.391982s.

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.130386s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-17-21] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.405392s.

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.107899s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.407220s.

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.148722s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-17-22] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.414186s.

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.237813s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.428684s.

[06-02-2021_15-17-23] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.391603s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.439111s.

[06-02-2021_15-17-24] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.310004s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.445349s.

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.393595s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-17-25] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.456843s.

[06-02-2021_15-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.459521s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-17-26] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-17-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.467085s.

[06-02-2021_15-17-27] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 0.654731s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-17-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-17-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.487048s.

[06-02-2021_15-17-28] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.865114s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.493721s.

[06-02-2021_15-17-30] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 1.918433s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-17-32] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-17-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.498499s.

[06-02-2021_15-17-33] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 3.537297s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [22]:
Current step bound = 54
End step min = 0
End step max = None

[06-02-2021_15-17-36] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [54]), ('domain_rules', [54]), ('state_module', [54]), ('plan_module', [54, 0]), ('conformance_module', [54])].

[06-02-2021_15-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.512179s.

[06-02-2021_15-17-37] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 3.246005s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Beginning Incremental call [23]:
Current step bound = 55
End step min = 0
End step max = None

[06-02-2021_15-17-40] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding program parts: [('check', [55]), ('domain_rules', [55]), ('state_module', [55]), ('plan_module', [55, 0]), ('conformance_module', [55])].

[06-02-2021_15-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Grounding completed in 0.524166s.

[06-02-2021_15-17-41] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Model found:
Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Solving completed in 3.110671s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental solving completed in 32.220959s because STOP_CON_REACHED.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 13.706683s, Solving time = 18.025636s, Total time = 32.220959s
Final Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #63 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.326956s, Solving time = 0.978520s, Total time = 5.305476s
2 : Statistics :: Grounding time = 0.362061s, Solving time = 0.043787s, Total time = 0.405848s
3 : Statistics :: Grounding time = 0.355163s, Solving time = 0.050253s, Total time = 0.405416s
4 : Statistics :: Grounding time = 0.366532s, Solving time = 0.048610s, Total time = 0.415142s
5 : Statistics :: Grounding time = 0.366668s, Solving time = 0.053342s, Total time = 0.420010s
6 : Statistics :: Grounding time = 0.388065s, Solving time = 0.093819s, Total time = 0.481884s
7 : Statistics :: Grounding time = 0.380785s, Solving time = 0.080377s, Total time = 0.461163s
8 : Statistics :: Grounding time = 0.391400s, Solving time = 0.063388s, Total time = 0.454788s
9 : Statistics :: Grounding time = 0.380652s, Solving time = 0.098323s, Total time = 0.478975s
10 : Statistics :: Grounding time = 0.391982s, Solving time = 0.130386s, Total time = 0.522368s
11 : Statistics :: Grounding time = 0.405392s, Solving time = 0.107899s, Total time = 0.513290s
12 : Statistics :: Grounding time = 0.407220s, Solving time = 0.148722s, Total time = 0.555941s
13 : Statistics :: Grounding time = 0.414186s, Solving time = 0.237813s, Total time = 0.651999s
14 : Statistics :: Grounding time = 0.428684s, Solving time = 0.391603s, Total time = 0.820286s
15 : Statistics :: Grounding time = 0.439111s, Solving time = 0.310004s, Total time = 0.749114s
16 : Statistics :: Grounding time = 0.445349s, Solving time = 0.393595s, Total time = 0.838945s
17 : Statistics :: Grounding time = 0.456843s, Solving time = 0.459521s, Total time = 0.916365s
18 : Statistics :: Grounding time = 0.467085s, Solving time = 0.654731s, Total time = 1.121816s
19 : Statistics :: Grounding time = 0.487048s, Solving time = 1.865114s, Total time = 2.352161s
20 : Statistics :: Grounding time = 0.493721s, Solving time = 1.918433s, Total time = 2.412154s
21 : Statistics :: Grounding time = 0.498499s, Solving time = 3.537297s, Total time = 4.035797s
22 : Statistics :: Grounding time = 0.512179s, Solving time = 3.246005s, Total time = 3.758184s
23 : Statistics :: Grounding time = 0.524166s, Solving time = 3.110671s, Total time = 3.634837s

[06-02-2021_15-17-44] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 13.706683s, Solving time = 18.025636s, Total time = 32.220959s
Model :: Total atoms = 12832, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,0)),3)
occurs(1,talos,configure(manipulator_limb_2,extended),4)
occurs(1,talos,configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_2,store_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_2,store_room_door),7)
occurs(1,talos,release(manipulator_end_2,store_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_2,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,2)),11)
occurs(1,talos,configure(manipulator_limb_2,extended),12)
occurs(1,talos,configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_2,puzzle_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_2,puzzle_room_door),15)
occurs(1,talos,release(manipulator_end_2,puzzle_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_2,retracted),17)
occurs(1,talos,move((hallway,1)),18)
occurs(1,talos,move((hallway,0)),19)
occurs(1,talos,move((store_room,1)),20)
occurs(1,talos,move((store_room,0)),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,configure(manipulator_limb_1,extended),24)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),25)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),26)
occurs(1,talos,configure(manipulator_limb_1,retracted),27)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),28)
occurs(1,talos,configure(manipulator_limb_2,retracted),29)
occurs(1,talos,move((store_room,1)),30)
occurs(1,talos,move((hallway,0)),31)
occurs(1,talos,move((hallway,1)),32)
occurs(1,talos,move((hallway,2)),33)
occurs(1,talos,move((puzzle_room,0)),34)
occurs(1,talos,move((puzzle_room,1)),35)
occurs(1,talos,configure(manipulator_limb_2,extended),36)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),37)
occurs(1,talos,release(manipulator_end_2,(block,6)),38)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),39)
occurs(1,talos,configure(manipulator_limb_1,extended),40)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),41)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),42)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),43)
occurs(1,talos,release(manipulator_end_1,(block,5)),44)
occurs(1,talos,release(manipulator_end_2,(block,3)),45)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,4))),46)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,4)),48)
occurs(1,talos,put(manipulator_end_2,(block,4),(block,5)),49)
occurs(1,talos,grasp(manipulator_end_1,(block,2)),50)
occurs(1,talos,put(manipulator_end_1,(block,2),(block,3)),51)
occurs(1,talos,release(manipulator_end_1,(block,2)),52)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,1))),53)
occurs(1,talos,grasp(manipulator_end_1,(block,1)),54)
occurs(1,talos,put(manipulator_end_1,(block,1),(block,2)),55)

[06-02-2021_15-17-44] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.473798s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.778094s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    32.220959s : Steps =    55 : Actions =    55 |  
  ====================================================================  

[06-02-2021_15-17-44] INFO :: Experiment >> 

      ================================================      
           Experimental run 19 : Time 38.009789s            
      ================================================      

[06-02-2021_15-17-44] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3]

[06-02-2021_15-17-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))
	('abstraction_min', 1)
	('abstraction_max', 3)
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', {3: 3600})
	('partial_planning_length', {})
	('step_max', {3: 0})
	('step_inc', {3: 1})
	('step_inc_init', {3: 2})
	('abstraction_range', range(1, 4))

[06-02-2021_15-17-44] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', False)
	('optimise_plan', False)
	('time_limit', 3600)
	('step_max', 0)
	('step_inc', 1)
	('step_inc_init', 2)
	('partial_planning_length', None)
	('planning_level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-44] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 3 : COMPLETE PLANNING : CONFORMANCE DISABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Instantiated.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Entering incremental solve call:
Solver options = -c, plan_at=3, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore, --time-limit=3600
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 2, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Program building completed.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding base program parts.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.013629s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving base program parts.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.003117s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [1]:
Current step bound = 1
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [1]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038782s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005037s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [2]:
Current step bound = 2
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [2]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.031333s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.002655s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [3]:
Current step bound = 3
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [3]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.032301s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.003857s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [4]:
Current step bound = 4
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [4]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.033987s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005033s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [5]:
Current step bound = 5
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [5]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.034185s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.005054s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [6]:
Current step bound = 6
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [6]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0])].

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.035747s.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006078s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [7]:
Current step bound = 7
End step min = 0
End step max = None

[06-02-2021_15-17-44] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [7]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.037949s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.006675s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [8]:
Current step bound = 8
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [8]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.037130s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.008095s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [9]:
Current step bound = 9
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [9]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038001s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.010646s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [10]:
Current step bound = 10
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [10]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.039903s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.011239s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [11]:
Current step bound = 11
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [11]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.038144s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.013217s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [12]:
Current step bound = 12
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [12]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040945s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.018593s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [13]:
Current step bound = 13
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [13]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.040546s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.026348s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [14]:
Current step bound = 14
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [14]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041372s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.042888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [15]:
Current step bound = 15
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [15]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.041617s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.060918s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [16]:
Current step bound = 16
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [16]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.076309s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.099263s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [17]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [17]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0])].

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.081532s.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.156516s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Beginning Incremental call [18]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-17-45] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0])].

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Grounding completed in 0.083474s.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving started.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Model found:
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Solving completed in 0.084126s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental solving completed in 1.428793s because STOP_CON_REACHED.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 0.816885s, Solving time = 0.569356s, Total time = 1.428793s
Final Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #64 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.038782s, Solving time = 0.005037s, Total time = 0.043819s
2 : Statistics :: Grounding time = 0.031333s, Solving time = 0.002655s, Total time = 0.033988s
3 : Statistics :: Grounding time = 0.032301s, Solving time = 0.003857s, Total time = 0.036158s
4 : Statistics :: Grounding time = 0.033987s, Solving time = 0.005033s, Total time = 0.039021s
5 : Statistics :: Grounding time = 0.034185s, Solving time = 0.005054s, Total time = 0.039239s
6 : Statistics :: Grounding time = 0.035747s, Solving time = 0.006078s, Total time = 0.041825s
7 : Statistics :: Grounding time = 0.037949s, Solving time = 0.006675s, Total time = 0.044623s
8 : Statistics :: Grounding time = 0.037130s, Solving time = 0.008095s, Total time = 0.045225s
9 : Statistics :: Grounding time = 0.038001s, Solving time = 0.010646s, Total time = 0.048646s
10 : Statistics :: Grounding time = 0.039903s, Solving time = 0.011239s, Total time = 0.051142s
11 : Statistics :: Grounding time = 0.038144s, Solving time = 0.013217s, Total time = 0.051361s
12 : Statistics :: Grounding time = 0.040945s, Solving time = 0.018593s, Total time = 0.059539s
13 : Statistics :: Grounding time = 0.040546s, Solving time = 0.026348s, Total time = 0.066894s
14 : Statistics :: Grounding time = 0.041372s, Solving time = 0.042888s, Total time = 0.084260s
15 : Statistics :: Grounding time = 0.041617s, Solving time = 0.060918s, Total time = 0.102534s
16 : Statistics :: Grounding time = 0.076309s, Solving time = 0.099263s, Total time = 0.175572s
17 : Statistics :: Grounding time = 0.081532s, Solving time = 0.156516s, Total time = 0.238049s
18 : Statistics :: Grounding time = 0.083474s, Solving time = 0.084126s, Total time = 0.167600s

[06-02-2021_15-17-46] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 0.816885s, Solving time = 0.569356s, Total time = 1.428793s
Model :: Total atoms = 3531, Cost = [], Optimality proven = False, Number = 1, Thread ID = 5, Model type = StableModel

[06-02-2021_15-17-46] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(3,talos,move(store_room),1)
occurs(3,talos,grasp(manipulator_arm_2,(block,6)),2)
occurs(3,talos,grasp(manipulator_arm_1,(block,5)),3)
occurs(3,talos,move(puzzle_room),4)
occurs(3,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),5)
occurs(3,talos,release(manipulator_arm_2,(block,6)),6)
occurs(3,talos,put(manipulator_arm_1,(block,5),(block,6)),7)
occurs(3,talos,release(manipulator_arm_1,(block,5)),8)
occurs(3,talos,grasp(manipulator_arm_1,(block,4)),9)
occurs(3,talos,put(manipulator_arm_1,(block,4),(block,5)),10)
occurs(3,talos,grasp(manipulator_arm_2,(block,3)),11)
occurs(3,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),12)
occurs(3,talos,release(manipulator_arm_2,(block,3)),13)
occurs(3,talos,grasp(manipulator_arm_2,(block,2)),14)
occurs(3,talos,put(manipulator_arm_2,(block,2),(block,3)),15)
occurs(3,talos,release(manipulator_arm_2,(block,2)),16)
occurs(3,talos,grasp(manipulator_arm_2,(block,1)),17)
occurs(3,talos,put(manipulator_arm_2,(block,1),(block,2)),18)

[06-02-2021_15-17-46] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-46] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 2 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Instantiated.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> The logic program was extended with 18 rules into program part conformance_module(step).

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Entering incremental solve call:
Solver options = -c, plan_at=2, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 18, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building started.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Program building completed.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding base program parts.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.014913s.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving base program parts.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.001926s.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving started.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [1]:
Current step bound = 17
End step min = 0
End step max = None

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [17]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17])].

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.629671s.

[06-02-2021_15-17-46] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.226581s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [2]:
Current step bound = 18
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [18]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.067218s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.016511s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [3]:
Current step bound = 19
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [19]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074271s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.020294s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [4]:
Current step bound = 20
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [20]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.079286s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.022325s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [5]:
Current step bound = 21
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [21]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074520s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.023869s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [6]:
Current step bound = 22
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [22]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.072590s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.025463s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [7]:
Current step bound = 23
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [23]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.073547s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.019654s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [8]:
Current step bound = 24
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [24]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.074990s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.029171s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [9]:
Current step bound = 25
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [25]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25])].

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.076058s.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.041130s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [10]:
Current step bound = 26
End step min = 0
End step max = None

[06-02-2021_15-17-47] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [26]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.079026s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.041328s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [11]:
Current step bound = 27
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [27]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.078028s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.063152s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [12]:
Current step bound = 28
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [28]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.083384s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.074613s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [13]:
Current step bound = 29
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [29]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.081411s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.078005s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [14]:
Current step bound = 30
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [30]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.081692s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.107968s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [15]:
Current step bound = 31
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [31]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31])].

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.084315s.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.126151s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [16]:
Current step bound = 32
End step min = 0
End step max = None

[06-02-2021_15-17-48] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [32]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32])].

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.085524s.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.123223s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [17]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [33]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.094388s.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.177642s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Beginning Incremental call [18]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Grounding completed in 0.087020s.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving started.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Model found:
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Solving completed in 0.184431s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental solving completed in 3.529430s because STOP_CON_REACHED.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 1.991853s, Solving time = 1.403436s, Total time = 3.529430s
Final Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #65 >> Incremental statistics:
1 : Statistics :: Grounding time = 0.629671s, Solving time = 0.226581s, Total time = 0.856252s
2 : Statistics :: Grounding time = 0.067218s, Solving time = 0.016511s, Total time = 0.083729s
3 : Statistics :: Grounding time = 0.074271s, Solving time = 0.020294s, Total time = 0.094566s
4 : Statistics :: Grounding time = 0.079286s, Solving time = 0.022325s, Total time = 0.101611s
5 : Statistics :: Grounding time = 0.074520s, Solving time = 0.023869s, Total time = 0.098388s
6 : Statistics :: Grounding time = 0.072590s, Solving time = 0.025463s, Total time = 0.098052s
7 : Statistics :: Grounding time = 0.073547s, Solving time = 0.019654s, Total time = 0.093200s
8 : Statistics :: Grounding time = 0.074990s, Solving time = 0.029171s, Total time = 0.104162s
9 : Statistics :: Grounding time = 0.076058s, Solving time = 0.041130s, Total time = 0.117188s
10 : Statistics :: Grounding time = 0.079026s, Solving time = 0.041328s, Total time = 0.120354s
11 : Statistics :: Grounding time = 0.078028s, Solving time = 0.063152s, Total time = 0.141180s
12 : Statistics :: Grounding time = 0.083384s, Solving time = 0.074613s, Total time = 0.157997s
13 : Statistics :: Grounding time = 0.081411s, Solving time = 0.078005s, Total time = 0.159416s
14 : Statistics :: Grounding time = 0.081692s, Solving time = 0.107968s, Total time = 0.189660s
15 : Statistics :: Grounding time = 0.084315s, Solving time = 0.126151s, Total time = 0.210466s
16 : Statistics :: Grounding time = 0.085524s, Solving time = 0.123223s, Total time = 0.208747s
17 : Statistics :: Grounding time = 0.094388s, Solving time = 0.177642s, Total time = 0.272030s
18 : Statistics :: Grounding time = 0.087020s, Solving time = 0.184431s, Total time = 0.271451s

[06-02-2021_15-17-49] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 1.991853s, Solving time = 1.403436s, Total time = 3.529430s
Model :: Total atoms = 8058, Cost = [], Optimality proven = False, Number = 1, Thread ID = 1, Model type = StableModel

[06-02-2021_15-17-49] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(2,talos,move(hallway),1)
occurs(2,talos,configure(manipulator_arm_1,extended),2)
occurs(2,talos,grasp(manipulator_arm_1,puzzle_room_door_handle_outer),3)
occurs(2,talos,actuate(manipulator_arm_1,puzzle_room_door),4)
occurs(2,talos,release(manipulator_arm_1,puzzle_room_door_handle_outer),5)
occurs(2,talos,grasp(manipulator_arm_1,store_room_door_handle_outer),6)
occurs(2,talos,actuate(manipulator_arm_1,store_room_door),7)
occurs(2,talos,release(manipulator_arm_1,store_room_door_handle_outer),8)
occurs(2,talos,configure(manipulator_arm_1,retracted),9)
occurs(2,talos,move(store_room),10)
occurs(2,talos,configure(manipulator_arm_1,extended),11)
occurs(2,talos,grasp(manipulator_arm_1,(block,5)),12)
occurs(2,talos,configure(manipulator_arm_2,extended),13)
occurs(2,talos,configure(manipulator_arm_1,retracted),14)
occurs(2,talos,grasp(manipulator_arm_2,(block,6)),15)
occurs(2,talos,configure(manipulator_arm_2,retracted),16)
occurs(2,talos,move(hallway),17)
occurs(2,talos,move(puzzle_room),18)
occurs(2,talos,configure(manipulator_arm_1,extended),19)
occurs(2,talos,configure(manipulator_arm_2,extended),20)
occurs(2,talos,put(manipulator_arm_2,(block,6),puzzle_room_table),21)
occurs(2,talos,release(manipulator_arm_2,(block,6)),22)
occurs(2,talos,put(manipulator_arm_1,(block,5),(block,6)),23)
occurs(2,talos,release(manipulator_arm_1,(block,5)),24)
occurs(2,talos,grasp(manipulator_arm_1,(block,4)),25)
occurs(2,talos,put(manipulator_arm_1,(block,4),(block,5)),26)
occurs(2,talos,grasp(manipulator_arm_2,(block,3)),27)
occurs(2,talos,put(manipulator_arm_2,(block,3),puzzle_room_table),28)
occurs(2,talos,release(manipulator_arm_2,(block,3)),29)
occurs(2,talos,grasp(manipulator_arm_2,(block,2)),30)
occurs(2,talos,put(manipulator_arm_2,(block,2),(block,3)),31)
occurs(2,talos,release(manipulator_arm_2,(block,2)),32)
occurs(2,talos,grasp(manipulator_arm_2,(block,1)),33)
occurs(2,talos,put(manipulator_arm_2,(block,1),(block,2)),34)

[06-02-2021_15-17-49] DEBUG :: ASH Planner Main #1 >> Arguments:
	('enforce_conformance', True)
	('optimise_plan', False)
	('time_limit', None)
	('step_max', None)
	('step_inc', 0)
	('step_inc_init', 0)
	('partial_planning_length', None)
	('planning_level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['.\\example_domains\\blocks_world_plus.lp', '.\\example_domains\\problem_2.lp'], Anon #1), Main #1, 8, False, True))

[06-02-2021_15-17-49] INFO :: ASH Planner Main #1 >> Generating classical plan : LEVEL 1 : COMPLETE PLANNING : CONFORMANCE ENABLED : OPTIMISATION DISABLED

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Instantiated.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 224 rules into program part ash_initial_state.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 56 rules into program part ash_goal_state.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> The logic program was extended with 34 rules into program part conformance_module(step).

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Entering incremental solve call:
Solver options = -c, plan_at=1, --parallel-mode=8,compete, --outf=3, --warn=none, --opt-mode=ignore
Base parts = #program entities()., #program domain_sorts()., #program instance_module()., #program static_state()., #program ash_initial_state()., #program ash_goal_state().
Incremental parts = IncPart(name='domain_rules', args=['#inc'], range_=IncRange(start=0, end=None, step=1)), IncPart(name='state_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1)), IncPart(name='plan_module', args=['#inc', 0], range_=IncRange(start=0, end=None, step=1)), IncPart(name='conformance_module', args=['#inc'], range_=IncRange(start=None, end=None, step=1))
Start step = 0, Min end step = 0, Max end step = None
Step inc = 1, Step inc init = 34, Stop con = StopCondition.Satisfiable

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building started.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Program building completed.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding base program parts.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.017167s.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving base program parts.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.003781s.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving started.

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [1]:
Current step bound = 33
End step min = 0
End step max = None

[06-02-2021_15-17-49] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [33]), ('domain_rules', [0]), ('state_module', [0]), ('plan_module', [0, 0]), ('conformance_module', [0]), ('domain_rules', [1]), ('state_module', [1]), ('plan_module', [1, 0]), ('conformance_module', [1]), ('domain_rules', [2]), ('state_module', [2]), ('plan_module', [2, 0]), ('conformance_module', [2]), ('domain_rules', [3]), ('state_module', [3]), ('plan_module', [3, 0]), ('conformance_module', [3]), ('domain_rules', [4]), ('state_module', [4]), ('plan_module', [4, 0]), ('conformance_module', [4]), ('domain_rules', [5]), ('state_module', [5]), ('plan_module', [5, 0]), ('conformance_module', [5]), ('domain_rules', [6]), ('state_module', [6]), ('plan_module', [6, 0]), ('conformance_module', [6]), ('domain_rules', [7]), ('state_module', [7]), ('plan_module', [7, 0]), ('conformance_module', [7]), ('domain_rules', [8]), ('state_module', [8]), ('plan_module', [8, 0]), ('conformance_module', [8]), ('domain_rules', [9]), ('state_module', [9]), ('plan_module', [9, 0]), ('conformance_module', [9]), ('domain_rules', [10]), ('state_module', [10]), ('plan_module', [10, 0]), ('conformance_module', [10]), ('domain_rules', [11]), ('state_module', [11]), ('plan_module', [11, 0]), ('conformance_module', [11]), ('domain_rules', [12]), ('state_module', [12]), ('plan_module', [12, 0]), ('conformance_module', [12]), ('domain_rules', [13]), ('state_module', [13]), ('plan_module', [13, 0]), ('conformance_module', [13]), ('domain_rules', [14]), ('state_module', [14]), ('plan_module', [14, 0]), ('conformance_module', [14]), ('domain_rules', [15]), ('state_module', [15]), ('plan_module', [15, 0]), ('conformance_module', [15]), ('domain_rules', [16]), ('state_module', [16]), ('plan_module', [16, 0]), ('conformance_module', [16]), ('domain_rules', [17]), ('state_module', [17]), ('plan_module', [17, 0]), ('conformance_module', [17]), ('domain_rules', [18]), ('state_module', [18]), ('plan_module', [18, 0]), ('conformance_module', [18]), ('domain_rules', [19]), ('state_module', [19]), ('plan_module', [19, 0]), ('conformance_module', [19]), ('domain_rules', [20]), ('state_module', [20]), ('plan_module', [20, 0]), ('conformance_module', [20]), ('domain_rules', [21]), ('state_module', [21]), ('plan_module', [21, 0]), ('conformance_module', [21]), ('domain_rules', [22]), ('state_module', [22]), ('plan_module', [22, 0]), ('conformance_module', [22]), ('domain_rules', [23]), ('state_module', [23]), ('plan_module', [23, 0]), ('conformance_module', [23]), ('domain_rules', [24]), ('state_module', [24]), ('plan_module', [24, 0]), ('conformance_module', [24]), ('domain_rules', [25]), ('state_module', [25]), ('plan_module', [25, 0]), ('conformance_module', [25]), ('domain_rules', [26]), ('state_module', [26]), ('plan_module', [26, 0]), ('conformance_module', [26]), ('domain_rules', [27]), ('state_module', [27]), ('plan_module', [27, 0]), ('conformance_module', [27]), ('domain_rules', [28]), ('state_module', [28]), ('plan_module', [28, 0]), ('conformance_module', [28]), ('domain_rules', [29]), ('state_module', [29]), ('plan_module', [29, 0]), ('conformance_module', [29]), ('domain_rules', [30]), ('state_module', [30]), ('plan_module', [30, 0]), ('conformance_module', [30]), ('domain_rules', [31]), ('state_module', [31]), ('plan_module', [31, 0]), ('conformance_module', [31]), ('domain_rules', [32]), ('state_module', [32]), ('plan_module', [32, 0]), ('conformance_module', [32]), ('domain_rules', [33]), ('state_module', [33]), ('plan_module', [33, 0]), ('conformance_module', [33])].

[06-02-2021_15-17-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 4.350911s.

[06-02-2021_15-17-54] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.956445s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [2]:
Current step bound = 34
End step min = 0
End step max = None

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [34]), ('domain_rules', [34]), ('state_module', [34]), ('plan_module', [34, 0]), ('conformance_module', [34])].

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.350147s.

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.044292s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [3]:
Current step bound = 35
End step min = 0
End step max = None

[06-02-2021_15-17-55] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [35]), ('domain_rules', [35]), ('state_module', [35]), ('plan_module', [35, 0]), ('conformance_module', [35])].

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.357088s.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.048237s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [4]:
Current step bound = 36
End step min = 0
End step max = None

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [36]), ('domain_rules', [36]), ('state_module', [36]), ('plan_module', [36, 0]), ('conformance_module', [36])].

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.380098s.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.050133s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [5]:
Current step bound = 37
End step min = 0
End step max = None

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [37]), ('domain_rules', [37]), ('state_module', [37]), ('plan_module', [37, 0]), ('conformance_module', [37])].

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.369666s.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.054219s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [6]:
Current step bound = 38
End step min = 0
End step max = None

[06-02-2021_15-17-56] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [38]), ('domain_rules', [38]), ('state_module', [38]), ('plan_module', [38, 0]), ('conformance_module', [38])].

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.371846s.

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.083888s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [7]:
Current step bound = 39
End step min = 0
End step max = None

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [39]), ('domain_rules', [39]), ('state_module', [39]), ('plan_module', [39, 0]), ('conformance_module', [39])].

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.386668s.

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.062951s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [8]:
Current step bound = 40
End step min = 0
End step max = None

[06-02-2021_15-17-57] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [40]), ('domain_rules', [40]), ('state_module', [40]), ('plan_module', [40, 0]), ('conformance_module', [40])].

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.388831s.

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.080753s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [9]:
Current step bound = 41
End step min = 0
End step max = None

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [41]), ('domain_rules', [41]), ('state_module', [41]), ('plan_module', [41, 0]), ('conformance_module', [41])].

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.392404s.

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.079455s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [10]:
Current step bound = 42
End step min = 0
End step max = None

[06-02-2021_15-17-58] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [42]), ('domain_rules', [42]), ('state_module', [42]), ('plan_module', [42, 0]), ('conformance_module', [42])].

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.398725s.

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.067678s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [11]:
Current step bound = 43
End step min = 0
End step max = None

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [43]), ('domain_rules', [43]), ('state_module', [43]), ('plan_module', [43, 0]), ('conformance_module', [43])].

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.410637s.

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.079326s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [12]:
Current step bound = 44
End step min = 0
End step max = None

[06-02-2021_15-17-59] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [44]), ('domain_rules', [44]), ('state_module', [44]), ('plan_module', [44, 0]), ('conformance_module', [44])].

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.416969s.

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.119280s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [13]:
Current step bound = 45
End step min = 0
End step max = None

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [45]), ('domain_rules', [45]), ('state_module', [45]), ('plan_module', [45, 0]), ('conformance_module', [45])].

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.426046s.

[06-02-2021_15-18-00] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.207230s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [14]:
Current step bound = 46
End step min = 0
End step max = None

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [46]), ('domain_rules', [46]), ('state_module', [46]), ('plan_module', [46, 0]), ('conformance_module', [46])].

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.435421s.

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.282151s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [15]:
Current step bound = 47
End step min = 0
End step max = None

[06-02-2021_15-18-01] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [47]), ('domain_rules', [47]), ('state_module', [47]), ('plan_module', [47, 0]), ('conformance_module', [47])].

[06-02-2021_15-18-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.435133s.

[06-02-2021_15-18-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.325234s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [16]:
Current step bound = 48
End step min = 0
End step max = None

[06-02-2021_15-18-02] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [48]), ('domain_rules', [48]), ('state_module', [48]), ('plan_module', [48, 0]), ('conformance_module', [48])].

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.437687s.

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.437223s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [17]:
Current step bound = 49
End step min = 0
End step max = None

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [49]), ('domain_rules', [49]), ('state_module', [49]), ('plan_module', [49, 0]), ('conformance_module', [49])].

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.473177s.

[06-02-2021_15-18-03] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.310167s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [18]:
Current step bound = 50
End step min = 0
End step max = None

[06-02-2021_15-18-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [50]), ('domain_rules', [50]), ('state_module', [50]), ('plan_module', [50, 0]), ('conformance_module', [50])].

[06-02-2021_15-18-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.462378s.

[06-02-2021_15-18-04] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.344677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [19]:
Current step bound = 51
End step min = 0
End step max = None

[06-02-2021_15-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [51]), ('domain_rules', [51]), ('state_module', [51]), ('plan_module', [51, 0]), ('conformance_module', [51])].

[06-02-2021_15-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.478302s.

[06-02-2021_15-18-05] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 0.971677s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [20]:
Current step bound = 52
End step min = 0
End step max = None

[06-02-2021_15-18-06] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [52]), ('domain_rules', [52]), ('state_module', [52]), ('plan_module', [52, 0]), ('conformance_module', [52])].

[06-02-2021_15-18-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.483119s.

[06-02-2021_15-18-07] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.737206s:
Result = UNSAT, Stop condition = SAT

[06-02-2021_15-18-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Beginning Incremental call [21]:
Current step bound = 53
End step min = 0
End step max = None

[06-02-2021_15-18-08] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding program parts: [('check', [53]), ('domain_rules', [53]), ('state_module', [53]), ('plan_module', [53, 0]), ('conformance_module', [53])].

[06-02-2021_15-18-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Grounding completed in 0.491619s.

[06-02-2021_15-18-09] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving started.

[06-02-2021_15-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Model found:
Model :: Total atoms = 12460, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Solving completed in 1.904603s:
Result = SAT, Stop condition = SAT

[06-02-2021_15-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental solving completed in 21.370076s because STOP_CON_REACHED.

[06-02-2021_15-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Returning from incremental solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding time = 12.714041s, Solving time = 8.250604s, Total time = 21.370076s
Final Model :: Total atoms = 12460, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-18-11] DEBUG :: ASP Logic Program Main #1 :: Generate classical plan #66 >> Incremental statistics:
1 : Statistics :: Grounding time = 4.350911s, Solving time = 0.956445s, Total time = 5.307355s
2 : Statistics :: Grounding time = 0.350147s, Solving time = 0.044292s, Total time = 0.394439s
3 : Statistics :: Grounding time = 0.357088s, Solving time = 0.048237s, Total time = 0.405325s
4 : Statistics :: Grounding time = 0.380098s, Solving time = 0.050133s, Total time = 0.430231s
5 : Statistics :: Grounding time = 0.369666s, Solving time = 0.054219s, Total time = 0.423885s
6 : Statistics :: Grounding time = 0.371846s, Solving time = 0.083888s, Total time = 0.455735s
7 : Statistics :: Grounding time = 0.386668s, Solving time = 0.062951s, Total time = 0.449619s
8 : Statistics :: Grounding time = 0.388831s, Solving time = 0.080753s, Total time = 0.469584s
9 : Statistics :: Grounding time = 0.392404s, Solving time = 0.079455s, Total time = 0.471858s
10 : Statistics :: Grounding time = 0.398725s, Solving time = 0.067678s, Total time = 0.466403s
11 : Statistics :: Grounding time = 0.410637s, Solving time = 0.079326s, Total time = 0.489963s
12 : Statistics :: Grounding time = 0.416969s, Solving time = 0.119280s, Total time = 0.536249s
13 : Statistics :: Grounding time = 0.426046s, Solving time = 0.207230s, Total time = 0.633277s
14 : Statistics :: Grounding time = 0.435421s, Solving time = 0.282151s, Total time = 0.717572s
15 : Statistics :: Grounding time = 0.435133s, Solving time = 0.325234s, Total time = 0.760367s
16 : Statistics :: Grounding time = 0.437687s, Solving time = 0.437223s, Total time = 0.874910s
17 : Statistics :: Grounding time = 0.473177s, Solving time = 0.310167s, Total time = 0.783344s
18 : Statistics :: Grounding time = 0.462378s, Solving time = 0.344677s, Total time = 0.807055s
19 : Statistics :: Grounding time = 0.478302s, Solving time = 0.971677s, Total time = 1.449978s
20 : Statistics :: Grounding time = 0.483119s, Solving time = 1.737206s, Total time = 2.220325s
21 : Statistics :: Grounding time = 0.491619s, Solving time = 1.904603s, Total time = 2.396222s

[06-02-2021_15-18-11] INFO :: ASH Planner Main #1 >> Classical plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN GENERATED
Statistics :: Grounding time = 12.714041s, Solving time = 8.250604s, Total time = 21.370076s
Model :: Total atoms = 12460, Cost = [], Optimality proven = False, Number = 1, Thread ID = 0, Model type = StableModel

[06-02-2021_15-18-11] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
               Steps = None :: Actions = None               
                ----------------------------                

occurs(1,talos,move((starting_room,1)),1)
occurs(1,talos,move((hallway,1)),2)
occurs(1,talos,move((hallway,2)),3)
occurs(1,talos,configure(manipulator_limb_1,extended),4)
occurs(1,talos,configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)),5)
occurs(1,talos,grasp(manipulator_end_1,puzzle_room_door_handle_outer),6)
occurs(1,talos,actuate(manipulator_end_1,puzzle_room_door),7)
occurs(1,talos,release(manipulator_end_1,puzzle_room_door_handle_outer),8)
occurs(1,talos,configure(manipulator_limb_1,retracted),9)
occurs(1,talos,move((hallway,1)),10)
occurs(1,talos,move((hallway,0)),11)
occurs(1,talos,configure(manipulator_limb_1,extended),12)
occurs(1,talos,configure(manipulator_end_1,aligned_with(store_room_door_handle_outer)),13)
occurs(1,talos,grasp(manipulator_end_1,store_room_door_handle_outer),14)
occurs(1,talos,actuate(manipulator_end_1,store_room_door),15)
occurs(1,talos,release(manipulator_end_1,store_room_door_handle_outer),16)
occurs(1,talos,configure(manipulator_limb_1,retracted),17)
occurs(1,talos,move((store_room,1)),18)
occurs(1,talos,move((store_room,0)),19)
occurs(1,talos,configure(manipulator_limb_1,extended),20)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,5))),21)
occurs(1,talos,configure(manipulator_limb_2,extended),22)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,6))),23)
occurs(1,talos,grasp(manipulator_end_2,(block,6)),24)
occurs(1,talos,grasp(manipulator_end_1,(block,5)),25)
occurs(1,talos,configure(manipulator_limb_1,retracted),26)
occurs(1,talos,configure(manipulator_limb_2,retracted),27)
occurs(1,talos,move((store_room,1)),28)
occurs(1,talos,move((hallway,0)),29)
occurs(1,talos,move((hallway,1)),30)
occurs(1,talos,move((hallway,2)),31)
occurs(1,talos,move((puzzle_room,0)),32)
occurs(1,talos,move((puzzle_room,1)),33)
occurs(1,talos,configure(manipulator_limb_2,extended),34)
occurs(1,talos,put(manipulator_end_2,(block,6),puzzle_room_table_right),35)
occurs(1,talos,release(manipulator_end_2,(block,6)),36)
occurs(1,talos,configure(manipulator_limb_1,extended),37)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,3))),38)
occurs(1,talos,put(manipulator_end_1,(block,5),(block,6)),39)
occurs(1,talos,release(manipulator_end_1,(block,5)),40)
occurs(1,talos,grasp(manipulator_end_2,(block,3)),41)
occurs(1,talos,configure(manipulator_end_1,aligned_with((block,4))),42)
occurs(1,talos,grasp(manipulator_end_1,(block,4)),43)
occurs(1,talos,put(manipulator_end_1,(block,4),(block,5)),44)
occurs(1,talos,put(manipulator_end_2,(block,3),puzzle_room_table_left),45)
occurs(1,talos,release(manipulator_end_2,(block,3)),46)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,2))),47)
occurs(1,talos,grasp(manipulator_end_2,(block,2)),48)
occurs(1,talos,put(manipulator_end_2,(block,2),(block,3)),49)
occurs(1,talos,release(manipulator_end_2,(block,2)),50)
occurs(1,talos,configure(manipulator_end_2,aligned_with((block,1))),51)
occurs(1,talos,grasp(manipulator_end_2,(block,1)),52)
occurs(1,talos,put(manipulator_end_2,(block,1),(block,2)),53)

[06-02-2021_15-18-11] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

  ====================================================================  
  | Level 3 : Time =     1.428793s : Steps =    18 : Actions =    18 |  
  | Level 2 : Time =     3.529430s : Steps =    34 : Actions =    34 |  
  | Level 1 : Time =    21.370076s : Steps =    53 : Actions =    53 |  
  ====================================================================  

[06-02-2021_15-18-11] INFO :: Experiment >> 

      ================================================      
           Experimental run 20 : Time 26.818474s            
      ================================================      

[06-02-2021_15-18-11] INFO :: Experiment >> 

  ################################################################################################  
      All 20 experimental runs complete : Real time 584.914971s, Proccessing time 1880.609375s      
  ################################################################################################  

[06-02-2021_15-18-11] INFO :: Experiment >> 

          ========================================          
                     Experimental Data                      
          ========================================          

 RU  IT  AL         GT         ST         TT   S   A
  0   1   3   0.822957   0.630306   1.496936  18  18
  0   1   2   1.978537   1.430511   3.544714  34  34
  0   1   1  13.771041   6.757722  20.960305  55  55
  1   1   3   0.831527   0.730974   1.604801  18  18
  1   1   2   1.978749   1.431287   3.537332  34  34
  1   1   1  12.662385   6.606247  19.661909  53  53
  2   1   3   0.818131   0.704022   1.565417  18  18
  2   1   2   1.980475   1.578526   3.689438  34  34
  2   1   1  13.769107  14.142863  28.401205  55  55
  3   1   3   0.824635   0.762836   1.631337  18  18
  3   1   2   1.980956   1.447482   3.558693  34  34
  3   1   1  13.838892  10.675318  24.981777  55  55
  4   1   3   0.821487   0.595530   1.459279  18  18
  4   1   2   2.003274   1.456300   3.597457  34  34
  4   1   1  13.653927  10.448889  24.553523  55  55
  5   1   3   0.829063   0.675694   1.547236  18  18
  5   1   2   2.011048   1.670124   3.812491  34  34
  5   1   1  13.538310  14.034255  28.069967  55  55
  6   1   3   0.829255   0.683309   1.555071  18  18
  6   1   2   2.000758   1.554014   3.690670  34  34
  6   1   1  12.675782   6.151268  19.234807  53  53
  7   1   3   0.824862   0.624905   1.491249  18  18
  7   1   2   1.980918   1.371738   3.492617  34  34
  7   1   1  12.631552   6.031036  19.074565  53  53
  8   1   3   0.826779   0.639024   1.507776  18  18
  8   1   2   1.991919   1.556570   3.683448  34  34
  8   1   1  12.532938   7.226988  20.177233  53  53
  9   1   3   0.815922   0.852409   1.713276  18  18
  9   1   2   1.975149   1.455873   3.565102  34  34
  9   1   1  13.701448  13.977647  28.175522  55  55
 10   1   3   0.834202   0.617988   1.495068  18  18
 10   1   2   1.970513   1.403478   3.512371  34  34
 10   1   1  13.842851  10.228315  24.510249  55  55
 11   1   3   0.818890   0.690021   1.551428  18  18
 11   1   2   1.990032   1.151409   3.271991  34  34
 11   1   1  13.723163   8.357357  22.526399  55  55
 12   1   3   0.835057   0.744274   1.622260  18  18
 12   1   2   1.982118   1.506834   3.627108  34  34
 12   1   1  13.581736  11.513931  25.589627  55  55
 13   1   3   0.831638   0.580033   1.453604  18  18
 13   1   2   1.978992   1.519163   3.628031  34  34
 13   1   1  12.701601   6.754554  19.870354  53  53
 14   1   3   0.819024   0.649033   1.509259  18  18
 14   1   2   1.981427   1.573783   3.687731  34  34
 14   1   1  13.779268   7.782231  22.012635  55  55
 15   1   3   0.848932   0.685544   1.578274  18  18
 15   1   2   2.009067   1.283555   3.420894  34  34
 15   1   1  13.622595  11.779451  25.880373  55  55
 16   1   3   0.819354   0.717162   1.579564  18  18
 16   1   2   2.022067   1.284155   3.439263  34  34
 16   1   1  12.638569   7.933692  20.982989  53  53
 17   1   3   0.832713   0.726189   1.602098  18  18
 17   1   2   1.996325   1.610340   3.741769  34  34
 17   1   1  12.654806  10.729140  23.800559  53  53
 18   1   3   0.829240   0.601831   1.473798  18  18
 18   1   2   1.997189   1.644671   3.778094  34  34
 18   1   1  13.706683  18.025636  32.220959  55  55
 19   1   3   0.816885   0.569356   1.428793  18  18
 19   1   2   1.991853   1.403436   3.529430  34  34
 19   1   1  12.714041   8.250604  21.370076  53  53

[06-02-2021_15-18-11] INFO :: __main__ >> Exiting with code 0

